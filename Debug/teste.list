
teste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000939c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  08009530  08009530  0000a530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a9c  08009a9c  0000b1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009a9c  08009a9c  0000aa9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009aa4  08009aa4  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aa4  08009aa4  0000aaa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009aa8  08009aa8  0000aaa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009aac  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1e8  2**0
                  CONTENTS
 10 .bss          00000274  200001e8  200001e8  0000b1e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000045c  2000045c  0000b1e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000107d6  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000233a  00000000  00000000  0001b9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  0001dd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d20  00000000  00000000  0001edd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022727  00000000  00000000  0001faf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e32  00000000  00000000  0004221f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfc16  00000000  00000000  00055051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00124c67  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005be4  00000000  00000000  00124cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0012a890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009514 	.word	0x08009514

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009514 	.word	0x08009514

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001024:	f000 feae 	bl	8001d84 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001028:	f000 f818 	bl	800105c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800102c:	f000 f94c 	bl	80012c8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001030:	f000 f920 	bl	8001274 <MX_USART1_UART_Init>
	MX_TIM4_Init();
 8001034:	f000 f8aa 	bl	800118c <MX_TIM4_Init>
	MX_I2C1_Init();
 8001038:	f000 f87a 	bl	8001130 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	HD44780_Init(4);
 800103c:	2004      	movs	r0, #4
 800103e:	f003 fc93 	bl	8004968 <HD44780_Init>
	HD44780_NoCursor();
 8001042:	f003 fd69 	bl	8004b18 <HD44780_NoCursor>

	// Carrega os caracteres especiais da interface
	Menu_CreateChars();
 8001046:	f000 fa33 	bl	80014b0 <Menu_CreateChars>

	HAL_TIM_Base_Start_IT(&htim4);
 800104a:	4803      	ldr	r0, [pc, #12]	@ (8001058 <main+0x38>)
 800104c:	f002 fb3c 	bl	80036c8 <HAL_TIM_Base_Start_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {

		Menu_Interface();
 8001050:	f000 fc56 	bl	8001900 <Menu_Interface>
 8001054:	e7fc      	b.n	8001050 <main+0x30>
 8001056:	bf00      	nop
 8001058:	20000258 	.word	0x20000258

0800105c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	@ 0x50
 8001060:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	2230      	movs	r2, #48	@ 0x30
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f004 ff0e 	bl	8005e8c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	4b28      	ldr	r3, [pc, #160]	@ (8001128 <SystemClock_Config+0xcc>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001088:	4a27      	ldr	r2, [pc, #156]	@ (8001128 <SystemClock_Config+0xcc>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800108e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001090:	4b25      	ldr	r3, [pc, #148]	@ (8001128 <SystemClock_Config+0xcc>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	4b22      	ldr	r3, [pc, #136]	@ (800112c <SystemClock_Config+0xd0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a21      	ldr	r2, [pc, #132]	@ (800112c <SystemClock_Config+0xd0>)
 80010a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <SystemClock_Config+0xd0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b8:	2302      	movs	r3, #2
 80010ba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010bc:	2301      	movs	r3, #1
 80010be:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c0:	2310      	movs	r3, #16
 80010c2:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c4:	2302      	movs	r3, #2
 80010c6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80010cc:	2308      	movs	r3, #8
 80010ce:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80010d0:	23a8      	movs	r3, #168	@ 0xa8
 80010d2:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80010d8:	2304      	movs	r3, #4
 80010da:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	4618      	mov	r0, r3
 80010e2:	f001 fe49 	bl	8002d78 <HAL_RCC_OscConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x94>
		Error_Handler();
 80010ec:	f000 f9da 	bl	80014a4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010f0:	230f      	movs	r3, #15
 80010f2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f4:	2302      	movs	r3, #2
 80010f6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001100:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001102:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001106:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2105      	movs	r1, #5
 800110e:	4618      	mov	r0, r3
 8001110:	f002 f8aa 	bl	8003268 <HAL_RCC_ClockConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0xc2>
		Error_Handler();
 800111a:	f000 f9c3 	bl	80014a4 <Error_Handler>
	}
}
 800111e:	bf00      	nop
 8001120:	3750      	adds	r7, #80	@ 0x50
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40007000 	.word	0x40007000

08001130 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001136:	4a13      	ldr	r2, [pc, #76]	@ (8001184 <MX_I2C1_Init+0x54>)
 8001138:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <MX_I2C1_Init+0x50>)
 800113c:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <MX_I2C1_Init+0x58>)
 800113e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <MX_I2C1_Init+0x50>)
 800114e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001152:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <MX_I2C1_Init+0x50>)
 800116e:	f001 f965 	bl	800243c <HAL_I2C_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001178:	f000 f994 	bl	80014a4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000204 	.word	0x20000204
 8001184:	40005400 	.word	0x40005400
 8001188:	00061a80 	.word	0x00061a80

0800118c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b08e      	sub	sp, #56	@ 0x38
 8001190:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001192:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011a0:	f107 0320 	add.w	r3, r7, #32
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
 80011b8:	615a      	str	r2, [r3, #20]
 80011ba:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80011bc:	4b2b      	ldr	r3, [pc, #172]	@ (800126c <MX_TIM4_Init+0xe0>)
 80011be:	4a2c      	ldr	r2, [pc, #176]	@ (8001270 <MX_TIM4_Init+0xe4>)
 80011c0:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 8400;
 80011c2:	4b2a      	ldr	r3, [pc, #168]	@ (800126c <MX_TIM4_Init+0xe0>)
 80011c4:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 80011c8:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ca:	4b28      	ldr	r3, [pc, #160]	@ (800126c <MX_TIM4_Init+0xe0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 50000;
 80011d0:	4b26      	ldr	r3, [pc, #152]	@ (800126c <MX_TIM4_Init+0xe0>)
 80011d2:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80011d6:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d8:	4b24      	ldr	r3, [pc, #144]	@ (800126c <MX_TIM4_Init+0xe0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011de:	4b23      	ldr	r3, [pc, #140]	@ (800126c <MX_TIM4_Init+0xe0>)
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80011e4:	4821      	ldr	r0, [pc, #132]	@ (800126c <MX_TIM4_Init+0xe0>)
 80011e6:	f002 fa1f 	bl	8003628 <HAL_TIM_Base_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM4_Init+0x68>
		Error_Handler();
 80011f0:	f000 f958 	bl	80014a4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80011fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011fe:	4619      	mov	r1, r3
 8001200:	481a      	ldr	r0, [pc, #104]	@ (800126c <MX_TIM4_Init+0xe0>)
 8001202:	f002 fc77 	bl	8003af4 <HAL_TIM_ConfigClockSource>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM4_Init+0x84>
		Error_Handler();
 800120c:	f000 f94a 	bl	80014a4 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK) {
 8001210:	4816      	ldr	r0, [pc, #88]	@ (800126c <MX_TIM4_Init+0xe0>)
 8001212:	f002 fac9 	bl	80037a8 <HAL_TIM_OC_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM4_Init+0x94>
		Error_Handler();
 800121c:	f000 f942 	bl	80014a4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	4619      	mov	r1, r3
 800122e:	480f      	ldr	r0, [pc, #60]	@ (800126c <MX_TIM4_Init+0xe0>)
 8001230:	f003 f846 	bl	80042c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM4_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800123a:	f000 f933 	bl	80014a4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	@ (800126c <MX_TIM4_Init+0xe0>)
 8001256:	f002 fbf1 	bl	8003a3c <HAL_TIM_OC_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM4_Init+0xd8>
		Error_Handler();
 8001260:	f000 f920 	bl	80014a4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	3738      	adds	r7, #56	@ 0x38
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000258 	.word	0x20000258
 8001270:	40000800 	.word	0x40000800

08001274 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001278:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <MX_USART1_UART_Init+0x48>)
 800127a:	4a11      	ldr	r2, [pc, #68]	@ (80012c0 <MX_USART1_UART_Init+0x4c>)
 800127c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 1000000;
 800127e:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <MX_USART1_UART_Init+0x48>)
 8001280:	4a10      	ldr	r2, [pc, #64]	@ (80012c4 <MX_USART1_UART_Init+0x50>)
 8001282:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001284:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <MX_USART1_UART_Init+0x48>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800128a:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <MX_USART1_UART_Init+0x48>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001290:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <MX_USART1_UART_Init+0x48>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <MX_USART1_UART_Init+0x48>)
 8001298:	220c      	movs	r2, #12
 800129a:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129c:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <MX_USART1_UART_Init+0x48>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <MX_USART1_UART_Init+0x48>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80012a8:	4804      	ldr	r0, [pc, #16]	@ (80012bc <MX_USART1_UART_Init+0x48>)
 80012aa:	f003 f899 	bl	80043e0 <HAL_UART_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_USART1_UART_Init+0x44>
		Error_Handler();
 80012b4:	f000 f8f6 	bl	80014a4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200002a0 	.word	0x200002a0
 80012c0:	40011000 	.word	0x40011000
 80012c4:	000f4240 	.word	0x000f4240

080012c8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <MX_GPIO_Init+0xa0>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a20      	ldr	r2, [pc, #128]	@ (8001368 <MX_GPIO_Init+0xa0>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001368 <MX_GPIO_Init+0xa0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001368 <MX_GPIO_Init+0xa0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a19      	ldr	r2, [pc, #100]	@ (8001368 <MX_GPIO_Init+0xa0>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <MX_GPIO_Init+0xa0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pins : PA0 PA1 PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8001316:	2307      	movs	r3, #7
 8001318:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800131a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800131e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	4619      	mov	r1, r3
 800132a:	4810      	ldr	r0, [pc, #64]	@ (800136c <MX_GPIO_Init+0xa4>)
 800132c:	f000 fed2 	bl	80020d4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	2006      	movs	r0, #6
 8001336:	f000 fe96 	bl	8002066 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800133a:	2006      	movs	r0, #6
 800133c:	f000 feaf 	bl	800209e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	2007      	movs	r0, #7
 8001346:	f000 fe8e 	bl	8002066 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800134a:	2007      	movs	r0, #7
 800134c:	f000 fea7 	bl	800209e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	2008      	movs	r0, #8
 8001356:	f000 fe86 	bl	8002066 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800135a:	2008      	movs	r0, #8
 800135c:	f000 fe9f 	bl	800209e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001360:	bf00      	nop
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40020000 	.word	0x40020000

08001370 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// Callback de interrupção externa (borda de subida)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
	static uint32_t lastPressUp = 0;
	static uint32_t lastPressDown = 0;
	static uint32_t lastPressEnter = 0;

  // Obter o tempo atual usando o Tick da HAL
  uint32_t currentTime = HAL_GetTick();
 800137a:	f000 fd69 	bl	8001e50 <HAL_GetTick>
 800137e:	60f8      	str	r0, [r7, #12]

	switch (GPIO_Pin) {
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	2b04      	cmp	r3, #4
 8001384:	d016      	beq.n	80013b4 <HAL_GPIO_EXTI_Callback+0x44>
 8001386:	2b04      	cmp	r3, #4
 8001388:	dc39      	bgt.n	80013fe <HAL_GPIO_EXTI_Callback+0x8e>
 800138a:	2b01      	cmp	r3, #1
 800138c:	d002      	beq.n	8001394 <HAL_GPIO_EXTI_Callback+0x24>
 800138e:	2b02      	cmp	r3, #2
 8001390:	d020      	beq.n	80013d4 <HAL_GPIO_EXTI_Callback+0x64>
			flag_button_down = 1;
			lastPressDown = currentTime;
		}
		break;
	}
}
 8001392:	e034      	b.n	80013fe <HAL_GPIO_EXTI_Callback+0x8e>
		if ((currentTime - lastPressUp) > DEBOUNCE_DELAY) {
 8001394:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <HAL_GPIO_EXTI_Callback+0x98>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b0f      	cmp	r3, #15
 800139e:	d929      	bls.n	80013f4 <HAL_GPIO_EXTI_Callback+0x84>
			printf("Botão UP pressionado!\r\n");
 80013a0:	481a      	ldr	r0, [pc, #104]	@ (800140c <HAL_GPIO_EXTI_Callback+0x9c>)
 80013a2:	f004 fc71 	bl	8005c88 <puts>
			flag_button_up = 1;
 80013a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <HAL_GPIO_EXTI_Callback+0xa0>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
			lastPressUp = currentTime;
 80013ac:	4a16      	ldr	r2, [pc, #88]	@ (8001408 <HAL_GPIO_EXTI_Callback+0x98>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6013      	str	r3, [r2, #0]
		break;
 80013b2:	e01f      	b.n	80013f4 <HAL_GPIO_EXTI_Callback+0x84>
		if ((currentTime - lastPressEnter) > DEBOUNCE_DELAY) {
 80013b4:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <HAL_GPIO_EXTI_Callback+0xa4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	d91b      	bls.n	80013f8 <HAL_GPIO_EXTI_Callback+0x88>
			printf("Botão ENTER pressionado!\r\n");
 80013c0:	4815      	ldr	r0, [pc, #84]	@ (8001418 <HAL_GPIO_EXTI_Callback+0xa8>)
 80013c2:	f004 fc61 	bl	8005c88 <puts>
			flag_button_enter = 1;
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <HAL_GPIO_EXTI_Callback+0xac>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
			lastPressEnter = currentTime;
 80013cc:	4a11      	ldr	r2, [pc, #68]	@ (8001414 <HAL_GPIO_EXTI_Callback+0xa4>)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6013      	str	r3, [r2, #0]
		break;
 80013d2:	e011      	b.n	80013f8 <HAL_GPIO_EXTI_Callback+0x88>
		if ((currentTime - lastPressDown) > DEBOUNCE_DELAY) {
 80013d4:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <HAL_GPIO_EXTI_Callback+0xb0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b0f      	cmp	r3, #15
 80013de:	d90d      	bls.n	80013fc <HAL_GPIO_EXTI_Callback+0x8c>
			printf("Botão DOWN pressionado!\r\n");
 80013e0:	4810      	ldr	r0, [pc, #64]	@ (8001424 <HAL_GPIO_EXTI_Callback+0xb4>)
 80013e2:	f004 fc51 	bl	8005c88 <puts>
			flag_button_down = 1;
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <HAL_GPIO_EXTI_Callback+0xb8>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
			lastPressDown = currentTime;
 80013ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001420 <HAL_GPIO_EXTI_Callback+0xb0>)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6013      	str	r3, [r2, #0]
		break;
 80013f2:	e003      	b.n	80013fc <HAL_GPIO_EXTI_Callback+0x8c>
		break;
 80013f4:	bf00      	nop
 80013f6:	e002      	b.n	80013fe <HAL_GPIO_EXTI_Callback+0x8e>
		break;
 80013f8:	bf00      	nop
 80013fa:	e000      	b.n	80013fe <HAL_GPIO_EXTI_Callback+0x8e>
		break;
 80013fc:	bf00      	nop
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200002e8 	.word	0x200002e8
 800140c:	08009530 	.word	0x08009530
 8001410:	200002f4 	.word	0x200002f4
 8001414:	200002ec 	.word	0x200002ec
 8001418:	08009548 	.word	0x08009548
 800141c:	200002f6 	.word	0x200002f6
 8001420:	200002f0 	.word	0x200002f0
 8001424:	08009564 	.word	0x08009564
 8001428:	200002f5 	.word	0x200002f5

0800142c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
//        // Imprime os valores
//        printf("Interrupcao TIM4:\r\n");
//        printf("ARR = %lu ticks  =>  Período total = %.3f s\r\n", arr, totalTime);
//        printf("Compare = %lu ticks  =>  Evento em = %.3f s\r\n", compare, compareTime);
//    }
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <__io_putchar>:

int __io_putchar(int ch) {
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	USART1->DR = (ch & (uint16_t) 0x01FF);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a09      	ldr	r2, [pc, #36]	@ (8001470 <__io_putchar+0x30>)
 800144c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001450:	6053      	str	r3, [r2, #4]
	while (!(USART1->SR & USART_SR_TXE))
 8001452:	bf00      	nop
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <__io_putchar+0x30>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f9      	beq.n	8001454 <__io_putchar+0x14>
		; //espera pelo fim da transmissão do caractere para evitar a segunda transmissão antes da primeira ser concluída
	return ch;
 8001460:	687b      	ldr	r3, [r7, #4]
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40011000 	.word	0x40011000

08001474 <__io_getchar>:

int __io_getchar(void) {
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
	return (uint16_t) (USART1->DR & (uint16_t) 0x01FF);
 8001478:	4b04      	ldr	r3, [pc, #16]	@ (800148c <__io_getchar+0x18>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	b29b      	uxth	r3, r3
 800147e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40011000 	.word	0x40011000

08001490 <USART1_IRQHandler>:

//ISR da USART1. Todas as ISR's estão definidas no arquivo startup_stm32.s
void USART1_IRQHandler(void) {
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	__io_putchar(__io_getchar());
 8001494:	f7ff ffee 	bl	8001474 <__io_getchar>
 8001498:	4603      	mov	r3, r0
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ffd0 	bl	8001440 <__io_putchar>
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <Error_Handler+0x8>

080014b0 <Menu_CreateChars>:
volatile uint8_t btn8_state = 0;        // Estado do botão conectado ao pino 8
volatile uint32_t last_rising8 = 0;     // Último tempo de fronte de subida do botão pino 8
volatile uint32_t last_falling8 = 0;    // Último tempo de fronte de descida do botão pino 8

// Criação dos caracteres – usamos os índices 2,3,5 e 6 (pode manter o 4, se desejar)
void Menu_CreateChars(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    HD44780_CreateSpecialChar(2, arrow_right);      // Cursor (seta)
 80014b4:	4908      	ldr	r1, [pc, #32]	@ (80014d8 <Menu_CreateChars+0x28>)
 80014b6:	2002      	movs	r0, #2
 80014b8:	f003 fb44 	bl	8004b44 <HD44780_CreateSpecialChar>
    HD44780_CreateSpecialChar(3, scroll_line);        // Fundo do scroll
 80014bc:	4907      	ldr	r1, [pc, #28]	@ (80014dc <Menu_CreateChars+0x2c>)
 80014be:	2003      	movs	r0, #3
 80014c0:	f003 fb40 	bl	8004b44 <HD44780_CreateSpecialChar>
    HD44780_CreateSpecialChar(5, scroll_block_high);  // Bloco superior (alta)
 80014c4:	4906      	ldr	r1, [pc, #24]	@ (80014e0 <Menu_CreateChars+0x30>)
 80014c6:	2005      	movs	r0, #5
 80014c8:	f003 fb3c 	bl	8004b44 <HD44780_CreateSpecialChar>
    HD44780_CreateSpecialChar(6, scroll_block_low);   // Bloco inferior (baixa)
 80014cc:	4905      	ldr	r1, [pc, #20]	@ (80014e4 <Menu_CreateChars+0x34>)
 80014ce:	2006      	movs	r0, #6
 80014d0:	f003 fb38 	bl	8004b44 <HD44780_CreateSpecialChar>
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	080095dc 	.word	0x080095dc
 80014dc:	080095e4 	.word	0x080095e4
 80014e0:	080095ec 	.word	0x080095ec
 80014e4:	080095f4 	.word	0x080095f4

080014e8 <Menu_Draw>:
   Função responsável por printar os nomes e indices das opções, chamada quando o usuário tentar
   acessar uma opção que ainda não está visível na tela, ou quando a tela é alterada.
   Atualiza window_start conforme o cursor atual, se alcançar o limite superior ou inferior é feito
   o wrap circular.
*/
void Menu_Draw(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0

    // Se o cursor antigo for o último elemento da lista e o cursor atual for igual a zero = a lista volta para o topo.
    if(old_cursor == NUM_ITEMS - 1 && cursor == 0) {
 80014ee:	4b37      	ldr	r3, [pc, #220]	@ (80015cc <Menu_Draw+0xe4>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	2b05      	cmp	r3, #5
 80014f6:	d108      	bne.n	800150a <Menu_Draw+0x22>
 80014f8:	4b35      	ldr	r3, [pc, #212]	@ (80015d0 <Menu_Draw+0xe8>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d103      	bne.n	800150a <Menu_Draw+0x22>
        window_start = 0;
 8001502:	4b34      	ldr	r3, [pc, #208]	@ (80015d4 <Menu_Draw+0xec>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	e02e      	b.n	8001568 <Menu_Draw+0x80>

    // Se o cursor antigo for zero e o cursor atual for o último elemento da lista = a lista vai para o final.
    } else if(old_cursor == 0 && cursor == NUM_ITEMS - 1) {
 800150a:	4b30      	ldr	r3, [pc, #192]	@ (80015cc <Menu_Draw+0xe4>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	b21b      	sxth	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d108      	bne.n	8001526 <Menu_Draw+0x3e>
 8001514:	4b2e      	ldr	r3, [pc, #184]	@ (80015d0 <Menu_Draw+0xe8>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b25b      	sxtb	r3, r3
 800151a:	2b05      	cmp	r3, #5
 800151c:	d103      	bne.n	8001526 <Menu_Draw+0x3e>
        window_start = NUM_ITEMS - WINDOW_SIZE;
 800151e:	4b2d      	ldr	r3, [pc, #180]	@ (80015d4 <Menu_Draw+0xec>)
 8001520:	2202      	movs	r2, #2
 8001522:	701a      	strb	r2, [r3, #0]
 8001524:	e020      	b.n	8001568 <Menu_Draw+0x80>
    
    // Se o cursor ultrapassar o limite da janela para cima, atualiza a posição da janela para a posição do cursor.
    } else if(cursor < window_start) {
 8001526:	4b2a      	ldr	r3, [pc, #168]	@ (80015d0 <Menu_Draw+0xe8>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b25b      	sxtb	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	4b29      	ldr	r3, [pc, #164]	@ (80015d4 <Menu_Draw+0xec>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	429a      	cmp	r2, r3
 8001536:	da06      	bge.n	8001546 <Menu_Draw+0x5e>
        window_start = cursor;
 8001538:	4b25      	ldr	r3, [pc, #148]	@ (80015d0 <Menu_Draw+0xe8>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b25b      	sxtb	r3, r3
 800153e:	b2da      	uxtb	r2, r3
 8001540:	4b24      	ldr	r3, [pc, #144]	@ (80015d4 <Menu_Draw+0xec>)
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	e010      	b.n	8001568 <Menu_Draw+0x80>
    
    // Se o cursor ultrapassar o limite da janela para baixo, atualiza a posição da janela para a posição do cursor.
    } else if(cursor >= window_start + WINDOW_SIZE) {
 8001546:	4b23      	ldr	r3, [pc, #140]	@ (80015d4 <Menu_Draw+0xec>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	3303      	adds	r3, #3
 800154e:	4a20      	ldr	r2, [pc, #128]	@ (80015d0 <Menu_Draw+0xe8>)
 8001550:	7812      	ldrb	r2, [r2, #0]
 8001552:	b252      	sxtb	r2, r2
 8001554:	4293      	cmp	r3, r2
 8001556:	da07      	bge.n	8001568 <Menu_Draw+0x80>
        window_start = cursor - WINDOW_SIZE + 1;
 8001558:	4b1d      	ldr	r3, [pc, #116]	@ (80015d0 <Menu_Draw+0xe8>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b25b      	sxtb	r3, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	3b03      	subs	r3, #3
 8001562:	b2da      	uxtb	r2, r3
 8001564:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <Menu_Draw+0xec>)
 8001566:	701a      	strb	r2, [r3, #0]
    }

    HD44780_Clear();    // Limpa o display
 8001568:	f003 fa78 	bl	8004a5c <HD44780_Clear>

    char temp_str[MAX_ITEM_LENGTH + 10];        // String temporária para armazenar o texto
    for(uint8_t i = 0; i < WINDOW_SIZE; i++){
 800156c:	2300      	movs	r3, #0
 800156e:	77fb      	strb	r3, [r7, #31]
 8001570:	e022      	b.n	80015b8 <Menu_Draw+0xd0>
        int8_t item_index = window_start + i;   // Índice do item a ser impresso
 8001572:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <Menu_Draw+0xec>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	7ffb      	ldrb	r3, [r7, #31]
 800157a:	4413      	add	r3, r2
 800157c:	b2db      	uxtb	r3, r3
 800157e:	77bb      	strb	r3, [r7, #30]

        // Se o índice do item for menor que o número de itens, imprime o item
        if(item_index < NUM_ITEMS){
 8001580:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001584:	2b05      	cmp	r3, #5
 8001586:	dc14      	bgt.n	80015b2 <Menu_Draw+0xca>
            sprintf(temp_str, "%d.%s", item_index + 1, menu_items[item_index]); // Formata o texto
 8001588:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	4910      	ldr	r1, [pc, #64]	@ (80015d8 <Menu_Draw+0xf0>)
 8001596:	440b      	add	r3, r1
 8001598:	1d38      	adds	r0, r7, #4
 800159a:	4910      	ldr	r1, [pc, #64]	@ (80015dc <Menu_Draw+0xf4>)
 800159c:	f004 fb7c 	bl	8005c98 <siprintf>
            HD44780_SetCursor(2, i);    // Seta o cursor na coluna 2 e na linha i
 80015a0:	7ffb      	ldrb	r3, [r7, #31]
 80015a2:	4619      	mov	r1, r3
 80015a4:	2002      	movs	r0, #2
 80015a6:	f003 fa6f 	bl	8004a88 <HD44780_SetCursor>
            HD44780_PrintStr(temp_str); // Imprime o texto
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	4618      	mov	r0, r3
 80015ae:	f003 fb00 	bl	8004bb2 <HD44780_PrintStr>
    for(uint8_t i = 0; i < WINDOW_SIZE; i++){
 80015b2:	7ffb      	ldrb	r3, [r7, #31]
 80015b4:	3301      	adds	r3, #1
 80015b6:	77fb      	strb	r3, [r7, #31]
 80015b8:	7ffb      	ldrb	r3, [r7, #31]
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d9d9      	bls.n	8001572 <Menu_Draw+0x8a>
        }
    }

    menu_needs_update = 0; // Menu redesenhado
 80015be:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <Menu_Draw+0xf8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
}
 80015c4:	bf00      	nop
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200002fa 	.word	0x200002fa
 80015d0:	200002f9 	.word	0x200002f9
 80015d4:	200002fc 	.word	0x200002fc
 80015d8:	080095fc 	.word	0x080095fc
 80015dc:	08009580 	.word	0x08009580
 80015e0:	20000000 	.word	0x20000000

080015e4 <Menu_UpdateScrollbar>:
   em unidades (0 a (WINDOW_SIZE*2)-1) e determina:
     – cell: a linha escolhida para representar aquele elemento.
     – fraction: Se será representado com a parte inferior (0) ou superior (1), de acordo com
        os dois possíveis caracteres disponíveis.
*/
void Menu_UpdateScrollbar(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

    // Total de unidades é o dobro de WINDOW_SIZE
    uint8_t total_res = WINDOW_SIZE * 2; // para WINDOW_SIZE = 4, total_res = 8
 80015ea:	2308      	movs	r3, #8
 80015ec:	71bb      	strb	r3, [r7, #6]
    
    // Calcula a posição (em unidades) do cursor, escalando de 0 a total_res-1
    uint16_t pos_units = (cursor * (total_res - 1)) / (NUM_ITEMS - 1);
 80015ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001668 <Menu_UpdateScrollbar+0x84>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b25b      	sxtb	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	79bb      	ldrb	r3, [r7, #6]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
 80015fe:	4a1b      	ldr	r2, [pc, #108]	@ (800166c <Menu_UpdateScrollbar+0x88>)
 8001600:	fb82 1203 	smull	r1, r2, r2, r3
 8001604:	1052      	asrs	r2, r2, #1
 8001606:	17db      	asrs	r3, r3, #31
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	80bb      	strh	r3, [r7, #4]

    uint8_t cell = pos_units / 2;       // Linha escolhida para simbolizar a barra do scroll (0 a 3)
 800160c:	88bb      	ldrh	r3, [r7, #4]
 800160e:	085b      	lsrs	r3, r3, #1
 8001610:	b29b      	uxth	r3, r3
 8001612:	70fb      	strb	r3, [r7, #3]
    uint8_t fraction = pos_units % 2;   // Quais dos dois caracteres foi escolhido = 0: “inferior”, 1: “superior”
 8001614:	88bb      	ldrh	r3, [r7, #4]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	70bb      	strb	r3, [r7, #2]

    for(uint8_t i = 0; i < WINDOW_SIZE; i++){
 800161e:	2300      	movs	r3, #0
 8001620:	71fb      	strb	r3, [r7, #7]
 8001622:	e019      	b.n	8001658 <Menu_UpdateScrollbar+0x74>
        // Seta o curso na última coluna e na linha i
        HD44780_SetCursor(19, i);
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	4619      	mov	r1, r3
 8001628:	2013      	movs	r0, #19
 800162a:	f003 fa2d 	bl	8004a88 <HD44780_SetCursor>

        // Se o indice da linha for igual ao cell, imprime o caractere correspondente
        if(i == cell) {
 800162e:	79fa      	ldrb	r2, [r7, #7]
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	429a      	cmp	r2, r3
 8001634:	d10a      	bne.n	800164c <Menu_UpdateScrollbar+0x68>

            // Escolhe qual metade imprimir conforme o nível
            if(fraction == 0)
 8001636:	78bb      	ldrb	r3, [r7, #2]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d103      	bne.n	8001644 <Menu_UpdateScrollbar+0x60>
                HD44780_PrintSpecialChar(5); // imprime o bloco "baixo"
 800163c:	2005      	movs	r0, #5
 800163e:	f003 faab 	bl	8004b98 <HD44780_PrintSpecialChar>
 8001642:	e006      	b.n	8001652 <Menu_UpdateScrollbar+0x6e>
            else
                HD44780_PrintSpecialChar(6); // imprime o bloco "alto"
 8001644:	2006      	movs	r0, #6
 8001646:	f003 faa7 	bl	8004b98 <HD44780_PrintSpecialChar>
 800164a:	e002      	b.n	8001652 <Menu_UpdateScrollbar+0x6e>

        // Se o indice não for igual ao cell, imprime a barra horizontal vazia
        } else {
            HD44780_PrintSpecialChar(3);
 800164c:	2003      	movs	r0, #3
 800164e:	f003 faa3 	bl	8004b98 <HD44780_PrintSpecialChar>
    for(uint8_t i = 0; i < WINDOW_SIZE; i++){
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	3301      	adds	r3, #1
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	2b03      	cmp	r3, #3
 800165c:	d9e2      	bls.n	8001624 <Menu_UpdateScrollbar+0x40>
        }
    }
}
 800165e:	bf00      	nop
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200002f9 	.word	0x200002f9
 800166c:	66666667 	.word	0x66666667

08001670 <Menu_UpdateCursor>:

/*
   Atualiza apenas o cursor: Sobreescreve o anterior e desenha o novo sem apagar a tela.
   O cursor é impresso na coluna 0 na linha relativa (cursor - window_start)
*/
void Menu_UpdateCursor(void) {
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0

    // Se ocorreu uma mudança no cursor, atualiza a posição do cursor.
    if(old_cursor != cursor){
 8001674:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <Menu_UpdateCursor+0x6c>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b25b      	sxtb	r3, r3
 800167a:	461a      	mov	r2, r3
 800167c:	4b18      	ldr	r3, [pc, #96]	@ (80016e0 <Menu_UpdateCursor+0x70>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	b21b      	sxth	r3, r3
 8001682:	429a      	cmp	r2, r3
 8001684:	d015      	beq.n	80016b2 <Menu_UpdateCursor+0x42>
        HD44780_SetCursor(0, old_cursor - window_start);
 8001686:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <Menu_UpdateCursor+0x70>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	b21b      	sxth	r3, r3
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <Menu_UpdateCursor+0x74>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	4619      	mov	r1, r3
 800169a:	2000      	movs	r0, #0
 800169c:	f003 f9f4 	bl	8004a88 <HD44780_SetCursor>
        HD44780_PrintStr(" ");  // Apaga o cursor antigo
 80016a0:	4811      	ldr	r0, [pc, #68]	@ (80016e8 <Menu_UpdateCursor+0x78>)
 80016a2:	f003 fa86 	bl	8004bb2 <HD44780_PrintStr>
        old_cursor = cursor;    // Atualiza a posição do cursor
 80016a6:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <Menu_UpdateCursor+0x6c>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <Menu_UpdateCursor+0x70>)
 80016b0:	801a      	strh	r2, [r3, #0]
    }

    // Atualiza a barra de rolagem
    Menu_UpdateScrollbar();
 80016b2:	f7ff ff97 	bl	80015e4 <Menu_UpdateScrollbar>

    // Imprime o cursor na nova posição
    HD44780_SetCursor(0, cursor - window_start);
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <Menu_UpdateCursor+0x6c>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <Menu_UpdateCursor+0x74>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	4619      	mov	r1, r3
 80016ca:	2000      	movs	r0, #0
 80016cc:	f003 f9dc 	bl	8004a88 <HD44780_SetCursor>
    HD44780_PrintSpecialChar(2);
 80016d0:	2002      	movs	r0, #2
 80016d2:	f003 fa61 	bl	8004b98 <HD44780_PrintSpecialChar>
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200002f9 	.word	0x200002f9
 80016e0:	200002fa 	.word	0x200002fa
 80016e4:	200002fc 	.word	0x200002fc
 80016e8:	08009588 	.word	0x08009588

080016ec <Menu_CheckButtons>:

void Menu_CheckButtons(void){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0

	if(flag_button_up)
 80016f0:	4b2a      	ldr	r3, [pc, #168]	@ (800179c <Menu_CheckButtons+0xb0>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d019      	beq.n	800172e <Menu_CheckButtons+0x42>
	{
		if(!current_screen){
 80016fa:	4b29      	ldr	r3, [pc, #164]	@ (80017a0 <Menu_CheckButtons+0xb4>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d110      	bne.n	8001726 <Menu_CheckButtons+0x3a>
			// Por exemplo: atualiza a posição do cursor
			cursor--;
 8001704:	4b27      	ldr	r3, [pc, #156]	@ (80017a4 <Menu_CheckButtons+0xb8>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b25b      	sxtb	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	3b01      	subs	r3, #1
 800170e:	b2db      	uxtb	r3, r3
 8001710:	b25a      	sxtb	r2, r3
 8001712:	4b24      	ldr	r3, [pc, #144]	@ (80017a4 <Menu_CheckButtons+0xb8>)
 8001714:	701a      	strb	r2, [r3, #0]
			if(cursor < 0)
 8001716:	4b23      	ldr	r3, [pc, #140]	@ (80017a4 <Menu_CheckButtons+0xb8>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b25b      	sxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	da02      	bge.n	8001726 <Menu_CheckButtons+0x3a>
				cursor = (NUM_ITEMS - 1);
 8001720:	4b20      	ldr	r3, [pc, #128]	@ (80017a4 <Menu_CheckButtons+0xb8>)
 8001722:	2205      	movs	r2, #5
 8001724:	701a      	strb	r2, [r3, #0]

		}

        flag_button_up = 0;
 8001726:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <Menu_CheckButtons+0xb0>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
		current_screen = !current_screen;
		HD44780_Clear();

        flag_button_enter = 0;
	}
}
 800172c:	e033      	b.n	8001796 <Menu_CheckButtons+0xaa>
	else if(flag_button_down)
 800172e:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <Menu_CheckButtons+0xbc>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d019      	beq.n	800176c <Menu_CheckButtons+0x80>
		if(!current_screen){
 8001738:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <Menu_CheckButtons+0xb4>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d110      	bne.n	8001764 <Menu_CheckButtons+0x78>
			cursor++;
 8001742:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <Menu_CheckButtons+0xb8>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	b25b      	sxtb	r3, r3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	3301      	adds	r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	b25a      	sxtb	r2, r3
 8001750:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <Menu_CheckButtons+0xb8>)
 8001752:	701a      	strb	r2, [r3, #0]
			if(cursor > (NUM_ITEMS - 1))
 8001754:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <Menu_CheckButtons+0xb8>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b25b      	sxtb	r3, r3
 800175a:	2b05      	cmp	r3, #5
 800175c:	dd02      	ble.n	8001764 <Menu_CheckButtons+0x78>
				cursor = 0;
 800175e:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <Menu_CheckButtons+0xb8>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
        flag_button_down = 0;
 8001764:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <Menu_CheckButtons+0xbc>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
}
 800176a:	e014      	b.n	8001796 <Menu_CheckButtons+0xaa>
	else if(flag_button_enter)
 800176c:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <Menu_CheckButtons+0xc0>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00f      	beq.n	8001796 <Menu_CheckButtons+0xaa>
		current_screen = !current_screen;
 8001776:	4b0a      	ldr	r3, [pc, #40]	@ (80017a0 <Menu_CheckButtons+0xb4>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	bf0c      	ite	eq
 8001780:	2301      	moveq	r3, #1
 8001782:	2300      	movne	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	461a      	mov	r2, r3
 8001788:	4b05      	ldr	r3, [pc, #20]	@ (80017a0 <Menu_CheckButtons+0xb4>)
 800178a:	701a      	strb	r2, [r3, #0]
		HD44780_Clear();
 800178c:	f003 f966 	bl	8004a5c <HD44780_Clear>
        flag_button_enter = 0;
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <Menu_CheckButtons+0xc0>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200002f4 	.word	0x200002f4
 80017a0:	200002f7 	.word	0x200002f7
 80017a4:	200002f9 	.word	0x200002f9
 80017a8:	200002f5 	.word	0x200002f5
 80017ac:	200002f6 	.word	0x200002f6

080017b0 <Menu_HomeScreen>:

/*
   Função que é chamada no loop principal para atualizar o menu.
   O menu só é redesenhado quando for necessário mostrar uma opção fora das 4 presentes na tela.
*/
void Menu_HomeScreen(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
    // Condição para redesenhar o menu:
    // - Mudança de tela
    // - Flag de atualização acionada (menu_needs_update)
    // - O cursor ultrapassou o limite da janela: se estiver no primeiro e o usuário pressionar cima
    //   ou no último e o usuário pressionar para baixo (wrap circular).
    if(old_screen != current_screen || menu_needs_update ||
 80017b4:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <Menu_HomeScreen+0x58>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4b14      	ldr	r3, [pc, #80]	@ (800180c <Menu_HomeScreen+0x5c>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d116      	bne.n	80017f2 <Menu_HomeScreen+0x42>
 80017c4:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <Menu_HomeScreen+0x60>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d111      	bne.n	80017f2 <Menu_HomeScreen+0x42>
       (cursor < window_start) || (cursor >= window_start + WINDOW_SIZE)) {
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <Menu_HomeScreen+0x64>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <Menu_HomeScreen+0x68>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	b2db      	uxtb	r3, r3
    if(old_screen != current_screen || menu_needs_update ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	db08      	blt.n	80017f2 <Menu_HomeScreen+0x42>
       (cursor < window_start) || (cursor >= window_start + WINDOW_SIZE)) {
 80017e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <Menu_HomeScreen+0x68>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	3303      	adds	r3, #3
 80017e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <Menu_HomeScreen+0x64>)
 80017ea:	7812      	ldrb	r2, [r2, #0]
 80017ec:	b252      	sxtb	r2, r2
 80017ee:	4293      	cmp	r3, r2
 80017f0:	da06      	bge.n	8001800 <Menu_HomeScreen+0x50>
    	Menu_Draw();
 80017f2:	f7ff fe79 	bl	80014e8 <Menu_Draw>
        old_screen = current_screen;
 80017f6:	4b05      	ldr	r3, [pc, #20]	@ (800180c <Menu_HomeScreen+0x5c>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	4b02      	ldr	r3, [pc, #8]	@ (8001808 <Menu_HomeScreen+0x58>)
 80017fe:	701a      	strb	r2, [r3, #0]
    }

    // Função que atualiza o cursor
    Menu_UpdateCursor();
 8001800:	f7ff ff36 	bl	8001670 <Menu_UpdateCursor>
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200002f8 	.word	0x200002f8
 800180c:	200002f7 	.word	0x200002f7
 8001810:	20000000 	.word	0x20000000
 8001814:	200002f9 	.word	0x200002f9
 8001818:	200002fc 	.word	0x200002fc

0800181c <Menu_SpecificScreen>:

/* Função que armazena a lógica individual de cada tela específica do sistema */
void Menu_SpecificScreen(void){
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0

    // Verifica se a variável de tela anterior é diferente da atual, indicando a necessidade de limpar a tela
	if(old_screen != current_screen){
 8001820:	4b2e      	ldr	r3, [pc, #184]	@ (80018dc <Menu_SpecificScreen+0xc0>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b2e      	ldr	r3, [pc, #184]	@ (80018e0 <Menu_SpecificScreen+0xc4>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	429a      	cmp	r2, r3
 800182e:	d006      	beq.n	800183e <Menu_SpecificScreen+0x22>
		HD44780_Clear();                // Limpa a tela
 8001830:	f003 f914 	bl	8004a5c <HD44780_Clear>
		old_screen = current_screen;    // Atualiza a tela anterior
 8001834:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <Menu_SpecificScreen+0xc4>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4b28      	ldr	r3, [pc, #160]	@ (80018dc <Menu_SpecificScreen+0xc0>)
 800183c:	701a      	strb	r2, [r3, #0]
	}

    // Se a opção selecionada for "Banho"
	if(cursor == 0){
 800183e:	4b29      	ldr	r3, [pc, #164]	@ (80018e4 <Menu_SpecificScreen+0xc8>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	b25b      	sxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d107      	bne.n	8001858 <Menu_SpecificScreen+0x3c>
		HD44780_SetCursor(4, 1);
 8001848:	2101      	movs	r1, #1
 800184a:	2004      	movs	r0, #4
 800184c:	f003 f91c 	bl	8004a88 <HD44780_SetCursor>
		HD44780_PrintStr("Banho");
 8001850:	4825      	ldr	r0, [pc, #148]	@ (80018e8 <Menu_SpecificScreen+0xcc>)
 8001852:	f003 f9ae 	bl	8004bb2 <HD44780_PrintStr>
		HD44780_SetCursor(4, 1);
		HD44780_PrintStr("Calibracao");

	}

}
 8001856:	e03f      	b.n	80018d8 <Menu_SpecificScreen+0xbc>
	} else if(cursor == 1){
 8001858:	4b22      	ldr	r3, [pc, #136]	@ (80018e4 <Menu_SpecificScreen+0xc8>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b25b      	sxtb	r3, r3
 800185e:	2b01      	cmp	r3, #1
 8001860:	d107      	bne.n	8001872 <Menu_SpecificScreen+0x56>
		HD44780_SetCursor(5, 1);
 8001862:	2101      	movs	r1, #1
 8001864:	2005      	movs	r0, #5
 8001866:	f003 f90f 	bl	8004a88 <HD44780_SetCursor>
		HD44780_PrintStr("Temperatura");
 800186a:	4820      	ldr	r0, [pc, #128]	@ (80018ec <Menu_SpecificScreen+0xd0>)
 800186c:	f003 f9a1 	bl	8004bb2 <HD44780_PrintStr>
}
 8001870:	e032      	b.n	80018d8 <Menu_SpecificScreen+0xbc>
	} else if(cursor == 2){
 8001872:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <Menu_SpecificScreen+0xc8>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	b25b      	sxtb	r3, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d107      	bne.n	800188c <Menu_SpecificScreen+0x70>
		HD44780_SetCursor(3, 1);
 800187c:	2101      	movs	r1, #1
 800187e:	2003      	movs	r0, #3
 8001880:	f003 f902 	bl	8004a88 <HD44780_SetCursor>
		HD44780_PrintStr("Volume");
 8001884:	481a      	ldr	r0, [pc, #104]	@ (80018f0 <Menu_SpecificScreen+0xd4>)
 8001886:	f003 f994 	bl	8004bb2 <HD44780_PrintStr>
}
 800188a:	e025      	b.n	80018d8 <Menu_SpecificScreen+0xbc>
	} else if(cursor == 3){
 800188c:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <Menu_SpecificScreen+0xc8>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b25b      	sxtb	r3, r3
 8001892:	2b03      	cmp	r3, #3
 8001894:	d107      	bne.n	80018a6 <Menu_SpecificScreen+0x8a>
		HD44780_SetCursor(4, 1);
 8001896:	2101      	movs	r1, #1
 8001898:	2004      	movs	r0, #4
 800189a:	f003 f8f5 	bl	8004a88 <HD44780_SetCursor>
		HD44780_PrintStr("Conexao");
 800189e:	4815      	ldr	r0, [pc, #84]	@ (80018f4 <Menu_SpecificScreen+0xd8>)
 80018a0:	f003 f987 	bl	8004bb2 <HD44780_PrintStr>
}
 80018a4:	e018      	b.n	80018d8 <Menu_SpecificScreen+0xbc>
	} else if(cursor == 4){
 80018a6:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <Menu_SpecificScreen+0xc8>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	b25b      	sxtb	r3, r3
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d107      	bne.n	80018c0 <Menu_SpecificScreen+0xa4>
		HD44780_SetCursor(4, 1);
 80018b0:	2101      	movs	r1, #1
 80018b2:	2004      	movs	r0, #4
 80018b4:	f003 f8e8 	bl	8004a88 <HD44780_SetCursor>
		HD44780_PrintStr("Configuracao");
 80018b8:	480f      	ldr	r0, [pc, #60]	@ (80018f8 <Menu_SpecificScreen+0xdc>)
 80018ba:	f003 f97a 	bl	8004bb2 <HD44780_PrintStr>
}
 80018be:	e00b      	b.n	80018d8 <Menu_SpecificScreen+0xbc>
	} else if(cursor == 5){
 80018c0:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <Menu_SpecificScreen+0xc8>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	2b05      	cmp	r3, #5
 80018c8:	d106      	bne.n	80018d8 <Menu_SpecificScreen+0xbc>
		HD44780_SetCursor(4, 1);
 80018ca:	2101      	movs	r1, #1
 80018cc:	2004      	movs	r0, #4
 80018ce:	f003 f8db 	bl	8004a88 <HD44780_SetCursor>
		HD44780_PrintStr("Calibracao");
 80018d2:	480a      	ldr	r0, [pc, #40]	@ (80018fc <Menu_SpecificScreen+0xe0>)
 80018d4:	f003 f96d 	bl	8004bb2 <HD44780_PrintStr>
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200002f8 	.word	0x200002f8
 80018e0:	200002f7 	.word	0x200002f7
 80018e4:	200002f9 	.word	0x200002f9
 80018e8:	0800958c 	.word	0x0800958c
 80018ec:	08009594 	.word	0x08009594
 80018f0:	080095a0 	.word	0x080095a0
 80018f4:	080095a8 	.word	0x080095a8
 80018f8:	080095b0 	.word	0x080095b0
 80018fc:	080095c0 	.word	0x080095c0

08001900 <Menu_Interface>:

/* Função que gerencia a lógica geral da interface do menu */
void Menu_Interface(void){
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0

    // Verifica se a tela atual é a tela principal ou uma tela específica
	if(!current_screen)
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <Menu_Interface+0x20>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d102      	bne.n	8001914 <Menu_Interface+0x14>
		Menu_HomeScreen();
 800190e:	f7ff ff4f 	bl	80017b0 <Menu_HomeScreen>
 8001912:	e001      	b.n	8001918 <Menu_Interface+0x18>
	else
		Menu_SpecificScreen();
 8001914:	f7ff ff82 	bl	800181c <Menu_SpecificScreen>

    // Verifica as flags dos botões
	Menu_CheckButtons();
 8001918:	f7ff fee8 	bl	80016ec <Menu_CheckButtons>

}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200002f7 	.word	0x200002f7

08001924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <HAL_MspInit+0x4c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	4a0f      	ldr	r2, [pc, #60]	@ (8001970 <HAL_MspInit+0x4c>)
 8001934:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001938:	6453      	str	r3, [r2, #68]	@ 0x44
 800193a:	4b0d      	ldr	r3, [pc, #52]	@ (8001970 <HAL_MspInit+0x4c>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <HAL_MspInit+0x4c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	4a08      	ldr	r2, [pc, #32]	@ (8001970 <HAL_MspInit+0x4c>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001954:	6413      	str	r3, [r2, #64]	@ 0x40
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_MspInit+0x4c>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800

08001974 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	@ 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a19      	ldr	r2, [pc, #100]	@ (80019f8 <HAL_I2C_MspInit+0x84>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d12b      	bne.n	80019ee <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	4b18      	ldr	r3, [pc, #96]	@ (80019fc <HAL_I2C_MspInit+0x88>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	4a17      	ldr	r2, [pc, #92]	@ (80019fc <HAL_I2C_MspInit+0x88>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a6:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <HAL_I2C_MspInit+0x88>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019b2:	23c0      	movs	r3, #192	@ 0xc0
 80019b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b6:	2312      	movs	r3, #18
 80019b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019c2:	2304      	movs	r3, #4
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	480c      	ldr	r0, [pc, #48]	@ (8001a00 <HAL_I2C_MspInit+0x8c>)
 80019ce:	f000 fb81 	bl	80020d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <HAL_I2C_MspInit+0x88>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	4a08      	ldr	r2, [pc, #32]	@ (80019fc <HAL_I2C_MspInit+0x88>)
 80019dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_I2C_MspInit+0x88>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	@ 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40005400 	.word	0x40005400
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020400 	.word	0x40020400

08001a04 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0e      	ldr	r2, [pc, #56]	@ (8001a4c <HAL_TIM_Base_MspInit+0x48>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d115      	bne.n	8001a42 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <HAL_TIM_Base_MspInit+0x4c>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a50 <HAL_TIM_Base_MspInit+0x4c>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a26:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <HAL_TIM_Base_MspInit+0x4c>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	201e      	movs	r0, #30
 8001a38:	f000 fb15 	bl	8002066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a3c:	201e      	movs	r0, #30
 8001a3e:	f000 fb2e 	bl	800209e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40000800 	.word	0x40000800
 8001a50:	40023800 	.word	0x40023800

08001a54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	@ 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a19      	ldr	r2, [pc, #100]	@ (8001ad8 <HAL_UART_MspInit+0x84>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d12c      	bne.n	8001ad0 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <HAL_UART_MspInit+0x88>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7e:	4a17      	ldr	r2, [pc, #92]	@ (8001adc <HAL_UART_MspInit+0x88>)
 8001a80:	f043 0310 	orr.w	r3, r3, #16
 8001a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <HAL_UART_MspInit+0x88>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <HAL_UART_MspInit+0x88>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4a10      	ldr	r2, [pc, #64]	@ (8001adc <HAL_UART_MspInit+0x88>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <HAL_UART_MspInit+0x88>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001aae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ac0:	2307      	movs	r3, #7
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4805      	ldr	r0, [pc, #20]	@ (8001ae0 <HAL_UART_MspInit+0x8c>)
 8001acc:	f000 fb02 	bl	80020d4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ad0:	bf00      	nop
 8001ad2:	3728      	adds	r7, #40	@ 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40011000 	.word	0x40011000
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020000 	.word	0x40020000

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <NMI_Handler+0x4>

08001aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <HardFault_Handler+0x4>

08001af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <MemManage_Handler+0x4>

08001afc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3a:	f000 f975 	bl	8001e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f000 fc60 	bl	800240c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b54:	2002      	movs	r0, #2
 8001b56:	f000 fc59 	bl	800240c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001b62:	2004      	movs	r0, #4
 8001b64:	f000 fc52 	bl	800240c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b70:	4802      	ldr	r0, [pc, #8]	@ (8001b7c <TIM4_IRQHandler+0x10>)
 8001b72:	f001 fe72 	bl	800385a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000258 	.word	0x20000258

08001b80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return 1;
 8001b84:	2301      	movs	r3, #1
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <_kill>:

int _kill(int pid, int sig)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b9a:	f004 f9c9 	bl	8005f30 <__errno>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2216      	movs	r2, #22
 8001ba2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_exit>:

void _exit (int status)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ffe7 	bl	8001b90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bc2:	bf00      	nop
 8001bc4:	e7fd      	b.n	8001bc2 <_exit+0x12>

08001bc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e00a      	b.n	8001bee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bd8:	f7ff fc4c 	bl	8001474 <__io_getchar>
 8001bdc:	4601      	mov	r1, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	60ba      	str	r2, [r7, #8]
 8001be4:	b2ca      	uxtb	r2, r1
 8001be6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	3301      	adds	r3, #1
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	dbf0      	blt.n	8001bd8 <_read+0x12>
  }

  return len;
 8001bf6:	687b      	ldr	r3, [r7, #4]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	e009      	b.n	8001c26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	60ba      	str	r2, [r7, #8]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fc10 	bl	8001440 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3301      	adds	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	dbf1      	blt.n	8001c12 <_write+0x12>
  }
  return len;
 8001c2e:	687b      	ldr	r3, [r7, #4]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_close>:

int _close(int file)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c60:	605a      	str	r2, [r3, #4]
  return 0;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <_isatty>:

int _isatty(int file)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c78:	2301      	movs	r3, #1
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b085      	sub	sp, #20
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca8:	4a14      	ldr	r2, [pc, #80]	@ (8001cfc <_sbrk+0x5c>)
 8001caa:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <_sbrk+0x60>)
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb4:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d102      	bne.n	8001cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <_sbrk+0x64>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	@ (8001d08 <_sbrk+0x68>)
 8001cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <_sbrk+0x64>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d207      	bcs.n	8001ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd0:	f004 f92e 	bl	8005f30 <__errno>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	e009      	b.n	8001cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce0:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	@ (8001d04 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	4a05      	ldr	r2, [pc, #20]	@ (8001d04 <_sbrk+0x64>)
 8001cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20020000 	.word	0x20020000
 8001d00:	00000400 	.word	0x00000400
 8001d04:	20000300 	.word	0x20000300
 8001d08:	20000460 	.word	0x20000460

08001d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <SystemInit+0x20>)
 8001d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d16:	4a05      	ldr	r2, [pc, #20]	@ (8001d2c <SystemInit+0x20>)
 8001d18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d34:	f7ff ffea 	bl	8001d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d38:	480c      	ldr	r0, [pc, #48]	@ (8001d6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d3a:	490d      	ldr	r1, [pc, #52]	@ (8001d70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d40:	e002      	b.n	8001d48 <LoopCopyDataInit>

08001d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d46:	3304      	adds	r3, #4

08001d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d4c:	d3f9      	bcc.n	8001d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d50:	4c0a      	ldr	r4, [pc, #40]	@ (8001d7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d54:	e001      	b.n	8001d5a <LoopFillZerobss>

08001d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d58:	3204      	adds	r2, #4

08001d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d5c:	d3fb      	bcc.n	8001d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d5e:	f004 f8ed 	bl	8005f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d62:	f7ff f95d 	bl	8001020 <main>
  bx  lr    
 8001d66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d70:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001d74:	08009aac 	.word	0x08009aac
  ldr r2, =_sbss
 8001d78:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001d7c:	2000045c 	.word	0x2000045c

08001d80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d80:	e7fe      	b.n	8001d80 <ADC_IRQHandler>
	...

08001d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d88:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc4 <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc4 <HAL_Init+0x40>)
 8001d8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d94:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc4 <HAL_Init+0x40>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc4 <HAL_Init+0x40>)
 8001d9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da0:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <HAL_Init+0x40>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a07      	ldr	r2, [pc, #28]	@ (8001dc4 <HAL_Init+0x40>)
 8001da6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dac:	2003      	movs	r0, #3
 8001dae:	f000 f94f 	bl	8002050 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db2:	200f      	movs	r0, #15
 8001db4:	f000 f808 	bl	8001dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db8:	f7ff fdb4 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023c00 	.word	0x40023c00

08001dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd0:	4b12      	ldr	r3, [pc, #72]	@ (8001e1c <HAL_InitTick+0x54>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <HAL_InitTick+0x58>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f967 	bl	80020ba <HAL_SYSTICK_Config>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00e      	b.n	8001e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b0f      	cmp	r3, #15
 8001dfa:	d80a      	bhi.n	8001e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295
 8001e04:	f000 f92f 	bl	8002066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e08:	4a06      	ldr	r2, [pc, #24]	@ (8001e24 <HAL_InitTick+0x5c>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000004 	.word	0x20000004
 8001e20:	2000000c 	.word	0x2000000c
 8001e24:	20000008 	.word	0x20000008

08001e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <HAL_IncTick+0x20>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <HAL_IncTick+0x24>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	4a04      	ldr	r2, [pc, #16]	@ (8001e4c <HAL_IncTick+0x24>)
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	2000000c 	.word	0x2000000c
 8001e4c:	20000304 	.word	0x20000304

08001e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return uwTick;
 8001e54:	4b03      	ldr	r3, [pc, #12]	@ (8001e64 <HAL_GetTick+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20000304 	.word	0x20000304

08001e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff ffee 	bl	8001e50 <HAL_GetTick>
 8001e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e80:	d005      	beq.n	8001e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e82:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <HAL_Delay+0x44>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e8e:	bf00      	nop
 8001e90:	f7ff ffde 	bl	8001e50 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d8f7      	bhi.n	8001e90 <HAL_Delay+0x28>
  {
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	2000000c 	.word	0x2000000c

08001eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee2:	4a04      	ldr	r2, [pc, #16]	@ (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	60d3      	str	r3, [r2, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001efc:	4b04      	ldr	r3, [pc, #16]	@ (8001f10 <__NVIC_GetPriorityGrouping+0x18>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	f003 0307 	and.w	r3, r3, #7
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	db0b      	blt.n	8001f3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	f003 021f 	and.w	r2, r3, #31
 8001f2c:	4907      	ldr	r1, [pc, #28]	@ (8001f4c <__NVIC_EnableIRQ+0x38>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	2001      	movs	r0, #1
 8001f36:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db0a      	blt.n	8001f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	490c      	ldr	r1, [pc, #48]	@ (8001f9c <__NVIC_SetPriority+0x4c>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	440b      	add	r3, r1
 8001f74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f78:	e00a      	b.n	8001f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4908      	ldr	r1, [pc, #32]	@ (8001fa0 <__NVIC_SetPriority+0x50>)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3b04      	subs	r3, #4
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	761a      	strb	r2, [r3, #24]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	@ 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f1c3 0307 	rsb	r3, r3, #7
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	bf28      	it	cs
 8001fc2:	2304      	movcs	r3, #4
 8001fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d902      	bls.n	8001fd4 <NVIC_EncodePriority+0x30>
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3b03      	subs	r3, #3
 8001fd2:	e000      	b.n	8001fd6 <NVIC_EncodePriority+0x32>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43d9      	mvns	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	4313      	orrs	r3, r2
         );
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	@ 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800201c:	d301      	bcc.n	8002022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201e:	2301      	movs	r3, #1
 8002020:	e00f      	b.n	8002042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002022:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <SysTick_Config+0x40>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202a:	210f      	movs	r1, #15
 800202c:	f04f 30ff 	mov.w	r0, #4294967295
 8002030:	f7ff ff8e 	bl	8001f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002034:	4b05      	ldr	r3, [pc, #20]	@ (800204c <SysTick_Config+0x40>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203a:	4b04      	ldr	r3, [pc, #16]	@ (800204c <SysTick_Config+0x40>)
 800203c:	2207      	movs	r2, #7
 800203e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	e000e010 	.word	0xe000e010

08002050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ff29 	bl	8001eb0 <__NVIC_SetPriorityGrouping>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002078:	f7ff ff3e 	bl	8001ef8 <__NVIC_GetPriorityGrouping>
 800207c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	6978      	ldr	r0, [r7, #20]
 8002084:	f7ff ff8e 	bl	8001fa4 <NVIC_EncodePriority>
 8002088:	4602      	mov	r2, r0
 800208a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff5d 	bl	8001f50 <__NVIC_SetPriority>
}
 8002096:	bf00      	nop
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff31 	bl	8001f14 <__NVIC_EnableIRQ>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ffa2 	bl	800200c <SysTick_Config>
 80020c8:	4603      	mov	r3, r0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	@ 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	e16b      	b.n	80023c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020f0:	2201      	movs	r2, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	429a      	cmp	r2, r3
 800210a:	f040 815a 	bne.w	80023c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d005      	beq.n	8002126 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002122:	2b02      	cmp	r3, #2
 8002124:	d130      	bne.n	8002188 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	2203      	movs	r2, #3
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800215c:	2201      	movs	r2, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 0201 	and.w	r2, r3, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	2b03      	cmp	r3, #3
 8002192:	d017      	beq.n	80021c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	2203      	movs	r2, #3
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d123      	bne.n	8002218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	08da      	lsrs	r2, r3, #3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3208      	adds	r2, #8
 80021d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	220f      	movs	r2, #15
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	08da      	lsrs	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3208      	adds	r2, #8
 8002212:	69b9      	ldr	r1, [r7, #24]
 8002214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0203 	and.w	r2, r3, #3
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80b4 	beq.w	80023c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b60      	ldr	r3, [pc, #384]	@ (80023e0 <HAL_GPIO_Init+0x30c>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002262:	4a5f      	ldr	r2, [pc, #380]	@ (80023e0 <HAL_GPIO_Init+0x30c>)
 8002264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002268:	6453      	str	r3, [r2, #68]	@ 0x44
 800226a:	4b5d      	ldr	r3, [pc, #372]	@ (80023e0 <HAL_GPIO_Init+0x30c>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002276:	4a5b      	ldr	r2, [pc, #364]	@ (80023e4 <HAL_GPIO_Init+0x310>)
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	3302      	adds	r3, #2
 800227e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	220f      	movs	r2, #15
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a52      	ldr	r2, [pc, #328]	@ (80023e8 <HAL_GPIO_Init+0x314>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d02b      	beq.n	80022fa <HAL_GPIO_Init+0x226>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a51      	ldr	r2, [pc, #324]	@ (80023ec <HAL_GPIO_Init+0x318>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d025      	beq.n	80022f6 <HAL_GPIO_Init+0x222>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a50      	ldr	r2, [pc, #320]	@ (80023f0 <HAL_GPIO_Init+0x31c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d01f      	beq.n	80022f2 <HAL_GPIO_Init+0x21e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4f      	ldr	r2, [pc, #316]	@ (80023f4 <HAL_GPIO_Init+0x320>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d019      	beq.n	80022ee <HAL_GPIO_Init+0x21a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4e      	ldr	r2, [pc, #312]	@ (80023f8 <HAL_GPIO_Init+0x324>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_GPIO_Init+0x216>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4d      	ldr	r2, [pc, #308]	@ (80023fc <HAL_GPIO_Init+0x328>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00d      	beq.n	80022e6 <HAL_GPIO_Init+0x212>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002400 <HAL_GPIO_Init+0x32c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d007      	beq.n	80022e2 <HAL_GPIO_Init+0x20e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002404 <HAL_GPIO_Init+0x330>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d101      	bne.n	80022de <HAL_GPIO_Init+0x20a>
 80022da:	2307      	movs	r3, #7
 80022dc:	e00e      	b.n	80022fc <HAL_GPIO_Init+0x228>
 80022de:	2308      	movs	r3, #8
 80022e0:	e00c      	b.n	80022fc <HAL_GPIO_Init+0x228>
 80022e2:	2306      	movs	r3, #6
 80022e4:	e00a      	b.n	80022fc <HAL_GPIO_Init+0x228>
 80022e6:	2305      	movs	r3, #5
 80022e8:	e008      	b.n	80022fc <HAL_GPIO_Init+0x228>
 80022ea:	2304      	movs	r3, #4
 80022ec:	e006      	b.n	80022fc <HAL_GPIO_Init+0x228>
 80022ee:	2303      	movs	r3, #3
 80022f0:	e004      	b.n	80022fc <HAL_GPIO_Init+0x228>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e002      	b.n	80022fc <HAL_GPIO_Init+0x228>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <HAL_GPIO_Init+0x228>
 80022fa:	2300      	movs	r3, #0
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	f002 0203 	and.w	r2, r2, #3
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	4093      	lsls	r3, r2
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800230c:	4935      	ldr	r1, [pc, #212]	@ (80023e4 <HAL_GPIO_Init+0x310>)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	3302      	adds	r3, #2
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800231a:	4b3b      	ldr	r3, [pc, #236]	@ (8002408 <HAL_GPIO_Init+0x334>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800233e:	4a32      	ldr	r2, [pc, #200]	@ (8002408 <HAL_GPIO_Init+0x334>)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002344:	4b30      	ldr	r3, [pc, #192]	@ (8002408 <HAL_GPIO_Init+0x334>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002368:	4a27      	ldr	r2, [pc, #156]	@ (8002408 <HAL_GPIO_Init+0x334>)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800236e:	4b26      	ldr	r3, [pc, #152]	@ (8002408 <HAL_GPIO_Init+0x334>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002392:	4a1d      	ldr	r2, [pc, #116]	@ (8002408 <HAL_GPIO_Init+0x334>)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002398:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <HAL_GPIO_Init+0x334>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023bc:	4a12      	ldr	r2, [pc, #72]	@ (8002408 <HAL_GPIO_Init+0x334>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3301      	adds	r3, #1
 80023c6:	61fb      	str	r3, [r7, #28]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	2b0f      	cmp	r3, #15
 80023cc:	f67f ae90 	bls.w	80020f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	3724      	adds	r7, #36	@ 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40013800 	.word	0x40013800
 80023e8:	40020000 	.word	0x40020000
 80023ec:	40020400 	.word	0x40020400
 80023f0:	40020800 	.word	0x40020800
 80023f4:	40020c00 	.word	0x40020c00
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40021400 	.word	0x40021400
 8002400:	40021800 	.word	0x40021800
 8002404:	40021c00 	.word	0x40021c00
 8002408:	40013c00 	.word	0x40013c00

0800240c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002416:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	4013      	ands	r3, r2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d006      	beq.n	8002430 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002422:	4a05      	ldr	r2, [pc, #20]	@ (8002438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe ffa0 	bl	8001370 <HAL_GPIO_EXTI_Callback>
  }
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40013c00 	.word	0x40013c00

0800243c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e12b      	b.n	80026a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff fa86 	bl	8001974 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2224      	movs	r2, #36	@ 0x24
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800248e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800249e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024a0:	f001 f89a 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 80024a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4a81      	ldr	r2, [pc, #516]	@ (80026b0 <HAL_I2C_Init+0x274>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d807      	bhi.n	80024c0 <HAL_I2C_Init+0x84>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4a80      	ldr	r2, [pc, #512]	@ (80026b4 <HAL_I2C_Init+0x278>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	bf94      	ite	ls
 80024b8:	2301      	movls	r3, #1
 80024ba:	2300      	movhi	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	e006      	b.n	80024ce <HAL_I2C_Init+0x92>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4a7d      	ldr	r2, [pc, #500]	@ (80026b8 <HAL_I2C_Init+0x27c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	bf94      	ite	ls
 80024c8:	2301      	movls	r3, #1
 80024ca:	2300      	movhi	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e0e7      	b.n	80026a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4a78      	ldr	r2, [pc, #480]	@ (80026bc <HAL_I2C_Init+0x280>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	0c9b      	lsrs	r3, r3, #18
 80024e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4a6a      	ldr	r2, [pc, #424]	@ (80026b0 <HAL_I2C_Init+0x274>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d802      	bhi.n	8002510 <HAL_I2C_Init+0xd4>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	3301      	adds	r3, #1
 800250e:	e009      	b.n	8002524 <HAL_I2C_Init+0xe8>
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002516:	fb02 f303 	mul.w	r3, r2, r3
 800251a:	4a69      	ldr	r2, [pc, #420]	@ (80026c0 <HAL_I2C_Init+0x284>)
 800251c:	fba2 2303 	umull	r2, r3, r2, r3
 8002520:	099b      	lsrs	r3, r3, #6
 8002522:	3301      	adds	r3, #1
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	430b      	orrs	r3, r1
 800252a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002536:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	495c      	ldr	r1, [pc, #368]	@ (80026b0 <HAL_I2C_Init+0x274>)
 8002540:	428b      	cmp	r3, r1
 8002542:	d819      	bhi.n	8002578 <HAL_I2C_Init+0x13c>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1e59      	subs	r1, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002552:	1c59      	adds	r1, r3, #1
 8002554:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002558:	400b      	ands	r3, r1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_I2C_Init+0x138>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1e59      	subs	r1, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	fbb1 f3f3 	udiv	r3, r1, r3
 800256c:	3301      	adds	r3, #1
 800256e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002572:	e051      	b.n	8002618 <HAL_I2C_Init+0x1dc>
 8002574:	2304      	movs	r3, #4
 8002576:	e04f      	b.n	8002618 <HAL_I2C_Init+0x1dc>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d111      	bne.n	80025a4 <HAL_I2C_Init+0x168>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1e58      	subs	r0, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	440b      	add	r3, r1
 800258e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002592:	3301      	adds	r3, #1
 8002594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf0c      	ite	eq
 800259c:	2301      	moveq	r3, #1
 800259e:	2300      	movne	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	e012      	b.n	80025ca <HAL_I2C_Init+0x18e>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1e58      	subs	r0, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	0099      	lsls	r1, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ba:	3301      	adds	r3, #1
 80025bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf0c      	ite	eq
 80025c4:	2301      	moveq	r3, #1
 80025c6:	2300      	movne	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Init+0x196>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e022      	b.n	8002618 <HAL_I2C_Init+0x1dc>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10e      	bne.n	80025f8 <HAL_I2C_Init+0x1bc>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1e58      	subs	r0, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	460b      	mov	r3, r1
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	440b      	add	r3, r1
 80025e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ec:	3301      	adds	r3, #1
 80025ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025f6:	e00f      	b.n	8002618 <HAL_I2C_Init+0x1dc>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1e58      	subs	r0, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	0099      	lsls	r1, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	fbb0 f3f3 	udiv	r3, r0, r3
 800260e:	3301      	adds	r3, #1
 8002610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002614:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	6809      	ldr	r1, [r1, #0]
 800261c:	4313      	orrs	r3, r2
 800261e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69da      	ldr	r2, [r3, #28]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002646:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6911      	ldr	r1, [r2, #16]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68d2      	ldr	r2, [r2, #12]
 8002652:	4311      	orrs	r1, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	430b      	orrs	r3, r1
 800265a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	000186a0 	.word	0x000186a0
 80026b4:	001e847f 	.word	0x001e847f
 80026b8:	003d08ff 	.word	0x003d08ff
 80026bc:	431bde83 	.word	0x431bde83
 80026c0:	10624dd3 	.word	0x10624dd3

080026c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	461a      	mov	r2, r3
 80026d0:	460b      	mov	r3, r1
 80026d2:	817b      	strh	r3, [r7, #10]
 80026d4:	4613      	mov	r3, r2
 80026d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026d8:	f7ff fbba 	bl	8001e50 <HAL_GetTick>
 80026dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b20      	cmp	r3, #32
 80026e8:	f040 80e0 	bne.w	80028ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	2319      	movs	r3, #25
 80026f2:	2201      	movs	r2, #1
 80026f4:	4970      	ldr	r1, [pc, #448]	@ (80028b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f964 	bl	80029c4 <I2C_WaitOnFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002702:	2302      	movs	r3, #2
 8002704:	e0d3      	b.n	80028ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_I2C_Master_Transmit+0x50>
 8002710:	2302      	movs	r3, #2
 8002712:	e0cc      	b.n	80028ae <HAL_I2C_Master_Transmit+0x1ea>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b01      	cmp	r3, #1
 8002728:	d007      	beq.n	800273a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0201 	orr.w	r2, r2, #1
 8002738:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002748:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2221      	movs	r2, #33	@ 0x21
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2210      	movs	r2, #16
 8002756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	893a      	ldrh	r2, [r7, #8]
 800276a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4a50      	ldr	r2, [pc, #320]	@ (80028bc <HAL_I2C_Master_Transmit+0x1f8>)
 800277a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800277c:	8979      	ldrh	r1, [r7, #10]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	6a3a      	ldr	r2, [r7, #32]
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f89c 	bl	80028c0 <I2C_MasterRequestWrite>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e08d      	b.n	80028ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027a8:	e066      	b.n	8002878 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	6a39      	ldr	r1, [r7, #32]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fa22 	bl	8002bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00d      	beq.n	80027d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d107      	bne.n	80027d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e06b      	b.n	80028ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	781a      	ldrb	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b04      	cmp	r3, #4
 8002812:	d11b      	bne.n	800284c <HAL_I2C_Master_Transmit+0x188>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002818:	2b00      	cmp	r3, #0
 800281a:	d017      	beq.n	800284c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002820:	781a      	ldrb	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	6a39      	ldr	r1, [r7, #32]
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fa19 	bl	8002c88 <I2C_WaitOnBTFFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00d      	beq.n	8002878 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	2b04      	cmp	r3, #4
 8002862:	d107      	bne.n	8002874 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002872:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e01a      	b.n	80028ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800287c:	2b00      	cmp	r3, #0
 800287e:	d194      	bne.n	80027aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800288e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	e000      	b.n	80028ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
  }
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	00100002 	.word	0x00100002
 80028bc:	ffff0000 	.word	0xffff0000

080028c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	460b      	mov	r3, r1
 80028ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d006      	beq.n	80028ea <I2C_MasterRequestWrite+0x2a>
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d003      	beq.n	80028ea <I2C_MasterRequestWrite+0x2a>
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028e8:	d108      	bne.n	80028fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	e00b      	b.n	8002914 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002900:	2b12      	cmp	r3, #18
 8002902:	d107      	bne.n	8002914 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002912:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f84f 	bl	80029c4 <I2C_WaitOnFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00d      	beq.n	8002948 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800293a:	d103      	bne.n	8002944 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002942:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e035      	b.n	80029b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002950:	d108      	bne.n	8002964 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002952:	897b      	ldrh	r3, [r7, #10]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002960:	611a      	str	r2, [r3, #16]
 8002962:	e01b      	b.n	800299c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002964:	897b      	ldrh	r3, [r7, #10]
 8002966:	11db      	asrs	r3, r3, #7
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f003 0306 	and.w	r3, r3, #6
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f063 030f 	orn	r3, r3, #15
 8002974:	b2da      	uxtb	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	490e      	ldr	r1, [pc, #56]	@ (80029bc <I2C_MasterRequestWrite+0xfc>)
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f898 	bl	8002ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e010      	b.n	80029b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002992:	897b      	ldrh	r3, [r7, #10]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	4907      	ldr	r1, [pc, #28]	@ (80029c0 <I2C_MasterRequestWrite+0x100>)
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f888 	bl	8002ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	00010008 	.word	0x00010008
 80029c0:	00010002 	.word	0x00010002

080029c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029d4:	e048      	b.n	8002a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d044      	beq.n	8002a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029de:	f7ff fa37 	bl	8001e50 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d302      	bcc.n	80029f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d139      	bne.n	8002a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	0c1b      	lsrs	r3, r3, #16
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d10d      	bne.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x56>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	43da      	mvns	r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	e00c      	b.n	8002a34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	43da      	mvns	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4013      	ands	r3, r2
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d116      	bne.n	8002a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	f043 0220 	orr.w	r2, r3, #32
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e023      	b.n	8002ab0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	0c1b      	lsrs	r3, r3, #16
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d10d      	bne.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	e00c      	b.n	8002aa8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	43da      	mvns	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d093      	beq.n	80029d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ac6:	e071      	b.n	8002bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ad6:	d123      	bne.n	8002b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002af0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0c:	f043 0204 	orr.w	r2, r3, #4
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e067      	b.n	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b26:	d041      	beq.n	8002bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b28:	f7ff f992 	bl	8001e50 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d302      	bcc.n	8002b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d136      	bne.n	8002bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	0c1b      	lsrs	r3, r3, #16
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d10c      	bne.n	8002b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	43da      	mvns	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4013      	ands	r3, r2
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	bf14      	ite	ne
 8002b5a:	2301      	movne	r3, #1
 8002b5c:	2300      	moveq	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	e00b      	b.n	8002b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	43da      	mvns	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d016      	beq.n	8002bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e021      	b.n	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	0c1b      	lsrs	r3, r3, #16
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d10c      	bne.n	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf14      	ite	ne
 8002bc8:	2301      	movne	r3, #1
 8002bca:	2300      	moveq	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	e00b      	b.n	8002be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bf14      	ite	ne
 8002be2:	2301      	movne	r3, #1
 8002be4:	2300      	moveq	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f47f af6d 	bne.w	8002ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c04:	e034      	b.n	8002c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f886 	bl	8002d18 <I2C_IsAcknowledgeFailed>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e034      	b.n	8002c80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d028      	beq.n	8002c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1e:	f7ff f917 	bl	8001e50 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d302      	bcc.n	8002c34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d11d      	bne.n	8002c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c3e:	2b80      	cmp	r3, #128	@ 0x80
 8002c40:	d016      	beq.n	8002c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5c:	f043 0220 	orr.w	r2, r3, #32
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e007      	b.n	8002c80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7a:	2b80      	cmp	r3, #128	@ 0x80
 8002c7c:	d1c3      	bne.n	8002c06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c94:	e034      	b.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f83e 	bl	8002d18 <I2C_IsAcknowledgeFailed>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e034      	b.n	8002d10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cac:	d028      	beq.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cae:	f7ff f8cf 	bl	8001e50 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d302      	bcc.n	8002cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d11d      	bne.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d016      	beq.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	f043 0220 	orr.w	r2, r3, #32
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e007      	b.n	8002d10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d1c3      	bne.n	8002c96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d2e:	d11b      	bne.n	8002d68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d54:	f043 0204 	orr.w	r2, r3, #4
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e267      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d075      	beq.n	8002e82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d96:	4b88      	ldr	r3, [pc, #544]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d00c      	beq.n	8002dbc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da2:	4b85      	ldr	r3, [pc, #532]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d112      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dae:	4b82      	ldr	r3, [pc, #520]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002db6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dba:	d10b      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbc:	4b7e      	ldr	r3, [pc, #504]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d05b      	beq.n	8002e80 <HAL_RCC_OscConfig+0x108>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d157      	bne.n	8002e80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e242      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ddc:	d106      	bne.n	8002dec <HAL_RCC_OscConfig+0x74>
 8002dde:	4b76      	ldr	r3, [pc, #472]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a75      	ldr	r2, [pc, #468]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e01d      	b.n	8002e28 <HAL_RCC_OscConfig+0xb0>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x98>
 8002df6:	4b70      	ldr	r3, [pc, #448]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a6f      	ldr	r2, [pc, #444]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	4b6d      	ldr	r3, [pc, #436]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a6c      	ldr	r2, [pc, #432]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e00b      	b.n	8002e28 <HAL_RCC_OscConfig+0xb0>
 8002e10:	4b69      	ldr	r3, [pc, #420]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a68      	ldr	r2, [pc, #416]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b66      	ldr	r3, [pc, #408]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a65      	ldr	r2, [pc, #404]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7ff f80e 	bl	8001e50 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e38:	f7ff f80a 	bl	8001e50 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	@ 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e207      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	4b5b      	ldr	r3, [pc, #364]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0xc0>
 8002e56:	e014      	b.n	8002e82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe fffa 	bl	8001e50 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e60:	f7fe fff6 	bl	8001e50 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	@ 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e1f3      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e72:	4b51      	ldr	r3, [pc, #324]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0xe8>
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d063      	beq.n	8002f56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00b      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9a:	4b47      	ldr	r3, [pc, #284]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d11c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea6:	4b44      	ldr	r3, [pc, #272]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d116      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb2:	4b41      	ldr	r3, [pc, #260]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_RCC_OscConfig+0x152>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d001      	beq.n	8002eca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e1c7      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eca:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4937      	ldr	r1, [pc, #220]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ede:	e03a      	b.n	8002f56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d020      	beq.n	8002f2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee8:	4b34      	ldr	r3, [pc, #208]	@ (8002fbc <HAL_RCC_OscConfig+0x244>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eee:	f7fe ffaf 	bl	8001e50 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef6:	f7fe ffab 	bl	8001e50 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e1a8      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f08:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f14:	4b28      	ldr	r3, [pc, #160]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4925      	ldr	r1, [pc, #148]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	600b      	str	r3, [r1, #0]
 8002f28:	e015      	b.n	8002f56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f2a:	4b24      	ldr	r3, [pc, #144]	@ (8002fbc <HAL_RCC_OscConfig+0x244>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fe ff8e 	bl	8001e50 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f38:	f7fe ff8a 	bl	8001e50 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e187      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d036      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d016      	beq.n	8002f98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f6a:	4b15      	ldr	r3, [pc, #84]	@ (8002fc0 <HAL_RCC_OscConfig+0x248>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7fe ff6e 	bl	8001e50 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f78:	f7fe ff6a 	bl	8001e50 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e167      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x200>
 8002f96:	e01b      	b.n	8002fd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f98:	4b09      	ldr	r3, [pc, #36]	@ (8002fc0 <HAL_RCC_OscConfig+0x248>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9e:	f7fe ff57 	bl	8001e50 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa4:	e00e      	b.n	8002fc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa6:	f7fe ff53 	bl	8001e50 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d907      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e150      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	42470000 	.word	0x42470000
 8002fc0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc4:	4b88      	ldr	r3, [pc, #544]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8002fc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1ea      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 8097 	beq.w	800310c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe2:	4b81      	ldr	r3, [pc, #516]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10f      	bne.n	800300e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	4b7d      	ldr	r3, [pc, #500]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	4a7c      	ldr	r2, [pc, #496]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ffe:	4b7a      	ldr	r3, [pc, #488]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300a:	2301      	movs	r3, #1
 800300c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300e:	4b77      	ldr	r3, [pc, #476]	@ (80031ec <HAL_RCC_OscConfig+0x474>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d118      	bne.n	800304c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800301a:	4b74      	ldr	r3, [pc, #464]	@ (80031ec <HAL_RCC_OscConfig+0x474>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a73      	ldr	r2, [pc, #460]	@ (80031ec <HAL_RCC_OscConfig+0x474>)
 8003020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003026:	f7fe ff13 	bl	8001e50 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302e:	f7fe ff0f 	bl	8001e50 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e10c      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003040:	4b6a      	ldr	r3, [pc, #424]	@ (80031ec <HAL_RCC_OscConfig+0x474>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d106      	bne.n	8003062 <HAL_RCC_OscConfig+0x2ea>
 8003054:	4b64      	ldr	r3, [pc, #400]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003058:	4a63      	ldr	r2, [pc, #396]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003060:	e01c      	b.n	800309c <HAL_RCC_OscConfig+0x324>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b05      	cmp	r3, #5
 8003068:	d10c      	bne.n	8003084 <HAL_RCC_OscConfig+0x30c>
 800306a:	4b5f      	ldr	r3, [pc, #380]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306e:	4a5e      	ldr	r2, [pc, #376]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003070:	f043 0304 	orr.w	r3, r3, #4
 8003074:	6713      	str	r3, [r2, #112]	@ 0x70
 8003076:	4b5c      	ldr	r3, [pc, #368]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307a:	4a5b      	ldr	r2, [pc, #364]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	6713      	str	r3, [r2, #112]	@ 0x70
 8003082:	e00b      	b.n	800309c <HAL_RCC_OscConfig+0x324>
 8003084:	4b58      	ldr	r3, [pc, #352]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003088:	4a57      	ldr	r2, [pc, #348]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003090:	4b55      	ldr	r3, [pc, #340]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003094:	4a54      	ldr	r2, [pc, #336]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003096:	f023 0304 	bic.w	r3, r3, #4
 800309a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d015      	beq.n	80030d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7fe fed4 	bl	8001e50 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ac:	f7fe fed0 	bl	8001e50 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e0cb      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c2:	4b49      	ldr	r3, [pc, #292]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0ee      	beq.n	80030ac <HAL_RCC_OscConfig+0x334>
 80030ce:	e014      	b.n	80030fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d0:	f7fe febe 	bl	8001e50 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d6:	e00a      	b.n	80030ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d8:	f7fe feba 	bl	8001e50 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0b5      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ee:	4b3e      	ldr	r3, [pc, #248]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1ee      	bne.n	80030d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d105      	bne.n	800310c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003100:	4b39      	ldr	r3, [pc, #228]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003104:	4a38      	ldr	r2, [pc, #224]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003106:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800310a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80a1 	beq.w	8003258 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003116:	4b34      	ldr	r3, [pc, #208]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b08      	cmp	r3, #8
 8003120:	d05c      	beq.n	80031dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d141      	bne.n	80031ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312a:	4b31      	ldr	r3, [pc, #196]	@ (80031f0 <HAL_RCC_OscConfig+0x478>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fe fe8e 	bl	8001e50 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003138:	f7fe fe8a 	bl	8001e50 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e087      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	4b27      	ldr	r3, [pc, #156]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003164:	019b      	lsls	r3, r3, #6
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316c:	085b      	lsrs	r3, r3, #1
 800316e:	3b01      	subs	r3, #1
 8003170:	041b      	lsls	r3, r3, #16
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	491b      	ldr	r1, [pc, #108]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 800317c:	4313      	orrs	r3, r2
 800317e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003180:	4b1b      	ldr	r3, [pc, #108]	@ (80031f0 <HAL_RCC_OscConfig+0x478>)
 8003182:	2201      	movs	r2, #1
 8003184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003186:	f7fe fe63 	bl	8001e50 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318e:	f7fe fe5f 	bl	8001e50 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e05c      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a0:	4b11      	ldr	r3, [pc, #68]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x416>
 80031ac:	e054      	b.n	8003258 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ae:	4b10      	ldr	r3, [pc, #64]	@ (80031f0 <HAL_RCC_OscConfig+0x478>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fe fe4c 	bl	8001e50 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031bc:	f7fe fe48 	bl	8001e50 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e045      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ce:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0x444>
 80031da:	e03d      	b.n	8003258 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d107      	bne.n	80031f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e038      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40007000 	.word	0x40007000
 80031f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003264 <HAL_RCC_OscConfig+0x4ec>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d028      	beq.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d121      	bne.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321a:	429a      	cmp	r2, r3
 800321c:	d11a      	bne.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003224:	4013      	ands	r3, r2
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800322a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800322c:	4293      	cmp	r3, r2
 800322e:	d111      	bne.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323a:	085b      	lsrs	r3, r3, #1
 800323c:	3b01      	subs	r3, #1
 800323e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d107      	bne.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800

08003268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0cc      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800327c:	4b68      	ldr	r3, [pc, #416]	@ (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d90c      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b65      	ldr	r3, [pc, #404]	@ (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b63      	ldr	r3, [pc, #396]	@ (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0b8      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d020      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032bc:	4b59      	ldr	r3, [pc, #356]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a58      	ldr	r2, [pc, #352]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032d4:	4b53      	ldr	r3, [pc, #332]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4a52      	ldr	r2, [pc, #328]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e0:	4b50      	ldr	r3, [pc, #320]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	494d      	ldr	r1, [pc, #308]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d044      	beq.n	8003388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d107      	bne.n	8003316 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b47      	ldr	r3, [pc, #284]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d119      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e07f      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d003      	beq.n	8003326 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003322:	2b03      	cmp	r3, #3
 8003324:	d107      	bne.n	8003336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003326:	4b3f      	ldr	r3, [pc, #252]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e06f      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003336:	4b3b      	ldr	r3, [pc, #236]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e067      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003346:	4b37      	ldr	r3, [pc, #220]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f023 0203 	bic.w	r2, r3, #3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	4934      	ldr	r1, [pc, #208]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	4313      	orrs	r3, r2
 8003356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003358:	f7fe fd7a 	bl	8001e50 <HAL_GetTick>
 800335c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335e:	e00a      	b.n	8003376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003360:	f7fe fd76 	bl	8001e50 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e04f      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003376:	4b2b      	ldr	r3, [pc, #172]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 020c 	and.w	r2, r3, #12
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	429a      	cmp	r2, r3
 8003386:	d1eb      	bne.n	8003360 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003388:	4b25      	ldr	r3, [pc, #148]	@ (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d20c      	bcs.n	80033b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b22      	ldr	r3, [pc, #136]	@ (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b20      	ldr	r3, [pc, #128]	@ (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e032      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033bc:	4b19      	ldr	r3, [pc, #100]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4916      	ldr	r1, [pc, #88]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033da:	4b12      	ldr	r3, [pc, #72]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	490e      	ldr	r1, [pc, #56]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ee:	f000 f821 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 80033f2:	4602      	mov	r2, r0
 80033f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	490a      	ldr	r1, [pc, #40]	@ (8003428 <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	5ccb      	ldrb	r3, [r1, r3]
 8003402:	fa22 f303 	lsr.w	r3, r2, r3
 8003406:	4a09      	ldr	r2, [pc, #36]	@ (800342c <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800340a:	4b09      	ldr	r3, [pc, #36]	@ (8003430 <HAL_RCC_ClockConfig+0x1c8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe fcda 	bl	8001dc8 <HAL_InitTick>

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40023c00 	.word	0x40023c00
 8003424:	40023800 	.word	0x40023800
 8003428:	0800965c 	.word	0x0800965c
 800342c:	20000004 	.word	0x20000004
 8003430:	20000008 	.word	0x20000008

08003434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003438:	b090      	sub	sp, #64	@ 0x40
 800343a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800344c:	4b59      	ldr	r3, [pc, #356]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 030c 	and.w	r3, r3, #12
 8003454:	2b08      	cmp	r3, #8
 8003456:	d00d      	beq.n	8003474 <HAL_RCC_GetSysClockFreq+0x40>
 8003458:	2b08      	cmp	r3, #8
 800345a:	f200 80a1 	bhi.w	80035a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x34>
 8003462:	2b04      	cmp	r3, #4
 8003464:	d003      	beq.n	800346e <HAL_RCC_GetSysClockFreq+0x3a>
 8003466:	e09b      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003468:	4b53      	ldr	r3, [pc, #332]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800346a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800346c:	e09b      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800346e:	4b53      	ldr	r3, [pc, #332]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x188>)
 8003470:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003472:	e098      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003474:	4b4f      	ldr	r3, [pc, #316]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800347c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800347e:	4b4d      	ldr	r3, [pc, #308]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d028      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800348a:	4b4a      	ldr	r3, [pc, #296]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	099b      	lsrs	r3, r3, #6
 8003490:	2200      	movs	r2, #0
 8003492:	623b      	str	r3, [r7, #32]
 8003494:	627a      	str	r2, [r7, #36]	@ 0x24
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800349c:	2100      	movs	r1, #0
 800349e:	4b47      	ldr	r3, [pc, #284]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x188>)
 80034a0:	fb03 f201 	mul.w	r2, r3, r1
 80034a4:	2300      	movs	r3, #0
 80034a6:	fb00 f303 	mul.w	r3, r0, r3
 80034aa:	4413      	add	r3, r2
 80034ac:	4a43      	ldr	r2, [pc, #268]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x188>)
 80034ae:	fba0 1202 	umull	r1, r2, r0, r2
 80034b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034b4:	460a      	mov	r2, r1
 80034b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80034b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034ba:	4413      	add	r3, r2
 80034bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c0:	2200      	movs	r2, #0
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	61fa      	str	r2, [r7, #28]
 80034c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80034ce:	f7fd fbdb 	bl	8000c88 <__aeabi_uldivmod>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4613      	mov	r3, r2
 80034d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034da:	e053      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034dc:	4b35      	ldr	r3, [pc, #212]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	099b      	lsrs	r3, r3, #6
 80034e2:	2200      	movs	r2, #0
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	617a      	str	r2, [r7, #20]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034ee:	f04f 0b00 	mov.w	fp, #0
 80034f2:	4652      	mov	r2, sl
 80034f4:	465b      	mov	r3, fp
 80034f6:	f04f 0000 	mov.w	r0, #0
 80034fa:	f04f 0100 	mov.w	r1, #0
 80034fe:	0159      	lsls	r1, r3, #5
 8003500:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003504:	0150      	lsls	r0, r2, #5
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	ebb2 080a 	subs.w	r8, r2, sl
 800350e:	eb63 090b 	sbc.w	r9, r3, fp
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800351e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003522:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003526:	ebb2 0408 	subs.w	r4, r2, r8
 800352a:	eb63 0509 	sbc.w	r5, r3, r9
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	00eb      	lsls	r3, r5, #3
 8003538:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800353c:	00e2      	lsls	r2, r4, #3
 800353e:	4614      	mov	r4, r2
 8003540:	461d      	mov	r5, r3
 8003542:	eb14 030a 	adds.w	r3, r4, sl
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	eb45 030b 	adc.w	r3, r5, fp
 800354c:	607b      	str	r3, [r7, #4]
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	e9d7 4500 	ldrd	r4, r5, [r7]
 800355a:	4629      	mov	r1, r5
 800355c:	028b      	lsls	r3, r1, #10
 800355e:	4621      	mov	r1, r4
 8003560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003564:	4621      	mov	r1, r4
 8003566:	028a      	lsls	r2, r1, #10
 8003568:	4610      	mov	r0, r2
 800356a:	4619      	mov	r1, r3
 800356c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356e:	2200      	movs	r2, #0
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	60fa      	str	r2, [r7, #12]
 8003574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003578:	f7fd fb86 	bl	8000c88 <__aeabi_uldivmod>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4613      	mov	r3, r2
 8003582:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003584:	4b0b      	ldr	r3, [pc, #44]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	0c1b      	lsrs	r3, r3, #16
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	3301      	adds	r3, #1
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003594:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003598:	fbb2 f3f3 	udiv	r3, r2, r3
 800359c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800359e:	e002      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035a0:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80035a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3740      	adds	r7, #64	@ 0x40
 80035ac:	46bd      	mov	sp, r7
 80035ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035b2:	bf00      	nop
 80035b4:	40023800 	.word	0x40023800
 80035b8:	00f42400 	.word	0x00f42400
 80035bc:	017d7840 	.word	0x017d7840

080035c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035c4:	4b03      	ldr	r3, [pc, #12]	@ (80035d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035c6:	681b      	ldr	r3, [r3, #0]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20000004 	.word	0x20000004

080035d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035dc:	f7ff fff0 	bl	80035c0 <HAL_RCC_GetHCLKFreq>
 80035e0:	4602      	mov	r2, r0
 80035e2:	4b05      	ldr	r3, [pc, #20]	@ (80035f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	0a9b      	lsrs	r3, r3, #10
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	4903      	ldr	r1, [pc, #12]	@ (80035fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ee:	5ccb      	ldrb	r3, [r1, r3]
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40023800 	.word	0x40023800
 80035fc:	0800966c 	.word	0x0800966c

08003600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003604:	f7ff ffdc 	bl	80035c0 <HAL_RCC_GetHCLKFreq>
 8003608:	4602      	mov	r2, r0
 800360a:	4b05      	ldr	r3, [pc, #20]	@ (8003620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	0b5b      	lsrs	r3, r3, #13
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	4903      	ldr	r1, [pc, #12]	@ (8003624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003616:	5ccb      	ldrb	r3, [r1, r3]
 8003618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800361c:	4618      	mov	r0, r3
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40023800 	.word	0x40023800
 8003624:	0800966c 	.word	0x0800966c

08003628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e041      	b.n	80036be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fe f9d8 	bl	8001a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3304      	adds	r3, #4
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f000 fb34 	bl	8003cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d001      	beq.n	80036e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e04e      	b.n	800377e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a23      	ldr	r2, [pc, #140]	@ (800378c <HAL_TIM_Base_Start_IT+0xc4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d022      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800370a:	d01d      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1f      	ldr	r2, [pc, #124]	@ (8003790 <HAL_TIM_Base_Start_IT+0xc8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d018      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1e      	ldr	r2, [pc, #120]	@ (8003794 <HAL_TIM_Base_Start_IT+0xcc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d013      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1c      	ldr	r2, [pc, #112]	@ (8003798 <HAL_TIM_Base_Start_IT+0xd0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00e      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1b      	ldr	r2, [pc, #108]	@ (800379c <HAL_TIM_Base_Start_IT+0xd4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d009      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a19      	ldr	r2, [pc, #100]	@ (80037a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d004      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a18      	ldr	r2, [pc, #96]	@ (80037a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d111      	bne.n	800376c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b06      	cmp	r3, #6
 8003758:	d010      	beq.n	800377c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0201 	orr.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376a:	e007      	b.n	800377c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40010000 	.word	0x40010000
 8003790:	40000400 	.word	0x40000400
 8003794:	40000800 	.word	0x40000800
 8003798:	40000c00 	.word	0x40000c00
 800379c:	40010400 	.word	0x40010400
 80037a0:	40014000 	.word	0x40014000
 80037a4:	40001800 	.word	0x40001800

080037a8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e041      	b.n	800383e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f839 	bl	8003846 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3304      	adds	r3, #4
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f000 fa74 	bl	8003cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d020      	beq.n	80038be <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d01b      	beq.n	80038be <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f06f 0202 	mvn.w	r2, #2
 800388e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f9f6 	bl	8003c96 <HAL_TIM_IC_CaptureCallback>
 80038aa:	e005      	b.n	80038b8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f9e8 	bl	8003c82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f9f9 	bl	8003caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d020      	beq.n	800390a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d01b      	beq.n	800390a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f06f 0204 	mvn.w	r2, #4
 80038da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f9d0 	bl	8003c96 <HAL_TIM_IC_CaptureCallback>
 80038f6:	e005      	b.n	8003904 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f9c2 	bl	8003c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f9d3 	bl	8003caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b00      	cmp	r3, #0
 8003912:	d020      	beq.n	8003956 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d01b      	beq.n	8003956 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f06f 0208 	mvn.w	r2, #8
 8003926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2204      	movs	r2, #4
 800392c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f9aa 	bl	8003c96 <HAL_TIM_IC_CaptureCallback>
 8003942:	e005      	b.n	8003950 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f99c 	bl	8003c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f9ad 	bl	8003caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b00      	cmp	r3, #0
 800395e:	d020      	beq.n	80039a2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 0310 	and.w	r3, r3, #16
 8003966:	2b00      	cmp	r3, #0
 8003968:	d01b      	beq.n	80039a2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f06f 0210 	mvn.w	r2, #16
 8003972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2208      	movs	r2, #8
 8003978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f984 	bl	8003c96 <HAL_TIM_IC_CaptureCallback>
 800398e:	e005      	b.n	800399c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f976 	bl	8003c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f987 	bl	8003caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00c      	beq.n	80039c6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d007      	beq.n	80039c6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f06f 0201 	mvn.w	r2, #1
 80039be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7fd fd33 	bl	800142c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00c      	beq.n	80039ea <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d007      	beq.n	80039ea <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fcf1 	bl	80043cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00c      	beq.n	8003a0e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d007      	beq.n	8003a0e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f958 	bl	8003cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00c      	beq.n	8003a32 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f06f 0220 	mvn.w	r2, #32
 8003a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fcc3 	bl	80043b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e048      	b.n	8003aec <HAL_TIM_OC_ConfigChannel+0xb0>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b0c      	cmp	r3, #12
 8003a66:	d839      	bhi.n	8003adc <HAL_TIM_OC_ConfigChannel+0xa0>
 8003a68:	a201      	add	r2, pc, #4	@ (adr r2, 8003a70 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08003aa5 	.word	0x08003aa5
 8003a74:	08003add 	.word	0x08003add
 8003a78:	08003add 	.word	0x08003add
 8003a7c:	08003add 	.word	0x08003add
 8003a80:	08003ab3 	.word	0x08003ab3
 8003a84:	08003add 	.word	0x08003add
 8003a88:	08003add 	.word	0x08003add
 8003a8c:	08003add 	.word	0x08003add
 8003a90:	08003ac1 	.word	0x08003ac1
 8003a94:	08003add 	.word	0x08003add
 8003a98:	08003add 	.word	0x08003add
 8003a9c:	08003add 	.word	0x08003add
 8003aa0:	08003acf 	.word	0x08003acf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 f9be 	bl	8003e2c <TIM_OC1_SetConfig>
      break;
 8003ab0:	e017      	b.n	8003ae2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fa27 	bl	8003f0c <TIM_OC2_SetConfig>
      break;
 8003abe:	e010      	b.n	8003ae2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fa96 	bl	8003ff8 <TIM_OC3_SetConfig>
      break;
 8003acc:	e009      	b.n	8003ae2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fb03 	bl	80040e0 <TIM_OC4_SetConfig>
      break;
 8003ada:	e002      	b.n	8003ae2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	75fb      	strb	r3, [r7, #23]
      break;
 8003ae0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_TIM_ConfigClockSource+0x1c>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e0b4      	b.n	8003c7a <HAL_TIM_ConfigClockSource+0x186>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b48:	d03e      	beq.n	8003bc8 <HAL_TIM_ConfigClockSource+0xd4>
 8003b4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b4e:	f200 8087 	bhi.w	8003c60 <HAL_TIM_ConfigClockSource+0x16c>
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b56:	f000 8086 	beq.w	8003c66 <HAL_TIM_ConfigClockSource+0x172>
 8003b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b5e:	d87f      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x16c>
 8003b60:	2b70      	cmp	r3, #112	@ 0x70
 8003b62:	d01a      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0xa6>
 8003b64:	2b70      	cmp	r3, #112	@ 0x70
 8003b66:	d87b      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x16c>
 8003b68:	2b60      	cmp	r3, #96	@ 0x60
 8003b6a:	d050      	beq.n	8003c0e <HAL_TIM_ConfigClockSource+0x11a>
 8003b6c:	2b60      	cmp	r3, #96	@ 0x60
 8003b6e:	d877      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	2b50      	cmp	r3, #80	@ 0x50
 8003b72:	d03c      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0xfa>
 8003b74:	2b50      	cmp	r3, #80	@ 0x50
 8003b76:	d873      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x16c>
 8003b78:	2b40      	cmp	r3, #64	@ 0x40
 8003b7a:	d058      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x13a>
 8003b7c:	2b40      	cmp	r3, #64	@ 0x40
 8003b7e:	d86f      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x16c>
 8003b80:	2b30      	cmp	r3, #48	@ 0x30
 8003b82:	d064      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0x15a>
 8003b84:	2b30      	cmp	r3, #48	@ 0x30
 8003b86:	d86b      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x16c>
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	d060      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0x15a>
 8003b8c:	2b20      	cmp	r3, #32
 8003b8e:	d867      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x16c>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d05c      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0x15a>
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d05a      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0x15a>
 8003b98:	e062      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003baa:	f000 fb69 	bl	8004280 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003bbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	609a      	str	r2, [r3, #8]
      break;
 8003bc6:	e04f      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bd8:	f000 fb52 	bl	8004280 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bea:	609a      	str	r2, [r3, #8]
      break;
 8003bec:	e03c      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f000 fac6 	bl	800418c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2150      	movs	r1, #80	@ 0x50
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fb1f 	bl	800424a <TIM_ITRx_SetConfig>
      break;
 8003c0c:	e02c      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f000 fae5 	bl	80041ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2160      	movs	r1, #96	@ 0x60
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fb0f 	bl	800424a <TIM_ITRx_SetConfig>
      break;
 8003c2c:	e01c      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f000 faa6 	bl	800418c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2140      	movs	r1, #64	@ 0x40
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 faff 	bl	800424a <TIM_ITRx_SetConfig>
      break;
 8003c4c:	e00c      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4619      	mov	r1, r3
 8003c58:	4610      	mov	r0, r2
 8003c5a:	f000 faf6 	bl	800424a <TIM_ITRx_SetConfig>
      break;
 8003c5e:	e003      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	73fb      	strb	r3, [r7, #15]
      break;
 8003c64:	e000      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
	...

08003cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a46      	ldr	r2, [pc, #280]	@ (8003e00 <TIM_Base_SetConfig+0x12c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d013      	beq.n	8003d14 <TIM_Base_SetConfig+0x40>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cf2:	d00f      	beq.n	8003d14 <TIM_Base_SetConfig+0x40>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a43      	ldr	r2, [pc, #268]	@ (8003e04 <TIM_Base_SetConfig+0x130>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00b      	beq.n	8003d14 <TIM_Base_SetConfig+0x40>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a42      	ldr	r2, [pc, #264]	@ (8003e08 <TIM_Base_SetConfig+0x134>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d007      	beq.n	8003d14 <TIM_Base_SetConfig+0x40>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a41      	ldr	r2, [pc, #260]	@ (8003e0c <TIM_Base_SetConfig+0x138>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d003      	beq.n	8003d14 <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a40      	ldr	r2, [pc, #256]	@ (8003e10 <TIM_Base_SetConfig+0x13c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d108      	bne.n	8003d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a35      	ldr	r2, [pc, #212]	@ (8003e00 <TIM_Base_SetConfig+0x12c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d02b      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d34:	d027      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a32      	ldr	r2, [pc, #200]	@ (8003e04 <TIM_Base_SetConfig+0x130>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d023      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a31      	ldr	r2, [pc, #196]	@ (8003e08 <TIM_Base_SetConfig+0x134>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d01f      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a30      	ldr	r2, [pc, #192]	@ (8003e0c <TIM_Base_SetConfig+0x138>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01b      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a2f      	ldr	r2, [pc, #188]	@ (8003e10 <TIM_Base_SetConfig+0x13c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d017      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a2e      	ldr	r2, [pc, #184]	@ (8003e14 <TIM_Base_SetConfig+0x140>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d013      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a2d      	ldr	r2, [pc, #180]	@ (8003e18 <TIM_Base_SetConfig+0x144>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d00f      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2c      	ldr	r2, [pc, #176]	@ (8003e1c <TIM_Base_SetConfig+0x148>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00b      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a2b      	ldr	r2, [pc, #172]	@ (8003e20 <TIM_Base_SetConfig+0x14c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d007      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2a      	ldr	r2, [pc, #168]	@ (8003e24 <TIM_Base_SetConfig+0x150>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d003      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a29      	ldr	r2, [pc, #164]	@ (8003e28 <TIM_Base_SetConfig+0x154>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d108      	bne.n	8003d98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a10      	ldr	r2, [pc, #64]	@ (8003e00 <TIM_Base_SetConfig+0x12c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <TIM_Base_SetConfig+0xf8>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a12      	ldr	r2, [pc, #72]	@ (8003e10 <TIM_Base_SetConfig+0x13c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d103      	bne.n	8003dd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d105      	bne.n	8003df2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f023 0201 	bic.w	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	611a      	str	r2, [r3, #16]
  }
}
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40010000 	.word	0x40010000
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40000800 	.word	0x40000800
 8003e0c:	40000c00 	.word	0x40000c00
 8003e10:	40010400 	.word	0x40010400
 8003e14:	40014000 	.word	0x40014000
 8003e18:	40014400 	.word	0x40014400
 8003e1c:	40014800 	.word	0x40014800
 8003e20:	40001800 	.word	0x40001800
 8003e24:	40001c00 	.word	0x40001c00
 8003e28:	40002000 	.word	0x40002000

08003e2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f023 0201 	bic.w	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0303 	bic.w	r3, r3, #3
 8003e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f023 0302 	bic.w	r3, r3, #2
 8003e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a20      	ldr	r2, [pc, #128]	@ (8003f04 <TIM_OC1_SetConfig+0xd8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <TIM_OC1_SetConfig+0x64>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003f08 <TIM_OC1_SetConfig+0xdc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d10c      	bne.n	8003eaa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0308 	bic.w	r3, r3, #8
 8003e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f023 0304 	bic.w	r3, r3, #4
 8003ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a15      	ldr	r2, [pc, #84]	@ (8003f04 <TIM_OC1_SetConfig+0xd8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d003      	beq.n	8003eba <TIM_OC1_SetConfig+0x8e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a14      	ldr	r2, [pc, #80]	@ (8003f08 <TIM_OC1_SetConfig+0xdc>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d111      	bne.n	8003ede <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	621a      	str	r2, [r3, #32]
}
 8003ef8:	bf00      	nop
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	40010000 	.word	0x40010000
 8003f08:	40010400 	.word	0x40010400

08003f0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f023 0210 	bic.w	r2, r3, #16
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	021b      	lsls	r3, r3, #8
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f023 0320 	bic.w	r3, r3, #32
 8003f56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a22      	ldr	r2, [pc, #136]	@ (8003ff0 <TIM_OC2_SetConfig+0xe4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d003      	beq.n	8003f74 <TIM_OC2_SetConfig+0x68>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a21      	ldr	r2, [pc, #132]	@ (8003ff4 <TIM_OC2_SetConfig+0xe8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d10d      	bne.n	8003f90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a17      	ldr	r2, [pc, #92]	@ (8003ff0 <TIM_OC2_SetConfig+0xe4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d003      	beq.n	8003fa0 <TIM_OC2_SetConfig+0x94>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a16      	ldr	r2, [pc, #88]	@ (8003ff4 <TIM_OC2_SetConfig+0xe8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d113      	bne.n	8003fc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	621a      	str	r2, [r3, #32]
}
 8003fe2:	bf00      	nop
 8003fe4:	371c      	adds	r7, #28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40010400 	.word	0x40010400

08003ff8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0303 	bic.w	r3, r3, #3
 800402e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a21      	ldr	r2, [pc, #132]	@ (80040d8 <TIM_OC3_SetConfig+0xe0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d003      	beq.n	800405e <TIM_OC3_SetConfig+0x66>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a20      	ldr	r2, [pc, #128]	@ (80040dc <TIM_OC3_SetConfig+0xe4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d10d      	bne.n	800407a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a16      	ldr	r2, [pc, #88]	@ (80040d8 <TIM_OC3_SetConfig+0xe0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d003      	beq.n	800408a <TIM_OC3_SetConfig+0x92>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a15      	ldr	r2, [pc, #84]	@ (80040dc <TIM_OC3_SetConfig+0xe4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d113      	bne.n	80040b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	621a      	str	r2, [r3, #32]
}
 80040cc:	bf00      	nop
 80040ce:	371c      	adds	r7, #28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	40010000 	.word	0x40010000
 80040dc:	40010400 	.word	0x40010400

080040e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800410e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800412a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	031b      	lsls	r3, r3, #12
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a12      	ldr	r2, [pc, #72]	@ (8004184 <TIM_OC4_SetConfig+0xa4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <TIM_OC4_SetConfig+0x68>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a11      	ldr	r2, [pc, #68]	@ (8004188 <TIM_OC4_SetConfig+0xa8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d109      	bne.n	800415c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800414e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	019b      	lsls	r3, r3, #6
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	621a      	str	r2, [r3, #32]
}
 8004176:	bf00      	nop
 8004178:	371c      	adds	r7, #28
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40010000 	.word	0x40010000
 8004188:	40010400 	.word	0x40010400

0800418c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f023 0201 	bic.w	r2, r3, #1
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f023 030a 	bic.w	r3, r3, #10
 80041c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	621a      	str	r2, [r3, #32]
}
 80041de:	bf00      	nop
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b087      	sub	sp, #28
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f023 0210 	bic.w	r2, r3, #16
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	031b      	lsls	r3, r3, #12
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004226:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	621a      	str	r2, [r3, #32]
}
 800423e:	bf00      	nop
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800424a:	b480      	push	{r7}
 800424c:	b085      	sub	sp, #20
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	f043 0307 	orr.w	r3, r3, #7
 800426c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	609a      	str	r2, [r3, #8]
}
 8004274:	bf00      	nop
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800429a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	021a      	lsls	r2, r3, #8
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	609a      	str	r2, [r3, #8]
}
 80042b4:	bf00      	nop
 80042b6:	371c      	adds	r7, #28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e05a      	b.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a21      	ldr	r2, [pc, #132]	@ (800439c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d022      	beq.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004324:	d01d      	beq.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a1d      	ldr	r2, [pc, #116]	@ (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d018      	beq.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1b      	ldr	r2, [pc, #108]	@ (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a1a      	ldr	r2, [pc, #104]	@ (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00e      	beq.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a18      	ldr	r2, [pc, #96]	@ (80043ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d009      	beq.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a17      	ldr	r2, [pc, #92]	@ (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d004      	beq.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a15      	ldr	r2, [pc, #84]	@ (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10c      	bne.n	800437c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	4313      	orrs	r3, r2
 8004372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40010000 	.word	0x40010000
 80043a0:	40000400 	.word	0x40000400
 80043a4:	40000800 	.word	0x40000800
 80043a8:	40000c00 	.word	0x40000c00
 80043ac:	40010400 	.word	0x40010400
 80043b0:	40014000 	.word	0x40014000
 80043b4:	40001800 	.word	0x40001800

080043b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e042      	b.n	8004478 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fd fb24 	bl	8001a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2224      	movs	r2, #36	@ 0x24
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f82b 	bl	8004480 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695a      	ldr	r2, [r3, #20]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004484:	b0c0      	sub	sp, #256	@ 0x100
 8004486:	af00      	add	r7, sp, #0
 8004488:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800448c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449c:	68d9      	ldr	r1, [r3, #12]
 800449e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	ea40 0301 	orr.w	r3, r0, r1
 80044a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	431a      	orrs	r2, r3
 80044c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80044d8:	f021 010c 	bic.w	r1, r1, #12
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80044e6:	430b      	orrs	r3, r1
 80044e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80044f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fa:	6999      	ldr	r1, [r3, #24]
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	ea40 0301 	orr.w	r3, r0, r1
 8004506:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	4b8f      	ldr	r3, [pc, #572]	@ (800474c <UART_SetConfig+0x2cc>)
 8004510:	429a      	cmp	r2, r3
 8004512:	d005      	beq.n	8004520 <UART_SetConfig+0xa0>
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4b8d      	ldr	r3, [pc, #564]	@ (8004750 <UART_SetConfig+0x2d0>)
 800451c:	429a      	cmp	r2, r3
 800451e:	d104      	bne.n	800452a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004520:	f7ff f86e 	bl	8003600 <HAL_RCC_GetPCLK2Freq>
 8004524:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004528:	e003      	b.n	8004532 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800452a:	f7ff f855 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 800452e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800453c:	f040 810c 	bne.w	8004758 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004544:	2200      	movs	r2, #0
 8004546:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800454a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800454e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004552:	4622      	mov	r2, r4
 8004554:	462b      	mov	r3, r5
 8004556:	1891      	adds	r1, r2, r2
 8004558:	65b9      	str	r1, [r7, #88]	@ 0x58
 800455a:	415b      	adcs	r3, r3
 800455c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800455e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004562:	4621      	mov	r1, r4
 8004564:	eb12 0801 	adds.w	r8, r2, r1
 8004568:	4629      	mov	r1, r5
 800456a:	eb43 0901 	adc.w	r9, r3, r1
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800457a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800457e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004582:	4690      	mov	r8, r2
 8004584:	4699      	mov	r9, r3
 8004586:	4623      	mov	r3, r4
 8004588:	eb18 0303 	adds.w	r3, r8, r3
 800458c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004590:	462b      	mov	r3, r5
 8004592:	eb49 0303 	adc.w	r3, r9, r3
 8004596:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800459a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80045aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80045ae:	460b      	mov	r3, r1
 80045b0:	18db      	adds	r3, r3, r3
 80045b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80045b4:	4613      	mov	r3, r2
 80045b6:	eb42 0303 	adc.w	r3, r2, r3
 80045ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80045bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80045c4:	f7fc fb60 	bl	8000c88 <__aeabi_uldivmod>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4b61      	ldr	r3, [pc, #388]	@ (8004754 <UART_SetConfig+0x2d4>)
 80045ce:	fba3 2302 	umull	r2, r3, r3, r2
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	011c      	lsls	r4, r3, #4
 80045d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80045e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80045e8:	4642      	mov	r2, r8
 80045ea:	464b      	mov	r3, r9
 80045ec:	1891      	adds	r1, r2, r2
 80045ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80045f0:	415b      	adcs	r3, r3
 80045f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80045f8:	4641      	mov	r1, r8
 80045fa:	eb12 0a01 	adds.w	sl, r2, r1
 80045fe:	4649      	mov	r1, r9
 8004600:	eb43 0b01 	adc.w	fp, r3, r1
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004610:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004618:	4692      	mov	sl, r2
 800461a:	469b      	mov	fp, r3
 800461c:	4643      	mov	r3, r8
 800461e:	eb1a 0303 	adds.w	r3, sl, r3
 8004622:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004626:	464b      	mov	r3, r9
 8004628:	eb4b 0303 	adc.w	r3, fp, r3
 800462c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800463c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004640:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004644:	460b      	mov	r3, r1
 8004646:	18db      	adds	r3, r3, r3
 8004648:	643b      	str	r3, [r7, #64]	@ 0x40
 800464a:	4613      	mov	r3, r2
 800464c:	eb42 0303 	adc.w	r3, r2, r3
 8004650:	647b      	str	r3, [r7, #68]	@ 0x44
 8004652:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004656:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800465a:	f7fc fb15 	bl	8000c88 <__aeabi_uldivmod>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4611      	mov	r1, r2
 8004664:	4b3b      	ldr	r3, [pc, #236]	@ (8004754 <UART_SetConfig+0x2d4>)
 8004666:	fba3 2301 	umull	r2, r3, r3, r1
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	2264      	movs	r2, #100	@ 0x64
 800466e:	fb02 f303 	mul.w	r3, r2, r3
 8004672:	1acb      	subs	r3, r1, r3
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800467a:	4b36      	ldr	r3, [pc, #216]	@ (8004754 <UART_SetConfig+0x2d4>)
 800467c:	fba3 2302 	umull	r2, r3, r3, r2
 8004680:	095b      	lsrs	r3, r3, #5
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004688:	441c      	add	r4, r3
 800468a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800468e:	2200      	movs	r2, #0
 8004690:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004694:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004698:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800469c:	4642      	mov	r2, r8
 800469e:	464b      	mov	r3, r9
 80046a0:	1891      	adds	r1, r2, r2
 80046a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046a4:	415b      	adcs	r3, r3
 80046a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80046ac:	4641      	mov	r1, r8
 80046ae:	1851      	adds	r1, r2, r1
 80046b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80046b2:	4649      	mov	r1, r9
 80046b4:	414b      	adcs	r3, r1
 80046b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80046c4:	4659      	mov	r1, fp
 80046c6:	00cb      	lsls	r3, r1, #3
 80046c8:	4651      	mov	r1, sl
 80046ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ce:	4651      	mov	r1, sl
 80046d0:	00ca      	lsls	r2, r1, #3
 80046d2:	4610      	mov	r0, r2
 80046d4:	4619      	mov	r1, r3
 80046d6:	4603      	mov	r3, r0
 80046d8:	4642      	mov	r2, r8
 80046da:	189b      	adds	r3, r3, r2
 80046dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046e0:	464b      	mov	r3, r9
 80046e2:	460a      	mov	r2, r1
 80046e4:	eb42 0303 	adc.w	r3, r2, r3
 80046e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80046f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80046fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004700:	460b      	mov	r3, r1
 8004702:	18db      	adds	r3, r3, r3
 8004704:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004706:	4613      	mov	r3, r2
 8004708:	eb42 0303 	adc.w	r3, r2, r3
 800470c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800470e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004712:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004716:	f7fc fab7 	bl	8000c88 <__aeabi_uldivmod>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	4b0d      	ldr	r3, [pc, #52]	@ (8004754 <UART_SetConfig+0x2d4>)
 8004720:	fba3 1302 	umull	r1, r3, r3, r2
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	2164      	movs	r1, #100	@ 0x64
 8004728:	fb01 f303 	mul.w	r3, r1, r3
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	3332      	adds	r3, #50	@ 0x32
 8004732:	4a08      	ldr	r2, [pc, #32]	@ (8004754 <UART_SetConfig+0x2d4>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	095b      	lsrs	r3, r3, #5
 800473a:	f003 0207 	and.w	r2, r3, #7
 800473e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4422      	add	r2, r4
 8004746:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004748:	e106      	b.n	8004958 <UART_SetConfig+0x4d8>
 800474a:	bf00      	nop
 800474c:	40011000 	.word	0x40011000
 8004750:	40011400 	.word	0x40011400
 8004754:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800475c:	2200      	movs	r2, #0
 800475e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004762:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004766:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800476a:	4642      	mov	r2, r8
 800476c:	464b      	mov	r3, r9
 800476e:	1891      	adds	r1, r2, r2
 8004770:	6239      	str	r1, [r7, #32]
 8004772:	415b      	adcs	r3, r3
 8004774:	627b      	str	r3, [r7, #36]	@ 0x24
 8004776:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800477a:	4641      	mov	r1, r8
 800477c:	1854      	adds	r4, r2, r1
 800477e:	4649      	mov	r1, r9
 8004780:	eb43 0501 	adc.w	r5, r3, r1
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	00eb      	lsls	r3, r5, #3
 800478e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004792:	00e2      	lsls	r2, r4, #3
 8004794:	4614      	mov	r4, r2
 8004796:	461d      	mov	r5, r3
 8004798:	4643      	mov	r3, r8
 800479a:	18e3      	adds	r3, r4, r3
 800479c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047a0:	464b      	mov	r3, r9
 80047a2:	eb45 0303 	adc.w	r3, r5, r3
 80047a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047ba:	f04f 0200 	mov.w	r2, #0
 80047be:	f04f 0300 	mov.w	r3, #0
 80047c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80047c6:	4629      	mov	r1, r5
 80047c8:	008b      	lsls	r3, r1, #2
 80047ca:	4621      	mov	r1, r4
 80047cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047d0:	4621      	mov	r1, r4
 80047d2:	008a      	lsls	r2, r1, #2
 80047d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80047d8:	f7fc fa56 	bl	8000c88 <__aeabi_uldivmod>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4b60      	ldr	r3, [pc, #384]	@ (8004964 <UART_SetConfig+0x4e4>)
 80047e2:	fba3 2302 	umull	r2, r3, r3, r2
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	011c      	lsls	r4, r3, #4
 80047ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80047f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80047fc:	4642      	mov	r2, r8
 80047fe:	464b      	mov	r3, r9
 8004800:	1891      	adds	r1, r2, r2
 8004802:	61b9      	str	r1, [r7, #24]
 8004804:	415b      	adcs	r3, r3
 8004806:	61fb      	str	r3, [r7, #28]
 8004808:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800480c:	4641      	mov	r1, r8
 800480e:	1851      	adds	r1, r2, r1
 8004810:	6139      	str	r1, [r7, #16]
 8004812:	4649      	mov	r1, r9
 8004814:	414b      	adcs	r3, r1
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004824:	4659      	mov	r1, fp
 8004826:	00cb      	lsls	r3, r1, #3
 8004828:	4651      	mov	r1, sl
 800482a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800482e:	4651      	mov	r1, sl
 8004830:	00ca      	lsls	r2, r1, #3
 8004832:	4610      	mov	r0, r2
 8004834:	4619      	mov	r1, r3
 8004836:	4603      	mov	r3, r0
 8004838:	4642      	mov	r2, r8
 800483a:	189b      	adds	r3, r3, r2
 800483c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004840:	464b      	mov	r3, r9
 8004842:	460a      	mov	r2, r1
 8004844:	eb42 0303 	adc.w	r3, r2, r3
 8004848:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004856:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004864:	4649      	mov	r1, r9
 8004866:	008b      	lsls	r3, r1, #2
 8004868:	4641      	mov	r1, r8
 800486a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800486e:	4641      	mov	r1, r8
 8004870:	008a      	lsls	r2, r1, #2
 8004872:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004876:	f7fc fa07 	bl	8000c88 <__aeabi_uldivmod>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4611      	mov	r1, r2
 8004880:	4b38      	ldr	r3, [pc, #224]	@ (8004964 <UART_SetConfig+0x4e4>)
 8004882:	fba3 2301 	umull	r2, r3, r3, r1
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	2264      	movs	r2, #100	@ 0x64
 800488a:	fb02 f303 	mul.w	r3, r2, r3
 800488e:	1acb      	subs	r3, r1, r3
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	3332      	adds	r3, #50	@ 0x32
 8004894:	4a33      	ldr	r2, [pc, #204]	@ (8004964 <UART_SetConfig+0x4e4>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048a0:	441c      	add	r4, r3
 80048a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048a6:	2200      	movs	r2, #0
 80048a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80048aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80048ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80048b0:	4642      	mov	r2, r8
 80048b2:	464b      	mov	r3, r9
 80048b4:	1891      	adds	r1, r2, r2
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	415b      	adcs	r3, r3
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048c0:	4641      	mov	r1, r8
 80048c2:	1851      	adds	r1, r2, r1
 80048c4:	6039      	str	r1, [r7, #0]
 80048c6:	4649      	mov	r1, r9
 80048c8:	414b      	adcs	r3, r1
 80048ca:	607b      	str	r3, [r7, #4]
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048d8:	4659      	mov	r1, fp
 80048da:	00cb      	lsls	r3, r1, #3
 80048dc:	4651      	mov	r1, sl
 80048de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048e2:	4651      	mov	r1, sl
 80048e4:	00ca      	lsls	r2, r1, #3
 80048e6:	4610      	mov	r0, r2
 80048e8:	4619      	mov	r1, r3
 80048ea:	4603      	mov	r3, r0
 80048ec:	4642      	mov	r2, r8
 80048ee:	189b      	adds	r3, r3, r2
 80048f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048f2:	464b      	mov	r3, r9
 80048f4:	460a      	mov	r2, r1
 80048f6:	eb42 0303 	adc.w	r3, r2, r3
 80048fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	663b      	str	r3, [r7, #96]	@ 0x60
 8004906:	667a      	str	r2, [r7, #100]	@ 0x64
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004914:	4649      	mov	r1, r9
 8004916:	008b      	lsls	r3, r1, #2
 8004918:	4641      	mov	r1, r8
 800491a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800491e:	4641      	mov	r1, r8
 8004920:	008a      	lsls	r2, r1, #2
 8004922:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004926:	f7fc f9af 	bl	8000c88 <__aeabi_uldivmod>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4b0d      	ldr	r3, [pc, #52]	@ (8004964 <UART_SetConfig+0x4e4>)
 8004930:	fba3 1302 	umull	r1, r3, r3, r2
 8004934:	095b      	lsrs	r3, r3, #5
 8004936:	2164      	movs	r1, #100	@ 0x64
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	3332      	adds	r3, #50	@ 0x32
 8004942:	4a08      	ldr	r2, [pc, #32]	@ (8004964 <UART_SetConfig+0x4e4>)
 8004944:	fba2 2303 	umull	r2, r3, r2, r3
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	f003 020f 	and.w	r2, r3, #15
 800494e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4422      	add	r2, r4
 8004956:	609a      	str	r2, [r3, #8]
}
 8004958:	bf00      	nop
 800495a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800495e:	46bd      	mov	sp, r7
 8004960:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004964:	51eb851f 	.word	0x51eb851f

08004968 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8004972:	4a33      	ldr	r2, [pc, #204]	@ (8004a40 <HD44780_Init+0xd8>)
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8004978:	4b32      	ldr	r3, [pc, #200]	@ (8004a44 <HD44780_Init+0xdc>)
 800497a:	2208      	movs	r2, #8
 800497c:	701a      	strb	r2, [r3, #0]

  // Configure a função do display de acordo com o número de linhas:
  if(dpRows == 1)
 800497e:	4b30      	ldr	r3, [pc, #192]	@ (8004a40 <HD44780_Init+0xd8>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d103      	bne.n	800498e <HD44780_Init+0x26>
  {
      dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x10DOTS;
 8004986:	4b30      	ldr	r3, [pc, #192]	@ (8004a48 <HD44780_Init+0xe0>)
 8004988:	2204      	movs	r2, #4
 800498a:	701a      	strb	r2, [r3, #0]
 800498c:	e002      	b.n	8004994 <HD44780_Init+0x2c>
  }
  else  // Para 2 ou 4 linhas
  {
      dpFunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 800498e:	4b2e      	ldr	r3, [pc, #184]	@ (8004a48 <HD44780_Init+0xe0>)
 8004990:	2208      	movs	r2, #8
 8004992:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8004994:	f000 f9aa 	bl	8004cec <DelayInit>
  HAL_Delay(50);
 8004998:	2032      	movs	r0, #50	@ 0x32
 800499a:	f7fd fa65 	bl	8001e68 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800499e:	4b29      	ldr	r3, [pc, #164]	@ (8004a44 <HD44780_Init+0xdc>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 f968 	bl	8004c78 <ExpanderWrite>
  HAL_Delay(1000);
 80049a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80049ac:	f7fd fa5c 	bl	8001e68 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80049b0:	2030      	movs	r0, #48	@ 0x30
 80049b2:	f000 f950 	bl	8004c56 <Write4Bits>
  DelayUS(4500);
 80049b6:	f241 1094 	movw	r0, #4500	@ 0x1194
 80049ba:	f000 f9c1 	bl	8004d40 <DelayUS>

  Write4Bits(0x03 << 4);
 80049be:	2030      	movs	r0, #48	@ 0x30
 80049c0:	f000 f949 	bl	8004c56 <Write4Bits>
  DelayUS(4500);
 80049c4:	f241 1094 	movw	r0, #4500	@ 0x1194
 80049c8:	f000 f9ba 	bl	8004d40 <DelayUS>

  Write4Bits(0x03 << 4);
 80049cc:	2030      	movs	r0, #48	@ 0x30
 80049ce:	f000 f942 	bl	8004c56 <Write4Bits>
  DelayUS(4500);
 80049d2:	f241 1094 	movw	r0, #4500	@ 0x1194
 80049d6:	f000 f9b3 	bl	8004d40 <DelayUS>

  Write4Bits(0x02 << 4);
 80049da:	2020      	movs	r0, #32
 80049dc:	f000 f93b 	bl	8004c56 <Write4Bits>
  DelayUS(100);
 80049e0:	2064      	movs	r0, #100	@ 0x64
 80049e2:	f000 f9ad 	bl	8004d40 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80049e6:	4b18      	ldr	r3, [pc, #96]	@ (8004a48 <HD44780_Init+0xe0>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	f043 0320 	orr.w	r3, r3, #32
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 f8f3 	bl	8004bdc <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80049f6:	4b15      	ldr	r3, [pc, #84]	@ (8004a4c <HD44780_Init+0xe4>)
 80049f8:	2204      	movs	r2, #4
 80049fa:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80049fc:	f000 f876 	bl	8004aec <HD44780_Display>
  HD44780_Clear();
 8004a00:	f000 f82c 	bl	8004a5c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8004a04:	4b12      	ldr	r3, [pc, #72]	@ (8004a50 <HD44780_Init+0xe8>)
 8004a06:	2202      	movs	r2, #2
 8004a08:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8004a0a:	4b11      	ldr	r3, [pc, #68]	@ (8004a50 <HD44780_Init+0xe8>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	f043 0304 	orr.w	r3, r3, #4
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 f8e1 	bl	8004bdc <SendCommand>
  DelayUS(4500);
 8004a1a:	f241 1094 	movw	r0, #4500	@ 0x1194
 8004a1e:	f000 f98f 	bl	8004d40 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8004a22:	490c      	ldr	r1, [pc, #48]	@ (8004a54 <HD44780_Init+0xec>)
 8004a24:	2000      	movs	r0, #0
 8004a26:	f000 f88d 	bl	8004b44 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8004a2a:	490b      	ldr	r1, [pc, #44]	@ (8004a58 <HD44780_Init+0xf0>)
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	f000 f889 	bl	8004b44 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8004a32:	f000 f81e 	bl	8004a72 <HD44780_Home>
}
 8004a36:	bf00      	nop
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	2000030b 	.word	0x2000030b
 8004a44:	2000030c 	.word	0x2000030c
 8004a48:	20000308 	.word	0x20000308
 8004a4c:	20000309 	.word	0x20000309
 8004a50:	2000030a 	.word	0x2000030a
 8004a54:	20000010 	.word	0x20000010
 8004a58:	20000018 	.word	0x20000018

08004a5c <HD44780_Clear>:

void HD44780_Clear()
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8004a60:	2001      	movs	r0, #1
 8004a62:	f000 f8bb 	bl	8004bdc <SendCommand>
  DelayUS(2000);
 8004a66:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004a6a:	f000 f969 	bl	8004d40 <DelayUS>
}
 8004a6e:	bf00      	nop
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HD44780_Home>:

void HD44780_Home()
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8004a76:	2002      	movs	r0, #2
 8004a78:	f000 f8b0 	bl	8004bdc <SendCommand>
  DelayUS(2000);
 8004a7c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004a80:	f000 f95e 	bl	8004d40 <DelayUS>
}
 8004a84:	bf00      	nop
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8004a88:	b590      	push	{r4, r7, lr}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	460a      	mov	r2, r1
 8004a92:	71fb      	strb	r3, [r7, #7]
 8004a94:	4613      	mov	r3, r2
 8004a96:	71bb      	strb	r3, [r7, #6]
  // Para 20x4, o terceiro e quarto offsets são 0x14 e 0x54
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8004a98:	4b12      	ldr	r3, [pc, #72]	@ (8004ae4 <HD44780_SetCursor+0x5c>)
 8004a9a:	f107 0408 	add.w	r4, r7, #8
 8004a9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004aa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  if (row >= dpRows) {
 8004aa4:	4b10      	ldr	r3, [pc, #64]	@ (8004ae8 <HD44780_SetCursor+0x60>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	79ba      	ldrb	r2, [r7, #6]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d303      	bcc.n	8004ab6 <HD44780_SetCursor+0x2e>
	row = dpRows - 1;
 8004aae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae8 <HD44780_SetCursor+0x60>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8004ab6:	79bb      	ldrb	r3, [r7, #6]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	3318      	adds	r3, #24
 8004abc:	443b      	add	r3, r7
 8004abe:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	b25b      	sxtb	r3, r3
 8004acc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ad0:	b25b      	sxtb	r3, r3
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 f881 	bl	8004bdc <SendCommand>
}
 8004ada:	bf00      	nop
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd90      	pop	{r4, r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	080095cc 	.word	0x080095cc
 8004ae8:	2000030b 	.word	0x2000030b

08004aec <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8004af0:	4b08      	ldr	r3, [pc, #32]	@ (8004b14 <HD44780_Display+0x28>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	f043 0304 	orr.w	r3, r3, #4
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	4b06      	ldr	r3, [pc, #24]	@ (8004b14 <HD44780_Display+0x28>)
 8004afc:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8004afe:	4b05      	ldr	r3, [pc, #20]	@ (8004b14 <HD44780_Display+0x28>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	f043 0308 	orr.w	r3, r3, #8
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 f867 	bl	8004bdc <SendCommand>
}
 8004b0e:	bf00      	nop
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20000309 	.word	0x20000309

08004b18 <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 8004b1c:	4b08      	ldr	r3, [pc, #32]	@ (8004b40 <HD44780_NoCursor+0x28>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	f023 0302 	bic.w	r3, r3, #2
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	4b06      	ldr	r3, [pc, #24]	@ (8004b40 <HD44780_NoCursor+0x28>)
 8004b28:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8004b2a:	4b05      	ldr	r3, [pc, #20]	@ (8004b40 <HD44780_NoCursor+0x28>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	f043 0308 	orr.w	r3, r3, #8
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 f851 	bl	8004bdc <SendCommand>
}
 8004b3a:	bf00      	nop
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000309 	.word	0x20000309

08004b44 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, const uint8_t charmap[])
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	6039      	str	r1, [r7, #0]
 8004b4e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8004b50:	79fb      	ldrb	r3, [r7, #7]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8004b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	b25b      	sxtb	r3, r3
 8004b60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b64:	b25b      	sxtb	r3, r3
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 f837 	bl	8004bdc <SendCommand>
  for (int i=0; i<8; i++)
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	e009      	b.n	8004b88 <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	4413      	add	r3, r2
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 f83b 	bl	8004bf8 <SendChar>
  for (int i=0; i<8; i++)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3301      	adds	r3, #1
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b07      	cmp	r3, #7
 8004b8c:	ddf2      	ble.n	8004b74 <HD44780_CreateSpecialChar+0x30>
  }
}
 8004b8e:	bf00      	nop
 8004b90:	bf00      	nop
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 f827 	bl	8004bf8 <SendChar>
}
 8004baa:	bf00      	nop
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8004bba:	e006      	b.n	8004bca <HD44780_PrintStr+0x18>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	607a      	str	r2, [r7, #4]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 f817 	bl	8004bf8 <SendChar>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f4      	bne.n	8004bbc <HD44780_PrintStr+0xa>
}
 8004bd2:	bf00      	nop
 8004bd4:	bf00      	nop
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	2100      	movs	r1, #0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 f812 	bl	8004c14 <Send>
}
 8004bf0:	bf00      	nop
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <SendChar>:

static void SendChar(uint8_t ch)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	2101      	movs	r1, #1
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 f804 	bl	8004c14 <Send>
}
 8004c0c:	bf00      	nop
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	460a      	mov	r2, r1
 8004c1e:	71fb      	strb	r3, [r7, #7]
 8004c20:	4613      	mov	r3, r2
 8004c22:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	f023 030f 	bic.w	r3, r3, #15
 8004c2a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8004c32:	7bfa      	ldrb	r2, [r7, #15]
 8004c34:	79bb      	ldrb	r3, [r7, #6]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 f80b 	bl	8004c56 <Write4Bits>
  Write4Bits((lownib)|mode);
 8004c40:	7bba      	ldrb	r2, [r7, #14]
 8004c42:	79bb      	ldrb	r3, [r7, #6]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 f804 	bl	8004c56 <Write4Bits>
}
 8004c4e:	bf00      	nop
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b082      	sub	sp, #8
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 f808 	bl	8004c78 <ExpanderWrite>
  PulseEnable(value);
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 f820 	bl	8004cb0 <PulseEnable>
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	4603      	mov	r3, r0
 8004c80:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8004c82:	4b09      	ldr	r3, [pc, #36]	@ (8004ca8 <ExpanderWrite+0x30>)
 8004c84:	781a      	ldrb	r2, [r3, #0]
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8004c8e:	f107 020f 	add.w	r2, r7, #15
 8004c92:	230a      	movs	r3, #10
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	2301      	movs	r3, #1
 8004c98:	214e      	movs	r1, #78	@ 0x4e
 8004c9a:	4804      	ldr	r0, [pc, #16]	@ (8004cac <ExpanderWrite+0x34>)
 8004c9c:	f7fd fd12 	bl	80026c4 <HAL_I2C_Master_Transmit>
}
 8004ca0:	bf00      	nop
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	2000030c 	.word	0x2000030c
 8004cac:	20000204 	.word	0x20000204

08004cb0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	f043 0304 	orr.w	r3, r3, #4
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff ffd8 	bl	8004c78 <ExpanderWrite>
  DelayUS(20);
 8004cc8:	2014      	movs	r0, #20
 8004cca:	f000 f839 	bl	8004d40 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	f023 0304 	bic.w	r3, r3, #4
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff ffce 	bl	8004c78 <ExpanderWrite>
  DelayUS(20);
 8004cdc:	2014      	movs	r0, #20
 8004cde:	f000 f82f 	bl	8004d40 <DelayUS>
}
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <DelayInit>:

static void DelayInit(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8004cf0:	4b11      	ldr	r3, [pc, #68]	@ (8004d38 <DelayInit+0x4c>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4a10      	ldr	r2, [pc, #64]	@ (8004d38 <DelayInit+0x4c>)
 8004cf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cfa:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8004cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8004d38 <DelayInit+0x4c>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	4a0d      	ldr	r2, [pc, #52]	@ (8004d38 <DelayInit+0x4c>)
 8004d02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d06:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8004d08:	4b0c      	ldr	r3, [pc, #48]	@ (8004d3c <DelayInit+0x50>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8004d3c <DelayInit+0x50>)
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8004d14:	4b09      	ldr	r3, [pc, #36]	@ (8004d3c <DelayInit+0x50>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a08      	ldr	r2, [pc, #32]	@ (8004d3c <DelayInit+0x50>)
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8004d20:	4b06      	ldr	r3, [pc, #24]	@ (8004d3c <DelayInit+0x50>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8004d26:	bf00      	nop
  __ASM volatile ("NOP");
 8004d28:	bf00      	nop
  __ASM volatile ("NOP");
 8004d2a:	bf00      	nop
}
 8004d2c:	bf00      	nop
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	e000edf0 	.word	0xe000edf0
 8004d3c:	e0001000 	.word	0xe0001000

08004d40 <DelayUS>:

static void DelayUS(uint32_t us) {
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8004d48:	4b0e      	ldr	r3, [pc, #56]	@ (8004d84 <DelayUS+0x44>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8004d88 <DelayUS+0x48>)
 8004d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d52:	0c9a      	lsrs	r2, r3, #18
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	fb02 f303 	mul.w	r3, r2, r3
 8004d5a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8004d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d8c <DelayUS+0x4c>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8004d62:	4b0a      	ldr	r3, [pc, #40]	@ (8004d8c <DelayUS+0x4c>)
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d8f6      	bhi.n	8004d62 <DelayUS+0x22>
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	20000004 	.word	0x20000004
 8004d88:	431bde83 	.word	0x431bde83
 8004d8c:	e0001000 	.word	0xe0001000

08004d90 <__cvt>:
 8004d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d94:	ec57 6b10 	vmov	r6, r7, d0
 8004d98:	2f00      	cmp	r7, #0
 8004d9a:	460c      	mov	r4, r1
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	463b      	mov	r3, r7
 8004da0:	bfbb      	ittet	lt
 8004da2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004da6:	461f      	movlt	r7, r3
 8004da8:	2300      	movge	r3, #0
 8004daa:	232d      	movlt	r3, #45	@ 0x2d
 8004dac:	700b      	strb	r3, [r1, #0]
 8004dae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004db0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004db4:	4691      	mov	r9, r2
 8004db6:	f023 0820 	bic.w	r8, r3, #32
 8004dba:	bfbc      	itt	lt
 8004dbc:	4632      	movlt	r2, r6
 8004dbe:	4616      	movlt	r6, r2
 8004dc0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004dc4:	d005      	beq.n	8004dd2 <__cvt+0x42>
 8004dc6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004dca:	d100      	bne.n	8004dce <__cvt+0x3e>
 8004dcc:	3401      	adds	r4, #1
 8004dce:	2102      	movs	r1, #2
 8004dd0:	e000      	b.n	8004dd4 <__cvt+0x44>
 8004dd2:	2103      	movs	r1, #3
 8004dd4:	ab03      	add	r3, sp, #12
 8004dd6:	9301      	str	r3, [sp, #4]
 8004dd8:	ab02      	add	r3, sp, #8
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	ec47 6b10 	vmov	d0, r6, r7
 8004de0:	4653      	mov	r3, sl
 8004de2:	4622      	mov	r2, r4
 8004de4:	f001 f960 	bl	80060a8 <_dtoa_r>
 8004de8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004dec:	4605      	mov	r5, r0
 8004dee:	d119      	bne.n	8004e24 <__cvt+0x94>
 8004df0:	f019 0f01 	tst.w	r9, #1
 8004df4:	d00e      	beq.n	8004e14 <__cvt+0x84>
 8004df6:	eb00 0904 	add.w	r9, r0, r4
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	4630      	mov	r0, r6
 8004e00:	4639      	mov	r1, r7
 8004e02:	f7fb fe61 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e06:	b108      	cbz	r0, 8004e0c <__cvt+0x7c>
 8004e08:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e0c:	2230      	movs	r2, #48	@ 0x30
 8004e0e:	9b03      	ldr	r3, [sp, #12]
 8004e10:	454b      	cmp	r3, r9
 8004e12:	d31e      	bcc.n	8004e52 <__cvt+0xc2>
 8004e14:	9b03      	ldr	r3, [sp, #12]
 8004e16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e18:	1b5b      	subs	r3, r3, r5
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	b004      	add	sp, #16
 8004e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e28:	eb00 0904 	add.w	r9, r0, r4
 8004e2c:	d1e5      	bne.n	8004dfa <__cvt+0x6a>
 8004e2e:	7803      	ldrb	r3, [r0, #0]
 8004e30:	2b30      	cmp	r3, #48	@ 0x30
 8004e32:	d10a      	bne.n	8004e4a <__cvt+0xba>
 8004e34:	2200      	movs	r2, #0
 8004e36:	2300      	movs	r3, #0
 8004e38:	4630      	mov	r0, r6
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	f7fb fe44 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e40:	b918      	cbnz	r0, 8004e4a <__cvt+0xba>
 8004e42:	f1c4 0401 	rsb	r4, r4, #1
 8004e46:	f8ca 4000 	str.w	r4, [sl]
 8004e4a:	f8da 3000 	ldr.w	r3, [sl]
 8004e4e:	4499      	add	r9, r3
 8004e50:	e7d3      	b.n	8004dfa <__cvt+0x6a>
 8004e52:	1c59      	adds	r1, r3, #1
 8004e54:	9103      	str	r1, [sp, #12]
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	e7d9      	b.n	8004e0e <__cvt+0x7e>

08004e5a <__exponent>:
 8004e5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e5c:	2900      	cmp	r1, #0
 8004e5e:	bfba      	itte	lt
 8004e60:	4249      	neglt	r1, r1
 8004e62:	232d      	movlt	r3, #45	@ 0x2d
 8004e64:	232b      	movge	r3, #43	@ 0x2b
 8004e66:	2909      	cmp	r1, #9
 8004e68:	7002      	strb	r2, [r0, #0]
 8004e6a:	7043      	strb	r3, [r0, #1]
 8004e6c:	dd29      	ble.n	8004ec2 <__exponent+0x68>
 8004e6e:	f10d 0307 	add.w	r3, sp, #7
 8004e72:	461d      	mov	r5, r3
 8004e74:	270a      	movs	r7, #10
 8004e76:	461a      	mov	r2, r3
 8004e78:	fbb1 f6f7 	udiv	r6, r1, r7
 8004e7c:	fb07 1416 	mls	r4, r7, r6, r1
 8004e80:	3430      	adds	r4, #48	@ 0x30
 8004e82:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004e86:	460c      	mov	r4, r1
 8004e88:	2c63      	cmp	r4, #99	@ 0x63
 8004e8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e8e:	4631      	mov	r1, r6
 8004e90:	dcf1      	bgt.n	8004e76 <__exponent+0x1c>
 8004e92:	3130      	adds	r1, #48	@ 0x30
 8004e94:	1e94      	subs	r4, r2, #2
 8004e96:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e9a:	1c41      	adds	r1, r0, #1
 8004e9c:	4623      	mov	r3, r4
 8004e9e:	42ab      	cmp	r3, r5
 8004ea0:	d30a      	bcc.n	8004eb8 <__exponent+0x5e>
 8004ea2:	f10d 0309 	add.w	r3, sp, #9
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	42ac      	cmp	r4, r5
 8004eaa:	bf88      	it	hi
 8004eac:	2300      	movhi	r3, #0
 8004eae:	3302      	adds	r3, #2
 8004eb0:	4403      	add	r3, r0
 8004eb2:	1a18      	subs	r0, r3, r0
 8004eb4:	b003      	add	sp, #12
 8004eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eb8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004ebc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004ec0:	e7ed      	b.n	8004e9e <__exponent+0x44>
 8004ec2:	2330      	movs	r3, #48	@ 0x30
 8004ec4:	3130      	adds	r1, #48	@ 0x30
 8004ec6:	7083      	strb	r3, [r0, #2]
 8004ec8:	70c1      	strb	r1, [r0, #3]
 8004eca:	1d03      	adds	r3, r0, #4
 8004ecc:	e7f1      	b.n	8004eb2 <__exponent+0x58>
	...

08004ed0 <_printf_float>:
 8004ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed4:	b08d      	sub	sp, #52	@ 0x34
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004edc:	4616      	mov	r6, r2
 8004ede:	461f      	mov	r7, r3
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	f000 ffdb 	bl	8005e9c <_localeconv_r>
 8004ee6:	6803      	ldr	r3, [r0, #0]
 8004ee8:	9304      	str	r3, [sp, #16]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fb f9c0 	bl	8000270 <strlen>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ef8:	9005      	str	r0, [sp, #20]
 8004efa:	3307      	adds	r3, #7
 8004efc:	f023 0307 	bic.w	r3, r3, #7
 8004f00:	f103 0208 	add.w	r2, r3, #8
 8004f04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004f08:	f8d4 b000 	ldr.w	fp, [r4]
 8004f0c:	f8c8 2000 	str.w	r2, [r8]
 8004f10:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f14:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004f18:	9307      	str	r3, [sp, #28]
 8004f1a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f1e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004f22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f26:	4b9c      	ldr	r3, [pc, #624]	@ (8005198 <_printf_float+0x2c8>)
 8004f28:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2c:	f7fb fdfe 	bl	8000b2c <__aeabi_dcmpun>
 8004f30:	bb70      	cbnz	r0, 8004f90 <_printf_float+0xc0>
 8004f32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f36:	4b98      	ldr	r3, [pc, #608]	@ (8005198 <_printf_float+0x2c8>)
 8004f38:	f04f 32ff 	mov.w	r2, #4294967295
 8004f3c:	f7fb fdd8 	bl	8000af0 <__aeabi_dcmple>
 8004f40:	bb30      	cbnz	r0, 8004f90 <_printf_float+0xc0>
 8004f42:	2200      	movs	r2, #0
 8004f44:	2300      	movs	r3, #0
 8004f46:	4640      	mov	r0, r8
 8004f48:	4649      	mov	r1, r9
 8004f4a:	f7fb fdc7 	bl	8000adc <__aeabi_dcmplt>
 8004f4e:	b110      	cbz	r0, 8004f56 <_printf_float+0x86>
 8004f50:	232d      	movs	r3, #45	@ 0x2d
 8004f52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f56:	4a91      	ldr	r2, [pc, #580]	@ (800519c <_printf_float+0x2cc>)
 8004f58:	4b91      	ldr	r3, [pc, #580]	@ (80051a0 <_printf_float+0x2d0>)
 8004f5a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004f5e:	bf8c      	ite	hi
 8004f60:	4690      	movhi	r8, r2
 8004f62:	4698      	movls	r8, r3
 8004f64:	2303      	movs	r3, #3
 8004f66:	6123      	str	r3, [r4, #16]
 8004f68:	f02b 0304 	bic.w	r3, fp, #4
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	f04f 0900 	mov.w	r9, #0
 8004f72:	9700      	str	r7, [sp, #0]
 8004f74:	4633      	mov	r3, r6
 8004f76:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004f78:	4621      	mov	r1, r4
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f000 f9d2 	bl	8005324 <_printf_common>
 8004f80:	3001      	adds	r0, #1
 8004f82:	f040 808d 	bne.w	80050a0 <_printf_float+0x1d0>
 8004f86:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8a:	b00d      	add	sp, #52	@ 0x34
 8004f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f90:	4642      	mov	r2, r8
 8004f92:	464b      	mov	r3, r9
 8004f94:	4640      	mov	r0, r8
 8004f96:	4649      	mov	r1, r9
 8004f98:	f7fb fdc8 	bl	8000b2c <__aeabi_dcmpun>
 8004f9c:	b140      	cbz	r0, 8004fb0 <_printf_float+0xe0>
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bfbc      	itt	lt
 8004fa4:	232d      	movlt	r3, #45	@ 0x2d
 8004fa6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004faa:	4a7e      	ldr	r2, [pc, #504]	@ (80051a4 <_printf_float+0x2d4>)
 8004fac:	4b7e      	ldr	r3, [pc, #504]	@ (80051a8 <_printf_float+0x2d8>)
 8004fae:	e7d4      	b.n	8004f5a <_printf_float+0x8a>
 8004fb0:	6863      	ldr	r3, [r4, #4]
 8004fb2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004fb6:	9206      	str	r2, [sp, #24]
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	d13b      	bne.n	8005034 <_printf_float+0x164>
 8004fbc:	2306      	movs	r3, #6
 8004fbe:	6063      	str	r3, [r4, #4]
 8004fc0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	6022      	str	r2, [r4, #0]
 8004fc8:	9303      	str	r3, [sp, #12]
 8004fca:	ab0a      	add	r3, sp, #40	@ 0x28
 8004fcc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004fd0:	ab09      	add	r3, sp, #36	@ 0x24
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	6861      	ldr	r1, [r4, #4]
 8004fd6:	ec49 8b10 	vmov	d0, r8, r9
 8004fda:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f7ff fed6 	bl	8004d90 <__cvt>
 8004fe4:	9b06      	ldr	r3, [sp, #24]
 8004fe6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004fe8:	2b47      	cmp	r3, #71	@ 0x47
 8004fea:	4680      	mov	r8, r0
 8004fec:	d129      	bne.n	8005042 <_printf_float+0x172>
 8004fee:	1cc8      	adds	r0, r1, #3
 8004ff0:	db02      	blt.n	8004ff8 <_printf_float+0x128>
 8004ff2:	6863      	ldr	r3, [r4, #4]
 8004ff4:	4299      	cmp	r1, r3
 8004ff6:	dd41      	ble.n	800507c <_printf_float+0x1ac>
 8004ff8:	f1aa 0a02 	sub.w	sl, sl, #2
 8004ffc:	fa5f fa8a 	uxtb.w	sl, sl
 8005000:	3901      	subs	r1, #1
 8005002:	4652      	mov	r2, sl
 8005004:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005008:	9109      	str	r1, [sp, #36]	@ 0x24
 800500a:	f7ff ff26 	bl	8004e5a <__exponent>
 800500e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005010:	1813      	adds	r3, r2, r0
 8005012:	2a01      	cmp	r2, #1
 8005014:	4681      	mov	r9, r0
 8005016:	6123      	str	r3, [r4, #16]
 8005018:	dc02      	bgt.n	8005020 <_printf_float+0x150>
 800501a:	6822      	ldr	r2, [r4, #0]
 800501c:	07d2      	lsls	r2, r2, #31
 800501e:	d501      	bpl.n	8005024 <_printf_float+0x154>
 8005020:	3301      	adds	r3, #1
 8005022:	6123      	str	r3, [r4, #16]
 8005024:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0a2      	beq.n	8004f72 <_printf_float+0xa2>
 800502c:	232d      	movs	r3, #45	@ 0x2d
 800502e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005032:	e79e      	b.n	8004f72 <_printf_float+0xa2>
 8005034:	9a06      	ldr	r2, [sp, #24]
 8005036:	2a47      	cmp	r2, #71	@ 0x47
 8005038:	d1c2      	bne.n	8004fc0 <_printf_float+0xf0>
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1c0      	bne.n	8004fc0 <_printf_float+0xf0>
 800503e:	2301      	movs	r3, #1
 8005040:	e7bd      	b.n	8004fbe <_printf_float+0xee>
 8005042:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005046:	d9db      	bls.n	8005000 <_printf_float+0x130>
 8005048:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800504c:	d118      	bne.n	8005080 <_printf_float+0x1b0>
 800504e:	2900      	cmp	r1, #0
 8005050:	6863      	ldr	r3, [r4, #4]
 8005052:	dd0b      	ble.n	800506c <_printf_float+0x19c>
 8005054:	6121      	str	r1, [r4, #16]
 8005056:	b913      	cbnz	r3, 800505e <_printf_float+0x18e>
 8005058:	6822      	ldr	r2, [r4, #0]
 800505a:	07d0      	lsls	r0, r2, #31
 800505c:	d502      	bpl.n	8005064 <_printf_float+0x194>
 800505e:	3301      	adds	r3, #1
 8005060:	440b      	add	r3, r1
 8005062:	6123      	str	r3, [r4, #16]
 8005064:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005066:	f04f 0900 	mov.w	r9, #0
 800506a:	e7db      	b.n	8005024 <_printf_float+0x154>
 800506c:	b913      	cbnz	r3, 8005074 <_printf_float+0x1a4>
 800506e:	6822      	ldr	r2, [r4, #0]
 8005070:	07d2      	lsls	r2, r2, #31
 8005072:	d501      	bpl.n	8005078 <_printf_float+0x1a8>
 8005074:	3302      	adds	r3, #2
 8005076:	e7f4      	b.n	8005062 <_printf_float+0x192>
 8005078:	2301      	movs	r3, #1
 800507a:	e7f2      	b.n	8005062 <_printf_float+0x192>
 800507c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005082:	4299      	cmp	r1, r3
 8005084:	db05      	blt.n	8005092 <_printf_float+0x1c2>
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	6121      	str	r1, [r4, #16]
 800508a:	07d8      	lsls	r0, r3, #31
 800508c:	d5ea      	bpl.n	8005064 <_printf_float+0x194>
 800508e:	1c4b      	adds	r3, r1, #1
 8005090:	e7e7      	b.n	8005062 <_printf_float+0x192>
 8005092:	2900      	cmp	r1, #0
 8005094:	bfd4      	ite	le
 8005096:	f1c1 0202 	rsble	r2, r1, #2
 800509a:	2201      	movgt	r2, #1
 800509c:	4413      	add	r3, r2
 800509e:	e7e0      	b.n	8005062 <_printf_float+0x192>
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	055a      	lsls	r2, r3, #21
 80050a4:	d407      	bmi.n	80050b6 <_printf_float+0x1e6>
 80050a6:	6923      	ldr	r3, [r4, #16]
 80050a8:	4642      	mov	r2, r8
 80050aa:	4631      	mov	r1, r6
 80050ac:	4628      	mov	r0, r5
 80050ae:	47b8      	blx	r7
 80050b0:	3001      	adds	r0, #1
 80050b2:	d12b      	bne.n	800510c <_printf_float+0x23c>
 80050b4:	e767      	b.n	8004f86 <_printf_float+0xb6>
 80050b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80050ba:	f240 80dd 	bls.w	8005278 <_printf_float+0x3a8>
 80050be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80050c2:	2200      	movs	r2, #0
 80050c4:	2300      	movs	r3, #0
 80050c6:	f7fb fcff 	bl	8000ac8 <__aeabi_dcmpeq>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d033      	beq.n	8005136 <_printf_float+0x266>
 80050ce:	4a37      	ldr	r2, [pc, #220]	@ (80051ac <_printf_float+0x2dc>)
 80050d0:	2301      	movs	r3, #1
 80050d2:	4631      	mov	r1, r6
 80050d4:	4628      	mov	r0, r5
 80050d6:	47b8      	blx	r7
 80050d8:	3001      	adds	r0, #1
 80050da:	f43f af54 	beq.w	8004f86 <_printf_float+0xb6>
 80050de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80050e2:	4543      	cmp	r3, r8
 80050e4:	db02      	blt.n	80050ec <_printf_float+0x21c>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	07d8      	lsls	r0, r3, #31
 80050ea:	d50f      	bpl.n	800510c <_printf_float+0x23c>
 80050ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050f0:	4631      	mov	r1, r6
 80050f2:	4628      	mov	r0, r5
 80050f4:	47b8      	blx	r7
 80050f6:	3001      	adds	r0, #1
 80050f8:	f43f af45 	beq.w	8004f86 <_printf_float+0xb6>
 80050fc:	f04f 0900 	mov.w	r9, #0
 8005100:	f108 38ff 	add.w	r8, r8, #4294967295
 8005104:	f104 0a1a 	add.w	sl, r4, #26
 8005108:	45c8      	cmp	r8, r9
 800510a:	dc09      	bgt.n	8005120 <_printf_float+0x250>
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	079b      	lsls	r3, r3, #30
 8005110:	f100 8103 	bmi.w	800531a <_printf_float+0x44a>
 8005114:	68e0      	ldr	r0, [r4, #12]
 8005116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005118:	4298      	cmp	r0, r3
 800511a:	bfb8      	it	lt
 800511c:	4618      	movlt	r0, r3
 800511e:	e734      	b.n	8004f8a <_printf_float+0xba>
 8005120:	2301      	movs	r3, #1
 8005122:	4652      	mov	r2, sl
 8005124:	4631      	mov	r1, r6
 8005126:	4628      	mov	r0, r5
 8005128:	47b8      	blx	r7
 800512a:	3001      	adds	r0, #1
 800512c:	f43f af2b 	beq.w	8004f86 <_printf_float+0xb6>
 8005130:	f109 0901 	add.w	r9, r9, #1
 8005134:	e7e8      	b.n	8005108 <_printf_float+0x238>
 8005136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005138:	2b00      	cmp	r3, #0
 800513a:	dc39      	bgt.n	80051b0 <_printf_float+0x2e0>
 800513c:	4a1b      	ldr	r2, [pc, #108]	@ (80051ac <_printf_float+0x2dc>)
 800513e:	2301      	movs	r3, #1
 8005140:	4631      	mov	r1, r6
 8005142:	4628      	mov	r0, r5
 8005144:	47b8      	blx	r7
 8005146:	3001      	adds	r0, #1
 8005148:	f43f af1d 	beq.w	8004f86 <_printf_float+0xb6>
 800514c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005150:	ea59 0303 	orrs.w	r3, r9, r3
 8005154:	d102      	bne.n	800515c <_printf_float+0x28c>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	07d9      	lsls	r1, r3, #31
 800515a:	d5d7      	bpl.n	800510c <_printf_float+0x23c>
 800515c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005160:	4631      	mov	r1, r6
 8005162:	4628      	mov	r0, r5
 8005164:	47b8      	blx	r7
 8005166:	3001      	adds	r0, #1
 8005168:	f43f af0d 	beq.w	8004f86 <_printf_float+0xb6>
 800516c:	f04f 0a00 	mov.w	sl, #0
 8005170:	f104 0b1a 	add.w	fp, r4, #26
 8005174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005176:	425b      	negs	r3, r3
 8005178:	4553      	cmp	r3, sl
 800517a:	dc01      	bgt.n	8005180 <_printf_float+0x2b0>
 800517c:	464b      	mov	r3, r9
 800517e:	e793      	b.n	80050a8 <_printf_float+0x1d8>
 8005180:	2301      	movs	r3, #1
 8005182:	465a      	mov	r2, fp
 8005184:	4631      	mov	r1, r6
 8005186:	4628      	mov	r0, r5
 8005188:	47b8      	blx	r7
 800518a:	3001      	adds	r0, #1
 800518c:	f43f aefb 	beq.w	8004f86 <_printf_float+0xb6>
 8005190:	f10a 0a01 	add.w	sl, sl, #1
 8005194:	e7ee      	b.n	8005174 <_printf_float+0x2a4>
 8005196:	bf00      	nop
 8005198:	7fefffff 	.word	0x7fefffff
 800519c:	08009678 	.word	0x08009678
 80051a0:	08009674 	.word	0x08009674
 80051a4:	08009680 	.word	0x08009680
 80051a8:	0800967c 	.word	0x0800967c
 80051ac:	08009684 	.word	0x08009684
 80051b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051b2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80051b6:	4553      	cmp	r3, sl
 80051b8:	bfa8      	it	ge
 80051ba:	4653      	movge	r3, sl
 80051bc:	2b00      	cmp	r3, #0
 80051be:	4699      	mov	r9, r3
 80051c0:	dc36      	bgt.n	8005230 <_printf_float+0x360>
 80051c2:	f04f 0b00 	mov.w	fp, #0
 80051c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051ca:	f104 021a 	add.w	r2, r4, #26
 80051ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051d0:	9306      	str	r3, [sp, #24]
 80051d2:	eba3 0309 	sub.w	r3, r3, r9
 80051d6:	455b      	cmp	r3, fp
 80051d8:	dc31      	bgt.n	800523e <_printf_float+0x36e>
 80051da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051dc:	459a      	cmp	sl, r3
 80051de:	dc3a      	bgt.n	8005256 <_printf_float+0x386>
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	07da      	lsls	r2, r3, #31
 80051e4:	d437      	bmi.n	8005256 <_printf_float+0x386>
 80051e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051e8:	ebaa 0903 	sub.w	r9, sl, r3
 80051ec:	9b06      	ldr	r3, [sp, #24]
 80051ee:	ebaa 0303 	sub.w	r3, sl, r3
 80051f2:	4599      	cmp	r9, r3
 80051f4:	bfa8      	it	ge
 80051f6:	4699      	movge	r9, r3
 80051f8:	f1b9 0f00 	cmp.w	r9, #0
 80051fc:	dc33      	bgt.n	8005266 <_printf_float+0x396>
 80051fe:	f04f 0800 	mov.w	r8, #0
 8005202:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005206:	f104 0b1a 	add.w	fp, r4, #26
 800520a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800520c:	ebaa 0303 	sub.w	r3, sl, r3
 8005210:	eba3 0309 	sub.w	r3, r3, r9
 8005214:	4543      	cmp	r3, r8
 8005216:	f77f af79 	ble.w	800510c <_printf_float+0x23c>
 800521a:	2301      	movs	r3, #1
 800521c:	465a      	mov	r2, fp
 800521e:	4631      	mov	r1, r6
 8005220:	4628      	mov	r0, r5
 8005222:	47b8      	blx	r7
 8005224:	3001      	adds	r0, #1
 8005226:	f43f aeae 	beq.w	8004f86 <_printf_float+0xb6>
 800522a:	f108 0801 	add.w	r8, r8, #1
 800522e:	e7ec      	b.n	800520a <_printf_float+0x33a>
 8005230:	4642      	mov	r2, r8
 8005232:	4631      	mov	r1, r6
 8005234:	4628      	mov	r0, r5
 8005236:	47b8      	blx	r7
 8005238:	3001      	adds	r0, #1
 800523a:	d1c2      	bne.n	80051c2 <_printf_float+0x2f2>
 800523c:	e6a3      	b.n	8004f86 <_printf_float+0xb6>
 800523e:	2301      	movs	r3, #1
 8005240:	4631      	mov	r1, r6
 8005242:	4628      	mov	r0, r5
 8005244:	9206      	str	r2, [sp, #24]
 8005246:	47b8      	blx	r7
 8005248:	3001      	adds	r0, #1
 800524a:	f43f ae9c 	beq.w	8004f86 <_printf_float+0xb6>
 800524e:	9a06      	ldr	r2, [sp, #24]
 8005250:	f10b 0b01 	add.w	fp, fp, #1
 8005254:	e7bb      	b.n	80051ce <_printf_float+0x2fe>
 8005256:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800525a:	4631      	mov	r1, r6
 800525c:	4628      	mov	r0, r5
 800525e:	47b8      	blx	r7
 8005260:	3001      	adds	r0, #1
 8005262:	d1c0      	bne.n	80051e6 <_printf_float+0x316>
 8005264:	e68f      	b.n	8004f86 <_printf_float+0xb6>
 8005266:	9a06      	ldr	r2, [sp, #24]
 8005268:	464b      	mov	r3, r9
 800526a:	4442      	add	r2, r8
 800526c:	4631      	mov	r1, r6
 800526e:	4628      	mov	r0, r5
 8005270:	47b8      	blx	r7
 8005272:	3001      	adds	r0, #1
 8005274:	d1c3      	bne.n	80051fe <_printf_float+0x32e>
 8005276:	e686      	b.n	8004f86 <_printf_float+0xb6>
 8005278:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800527c:	f1ba 0f01 	cmp.w	sl, #1
 8005280:	dc01      	bgt.n	8005286 <_printf_float+0x3b6>
 8005282:	07db      	lsls	r3, r3, #31
 8005284:	d536      	bpl.n	80052f4 <_printf_float+0x424>
 8005286:	2301      	movs	r3, #1
 8005288:	4642      	mov	r2, r8
 800528a:	4631      	mov	r1, r6
 800528c:	4628      	mov	r0, r5
 800528e:	47b8      	blx	r7
 8005290:	3001      	adds	r0, #1
 8005292:	f43f ae78 	beq.w	8004f86 <_printf_float+0xb6>
 8005296:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800529a:	4631      	mov	r1, r6
 800529c:	4628      	mov	r0, r5
 800529e:	47b8      	blx	r7
 80052a0:	3001      	adds	r0, #1
 80052a2:	f43f ae70 	beq.w	8004f86 <_printf_float+0xb6>
 80052a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80052aa:	2200      	movs	r2, #0
 80052ac:	2300      	movs	r3, #0
 80052ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052b2:	f7fb fc09 	bl	8000ac8 <__aeabi_dcmpeq>
 80052b6:	b9c0      	cbnz	r0, 80052ea <_printf_float+0x41a>
 80052b8:	4653      	mov	r3, sl
 80052ba:	f108 0201 	add.w	r2, r8, #1
 80052be:	4631      	mov	r1, r6
 80052c0:	4628      	mov	r0, r5
 80052c2:	47b8      	blx	r7
 80052c4:	3001      	adds	r0, #1
 80052c6:	d10c      	bne.n	80052e2 <_printf_float+0x412>
 80052c8:	e65d      	b.n	8004f86 <_printf_float+0xb6>
 80052ca:	2301      	movs	r3, #1
 80052cc:	465a      	mov	r2, fp
 80052ce:	4631      	mov	r1, r6
 80052d0:	4628      	mov	r0, r5
 80052d2:	47b8      	blx	r7
 80052d4:	3001      	adds	r0, #1
 80052d6:	f43f ae56 	beq.w	8004f86 <_printf_float+0xb6>
 80052da:	f108 0801 	add.w	r8, r8, #1
 80052de:	45d0      	cmp	r8, sl
 80052e0:	dbf3      	blt.n	80052ca <_printf_float+0x3fa>
 80052e2:	464b      	mov	r3, r9
 80052e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80052e8:	e6df      	b.n	80050aa <_printf_float+0x1da>
 80052ea:	f04f 0800 	mov.w	r8, #0
 80052ee:	f104 0b1a 	add.w	fp, r4, #26
 80052f2:	e7f4      	b.n	80052de <_printf_float+0x40e>
 80052f4:	2301      	movs	r3, #1
 80052f6:	4642      	mov	r2, r8
 80052f8:	e7e1      	b.n	80052be <_printf_float+0x3ee>
 80052fa:	2301      	movs	r3, #1
 80052fc:	464a      	mov	r2, r9
 80052fe:	4631      	mov	r1, r6
 8005300:	4628      	mov	r0, r5
 8005302:	47b8      	blx	r7
 8005304:	3001      	adds	r0, #1
 8005306:	f43f ae3e 	beq.w	8004f86 <_printf_float+0xb6>
 800530a:	f108 0801 	add.w	r8, r8, #1
 800530e:	68e3      	ldr	r3, [r4, #12]
 8005310:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005312:	1a5b      	subs	r3, r3, r1
 8005314:	4543      	cmp	r3, r8
 8005316:	dcf0      	bgt.n	80052fa <_printf_float+0x42a>
 8005318:	e6fc      	b.n	8005114 <_printf_float+0x244>
 800531a:	f04f 0800 	mov.w	r8, #0
 800531e:	f104 0919 	add.w	r9, r4, #25
 8005322:	e7f4      	b.n	800530e <_printf_float+0x43e>

08005324 <_printf_common>:
 8005324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005328:	4616      	mov	r6, r2
 800532a:	4698      	mov	r8, r3
 800532c:	688a      	ldr	r2, [r1, #8]
 800532e:	690b      	ldr	r3, [r1, #16]
 8005330:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005334:	4293      	cmp	r3, r2
 8005336:	bfb8      	it	lt
 8005338:	4613      	movlt	r3, r2
 800533a:	6033      	str	r3, [r6, #0]
 800533c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005340:	4607      	mov	r7, r0
 8005342:	460c      	mov	r4, r1
 8005344:	b10a      	cbz	r2, 800534a <_printf_common+0x26>
 8005346:	3301      	adds	r3, #1
 8005348:	6033      	str	r3, [r6, #0]
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	0699      	lsls	r1, r3, #26
 800534e:	bf42      	ittt	mi
 8005350:	6833      	ldrmi	r3, [r6, #0]
 8005352:	3302      	addmi	r3, #2
 8005354:	6033      	strmi	r3, [r6, #0]
 8005356:	6825      	ldr	r5, [r4, #0]
 8005358:	f015 0506 	ands.w	r5, r5, #6
 800535c:	d106      	bne.n	800536c <_printf_common+0x48>
 800535e:	f104 0a19 	add.w	sl, r4, #25
 8005362:	68e3      	ldr	r3, [r4, #12]
 8005364:	6832      	ldr	r2, [r6, #0]
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	42ab      	cmp	r3, r5
 800536a:	dc26      	bgt.n	80053ba <_printf_common+0x96>
 800536c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005370:	6822      	ldr	r2, [r4, #0]
 8005372:	3b00      	subs	r3, #0
 8005374:	bf18      	it	ne
 8005376:	2301      	movne	r3, #1
 8005378:	0692      	lsls	r2, r2, #26
 800537a:	d42b      	bmi.n	80053d4 <_printf_common+0xb0>
 800537c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005380:	4641      	mov	r1, r8
 8005382:	4638      	mov	r0, r7
 8005384:	47c8      	blx	r9
 8005386:	3001      	adds	r0, #1
 8005388:	d01e      	beq.n	80053c8 <_printf_common+0xa4>
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	6922      	ldr	r2, [r4, #16]
 800538e:	f003 0306 	and.w	r3, r3, #6
 8005392:	2b04      	cmp	r3, #4
 8005394:	bf02      	ittt	eq
 8005396:	68e5      	ldreq	r5, [r4, #12]
 8005398:	6833      	ldreq	r3, [r6, #0]
 800539a:	1aed      	subeq	r5, r5, r3
 800539c:	68a3      	ldr	r3, [r4, #8]
 800539e:	bf0c      	ite	eq
 80053a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053a4:	2500      	movne	r5, #0
 80053a6:	4293      	cmp	r3, r2
 80053a8:	bfc4      	itt	gt
 80053aa:	1a9b      	subgt	r3, r3, r2
 80053ac:	18ed      	addgt	r5, r5, r3
 80053ae:	2600      	movs	r6, #0
 80053b0:	341a      	adds	r4, #26
 80053b2:	42b5      	cmp	r5, r6
 80053b4:	d11a      	bne.n	80053ec <_printf_common+0xc8>
 80053b6:	2000      	movs	r0, #0
 80053b8:	e008      	b.n	80053cc <_printf_common+0xa8>
 80053ba:	2301      	movs	r3, #1
 80053bc:	4652      	mov	r2, sl
 80053be:	4641      	mov	r1, r8
 80053c0:	4638      	mov	r0, r7
 80053c2:	47c8      	blx	r9
 80053c4:	3001      	adds	r0, #1
 80053c6:	d103      	bne.n	80053d0 <_printf_common+0xac>
 80053c8:	f04f 30ff 	mov.w	r0, #4294967295
 80053cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d0:	3501      	adds	r5, #1
 80053d2:	e7c6      	b.n	8005362 <_printf_common+0x3e>
 80053d4:	18e1      	adds	r1, r4, r3
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	2030      	movs	r0, #48	@ 0x30
 80053da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053de:	4422      	add	r2, r4
 80053e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053e8:	3302      	adds	r3, #2
 80053ea:	e7c7      	b.n	800537c <_printf_common+0x58>
 80053ec:	2301      	movs	r3, #1
 80053ee:	4622      	mov	r2, r4
 80053f0:	4641      	mov	r1, r8
 80053f2:	4638      	mov	r0, r7
 80053f4:	47c8      	blx	r9
 80053f6:	3001      	adds	r0, #1
 80053f8:	d0e6      	beq.n	80053c8 <_printf_common+0xa4>
 80053fa:	3601      	adds	r6, #1
 80053fc:	e7d9      	b.n	80053b2 <_printf_common+0x8e>
	...

08005400 <_printf_i>:
 8005400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005404:	7e0f      	ldrb	r7, [r1, #24]
 8005406:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005408:	2f78      	cmp	r7, #120	@ 0x78
 800540a:	4691      	mov	r9, r2
 800540c:	4680      	mov	r8, r0
 800540e:	460c      	mov	r4, r1
 8005410:	469a      	mov	sl, r3
 8005412:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005416:	d807      	bhi.n	8005428 <_printf_i+0x28>
 8005418:	2f62      	cmp	r7, #98	@ 0x62
 800541a:	d80a      	bhi.n	8005432 <_printf_i+0x32>
 800541c:	2f00      	cmp	r7, #0
 800541e:	f000 80d1 	beq.w	80055c4 <_printf_i+0x1c4>
 8005422:	2f58      	cmp	r7, #88	@ 0x58
 8005424:	f000 80b8 	beq.w	8005598 <_printf_i+0x198>
 8005428:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800542c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005430:	e03a      	b.n	80054a8 <_printf_i+0xa8>
 8005432:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005436:	2b15      	cmp	r3, #21
 8005438:	d8f6      	bhi.n	8005428 <_printf_i+0x28>
 800543a:	a101      	add	r1, pc, #4	@ (adr r1, 8005440 <_printf_i+0x40>)
 800543c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005440:	08005499 	.word	0x08005499
 8005444:	080054ad 	.word	0x080054ad
 8005448:	08005429 	.word	0x08005429
 800544c:	08005429 	.word	0x08005429
 8005450:	08005429 	.word	0x08005429
 8005454:	08005429 	.word	0x08005429
 8005458:	080054ad 	.word	0x080054ad
 800545c:	08005429 	.word	0x08005429
 8005460:	08005429 	.word	0x08005429
 8005464:	08005429 	.word	0x08005429
 8005468:	08005429 	.word	0x08005429
 800546c:	080055ab 	.word	0x080055ab
 8005470:	080054d7 	.word	0x080054d7
 8005474:	08005565 	.word	0x08005565
 8005478:	08005429 	.word	0x08005429
 800547c:	08005429 	.word	0x08005429
 8005480:	080055cd 	.word	0x080055cd
 8005484:	08005429 	.word	0x08005429
 8005488:	080054d7 	.word	0x080054d7
 800548c:	08005429 	.word	0x08005429
 8005490:	08005429 	.word	0x08005429
 8005494:	0800556d 	.word	0x0800556d
 8005498:	6833      	ldr	r3, [r6, #0]
 800549a:	1d1a      	adds	r2, r3, #4
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6032      	str	r2, [r6, #0]
 80054a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054a8:	2301      	movs	r3, #1
 80054aa:	e09c      	b.n	80055e6 <_printf_i+0x1e6>
 80054ac:	6833      	ldr	r3, [r6, #0]
 80054ae:	6820      	ldr	r0, [r4, #0]
 80054b0:	1d19      	adds	r1, r3, #4
 80054b2:	6031      	str	r1, [r6, #0]
 80054b4:	0606      	lsls	r6, r0, #24
 80054b6:	d501      	bpl.n	80054bc <_printf_i+0xbc>
 80054b8:	681d      	ldr	r5, [r3, #0]
 80054ba:	e003      	b.n	80054c4 <_printf_i+0xc4>
 80054bc:	0645      	lsls	r5, r0, #25
 80054be:	d5fb      	bpl.n	80054b8 <_printf_i+0xb8>
 80054c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054c4:	2d00      	cmp	r5, #0
 80054c6:	da03      	bge.n	80054d0 <_printf_i+0xd0>
 80054c8:	232d      	movs	r3, #45	@ 0x2d
 80054ca:	426d      	negs	r5, r5
 80054cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054d0:	4858      	ldr	r0, [pc, #352]	@ (8005634 <_printf_i+0x234>)
 80054d2:	230a      	movs	r3, #10
 80054d4:	e011      	b.n	80054fa <_printf_i+0xfa>
 80054d6:	6821      	ldr	r1, [r4, #0]
 80054d8:	6833      	ldr	r3, [r6, #0]
 80054da:	0608      	lsls	r0, r1, #24
 80054dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80054e0:	d402      	bmi.n	80054e8 <_printf_i+0xe8>
 80054e2:	0649      	lsls	r1, r1, #25
 80054e4:	bf48      	it	mi
 80054e6:	b2ad      	uxthmi	r5, r5
 80054e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80054ea:	4852      	ldr	r0, [pc, #328]	@ (8005634 <_printf_i+0x234>)
 80054ec:	6033      	str	r3, [r6, #0]
 80054ee:	bf14      	ite	ne
 80054f0:	230a      	movne	r3, #10
 80054f2:	2308      	moveq	r3, #8
 80054f4:	2100      	movs	r1, #0
 80054f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054fa:	6866      	ldr	r6, [r4, #4]
 80054fc:	60a6      	str	r6, [r4, #8]
 80054fe:	2e00      	cmp	r6, #0
 8005500:	db05      	blt.n	800550e <_printf_i+0x10e>
 8005502:	6821      	ldr	r1, [r4, #0]
 8005504:	432e      	orrs	r6, r5
 8005506:	f021 0104 	bic.w	r1, r1, #4
 800550a:	6021      	str	r1, [r4, #0]
 800550c:	d04b      	beq.n	80055a6 <_printf_i+0x1a6>
 800550e:	4616      	mov	r6, r2
 8005510:	fbb5 f1f3 	udiv	r1, r5, r3
 8005514:	fb03 5711 	mls	r7, r3, r1, r5
 8005518:	5dc7      	ldrb	r7, [r0, r7]
 800551a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800551e:	462f      	mov	r7, r5
 8005520:	42bb      	cmp	r3, r7
 8005522:	460d      	mov	r5, r1
 8005524:	d9f4      	bls.n	8005510 <_printf_i+0x110>
 8005526:	2b08      	cmp	r3, #8
 8005528:	d10b      	bne.n	8005542 <_printf_i+0x142>
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	07df      	lsls	r7, r3, #31
 800552e:	d508      	bpl.n	8005542 <_printf_i+0x142>
 8005530:	6923      	ldr	r3, [r4, #16]
 8005532:	6861      	ldr	r1, [r4, #4]
 8005534:	4299      	cmp	r1, r3
 8005536:	bfde      	ittt	le
 8005538:	2330      	movle	r3, #48	@ 0x30
 800553a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800553e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005542:	1b92      	subs	r2, r2, r6
 8005544:	6122      	str	r2, [r4, #16]
 8005546:	f8cd a000 	str.w	sl, [sp]
 800554a:	464b      	mov	r3, r9
 800554c:	aa03      	add	r2, sp, #12
 800554e:	4621      	mov	r1, r4
 8005550:	4640      	mov	r0, r8
 8005552:	f7ff fee7 	bl	8005324 <_printf_common>
 8005556:	3001      	adds	r0, #1
 8005558:	d14a      	bne.n	80055f0 <_printf_i+0x1f0>
 800555a:	f04f 30ff 	mov.w	r0, #4294967295
 800555e:	b004      	add	sp, #16
 8005560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	f043 0320 	orr.w	r3, r3, #32
 800556a:	6023      	str	r3, [r4, #0]
 800556c:	4832      	ldr	r0, [pc, #200]	@ (8005638 <_printf_i+0x238>)
 800556e:	2778      	movs	r7, #120	@ 0x78
 8005570:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	6831      	ldr	r1, [r6, #0]
 8005578:	061f      	lsls	r7, r3, #24
 800557a:	f851 5b04 	ldr.w	r5, [r1], #4
 800557e:	d402      	bmi.n	8005586 <_printf_i+0x186>
 8005580:	065f      	lsls	r7, r3, #25
 8005582:	bf48      	it	mi
 8005584:	b2ad      	uxthmi	r5, r5
 8005586:	6031      	str	r1, [r6, #0]
 8005588:	07d9      	lsls	r1, r3, #31
 800558a:	bf44      	itt	mi
 800558c:	f043 0320 	orrmi.w	r3, r3, #32
 8005590:	6023      	strmi	r3, [r4, #0]
 8005592:	b11d      	cbz	r5, 800559c <_printf_i+0x19c>
 8005594:	2310      	movs	r3, #16
 8005596:	e7ad      	b.n	80054f4 <_printf_i+0xf4>
 8005598:	4826      	ldr	r0, [pc, #152]	@ (8005634 <_printf_i+0x234>)
 800559a:	e7e9      	b.n	8005570 <_printf_i+0x170>
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	f023 0320 	bic.w	r3, r3, #32
 80055a2:	6023      	str	r3, [r4, #0]
 80055a4:	e7f6      	b.n	8005594 <_printf_i+0x194>
 80055a6:	4616      	mov	r6, r2
 80055a8:	e7bd      	b.n	8005526 <_printf_i+0x126>
 80055aa:	6833      	ldr	r3, [r6, #0]
 80055ac:	6825      	ldr	r5, [r4, #0]
 80055ae:	6961      	ldr	r1, [r4, #20]
 80055b0:	1d18      	adds	r0, r3, #4
 80055b2:	6030      	str	r0, [r6, #0]
 80055b4:	062e      	lsls	r6, r5, #24
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	d501      	bpl.n	80055be <_printf_i+0x1be>
 80055ba:	6019      	str	r1, [r3, #0]
 80055bc:	e002      	b.n	80055c4 <_printf_i+0x1c4>
 80055be:	0668      	lsls	r0, r5, #25
 80055c0:	d5fb      	bpl.n	80055ba <_printf_i+0x1ba>
 80055c2:	8019      	strh	r1, [r3, #0]
 80055c4:	2300      	movs	r3, #0
 80055c6:	6123      	str	r3, [r4, #16]
 80055c8:	4616      	mov	r6, r2
 80055ca:	e7bc      	b.n	8005546 <_printf_i+0x146>
 80055cc:	6833      	ldr	r3, [r6, #0]
 80055ce:	1d1a      	adds	r2, r3, #4
 80055d0:	6032      	str	r2, [r6, #0]
 80055d2:	681e      	ldr	r6, [r3, #0]
 80055d4:	6862      	ldr	r2, [r4, #4]
 80055d6:	2100      	movs	r1, #0
 80055d8:	4630      	mov	r0, r6
 80055da:	f7fa fdf9 	bl	80001d0 <memchr>
 80055de:	b108      	cbz	r0, 80055e4 <_printf_i+0x1e4>
 80055e0:	1b80      	subs	r0, r0, r6
 80055e2:	6060      	str	r0, [r4, #4]
 80055e4:	6863      	ldr	r3, [r4, #4]
 80055e6:	6123      	str	r3, [r4, #16]
 80055e8:	2300      	movs	r3, #0
 80055ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055ee:	e7aa      	b.n	8005546 <_printf_i+0x146>
 80055f0:	6923      	ldr	r3, [r4, #16]
 80055f2:	4632      	mov	r2, r6
 80055f4:	4649      	mov	r1, r9
 80055f6:	4640      	mov	r0, r8
 80055f8:	47d0      	blx	sl
 80055fa:	3001      	adds	r0, #1
 80055fc:	d0ad      	beq.n	800555a <_printf_i+0x15a>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	079b      	lsls	r3, r3, #30
 8005602:	d413      	bmi.n	800562c <_printf_i+0x22c>
 8005604:	68e0      	ldr	r0, [r4, #12]
 8005606:	9b03      	ldr	r3, [sp, #12]
 8005608:	4298      	cmp	r0, r3
 800560a:	bfb8      	it	lt
 800560c:	4618      	movlt	r0, r3
 800560e:	e7a6      	b.n	800555e <_printf_i+0x15e>
 8005610:	2301      	movs	r3, #1
 8005612:	4632      	mov	r2, r6
 8005614:	4649      	mov	r1, r9
 8005616:	4640      	mov	r0, r8
 8005618:	47d0      	blx	sl
 800561a:	3001      	adds	r0, #1
 800561c:	d09d      	beq.n	800555a <_printf_i+0x15a>
 800561e:	3501      	adds	r5, #1
 8005620:	68e3      	ldr	r3, [r4, #12]
 8005622:	9903      	ldr	r1, [sp, #12]
 8005624:	1a5b      	subs	r3, r3, r1
 8005626:	42ab      	cmp	r3, r5
 8005628:	dcf2      	bgt.n	8005610 <_printf_i+0x210>
 800562a:	e7eb      	b.n	8005604 <_printf_i+0x204>
 800562c:	2500      	movs	r5, #0
 800562e:	f104 0619 	add.w	r6, r4, #25
 8005632:	e7f5      	b.n	8005620 <_printf_i+0x220>
 8005634:	08009686 	.word	0x08009686
 8005638:	08009697 	.word	0x08009697

0800563c <_scanf_float>:
 800563c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005640:	b087      	sub	sp, #28
 8005642:	4691      	mov	r9, r2
 8005644:	9303      	str	r3, [sp, #12]
 8005646:	688b      	ldr	r3, [r1, #8]
 8005648:	1e5a      	subs	r2, r3, #1
 800564a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800564e:	bf81      	itttt	hi
 8005650:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005654:	eb03 0b05 	addhi.w	fp, r3, r5
 8005658:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800565c:	608b      	strhi	r3, [r1, #8]
 800565e:	680b      	ldr	r3, [r1, #0]
 8005660:	460a      	mov	r2, r1
 8005662:	f04f 0500 	mov.w	r5, #0
 8005666:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800566a:	f842 3b1c 	str.w	r3, [r2], #28
 800566e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005672:	4680      	mov	r8, r0
 8005674:	460c      	mov	r4, r1
 8005676:	bf98      	it	ls
 8005678:	f04f 0b00 	movls.w	fp, #0
 800567c:	9201      	str	r2, [sp, #4]
 800567e:	4616      	mov	r6, r2
 8005680:	46aa      	mov	sl, r5
 8005682:	462f      	mov	r7, r5
 8005684:	9502      	str	r5, [sp, #8]
 8005686:	68a2      	ldr	r2, [r4, #8]
 8005688:	b15a      	cbz	r2, 80056a2 <_scanf_float+0x66>
 800568a:	f8d9 3000 	ldr.w	r3, [r9]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b4e      	cmp	r3, #78	@ 0x4e
 8005692:	d863      	bhi.n	800575c <_scanf_float+0x120>
 8005694:	2b40      	cmp	r3, #64	@ 0x40
 8005696:	d83b      	bhi.n	8005710 <_scanf_float+0xd4>
 8005698:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800569c:	b2c8      	uxtb	r0, r1
 800569e:	280e      	cmp	r0, #14
 80056a0:	d939      	bls.n	8005716 <_scanf_float+0xda>
 80056a2:	b11f      	cbz	r7, 80056ac <_scanf_float+0x70>
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056aa:	6023      	str	r3, [r4, #0]
 80056ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056b0:	f1ba 0f01 	cmp.w	sl, #1
 80056b4:	f200 8114 	bhi.w	80058e0 <_scanf_float+0x2a4>
 80056b8:	9b01      	ldr	r3, [sp, #4]
 80056ba:	429e      	cmp	r6, r3
 80056bc:	f200 8105 	bhi.w	80058ca <_scanf_float+0x28e>
 80056c0:	2001      	movs	r0, #1
 80056c2:	b007      	add	sp, #28
 80056c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80056cc:	2a0d      	cmp	r2, #13
 80056ce:	d8e8      	bhi.n	80056a2 <_scanf_float+0x66>
 80056d0:	a101      	add	r1, pc, #4	@ (adr r1, 80056d8 <_scanf_float+0x9c>)
 80056d2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80056d6:	bf00      	nop
 80056d8:	08005821 	.word	0x08005821
 80056dc:	080056a3 	.word	0x080056a3
 80056e0:	080056a3 	.word	0x080056a3
 80056e4:	080056a3 	.word	0x080056a3
 80056e8:	0800587d 	.word	0x0800587d
 80056ec:	08005857 	.word	0x08005857
 80056f0:	080056a3 	.word	0x080056a3
 80056f4:	080056a3 	.word	0x080056a3
 80056f8:	0800582f 	.word	0x0800582f
 80056fc:	080056a3 	.word	0x080056a3
 8005700:	080056a3 	.word	0x080056a3
 8005704:	080056a3 	.word	0x080056a3
 8005708:	080056a3 	.word	0x080056a3
 800570c:	080057eb 	.word	0x080057eb
 8005710:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005714:	e7da      	b.n	80056cc <_scanf_float+0x90>
 8005716:	290e      	cmp	r1, #14
 8005718:	d8c3      	bhi.n	80056a2 <_scanf_float+0x66>
 800571a:	a001      	add	r0, pc, #4	@ (adr r0, 8005720 <_scanf_float+0xe4>)
 800571c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005720:	080057db 	.word	0x080057db
 8005724:	080056a3 	.word	0x080056a3
 8005728:	080057db 	.word	0x080057db
 800572c:	0800586b 	.word	0x0800586b
 8005730:	080056a3 	.word	0x080056a3
 8005734:	0800577d 	.word	0x0800577d
 8005738:	080057c1 	.word	0x080057c1
 800573c:	080057c1 	.word	0x080057c1
 8005740:	080057c1 	.word	0x080057c1
 8005744:	080057c1 	.word	0x080057c1
 8005748:	080057c1 	.word	0x080057c1
 800574c:	080057c1 	.word	0x080057c1
 8005750:	080057c1 	.word	0x080057c1
 8005754:	080057c1 	.word	0x080057c1
 8005758:	080057c1 	.word	0x080057c1
 800575c:	2b6e      	cmp	r3, #110	@ 0x6e
 800575e:	d809      	bhi.n	8005774 <_scanf_float+0x138>
 8005760:	2b60      	cmp	r3, #96	@ 0x60
 8005762:	d8b1      	bhi.n	80056c8 <_scanf_float+0x8c>
 8005764:	2b54      	cmp	r3, #84	@ 0x54
 8005766:	d07b      	beq.n	8005860 <_scanf_float+0x224>
 8005768:	2b59      	cmp	r3, #89	@ 0x59
 800576a:	d19a      	bne.n	80056a2 <_scanf_float+0x66>
 800576c:	2d07      	cmp	r5, #7
 800576e:	d198      	bne.n	80056a2 <_scanf_float+0x66>
 8005770:	2508      	movs	r5, #8
 8005772:	e02f      	b.n	80057d4 <_scanf_float+0x198>
 8005774:	2b74      	cmp	r3, #116	@ 0x74
 8005776:	d073      	beq.n	8005860 <_scanf_float+0x224>
 8005778:	2b79      	cmp	r3, #121	@ 0x79
 800577a:	e7f6      	b.n	800576a <_scanf_float+0x12e>
 800577c:	6821      	ldr	r1, [r4, #0]
 800577e:	05c8      	lsls	r0, r1, #23
 8005780:	d51e      	bpl.n	80057c0 <_scanf_float+0x184>
 8005782:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005786:	6021      	str	r1, [r4, #0]
 8005788:	3701      	adds	r7, #1
 800578a:	f1bb 0f00 	cmp.w	fp, #0
 800578e:	d003      	beq.n	8005798 <_scanf_float+0x15c>
 8005790:	3201      	adds	r2, #1
 8005792:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005796:	60a2      	str	r2, [r4, #8]
 8005798:	68a3      	ldr	r3, [r4, #8]
 800579a:	3b01      	subs	r3, #1
 800579c:	60a3      	str	r3, [r4, #8]
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	3301      	adds	r3, #1
 80057a2:	6123      	str	r3, [r4, #16]
 80057a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80057a8:	3b01      	subs	r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f8c9 3004 	str.w	r3, [r9, #4]
 80057b0:	f340 8082 	ble.w	80058b8 <_scanf_float+0x27c>
 80057b4:	f8d9 3000 	ldr.w	r3, [r9]
 80057b8:	3301      	adds	r3, #1
 80057ba:	f8c9 3000 	str.w	r3, [r9]
 80057be:	e762      	b.n	8005686 <_scanf_float+0x4a>
 80057c0:	eb1a 0105 	adds.w	r1, sl, r5
 80057c4:	f47f af6d 	bne.w	80056a2 <_scanf_float+0x66>
 80057c8:	6822      	ldr	r2, [r4, #0]
 80057ca:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80057ce:	6022      	str	r2, [r4, #0]
 80057d0:	460d      	mov	r5, r1
 80057d2:	468a      	mov	sl, r1
 80057d4:	f806 3b01 	strb.w	r3, [r6], #1
 80057d8:	e7de      	b.n	8005798 <_scanf_float+0x15c>
 80057da:	6822      	ldr	r2, [r4, #0]
 80057dc:	0610      	lsls	r0, r2, #24
 80057de:	f57f af60 	bpl.w	80056a2 <_scanf_float+0x66>
 80057e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057e6:	6022      	str	r2, [r4, #0]
 80057e8:	e7f4      	b.n	80057d4 <_scanf_float+0x198>
 80057ea:	f1ba 0f00 	cmp.w	sl, #0
 80057ee:	d10c      	bne.n	800580a <_scanf_float+0x1ce>
 80057f0:	b977      	cbnz	r7, 8005810 <_scanf_float+0x1d4>
 80057f2:	6822      	ldr	r2, [r4, #0]
 80057f4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80057f8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80057fc:	d108      	bne.n	8005810 <_scanf_float+0x1d4>
 80057fe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005802:	6022      	str	r2, [r4, #0]
 8005804:	f04f 0a01 	mov.w	sl, #1
 8005808:	e7e4      	b.n	80057d4 <_scanf_float+0x198>
 800580a:	f1ba 0f02 	cmp.w	sl, #2
 800580e:	d050      	beq.n	80058b2 <_scanf_float+0x276>
 8005810:	2d01      	cmp	r5, #1
 8005812:	d002      	beq.n	800581a <_scanf_float+0x1de>
 8005814:	2d04      	cmp	r5, #4
 8005816:	f47f af44 	bne.w	80056a2 <_scanf_float+0x66>
 800581a:	3501      	adds	r5, #1
 800581c:	b2ed      	uxtb	r5, r5
 800581e:	e7d9      	b.n	80057d4 <_scanf_float+0x198>
 8005820:	f1ba 0f01 	cmp.w	sl, #1
 8005824:	f47f af3d 	bne.w	80056a2 <_scanf_float+0x66>
 8005828:	f04f 0a02 	mov.w	sl, #2
 800582c:	e7d2      	b.n	80057d4 <_scanf_float+0x198>
 800582e:	b975      	cbnz	r5, 800584e <_scanf_float+0x212>
 8005830:	2f00      	cmp	r7, #0
 8005832:	f47f af37 	bne.w	80056a4 <_scanf_float+0x68>
 8005836:	6822      	ldr	r2, [r4, #0]
 8005838:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800583c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005840:	f040 8103 	bne.w	8005a4a <_scanf_float+0x40e>
 8005844:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005848:	6022      	str	r2, [r4, #0]
 800584a:	2501      	movs	r5, #1
 800584c:	e7c2      	b.n	80057d4 <_scanf_float+0x198>
 800584e:	2d03      	cmp	r5, #3
 8005850:	d0e3      	beq.n	800581a <_scanf_float+0x1de>
 8005852:	2d05      	cmp	r5, #5
 8005854:	e7df      	b.n	8005816 <_scanf_float+0x1da>
 8005856:	2d02      	cmp	r5, #2
 8005858:	f47f af23 	bne.w	80056a2 <_scanf_float+0x66>
 800585c:	2503      	movs	r5, #3
 800585e:	e7b9      	b.n	80057d4 <_scanf_float+0x198>
 8005860:	2d06      	cmp	r5, #6
 8005862:	f47f af1e 	bne.w	80056a2 <_scanf_float+0x66>
 8005866:	2507      	movs	r5, #7
 8005868:	e7b4      	b.n	80057d4 <_scanf_float+0x198>
 800586a:	6822      	ldr	r2, [r4, #0]
 800586c:	0591      	lsls	r1, r2, #22
 800586e:	f57f af18 	bpl.w	80056a2 <_scanf_float+0x66>
 8005872:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005876:	6022      	str	r2, [r4, #0]
 8005878:	9702      	str	r7, [sp, #8]
 800587a:	e7ab      	b.n	80057d4 <_scanf_float+0x198>
 800587c:	6822      	ldr	r2, [r4, #0]
 800587e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005882:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005886:	d005      	beq.n	8005894 <_scanf_float+0x258>
 8005888:	0550      	lsls	r0, r2, #21
 800588a:	f57f af0a 	bpl.w	80056a2 <_scanf_float+0x66>
 800588e:	2f00      	cmp	r7, #0
 8005890:	f000 80db 	beq.w	8005a4a <_scanf_float+0x40e>
 8005894:	0591      	lsls	r1, r2, #22
 8005896:	bf58      	it	pl
 8005898:	9902      	ldrpl	r1, [sp, #8]
 800589a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800589e:	bf58      	it	pl
 80058a0:	1a79      	subpl	r1, r7, r1
 80058a2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80058a6:	bf58      	it	pl
 80058a8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80058ac:	6022      	str	r2, [r4, #0]
 80058ae:	2700      	movs	r7, #0
 80058b0:	e790      	b.n	80057d4 <_scanf_float+0x198>
 80058b2:	f04f 0a03 	mov.w	sl, #3
 80058b6:	e78d      	b.n	80057d4 <_scanf_float+0x198>
 80058b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80058bc:	4649      	mov	r1, r9
 80058be:	4640      	mov	r0, r8
 80058c0:	4798      	blx	r3
 80058c2:	2800      	cmp	r0, #0
 80058c4:	f43f aedf 	beq.w	8005686 <_scanf_float+0x4a>
 80058c8:	e6eb      	b.n	80056a2 <_scanf_float+0x66>
 80058ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058d2:	464a      	mov	r2, r9
 80058d4:	4640      	mov	r0, r8
 80058d6:	4798      	blx	r3
 80058d8:	6923      	ldr	r3, [r4, #16]
 80058da:	3b01      	subs	r3, #1
 80058dc:	6123      	str	r3, [r4, #16]
 80058de:	e6eb      	b.n	80056b8 <_scanf_float+0x7c>
 80058e0:	1e6b      	subs	r3, r5, #1
 80058e2:	2b06      	cmp	r3, #6
 80058e4:	d824      	bhi.n	8005930 <_scanf_float+0x2f4>
 80058e6:	2d02      	cmp	r5, #2
 80058e8:	d836      	bhi.n	8005958 <_scanf_float+0x31c>
 80058ea:	9b01      	ldr	r3, [sp, #4]
 80058ec:	429e      	cmp	r6, r3
 80058ee:	f67f aee7 	bls.w	80056c0 <_scanf_float+0x84>
 80058f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058fa:	464a      	mov	r2, r9
 80058fc:	4640      	mov	r0, r8
 80058fe:	4798      	blx	r3
 8005900:	6923      	ldr	r3, [r4, #16]
 8005902:	3b01      	subs	r3, #1
 8005904:	6123      	str	r3, [r4, #16]
 8005906:	e7f0      	b.n	80058ea <_scanf_float+0x2ae>
 8005908:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800590c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005910:	464a      	mov	r2, r9
 8005912:	4640      	mov	r0, r8
 8005914:	4798      	blx	r3
 8005916:	6923      	ldr	r3, [r4, #16]
 8005918:	3b01      	subs	r3, #1
 800591a:	6123      	str	r3, [r4, #16]
 800591c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005920:	fa5f fa8a 	uxtb.w	sl, sl
 8005924:	f1ba 0f02 	cmp.w	sl, #2
 8005928:	d1ee      	bne.n	8005908 <_scanf_float+0x2cc>
 800592a:	3d03      	subs	r5, #3
 800592c:	b2ed      	uxtb	r5, r5
 800592e:	1b76      	subs	r6, r6, r5
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	05da      	lsls	r2, r3, #23
 8005934:	d530      	bpl.n	8005998 <_scanf_float+0x35c>
 8005936:	055b      	lsls	r3, r3, #21
 8005938:	d511      	bpl.n	800595e <_scanf_float+0x322>
 800593a:	9b01      	ldr	r3, [sp, #4]
 800593c:	429e      	cmp	r6, r3
 800593e:	f67f aebf 	bls.w	80056c0 <_scanf_float+0x84>
 8005942:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005946:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800594a:	464a      	mov	r2, r9
 800594c:	4640      	mov	r0, r8
 800594e:	4798      	blx	r3
 8005950:	6923      	ldr	r3, [r4, #16]
 8005952:	3b01      	subs	r3, #1
 8005954:	6123      	str	r3, [r4, #16]
 8005956:	e7f0      	b.n	800593a <_scanf_float+0x2fe>
 8005958:	46aa      	mov	sl, r5
 800595a:	46b3      	mov	fp, r6
 800595c:	e7de      	b.n	800591c <_scanf_float+0x2e0>
 800595e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005962:	6923      	ldr	r3, [r4, #16]
 8005964:	2965      	cmp	r1, #101	@ 0x65
 8005966:	f103 33ff 	add.w	r3, r3, #4294967295
 800596a:	f106 35ff 	add.w	r5, r6, #4294967295
 800596e:	6123      	str	r3, [r4, #16]
 8005970:	d00c      	beq.n	800598c <_scanf_float+0x350>
 8005972:	2945      	cmp	r1, #69	@ 0x45
 8005974:	d00a      	beq.n	800598c <_scanf_float+0x350>
 8005976:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800597a:	464a      	mov	r2, r9
 800597c:	4640      	mov	r0, r8
 800597e:	4798      	blx	r3
 8005980:	6923      	ldr	r3, [r4, #16]
 8005982:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005986:	3b01      	subs	r3, #1
 8005988:	1eb5      	subs	r5, r6, #2
 800598a:	6123      	str	r3, [r4, #16]
 800598c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005990:	464a      	mov	r2, r9
 8005992:	4640      	mov	r0, r8
 8005994:	4798      	blx	r3
 8005996:	462e      	mov	r6, r5
 8005998:	6822      	ldr	r2, [r4, #0]
 800599a:	f012 0210 	ands.w	r2, r2, #16
 800599e:	d001      	beq.n	80059a4 <_scanf_float+0x368>
 80059a0:	2000      	movs	r0, #0
 80059a2:	e68e      	b.n	80056c2 <_scanf_float+0x86>
 80059a4:	7032      	strb	r2, [r6, #0]
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059b0:	d125      	bne.n	80059fe <_scanf_float+0x3c2>
 80059b2:	9b02      	ldr	r3, [sp, #8]
 80059b4:	429f      	cmp	r7, r3
 80059b6:	d00a      	beq.n	80059ce <_scanf_float+0x392>
 80059b8:	1bda      	subs	r2, r3, r7
 80059ba:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80059be:	429e      	cmp	r6, r3
 80059c0:	bf28      	it	cs
 80059c2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80059c6:	4922      	ldr	r1, [pc, #136]	@ (8005a50 <_scanf_float+0x414>)
 80059c8:	4630      	mov	r0, r6
 80059ca:	f000 f965 	bl	8005c98 <siprintf>
 80059ce:	9901      	ldr	r1, [sp, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	4640      	mov	r0, r8
 80059d4:	f002 fce4 	bl	80083a0 <_strtod_r>
 80059d8:	9b03      	ldr	r3, [sp, #12]
 80059da:	6821      	ldr	r1, [r4, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f011 0f02 	tst.w	r1, #2
 80059e2:	ec57 6b10 	vmov	r6, r7, d0
 80059e6:	f103 0204 	add.w	r2, r3, #4
 80059ea:	d015      	beq.n	8005a18 <_scanf_float+0x3dc>
 80059ec:	9903      	ldr	r1, [sp, #12]
 80059ee:	600a      	str	r2, [r1, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	e9c3 6700 	strd	r6, r7, [r3]
 80059f6:	68e3      	ldr	r3, [r4, #12]
 80059f8:	3301      	adds	r3, #1
 80059fa:	60e3      	str	r3, [r4, #12]
 80059fc:	e7d0      	b.n	80059a0 <_scanf_float+0x364>
 80059fe:	9b04      	ldr	r3, [sp, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0e4      	beq.n	80059ce <_scanf_float+0x392>
 8005a04:	9905      	ldr	r1, [sp, #20]
 8005a06:	230a      	movs	r3, #10
 8005a08:	3101      	adds	r1, #1
 8005a0a:	4640      	mov	r0, r8
 8005a0c:	f002 fd48 	bl	80084a0 <_strtol_r>
 8005a10:	9b04      	ldr	r3, [sp, #16]
 8005a12:	9e05      	ldr	r6, [sp, #20]
 8005a14:	1ac2      	subs	r2, r0, r3
 8005a16:	e7d0      	b.n	80059ba <_scanf_float+0x37e>
 8005a18:	f011 0f04 	tst.w	r1, #4
 8005a1c:	9903      	ldr	r1, [sp, #12]
 8005a1e:	600a      	str	r2, [r1, #0]
 8005a20:	d1e6      	bne.n	80059f0 <_scanf_float+0x3b4>
 8005a22:	681d      	ldr	r5, [r3, #0]
 8005a24:	4632      	mov	r2, r6
 8005a26:	463b      	mov	r3, r7
 8005a28:	4630      	mov	r0, r6
 8005a2a:	4639      	mov	r1, r7
 8005a2c:	f7fb f87e 	bl	8000b2c <__aeabi_dcmpun>
 8005a30:	b128      	cbz	r0, 8005a3e <_scanf_float+0x402>
 8005a32:	4808      	ldr	r0, [pc, #32]	@ (8005a54 <_scanf_float+0x418>)
 8005a34:	f000 faaa 	bl	8005f8c <nanf>
 8005a38:	ed85 0a00 	vstr	s0, [r5]
 8005a3c:	e7db      	b.n	80059f6 <_scanf_float+0x3ba>
 8005a3e:	4630      	mov	r0, r6
 8005a40:	4639      	mov	r1, r7
 8005a42:	f7fb f8d1 	bl	8000be8 <__aeabi_d2f>
 8005a46:	6028      	str	r0, [r5, #0]
 8005a48:	e7d5      	b.n	80059f6 <_scanf_float+0x3ba>
 8005a4a:	2700      	movs	r7, #0
 8005a4c:	e62e      	b.n	80056ac <_scanf_float+0x70>
 8005a4e:	bf00      	nop
 8005a50:	080096a8 	.word	0x080096a8
 8005a54:	080097e9 	.word	0x080097e9

08005a58 <std>:
 8005a58:	2300      	movs	r3, #0
 8005a5a:	b510      	push	{r4, lr}
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8005a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a66:	6083      	str	r3, [r0, #8]
 8005a68:	8181      	strh	r1, [r0, #12]
 8005a6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a6c:	81c2      	strh	r2, [r0, #14]
 8005a6e:	6183      	str	r3, [r0, #24]
 8005a70:	4619      	mov	r1, r3
 8005a72:	2208      	movs	r2, #8
 8005a74:	305c      	adds	r0, #92	@ 0x5c
 8005a76:	f000 fa09 	bl	8005e8c <memset>
 8005a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab0 <std+0x58>)
 8005a7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab4 <std+0x5c>)
 8005a80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a82:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab8 <std+0x60>)
 8005a84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a86:	4b0d      	ldr	r3, [pc, #52]	@ (8005abc <std+0x64>)
 8005a88:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac0 <std+0x68>)
 8005a8c:	6224      	str	r4, [r4, #32]
 8005a8e:	429c      	cmp	r4, r3
 8005a90:	d006      	beq.n	8005aa0 <std+0x48>
 8005a92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a96:	4294      	cmp	r4, r2
 8005a98:	d002      	beq.n	8005aa0 <std+0x48>
 8005a9a:	33d0      	adds	r3, #208	@ 0xd0
 8005a9c:	429c      	cmp	r4, r3
 8005a9e:	d105      	bne.n	8005aac <std+0x54>
 8005aa0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aa8:	f000 ba6c 	b.w	8005f84 <__retarget_lock_init_recursive>
 8005aac:	bd10      	pop	{r4, pc}
 8005aae:	bf00      	nop
 8005ab0:	08005cdd 	.word	0x08005cdd
 8005ab4:	08005cff 	.word	0x08005cff
 8005ab8:	08005d37 	.word	0x08005d37
 8005abc:	08005d5b 	.word	0x08005d5b
 8005ac0:	20000310 	.word	0x20000310

08005ac4 <stdio_exit_handler>:
 8005ac4:	4a02      	ldr	r2, [pc, #8]	@ (8005ad0 <stdio_exit_handler+0xc>)
 8005ac6:	4903      	ldr	r1, [pc, #12]	@ (8005ad4 <stdio_exit_handler+0x10>)
 8005ac8:	4803      	ldr	r0, [pc, #12]	@ (8005ad8 <stdio_exit_handler+0x14>)
 8005aca:	f000 b869 	b.w	8005ba0 <_fwalk_sglue>
 8005ace:	bf00      	nop
 8005ad0:	20000020 	.word	0x20000020
 8005ad4:	0800885d 	.word	0x0800885d
 8005ad8:	20000030 	.word	0x20000030

08005adc <cleanup_stdio>:
 8005adc:	6841      	ldr	r1, [r0, #4]
 8005ade:	4b0c      	ldr	r3, [pc, #48]	@ (8005b10 <cleanup_stdio+0x34>)
 8005ae0:	4299      	cmp	r1, r3
 8005ae2:	b510      	push	{r4, lr}
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	d001      	beq.n	8005aec <cleanup_stdio+0x10>
 8005ae8:	f002 feb8 	bl	800885c <_fflush_r>
 8005aec:	68a1      	ldr	r1, [r4, #8]
 8005aee:	4b09      	ldr	r3, [pc, #36]	@ (8005b14 <cleanup_stdio+0x38>)
 8005af0:	4299      	cmp	r1, r3
 8005af2:	d002      	beq.n	8005afa <cleanup_stdio+0x1e>
 8005af4:	4620      	mov	r0, r4
 8005af6:	f002 feb1 	bl	800885c <_fflush_r>
 8005afa:	68e1      	ldr	r1, [r4, #12]
 8005afc:	4b06      	ldr	r3, [pc, #24]	@ (8005b18 <cleanup_stdio+0x3c>)
 8005afe:	4299      	cmp	r1, r3
 8005b00:	d004      	beq.n	8005b0c <cleanup_stdio+0x30>
 8005b02:	4620      	mov	r0, r4
 8005b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b08:	f002 bea8 	b.w	800885c <_fflush_r>
 8005b0c:	bd10      	pop	{r4, pc}
 8005b0e:	bf00      	nop
 8005b10:	20000310 	.word	0x20000310
 8005b14:	20000378 	.word	0x20000378
 8005b18:	200003e0 	.word	0x200003e0

08005b1c <global_stdio_init.part.0>:
 8005b1c:	b510      	push	{r4, lr}
 8005b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b4c <global_stdio_init.part.0+0x30>)
 8005b20:	4c0b      	ldr	r4, [pc, #44]	@ (8005b50 <global_stdio_init.part.0+0x34>)
 8005b22:	4a0c      	ldr	r2, [pc, #48]	@ (8005b54 <global_stdio_init.part.0+0x38>)
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	4620      	mov	r0, r4
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2104      	movs	r1, #4
 8005b2c:	f7ff ff94 	bl	8005a58 <std>
 8005b30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b34:	2201      	movs	r2, #1
 8005b36:	2109      	movs	r1, #9
 8005b38:	f7ff ff8e 	bl	8005a58 <std>
 8005b3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b40:	2202      	movs	r2, #2
 8005b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b46:	2112      	movs	r1, #18
 8005b48:	f7ff bf86 	b.w	8005a58 <std>
 8005b4c:	20000448 	.word	0x20000448
 8005b50:	20000310 	.word	0x20000310
 8005b54:	08005ac5 	.word	0x08005ac5

08005b58 <__sfp_lock_acquire>:
 8005b58:	4801      	ldr	r0, [pc, #4]	@ (8005b60 <__sfp_lock_acquire+0x8>)
 8005b5a:	f000 ba14 	b.w	8005f86 <__retarget_lock_acquire_recursive>
 8005b5e:	bf00      	nop
 8005b60:	20000451 	.word	0x20000451

08005b64 <__sfp_lock_release>:
 8005b64:	4801      	ldr	r0, [pc, #4]	@ (8005b6c <__sfp_lock_release+0x8>)
 8005b66:	f000 ba0f 	b.w	8005f88 <__retarget_lock_release_recursive>
 8005b6a:	bf00      	nop
 8005b6c:	20000451 	.word	0x20000451

08005b70 <__sinit>:
 8005b70:	b510      	push	{r4, lr}
 8005b72:	4604      	mov	r4, r0
 8005b74:	f7ff fff0 	bl	8005b58 <__sfp_lock_acquire>
 8005b78:	6a23      	ldr	r3, [r4, #32]
 8005b7a:	b11b      	cbz	r3, 8005b84 <__sinit+0x14>
 8005b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b80:	f7ff bff0 	b.w	8005b64 <__sfp_lock_release>
 8005b84:	4b04      	ldr	r3, [pc, #16]	@ (8005b98 <__sinit+0x28>)
 8005b86:	6223      	str	r3, [r4, #32]
 8005b88:	4b04      	ldr	r3, [pc, #16]	@ (8005b9c <__sinit+0x2c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1f5      	bne.n	8005b7c <__sinit+0xc>
 8005b90:	f7ff ffc4 	bl	8005b1c <global_stdio_init.part.0>
 8005b94:	e7f2      	b.n	8005b7c <__sinit+0xc>
 8005b96:	bf00      	nop
 8005b98:	08005add 	.word	0x08005add
 8005b9c:	20000448 	.word	0x20000448

08005ba0 <_fwalk_sglue>:
 8005ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ba4:	4607      	mov	r7, r0
 8005ba6:	4688      	mov	r8, r1
 8005ba8:	4614      	mov	r4, r2
 8005baa:	2600      	movs	r6, #0
 8005bac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bb0:	f1b9 0901 	subs.w	r9, r9, #1
 8005bb4:	d505      	bpl.n	8005bc2 <_fwalk_sglue+0x22>
 8005bb6:	6824      	ldr	r4, [r4, #0]
 8005bb8:	2c00      	cmp	r4, #0
 8005bba:	d1f7      	bne.n	8005bac <_fwalk_sglue+0xc>
 8005bbc:	4630      	mov	r0, r6
 8005bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bc2:	89ab      	ldrh	r3, [r5, #12]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d907      	bls.n	8005bd8 <_fwalk_sglue+0x38>
 8005bc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	d003      	beq.n	8005bd8 <_fwalk_sglue+0x38>
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	4638      	mov	r0, r7
 8005bd4:	47c0      	blx	r8
 8005bd6:	4306      	orrs	r6, r0
 8005bd8:	3568      	adds	r5, #104	@ 0x68
 8005bda:	e7e9      	b.n	8005bb0 <_fwalk_sglue+0x10>

08005bdc <_puts_r>:
 8005bdc:	6a03      	ldr	r3, [r0, #32]
 8005bde:	b570      	push	{r4, r5, r6, lr}
 8005be0:	6884      	ldr	r4, [r0, #8]
 8005be2:	4605      	mov	r5, r0
 8005be4:	460e      	mov	r6, r1
 8005be6:	b90b      	cbnz	r3, 8005bec <_puts_r+0x10>
 8005be8:	f7ff ffc2 	bl	8005b70 <__sinit>
 8005bec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bee:	07db      	lsls	r3, r3, #31
 8005bf0:	d405      	bmi.n	8005bfe <_puts_r+0x22>
 8005bf2:	89a3      	ldrh	r3, [r4, #12]
 8005bf4:	0598      	lsls	r0, r3, #22
 8005bf6:	d402      	bmi.n	8005bfe <_puts_r+0x22>
 8005bf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bfa:	f000 f9c4 	bl	8005f86 <__retarget_lock_acquire_recursive>
 8005bfe:	89a3      	ldrh	r3, [r4, #12]
 8005c00:	0719      	lsls	r1, r3, #28
 8005c02:	d502      	bpl.n	8005c0a <_puts_r+0x2e>
 8005c04:	6923      	ldr	r3, [r4, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d135      	bne.n	8005c76 <_puts_r+0x9a>
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	f000 f8e7 	bl	8005de0 <__swsetup_r>
 8005c12:	b380      	cbz	r0, 8005c76 <_puts_r+0x9a>
 8005c14:	f04f 35ff 	mov.w	r5, #4294967295
 8005c18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c1a:	07da      	lsls	r2, r3, #31
 8005c1c:	d405      	bmi.n	8005c2a <_puts_r+0x4e>
 8005c1e:	89a3      	ldrh	r3, [r4, #12]
 8005c20:	059b      	lsls	r3, r3, #22
 8005c22:	d402      	bmi.n	8005c2a <_puts_r+0x4e>
 8005c24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c26:	f000 f9af 	bl	8005f88 <__retarget_lock_release_recursive>
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	bd70      	pop	{r4, r5, r6, pc}
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	da04      	bge.n	8005c3c <_puts_r+0x60>
 8005c32:	69a2      	ldr	r2, [r4, #24]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	dc17      	bgt.n	8005c68 <_puts_r+0x8c>
 8005c38:	290a      	cmp	r1, #10
 8005c3a:	d015      	beq.n	8005c68 <_puts_r+0x8c>
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	1c5a      	adds	r2, r3, #1
 8005c40:	6022      	str	r2, [r4, #0]
 8005c42:	7019      	strb	r1, [r3, #0]
 8005c44:	68a3      	ldr	r3, [r4, #8]
 8005c46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	60a3      	str	r3, [r4, #8]
 8005c4e:	2900      	cmp	r1, #0
 8005c50:	d1ed      	bne.n	8005c2e <_puts_r+0x52>
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	da11      	bge.n	8005c7a <_puts_r+0x9e>
 8005c56:	4622      	mov	r2, r4
 8005c58:	210a      	movs	r1, #10
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	f000 f881 	bl	8005d62 <__swbuf_r>
 8005c60:	3001      	adds	r0, #1
 8005c62:	d0d7      	beq.n	8005c14 <_puts_r+0x38>
 8005c64:	250a      	movs	r5, #10
 8005c66:	e7d7      	b.n	8005c18 <_puts_r+0x3c>
 8005c68:	4622      	mov	r2, r4
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	f000 f879 	bl	8005d62 <__swbuf_r>
 8005c70:	3001      	adds	r0, #1
 8005c72:	d1e7      	bne.n	8005c44 <_puts_r+0x68>
 8005c74:	e7ce      	b.n	8005c14 <_puts_r+0x38>
 8005c76:	3e01      	subs	r6, #1
 8005c78:	e7e4      	b.n	8005c44 <_puts_r+0x68>
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	6022      	str	r2, [r4, #0]
 8005c80:	220a      	movs	r2, #10
 8005c82:	701a      	strb	r2, [r3, #0]
 8005c84:	e7ee      	b.n	8005c64 <_puts_r+0x88>
	...

08005c88 <puts>:
 8005c88:	4b02      	ldr	r3, [pc, #8]	@ (8005c94 <puts+0xc>)
 8005c8a:	4601      	mov	r1, r0
 8005c8c:	6818      	ldr	r0, [r3, #0]
 8005c8e:	f7ff bfa5 	b.w	8005bdc <_puts_r>
 8005c92:	bf00      	nop
 8005c94:	2000002c 	.word	0x2000002c

08005c98 <siprintf>:
 8005c98:	b40e      	push	{r1, r2, r3}
 8005c9a:	b510      	push	{r4, lr}
 8005c9c:	b09d      	sub	sp, #116	@ 0x74
 8005c9e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005ca0:	9002      	str	r0, [sp, #8]
 8005ca2:	9006      	str	r0, [sp, #24]
 8005ca4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005ca8:	480a      	ldr	r0, [pc, #40]	@ (8005cd4 <siprintf+0x3c>)
 8005caa:	9107      	str	r1, [sp, #28]
 8005cac:	9104      	str	r1, [sp, #16]
 8005cae:	490a      	ldr	r1, [pc, #40]	@ (8005cd8 <siprintf+0x40>)
 8005cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cb4:	9105      	str	r1, [sp, #20]
 8005cb6:	2400      	movs	r4, #0
 8005cb8:	a902      	add	r1, sp, #8
 8005cba:	6800      	ldr	r0, [r0, #0]
 8005cbc:	9301      	str	r3, [sp, #4]
 8005cbe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005cc0:	f002 fc4c 	bl	800855c <_svfiprintf_r>
 8005cc4:	9b02      	ldr	r3, [sp, #8]
 8005cc6:	701c      	strb	r4, [r3, #0]
 8005cc8:	b01d      	add	sp, #116	@ 0x74
 8005cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cce:	b003      	add	sp, #12
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	2000002c 	.word	0x2000002c
 8005cd8:	ffff0208 	.word	0xffff0208

08005cdc <__sread>:
 8005cdc:	b510      	push	{r4, lr}
 8005cde:	460c      	mov	r4, r1
 8005ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce4:	f000 f900 	bl	8005ee8 <_read_r>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	bfab      	itete	ge
 8005cec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005cee:	89a3      	ldrhlt	r3, [r4, #12]
 8005cf0:	181b      	addge	r3, r3, r0
 8005cf2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005cf6:	bfac      	ite	ge
 8005cf8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005cfa:	81a3      	strhlt	r3, [r4, #12]
 8005cfc:	bd10      	pop	{r4, pc}

08005cfe <__swrite>:
 8005cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d02:	461f      	mov	r7, r3
 8005d04:	898b      	ldrh	r3, [r1, #12]
 8005d06:	05db      	lsls	r3, r3, #23
 8005d08:	4605      	mov	r5, r0
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	4616      	mov	r6, r2
 8005d0e:	d505      	bpl.n	8005d1c <__swrite+0x1e>
 8005d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d14:	2302      	movs	r3, #2
 8005d16:	2200      	movs	r2, #0
 8005d18:	f000 f8d4 	bl	8005ec4 <_lseek_r>
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d26:	81a3      	strh	r3, [r4, #12]
 8005d28:	4632      	mov	r2, r6
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d32:	f000 b8eb 	b.w	8005f0c <_write_r>

08005d36 <__sseek>:
 8005d36:	b510      	push	{r4, lr}
 8005d38:	460c      	mov	r4, r1
 8005d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d3e:	f000 f8c1 	bl	8005ec4 <_lseek_r>
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	89a3      	ldrh	r3, [r4, #12]
 8005d46:	bf15      	itete	ne
 8005d48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d52:	81a3      	strheq	r3, [r4, #12]
 8005d54:	bf18      	it	ne
 8005d56:	81a3      	strhne	r3, [r4, #12]
 8005d58:	bd10      	pop	{r4, pc}

08005d5a <__sclose>:
 8005d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d5e:	f000 b8a1 	b.w	8005ea4 <_close_r>

08005d62 <__swbuf_r>:
 8005d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d64:	460e      	mov	r6, r1
 8005d66:	4614      	mov	r4, r2
 8005d68:	4605      	mov	r5, r0
 8005d6a:	b118      	cbz	r0, 8005d74 <__swbuf_r+0x12>
 8005d6c:	6a03      	ldr	r3, [r0, #32]
 8005d6e:	b90b      	cbnz	r3, 8005d74 <__swbuf_r+0x12>
 8005d70:	f7ff fefe 	bl	8005b70 <__sinit>
 8005d74:	69a3      	ldr	r3, [r4, #24]
 8005d76:	60a3      	str	r3, [r4, #8]
 8005d78:	89a3      	ldrh	r3, [r4, #12]
 8005d7a:	071a      	lsls	r2, r3, #28
 8005d7c:	d501      	bpl.n	8005d82 <__swbuf_r+0x20>
 8005d7e:	6923      	ldr	r3, [r4, #16]
 8005d80:	b943      	cbnz	r3, 8005d94 <__swbuf_r+0x32>
 8005d82:	4621      	mov	r1, r4
 8005d84:	4628      	mov	r0, r5
 8005d86:	f000 f82b 	bl	8005de0 <__swsetup_r>
 8005d8a:	b118      	cbz	r0, 8005d94 <__swbuf_r+0x32>
 8005d8c:	f04f 37ff 	mov.w	r7, #4294967295
 8005d90:	4638      	mov	r0, r7
 8005d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	6922      	ldr	r2, [r4, #16]
 8005d98:	1a98      	subs	r0, r3, r2
 8005d9a:	6963      	ldr	r3, [r4, #20]
 8005d9c:	b2f6      	uxtb	r6, r6
 8005d9e:	4283      	cmp	r3, r0
 8005da0:	4637      	mov	r7, r6
 8005da2:	dc05      	bgt.n	8005db0 <__swbuf_r+0x4e>
 8005da4:	4621      	mov	r1, r4
 8005da6:	4628      	mov	r0, r5
 8005da8:	f002 fd58 	bl	800885c <_fflush_r>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d1ed      	bne.n	8005d8c <__swbuf_r+0x2a>
 8005db0:	68a3      	ldr	r3, [r4, #8]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	60a3      	str	r3, [r4, #8]
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	6022      	str	r2, [r4, #0]
 8005dbc:	701e      	strb	r6, [r3, #0]
 8005dbe:	6962      	ldr	r2, [r4, #20]
 8005dc0:	1c43      	adds	r3, r0, #1
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d004      	beq.n	8005dd0 <__swbuf_r+0x6e>
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	07db      	lsls	r3, r3, #31
 8005dca:	d5e1      	bpl.n	8005d90 <__swbuf_r+0x2e>
 8005dcc:	2e0a      	cmp	r6, #10
 8005dce:	d1df      	bne.n	8005d90 <__swbuf_r+0x2e>
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	f002 fd42 	bl	800885c <_fflush_r>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d0d9      	beq.n	8005d90 <__swbuf_r+0x2e>
 8005ddc:	e7d6      	b.n	8005d8c <__swbuf_r+0x2a>
	...

08005de0 <__swsetup_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4b29      	ldr	r3, [pc, #164]	@ (8005e88 <__swsetup_r+0xa8>)
 8005de4:	4605      	mov	r5, r0
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	460c      	mov	r4, r1
 8005dea:	b118      	cbz	r0, 8005df4 <__swsetup_r+0x14>
 8005dec:	6a03      	ldr	r3, [r0, #32]
 8005dee:	b90b      	cbnz	r3, 8005df4 <__swsetup_r+0x14>
 8005df0:	f7ff febe 	bl	8005b70 <__sinit>
 8005df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005df8:	0719      	lsls	r1, r3, #28
 8005dfa:	d422      	bmi.n	8005e42 <__swsetup_r+0x62>
 8005dfc:	06da      	lsls	r2, r3, #27
 8005dfe:	d407      	bmi.n	8005e10 <__swsetup_r+0x30>
 8005e00:	2209      	movs	r2, #9
 8005e02:	602a      	str	r2, [r5, #0]
 8005e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e08:	81a3      	strh	r3, [r4, #12]
 8005e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0e:	e033      	b.n	8005e78 <__swsetup_r+0x98>
 8005e10:	0758      	lsls	r0, r3, #29
 8005e12:	d512      	bpl.n	8005e3a <__swsetup_r+0x5a>
 8005e14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e16:	b141      	cbz	r1, 8005e2a <__swsetup_r+0x4a>
 8005e18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e1c:	4299      	cmp	r1, r3
 8005e1e:	d002      	beq.n	8005e26 <__swsetup_r+0x46>
 8005e20:	4628      	mov	r0, r5
 8005e22:	f000 ff11 	bl	8006c48 <_free_r>
 8005e26:	2300      	movs	r3, #0
 8005e28:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e2a:	89a3      	ldrh	r3, [r4, #12]
 8005e2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e30:	81a3      	strh	r3, [r4, #12]
 8005e32:	2300      	movs	r3, #0
 8005e34:	6063      	str	r3, [r4, #4]
 8005e36:	6923      	ldr	r3, [r4, #16]
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	89a3      	ldrh	r3, [r4, #12]
 8005e3c:	f043 0308 	orr.w	r3, r3, #8
 8005e40:	81a3      	strh	r3, [r4, #12]
 8005e42:	6923      	ldr	r3, [r4, #16]
 8005e44:	b94b      	cbnz	r3, 8005e5a <__swsetup_r+0x7a>
 8005e46:	89a3      	ldrh	r3, [r4, #12]
 8005e48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e50:	d003      	beq.n	8005e5a <__swsetup_r+0x7a>
 8005e52:	4621      	mov	r1, r4
 8005e54:	4628      	mov	r0, r5
 8005e56:	f002 fd4f 	bl	80088f8 <__smakebuf_r>
 8005e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e5e:	f013 0201 	ands.w	r2, r3, #1
 8005e62:	d00a      	beq.n	8005e7a <__swsetup_r+0x9a>
 8005e64:	2200      	movs	r2, #0
 8005e66:	60a2      	str	r2, [r4, #8]
 8005e68:	6962      	ldr	r2, [r4, #20]
 8005e6a:	4252      	negs	r2, r2
 8005e6c:	61a2      	str	r2, [r4, #24]
 8005e6e:	6922      	ldr	r2, [r4, #16]
 8005e70:	b942      	cbnz	r2, 8005e84 <__swsetup_r+0xa4>
 8005e72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005e76:	d1c5      	bne.n	8005e04 <__swsetup_r+0x24>
 8005e78:	bd38      	pop	{r3, r4, r5, pc}
 8005e7a:	0799      	lsls	r1, r3, #30
 8005e7c:	bf58      	it	pl
 8005e7e:	6962      	ldrpl	r2, [r4, #20]
 8005e80:	60a2      	str	r2, [r4, #8]
 8005e82:	e7f4      	b.n	8005e6e <__swsetup_r+0x8e>
 8005e84:	2000      	movs	r0, #0
 8005e86:	e7f7      	b.n	8005e78 <__swsetup_r+0x98>
 8005e88:	2000002c 	.word	0x2000002c

08005e8c <memset>:
 8005e8c:	4402      	add	r2, r0
 8005e8e:	4603      	mov	r3, r0
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d100      	bne.n	8005e96 <memset+0xa>
 8005e94:	4770      	bx	lr
 8005e96:	f803 1b01 	strb.w	r1, [r3], #1
 8005e9a:	e7f9      	b.n	8005e90 <memset+0x4>

08005e9c <_localeconv_r>:
 8005e9c:	4800      	ldr	r0, [pc, #0]	@ (8005ea0 <_localeconv_r+0x4>)
 8005e9e:	4770      	bx	lr
 8005ea0:	2000016c 	.word	0x2000016c

08005ea4 <_close_r>:
 8005ea4:	b538      	push	{r3, r4, r5, lr}
 8005ea6:	4d06      	ldr	r5, [pc, #24]	@ (8005ec0 <_close_r+0x1c>)
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	4604      	mov	r4, r0
 8005eac:	4608      	mov	r0, r1
 8005eae:	602b      	str	r3, [r5, #0]
 8005eb0:	f7fb fec2 	bl	8001c38 <_close>
 8005eb4:	1c43      	adds	r3, r0, #1
 8005eb6:	d102      	bne.n	8005ebe <_close_r+0x1a>
 8005eb8:	682b      	ldr	r3, [r5, #0]
 8005eba:	b103      	cbz	r3, 8005ebe <_close_r+0x1a>
 8005ebc:	6023      	str	r3, [r4, #0]
 8005ebe:	bd38      	pop	{r3, r4, r5, pc}
 8005ec0:	2000044c 	.word	0x2000044c

08005ec4 <_lseek_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	4d07      	ldr	r5, [pc, #28]	@ (8005ee4 <_lseek_r+0x20>)
 8005ec8:	4604      	mov	r4, r0
 8005eca:	4608      	mov	r0, r1
 8005ecc:	4611      	mov	r1, r2
 8005ece:	2200      	movs	r2, #0
 8005ed0:	602a      	str	r2, [r5, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f7fb fed7 	bl	8001c86 <_lseek>
 8005ed8:	1c43      	adds	r3, r0, #1
 8005eda:	d102      	bne.n	8005ee2 <_lseek_r+0x1e>
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	b103      	cbz	r3, 8005ee2 <_lseek_r+0x1e>
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	bd38      	pop	{r3, r4, r5, pc}
 8005ee4:	2000044c 	.word	0x2000044c

08005ee8 <_read_r>:
 8005ee8:	b538      	push	{r3, r4, r5, lr}
 8005eea:	4d07      	ldr	r5, [pc, #28]	@ (8005f08 <_read_r+0x20>)
 8005eec:	4604      	mov	r4, r0
 8005eee:	4608      	mov	r0, r1
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	602a      	str	r2, [r5, #0]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f7fb fe65 	bl	8001bc6 <_read>
 8005efc:	1c43      	adds	r3, r0, #1
 8005efe:	d102      	bne.n	8005f06 <_read_r+0x1e>
 8005f00:	682b      	ldr	r3, [r5, #0]
 8005f02:	b103      	cbz	r3, 8005f06 <_read_r+0x1e>
 8005f04:	6023      	str	r3, [r4, #0]
 8005f06:	bd38      	pop	{r3, r4, r5, pc}
 8005f08:	2000044c 	.word	0x2000044c

08005f0c <_write_r>:
 8005f0c:	b538      	push	{r3, r4, r5, lr}
 8005f0e:	4d07      	ldr	r5, [pc, #28]	@ (8005f2c <_write_r+0x20>)
 8005f10:	4604      	mov	r4, r0
 8005f12:	4608      	mov	r0, r1
 8005f14:	4611      	mov	r1, r2
 8005f16:	2200      	movs	r2, #0
 8005f18:	602a      	str	r2, [r5, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f7fb fe70 	bl	8001c00 <_write>
 8005f20:	1c43      	adds	r3, r0, #1
 8005f22:	d102      	bne.n	8005f2a <_write_r+0x1e>
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	b103      	cbz	r3, 8005f2a <_write_r+0x1e>
 8005f28:	6023      	str	r3, [r4, #0]
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
 8005f2c:	2000044c 	.word	0x2000044c

08005f30 <__errno>:
 8005f30:	4b01      	ldr	r3, [pc, #4]	@ (8005f38 <__errno+0x8>)
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	2000002c 	.word	0x2000002c

08005f3c <__libc_init_array>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	4d0d      	ldr	r5, [pc, #52]	@ (8005f74 <__libc_init_array+0x38>)
 8005f40:	4c0d      	ldr	r4, [pc, #52]	@ (8005f78 <__libc_init_array+0x3c>)
 8005f42:	1b64      	subs	r4, r4, r5
 8005f44:	10a4      	asrs	r4, r4, #2
 8005f46:	2600      	movs	r6, #0
 8005f48:	42a6      	cmp	r6, r4
 8005f4a:	d109      	bne.n	8005f60 <__libc_init_array+0x24>
 8005f4c:	4d0b      	ldr	r5, [pc, #44]	@ (8005f7c <__libc_init_array+0x40>)
 8005f4e:	4c0c      	ldr	r4, [pc, #48]	@ (8005f80 <__libc_init_array+0x44>)
 8005f50:	f003 fae0 	bl	8009514 <_init>
 8005f54:	1b64      	subs	r4, r4, r5
 8005f56:	10a4      	asrs	r4, r4, #2
 8005f58:	2600      	movs	r6, #0
 8005f5a:	42a6      	cmp	r6, r4
 8005f5c:	d105      	bne.n	8005f6a <__libc_init_array+0x2e>
 8005f5e:	bd70      	pop	{r4, r5, r6, pc}
 8005f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f64:	4798      	blx	r3
 8005f66:	3601      	adds	r6, #1
 8005f68:	e7ee      	b.n	8005f48 <__libc_init_array+0xc>
 8005f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f6e:	4798      	blx	r3
 8005f70:	3601      	adds	r6, #1
 8005f72:	e7f2      	b.n	8005f5a <__libc_init_array+0x1e>
 8005f74:	08009aa4 	.word	0x08009aa4
 8005f78:	08009aa4 	.word	0x08009aa4
 8005f7c:	08009aa4 	.word	0x08009aa4
 8005f80:	08009aa8 	.word	0x08009aa8

08005f84 <__retarget_lock_init_recursive>:
 8005f84:	4770      	bx	lr

08005f86 <__retarget_lock_acquire_recursive>:
 8005f86:	4770      	bx	lr

08005f88 <__retarget_lock_release_recursive>:
 8005f88:	4770      	bx	lr
	...

08005f8c <nanf>:
 8005f8c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005f94 <nanf+0x8>
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	7fc00000 	.word	0x7fc00000

08005f98 <quorem>:
 8005f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9c:	6903      	ldr	r3, [r0, #16]
 8005f9e:	690c      	ldr	r4, [r1, #16]
 8005fa0:	42a3      	cmp	r3, r4
 8005fa2:	4607      	mov	r7, r0
 8005fa4:	db7e      	blt.n	80060a4 <quorem+0x10c>
 8005fa6:	3c01      	subs	r4, #1
 8005fa8:	f101 0814 	add.w	r8, r1, #20
 8005fac:	00a3      	lsls	r3, r4, #2
 8005fae:	f100 0514 	add.w	r5, r0, #20
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fb8:	9301      	str	r3, [sp, #4]
 8005fba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005fbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005fca:	fbb2 f6f3 	udiv	r6, r2, r3
 8005fce:	d32e      	bcc.n	800602e <quorem+0x96>
 8005fd0:	f04f 0a00 	mov.w	sl, #0
 8005fd4:	46c4      	mov	ip, r8
 8005fd6:	46ae      	mov	lr, r5
 8005fd8:	46d3      	mov	fp, sl
 8005fda:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005fde:	b298      	uxth	r0, r3
 8005fe0:	fb06 a000 	mla	r0, r6, r0, sl
 8005fe4:	0c02      	lsrs	r2, r0, #16
 8005fe6:	0c1b      	lsrs	r3, r3, #16
 8005fe8:	fb06 2303 	mla	r3, r6, r3, r2
 8005fec:	f8de 2000 	ldr.w	r2, [lr]
 8005ff0:	b280      	uxth	r0, r0
 8005ff2:	b292      	uxth	r2, r2
 8005ff4:	1a12      	subs	r2, r2, r0
 8005ff6:	445a      	add	r2, fp
 8005ff8:	f8de 0000 	ldr.w	r0, [lr]
 8005ffc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006000:	b29b      	uxth	r3, r3
 8006002:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006006:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800600a:	b292      	uxth	r2, r2
 800600c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006010:	45e1      	cmp	r9, ip
 8006012:	f84e 2b04 	str.w	r2, [lr], #4
 8006016:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800601a:	d2de      	bcs.n	8005fda <quorem+0x42>
 800601c:	9b00      	ldr	r3, [sp, #0]
 800601e:	58eb      	ldr	r3, [r5, r3]
 8006020:	b92b      	cbnz	r3, 800602e <quorem+0x96>
 8006022:	9b01      	ldr	r3, [sp, #4]
 8006024:	3b04      	subs	r3, #4
 8006026:	429d      	cmp	r5, r3
 8006028:	461a      	mov	r2, r3
 800602a:	d32f      	bcc.n	800608c <quorem+0xf4>
 800602c:	613c      	str	r4, [r7, #16]
 800602e:	4638      	mov	r0, r7
 8006030:	f001 f9c6 	bl	80073c0 <__mcmp>
 8006034:	2800      	cmp	r0, #0
 8006036:	db25      	blt.n	8006084 <quorem+0xec>
 8006038:	4629      	mov	r1, r5
 800603a:	2000      	movs	r0, #0
 800603c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006040:	f8d1 c000 	ldr.w	ip, [r1]
 8006044:	fa1f fe82 	uxth.w	lr, r2
 8006048:	fa1f f38c 	uxth.w	r3, ip
 800604c:	eba3 030e 	sub.w	r3, r3, lr
 8006050:	4403      	add	r3, r0
 8006052:	0c12      	lsrs	r2, r2, #16
 8006054:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006058:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800605c:	b29b      	uxth	r3, r3
 800605e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006062:	45c1      	cmp	r9, r8
 8006064:	f841 3b04 	str.w	r3, [r1], #4
 8006068:	ea4f 4022 	mov.w	r0, r2, asr #16
 800606c:	d2e6      	bcs.n	800603c <quorem+0xa4>
 800606e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006072:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006076:	b922      	cbnz	r2, 8006082 <quorem+0xea>
 8006078:	3b04      	subs	r3, #4
 800607a:	429d      	cmp	r5, r3
 800607c:	461a      	mov	r2, r3
 800607e:	d30b      	bcc.n	8006098 <quorem+0x100>
 8006080:	613c      	str	r4, [r7, #16]
 8006082:	3601      	adds	r6, #1
 8006084:	4630      	mov	r0, r6
 8006086:	b003      	add	sp, #12
 8006088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800608c:	6812      	ldr	r2, [r2, #0]
 800608e:	3b04      	subs	r3, #4
 8006090:	2a00      	cmp	r2, #0
 8006092:	d1cb      	bne.n	800602c <quorem+0x94>
 8006094:	3c01      	subs	r4, #1
 8006096:	e7c6      	b.n	8006026 <quorem+0x8e>
 8006098:	6812      	ldr	r2, [r2, #0]
 800609a:	3b04      	subs	r3, #4
 800609c:	2a00      	cmp	r2, #0
 800609e:	d1ef      	bne.n	8006080 <quorem+0xe8>
 80060a0:	3c01      	subs	r4, #1
 80060a2:	e7ea      	b.n	800607a <quorem+0xe2>
 80060a4:	2000      	movs	r0, #0
 80060a6:	e7ee      	b.n	8006086 <quorem+0xee>

080060a8 <_dtoa_r>:
 80060a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ac:	69c7      	ldr	r7, [r0, #28]
 80060ae:	b097      	sub	sp, #92	@ 0x5c
 80060b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80060b4:	ec55 4b10 	vmov	r4, r5, d0
 80060b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80060ba:	9107      	str	r1, [sp, #28]
 80060bc:	4681      	mov	r9, r0
 80060be:	920c      	str	r2, [sp, #48]	@ 0x30
 80060c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80060c2:	b97f      	cbnz	r7, 80060e4 <_dtoa_r+0x3c>
 80060c4:	2010      	movs	r0, #16
 80060c6:	f000 fe09 	bl	8006cdc <malloc>
 80060ca:	4602      	mov	r2, r0
 80060cc:	f8c9 001c 	str.w	r0, [r9, #28]
 80060d0:	b920      	cbnz	r0, 80060dc <_dtoa_r+0x34>
 80060d2:	4ba9      	ldr	r3, [pc, #676]	@ (8006378 <_dtoa_r+0x2d0>)
 80060d4:	21ef      	movs	r1, #239	@ 0xef
 80060d6:	48a9      	ldr	r0, [pc, #676]	@ (800637c <_dtoa_r+0x2d4>)
 80060d8:	f002 fcbe 	bl	8008a58 <__assert_func>
 80060dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80060e0:	6007      	str	r7, [r0, #0]
 80060e2:	60c7      	str	r7, [r0, #12]
 80060e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80060e8:	6819      	ldr	r1, [r3, #0]
 80060ea:	b159      	cbz	r1, 8006104 <_dtoa_r+0x5c>
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	604a      	str	r2, [r1, #4]
 80060f0:	2301      	movs	r3, #1
 80060f2:	4093      	lsls	r3, r2
 80060f4:	608b      	str	r3, [r1, #8]
 80060f6:	4648      	mov	r0, r9
 80060f8:	f000 fee6 	bl	8006ec8 <_Bfree>
 80060fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	1e2b      	subs	r3, r5, #0
 8006106:	bfb9      	ittee	lt
 8006108:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800610c:	9305      	strlt	r3, [sp, #20]
 800610e:	2300      	movge	r3, #0
 8006110:	6033      	strge	r3, [r6, #0]
 8006112:	9f05      	ldr	r7, [sp, #20]
 8006114:	4b9a      	ldr	r3, [pc, #616]	@ (8006380 <_dtoa_r+0x2d8>)
 8006116:	bfbc      	itt	lt
 8006118:	2201      	movlt	r2, #1
 800611a:	6032      	strlt	r2, [r6, #0]
 800611c:	43bb      	bics	r3, r7
 800611e:	d112      	bne.n	8006146 <_dtoa_r+0x9e>
 8006120:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006122:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800612c:	4323      	orrs	r3, r4
 800612e:	f000 855a 	beq.w	8006be6 <_dtoa_r+0xb3e>
 8006132:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006134:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006394 <_dtoa_r+0x2ec>
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 855c 	beq.w	8006bf6 <_dtoa_r+0xb4e>
 800613e:	f10a 0303 	add.w	r3, sl, #3
 8006142:	f000 bd56 	b.w	8006bf2 <_dtoa_r+0xb4a>
 8006146:	ed9d 7b04 	vldr	d7, [sp, #16]
 800614a:	2200      	movs	r2, #0
 800614c:	ec51 0b17 	vmov	r0, r1, d7
 8006150:	2300      	movs	r3, #0
 8006152:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006156:	f7fa fcb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800615a:	4680      	mov	r8, r0
 800615c:	b158      	cbz	r0, 8006176 <_dtoa_r+0xce>
 800615e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006160:	2301      	movs	r3, #1
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006166:	b113      	cbz	r3, 800616e <_dtoa_r+0xc6>
 8006168:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800616a:	4b86      	ldr	r3, [pc, #536]	@ (8006384 <_dtoa_r+0x2dc>)
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006398 <_dtoa_r+0x2f0>
 8006172:	f000 bd40 	b.w	8006bf6 <_dtoa_r+0xb4e>
 8006176:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800617a:	aa14      	add	r2, sp, #80	@ 0x50
 800617c:	a915      	add	r1, sp, #84	@ 0x54
 800617e:	4648      	mov	r0, r9
 8006180:	f001 fa3e 	bl	8007600 <__d2b>
 8006184:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006188:	9002      	str	r0, [sp, #8]
 800618a:	2e00      	cmp	r6, #0
 800618c:	d078      	beq.n	8006280 <_dtoa_r+0x1d8>
 800618e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006190:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006198:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800619c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80061a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80061a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80061a8:	4619      	mov	r1, r3
 80061aa:	2200      	movs	r2, #0
 80061ac:	4b76      	ldr	r3, [pc, #472]	@ (8006388 <_dtoa_r+0x2e0>)
 80061ae:	f7fa f86b 	bl	8000288 <__aeabi_dsub>
 80061b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8006360 <_dtoa_r+0x2b8>)
 80061b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b8:	f7fa fa1e 	bl	80005f8 <__aeabi_dmul>
 80061bc:	a36a      	add	r3, pc, #424	@ (adr r3, 8006368 <_dtoa_r+0x2c0>)
 80061be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c2:	f7fa f863 	bl	800028c <__adddf3>
 80061c6:	4604      	mov	r4, r0
 80061c8:	4630      	mov	r0, r6
 80061ca:	460d      	mov	r5, r1
 80061cc:	f7fa f9aa 	bl	8000524 <__aeabi_i2d>
 80061d0:	a367      	add	r3, pc, #412	@ (adr r3, 8006370 <_dtoa_r+0x2c8>)
 80061d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d6:	f7fa fa0f 	bl	80005f8 <__aeabi_dmul>
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4620      	mov	r0, r4
 80061e0:	4629      	mov	r1, r5
 80061e2:	f7fa f853 	bl	800028c <__adddf3>
 80061e6:	4604      	mov	r4, r0
 80061e8:	460d      	mov	r5, r1
 80061ea:	f7fa fcb5 	bl	8000b58 <__aeabi_d2iz>
 80061ee:	2200      	movs	r2, #0
 80061f0:	4607      	mov	r7, r0
 80061f2:	2300      	movs	r3, #0
 80061f4:	4620      	mov	r0, r4
 80061f6:	4629      	mov	r1, r5
 80061f8:	f7fa fc70 	bl	8000adc <__aeabi_dcmplt>
 80061fc:	b140      	cbz	r0, 8006210 <_dtoa_r+0x168>
 80061fe:	4638      	mov	r0, r7
 8006200:	f7fa f990 	bl	8000524 <__aeabi_i2d>
 8006204:	4622      	mov	r2, r4
 8006206:	462b      	mov	r3, r5
 8006208:	f7fa fc5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800620c:	b900      	cbnz	r0, 8006210 <_dtoa_r+0x168>
 800620e:	3f01      	subs	r7, #1
 8006210:	2f16      	cmp	r7, #22
 8006212:	d852      	bhi.n	80062ba <_dtoa_r+0x212>
 8006214:	4b5d      	ldr	r3, [pc, #372]	@ (800638c <_dtoa_r+0x2e4>)
 8006216:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006222:	f7fa fc5b 	bl	8000adc <__aeabi_dcmplt>
 8006226:	2800      	cmp	r0, #0
 8006228:	d049      	beq.n	80062be <_dtoa_r+0x216>
 800622a:	3f01      	subs	r7, #1
 800622c:	2300      	movs	r3, #0
 800622e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006230:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006232:	1b9b      	subs	r3, r3, r6
 8006234:	1e5a      	subs	r2, r3, #1
 8006236:	bf45      	ittet	mi
 8006238:	f1c3 0301 	rsbmi	r3, r3, #1
 800623c:	9300      	strmi	r3, [sp, #0]
 800623e:	2300      	movpl	r3, #0
 8006240:	2300      	movmi	r3, #0
 8006242:	9206      	str	r2, [sp, #24]
 8006244:	bf54      	ite	pl
 8006246:	9300      	strpl	r3, [sp, #0]
 8006248:	9306      	strmi	r3, [sp, #24]
 800624a:	2f00      	cmp	r7, #0
 800624c:	db39      	blt.n	80062c2 <_dtoa_r+0x21a>
 800624e:	9b06      	ldr	r3, [sp, #24]
 8006250:	970d      	str	r7, [sp, #52]	@ 0x34
 8006252:	443b      	add	r3, r7
 8006254:	9306      	str	r3, [sp, #24]
 8006256:	2300      	movs	r3, #0
 8006258:	9308      	str	r3, [sp, #32]
 800625a:	9b07      	ldr	r3, [sp, #28]
 800625c:	2b09      	cmp	r3, #9
 800625e:	d863      	bhi.n	8006328 <_dtoa_r+0x280>
 8006260:	2b05      	cmp	r3, #5
 8006262:	bfc4      	itt	gt
 8006264:	3b04      	subgt	r3, #4
 8006266:	9307      	strgt	r3, [sp, #28]
 8006268:	9b07      	ldr	r3, [sp, #28]
 800626a:	f1a3 0302 	sub.w	r3, r3, #2
 800626e:	bfcc      	ite	gt
 8006270:	2400      	movgt	r4, #0
 8006272:	2401      	movle	r4, #1
 8006274:	2b03      	cmp	r3, #3
 8006276:	d863      	bhi.n	8006340 <_dtoa_r+0x298>
 8006278:	e8df f003 	tbb	[pc, r3]
 800627c:	2b375452 	.word	0x2b375452
 8006280:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006284:	441e      	add	r6, r3
 8006286:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800628a:	2b20      	cmp	r3, #32
 800628c:	bfc1      	itttt	gt
 800628e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006292:	409f      	lslgt	r7, r3
 8006294:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006298:	fa24 f303 	lsrgt.w	r3, r4, r3
 800629c:	bfd6      	itet	le
 800629e:	f1c3 0320 	rsble	r3, r3, #32
 80062a2:	ea47 0003 	orrgt.w	r0, r7, r3
 80062a6:	fa04 f003 	lslle.w	r0, r4, r3
 80062aa:	f7fa f92b 	bl	8000504 <__aeabi_ui2d>
 80062ae:	2201      	movs	r2, #1
 80062b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80062b4:	3e01      	subs	r6, #1
 80062b6:	9212      	str	r2, [sp, #72]	@ 0x48
 80062b8:	e776      	b.n	80061a8 <_dtoa_r+0x100>
 80062ba:	2301      	movs	r3, #1
 80062bc:	e7b7      	b.n	800622e <_dtoa_r+0x186>
 80062be:	9010      	str	r0, [sp, #64]	@ 0x40
 80062c0:	e7b6      	b.n	8006230 <_dtoa_r+0x188>
 80062c2:	9b00      	ldr	r3, [sp, #0]
 80062c4:	1bdb      	subs	r3, r3, r7
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	427b      	negs	r3, r7
 80062ca:	9308      	str	r3, [sp, #32]
 80062cc:	2300      	movs	r3, #0
 80062ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80062d0:	e7c3      	b.n	800625a <_dtoa_r+0x1b2>
 80062d2:	2301      	movs	r3, #1
 80062d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80062d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80062d8:	eb07 0b03 	add.w	fp, r7, r3
 80062dc:	f10b 0301 	add.w	r3, fp, #1
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	9303      	str	r3, [sp, #12]
 80062e4:	bfb8      	it	lt
 80062e6:	2301      	movlt	r3, #1
 80062e8:	e006      	b.n	80062f8 <_dtoa_r+0x250>
 80062ea:	2301      	movs	r3, #1
 80062ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80062ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	dd28      	ble.n	8006346 <_dtoa_r+0x29e>
 80062f4:	469b      	mov	fp, r3
 80062f6:	9303      	str	r3, [sp, #12]
 80062f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80062fc:	2100      	movs	r1, #0
 80062fe:	2204      	movs	r2, #4
 8006300:	f102 0514 	add.w	r5, r2, #20
 8006304:	429d      	cmp	r5, r3
 8006306:	d926      	bls.n	8006356 <_dtoa_r+0x2ae>
 8006308:	6041      	str	r1, [r0, #4]
 800630a:	4648      	mov	r0, r9
 800630c:	f000 fd9c 	bl	8006e48 <_Balloc>
 8006310:	4682      	mov	sl, r0
 8006312:	2800      	cmp	r0, #0
 8006314:	d142      	bne.n	800639c <_dtoa_r+0x2f4>
 8006316:	4b1e      	ldr	r3, [pc, #120]	@ (8006390 <_dtoa_r+0x2e8>)
 8006318:	4602      	mov	r2, r0
 800631a:	f240 11af 	movw	r1, #431	@ 0x1af
 800631e:	e6da      	b.n	80060d6 <_dtoa_r+0x2e>
 8006320:	2300      	movs	r3, #0
 8006322:	e7e3      	b.n	80062ec <_dtoa_r+0x244>
 8006324:	2300      	movs	r3, #0
 8006326:	e7d5      	b.n	80062d4 <_dtoa_r+0x22c>
 8006328:	2401      	movs	r4, #1
 800632a:	2300      	movs	r3, #0
 800632c:	9307      	str	r3, [sp, #28]
 800632e:	9409      	str	r4, [sp, #36]	@ 0x24
 8006330:	f04f 3bff 	mov.w	fp, #4294967295
 8006334:	2200      	movs	r2, #0
 8006336:	f8cd b00c 	str.w	fp, [sp, #12]
 800633a:	2312      	movs	r3, #18
 800633c:	920c      	str	r2, [sp, #48]	@ 0x30
 800633e:	e7db      	b.n	80062f8 <_dtoa_r+0x250>
 8006340:	2301      	movs	r3, #1
 8006342:	9309      	str	r3, [sp, #36]	@ 0x24
 8006344:	e7f4      	b.n	8006330 <_dtoa_r+0x288>
 8006346:	f04f 0b01 	mov.w	fp, #1
 800634a:	f8cd b00c 	str.w	fp, [sp, #12]
 800634e:	465b      	mov	r3, fp
 8006350:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006354:	e7d0      	b.n	80062f8 <_dtoa_r+0x250>
 8006356:	3101      	adds	r1, #1
 8006358:	0052      	lsls	r2, r2, #1
 800635a:	e7d1      	b.n	8006300 <_dtoa_r+0x258>
 800635c:	f3af 8000 	nop.w
 8006360:	636f4361 	.word	0x636f4361
 8006364:	3fd287a7 	.word	0x3fd287a7
 8006368:	8b60c8b3 	.word	0x8b60c8b3
 800636c:	3fc68a28 	.word	0x3fc68a28
 8006370:	509f79fb 	.word	0x509f79fb
 8006374:	3fd34413 	.word	0x3fd34413
 8006378:	080096ba 	.word	0x080096ba
 800637c:	080096d1 	.word	0x080096d1
 8006380:	7ff00000 	.word	0x7ff00000
 8006384:	08009685 	.word	0x08009685
 8006388:	3ff80000 	.word	0x3ff80000
 800638c:	08009880 	.word	0x08009880
 8006390:	08009729 	.word	0x08009729
 8006394:	080096b6 	.word	0x080096b6
 8006398:	08009684 	.word	0x08009684
 800639c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80063a0:	6018      	str	r0, [r3, #0]
 80063a2:	9b03      	ldr	r3, [sp, #12]
 80063a4:	2b0e      	cmp	r3, #14
 80063a6:	f200 80a1 	bhi.w	80064ec <_dtoa_r+0x444>
 80063aa:	2c00      	cmp	r4, #0
 80063ac:	f000 809e 	beq.w	80064ec <_dtoa_r+0x444>
 80063b0:	2f00      	cmp	r7, #0
 80063b2:	dd33      	ble.n	800641c <_dtoa_r+0x374>
 80063b4:	4b9c      	ldr	r3, [pc, #624]	@ (8006628 <_dtoa_r+0x580>)
 80063b6:	f007 020f 	and.w	r2, r7, #15
 80063ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063be:	ed93 7b00 	vldr	d7, [r3]
 80063c2:	05f8      	lsls	r0, r7, #23
 80063c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80063c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80063cc:	d516      	bpl.n	80063fc <_dtoa_r+0x354>
 80063ce:	4b97      	ldr	r3, [pc, #604]	@ (800662c <_dtoa_r+0x584>)
 80063d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80063d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063d8:	f7fa fa38 	bl	800084c <__aeabi_ddiv>
 80063dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063e0:	f004 040f 	and.w	r4, r4, #15
 80063e4:	2603      	movs	r6, #3
 80063e6:	4d91      	ldr	r5, [pc, #580]	@ (800662c <_dtoa_r+0x584>)
 80063e8:	b954      	cbnz	r4, 8006400 <_dtoa_r+0x358>
 80063ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80063ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063f2:	f7fa fa2b 	bl	800084c <__aeabi_ddiv>
 80063f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063fa:	e028      	b.n	800644e <_dtoa_r+0x3a6>
 80063fc:	2602      	movs	r6, #2
 80063fe:	e7f2      	b.n	80063e6 <_dtoa_r+0x33e>
 8006400:	07e1      	lsls	r1, r4, #31
 8006402:	d508      	bpl.n	8006416 <_dtoa_r+0x36e>
 8006404:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006408:	e9d5 2300 	ldrd	r2, r3, [r5]
 800640c:	f7fa f8f4 	bl	80005f8 <__aeabi_dmul>
 8006410:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006414:	3601      	adds	r6, #1
 8006416:	1064      	asrs	r4, r4, #1
 8006418:	3508      	adds	r5, #8
 800641a:	e7e5      	b.n	80063e8 <_dtoa_r+0x340>
 800641c:	f000 80af 	beq.w	800657e <_dtoa_r+0x4d6>
 8006420:	427c      	negs	r4, r7
 8006422:	4b81      	ldr	r3, [pc, #516]	@ (8006628 <_dtoa_r+0x580>)
 8006424:	4d81      	ldr	r5, [pc, #516]	@ (800662c <_dtoa_r+0x584>)
 8006426:	f004 020f 	and.w	r2, r4, #15
 800642a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800642e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006432:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006436:	f7fa f8df 	bl	80005f8 <__aeabi_dmul>
 800643a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800643e:	1124      	asrs	r4, r4, #4
 8006440:	2300      	movs	r3, #0
 8006442:	2602      	movs	r6, #2
 8006444:	2c00      	cmp	r4, #0
 8006446:	f040 808f 	bne.w	8006568 <_dtoa_r+0x4c0>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1d3      	bne.n	80063f6 <_dtoa_r+0x34e>
 800644e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006450:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 8094 	beq.w	8006582 <_dtoa_r+0x4da>
 800645a:	4b75      	ldr	r3, [pc, #468]	@ (8006630 <_dtoa_r+0x588>)
 800645c:	2200      	movs	r2, #0
 800645e:	4620      	mov	r0, r4
 8006460:	4629      	mov	r1, r5
 8006462:	f7fa fb3b 	bl	8000adc <__aeabi_dcmplt>
 8006466:	2800      	cmp	r0, #0
 8006468:	f000 808b 	beq.w	8006582 <_dtoa_r+0x4da>
 800646c:	9b03      	ldr	r3, [sp, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 8087 	beq.w	8006582 <_dtoa_r+0x4da>
 8006474:	f1bb 0f00 	cmp.w	fp, #0
 8006478:	dd34      	ble.n	80064e4 <_dtoa_r+0x43c>
 800647a:	4620      	mov	r0, r4
 800647c:	4b6d      	ldr	r3, [pc, #436]	@ (8006634 <_dtoa_r+0x58c>)
 800647e:	2200      	movs	r2, #0
 8006480:	4629      	mov	r1, r5
 8006482:	f7fa f8b9 	bl	80005f8 <__aeabi_dmul>
 8006486:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800648a:	f107 38ff 	add.w	r8, r7, #4294967295
 800648e:	3601      	adds	r6, #1
 8006490:	465c      	mov	r4, fp
 8006492:	4630      	mov	r0, r6
 8006494:	f7fa f846 	bl	8000524 <__aeabi_i2d>
 8006498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800649c:	f7fa f8ac 	bl	80005f8 <__aeabi_dmul>
 80064a0:	4b65      	ldr	r3, [pc, #404]	@ (8006638 <_dtoa_r+0x590>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	f7f9 fef2 	bl	800028c <__adddf3>
 80064a8:	4605      	mov	r5, r0
 80064aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80064ae:	2c00      	cmp	r4, #0
 80064b0:	d16a      	bne.n	8006588 <_dtoa_r+0x4e0>
 80064b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064b6:	4b61      	ldr	r3, [pc, #388]	@ (800663c <_dtoa_r+0x594>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	f7f9 fee5 	bl	8000288 <__aeabi_dsub>
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064c6:	462a      	mov	r2, r5
 80064c8:	4633      	mov	r3, r6
 80064ca:	f7fa fb25 	bl	8000b18 <__aeabi_dcmpgt>
 80064ce:	2800      	cmp	r0, #0
 80064d0:	f040 8298 	bne.w	8006a04 <_dtoa_r+0x95c>
 80064d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064d8:	462a      	mov	r2, r5
 80064da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80064de:	f7fa fafd 	bl	8000adc <__aeabi_dcmplt>
 80064e2:	bb38      	cbnz	r0, 8006534 <_dtoa_r+0x48c>
 80064e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80064e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80064ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f2c0 8157 	blt.w	80067a2 <_dtoa_r+0x6fa>
 80064f4:	2f0e      	cmp	r7, #14
 80064f6:	f300 8154 	bgt.w	80067a2 <_dtoa_r+0x6fa>
 80064fa:	4b4b      	ldr	r3, [pc, #300]	@ (8006628 <_dtoa_r+0x580>)
 80064fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006500:	ed93 7b00 	vldr	d7, [r3]
 8006504:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006506:	2b00      	cmp	r3, #0
 8006508:	ed8d 7b00 	vstr	d7, [sp]
 800650c:	f280 80e5 	bge.w	80066da <_dtoa_r+0x632>
 8006510:	9b03      	ldr	r3, [sp, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	f300 80e1 	bgt.w	80066da <_dtoa_r+0x632>
 8006518:	d10c      	bne.n	8006534 <_dtoa_r+0x48c>
 800651a:	4b48      	ldr	r3, [pc, #288]	@ (800663c <_dtoa_r+0x594>)
 800651c:	2200      	movs	r2, #0
 800651e:	ec51 0b17 	vmov	r0, r1, d7
 8006522:	f7fa f869 	bl	80005f8 <__aeabi_dmul>
 8006526:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800652a:	f7fa faeb 	bl	8000b04 <__aeabi_dcmpge>
 800652e:	2800      	cmp	r0, #0
 8006530:	f000 8266 	beq.w	8006a00 <_dtoa_r+0x958>
 8006534:	2400      	movs	r4, #0
 8006536:	4625      	mov	r5, r4
 8006538:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800653a:	4656      	mov	r6, sl
 800653c:	ea6f 0803 	mvn.w	r8, r3
 8006540:	2700      	movs	r7, #0
 8006542:	4621      	mov	r1, r4
 8006544:	4648      	mov	r0, r9
 8006546:	f000 fcbf 	bl	8006ec8 <_Bfree>
 800654a:	2d00      	cmp	r5, #0
 800654c:	f000 80bd 	beq.w	80066ca <_dtoa_r+0x622>
 8006550:	b12f      	cbz	r7, 800655e <_dtoa_r+0x4b6>
 8006552:	42af      	cmp	r7, r5
 8006554:	d003      	beq.n	800655e <_dtoa_r+0x4b6>
 8006556:	4639      	mov	r1, r7
 8006558:	4648      	mov	r0, r9
 800655a:	f000 fcb5 	bl	8006ec8 <_Bfree>
 800655e:	4629      	mov	r1, r5
 8006560:	4648      	mov	r0, r9
 8006562:	f000 fcb1 	bl	8006ec8 <_Bfree>
 8006566:	e0b0      	b.n	80066ca <_dtoa_r+0x622>
 8006568:	07e2      	lsls	r2, r4, #31
 800656a:	d505      	bpl.n	8006578 <_dtoa_r+0x4d0>
 800656c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006570:	f7fa f842 	bl	80005f8 <__aeabi_dmul>
 8006574:	3601      	adds	r6, #1
 8006576:	2301      	movs	r3, #1
 8006578:	1064      	asrs	r4, r4, #1
 800657a:	3508      	adds	r5, #8
 800657c:	e762      	b.n	8006444 <_dtoa_r+0x39c>
 800657e:	2602      	movs	r6, #2
 8006580:	e765      	b.n	800644e <_dtoa_r+0x3a6>
 8006582:	9c03      	ldr	r4, [sp, #12]
 8006584:	46b8      	mov	r8, r7
 8006586:	e784      	b.n	8006492 <_dtoa_r+0x3ea>
 8006588:	4b27      	ldr	r3, [pc, #156]	@ (8006628 <_dtoa_r+0x580>)
 800658a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800658c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006590:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006594:	4454      	add	r4, sl
 8006596:	2900      	cmp	r1, #0
 8006598:	d054      	beq.n	8006644 <_dtoa_r+0x59c>
 800659a:	4929      	ldr	r1, [pc, #164]	@ (8006640 <_dtoa_r+0x598>)
 800659c:	2000      	movs	r0, #0
 800659e:	f7fa f955 	bl	800084c <__aeabi_ddiv>
 80065a2:	4633      	mov	r3, r6
 80065a4:	462a      	mov	r2, r5
 80065a6:	f7f9 fe6f 	bl	8000288 <__aeabi_dsub>
 80065aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80065ae:	4656      	mov	r6, sl
 80065b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065b4:	f7fa fad0 	bl	8000b58 <__aeabi_d2iz>
 80065b8:	4605      	mov	r5, r0
 80065ba:	f7f9 ffb3 	bl	8000524 <__aeabi_i2d>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065c6:	f7f9 fe5f 	bl	8000288 <__aeabi_dsub>
 80065ca:	3530      	adds	r5, #48	@ 0x30
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80065d4:	f806 5b01 	strb.w	r5, [r6], #1
 80065d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80065dc:	f7fa fa7e 	bl	8000adc <__aeabi_dcmplt>
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d172      	bne.n	80066ca <_dtoa_r+0x622>
 80065e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065e8:	4911      	ldr	r1, [pc, #68]	@ (8006630 <_dtoa_r+0x588>)
 80065ea:	2000      	movs	r0, #0
 80065ec:	f7f9 fe4c 	bl	8000288 <__aeabi_dsub>
 80065f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80065f4:	f7fa fa72 	bl	8000adc <__aeabi_dcmplt>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	f040 80b4 	bne.w	8006766 <_dtoa_r+0x6be>
 80065fe:	42a6      	cmp	r6, r4
 8006600:	f43f af70 	beq.w	80064e4 <_dtoa_r+0x43c>
 8006604:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006608:	4b0a      	ldr	r3, [pc, #40]	@ (8006634 <_dtoa_r+0x58c>)
 800660a:	2200      	movs	r2, #0
 800660c:	f7f9 fff4 	bl	80005f8 <__aeabi_dmul>
 8006610:	4b08      	ldr	r3, [pc, #32]	@ (8006634 <_dtoa_r+0x58c>)
 8006612:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006616:	2200      	movs	r2, #0
 8006618:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800661c:	f7f9 ffec 	bl	80005f8 <__aeabi_dmul>
 8006620:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006624:	e7c4      	b.n	80065b0 <_dtoa_r+0x508>
 8006626:	bf00      	nop
 8006628:	08009880 	.word	0x08009880
 800662c:	08009858 	.word	0x08009858
 8006630:	3ff00000 	.word	0x3ff00000
 8006634:	40240000 	.word	0x40240000
 8006638:	401c0000 	.word	0x401c0000
 800663c:	40140000 	.word	0x40140000
 8006640:	3fe00000 	.word	0x3fe00000
 8006644:	4631      	mov	r1, r6
 8006646:	4628      	mov	r0, r5
 8006648:	f7f9 ffd6 	bl	80005f8 <__aeabi_dmul>
 800664c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006650:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006652:	4656      	mov	r6, sl
 8006654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006658:	f7fa fa7e 	bl	8000b58 <__aeabi_d2iz>
 800665c:	4605      	mov	r5, r0
 800665e:	f7f9 ff61 	bl	8000524 <__aeabi_i2d>
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800666a:	f7f9 fe0d 	bl	8000288 <__aeabi_dsub>
 800666e:	3530      	adds	r5, #48	@ 0x30
 8006670:	f806 5b01 	strb.w	r5, [r6], #1
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	42a6      	cmp	r6, r4
 800667a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800667e:	f04f 0200 	mov.w	r2, #0
 8006682:	d124      	bne.n	80066ce <_dtoa_r+0x626>
 8006684:	4baf      	ldr	r3, [pc, #700]	@ (8006944 <_dtoa_r+0x89c>)
 8006686:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800668a:	f7f9 fdff 	bl	800028c <__adddf3>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006696:	f7fa fa3f 	bl	8000b18 <__aeabi_dcmpgt>
 800669a:	2800      	cmp	r0, #0
 800669c:	d163      	bne.n	8006766 <_dtoa_r+0x6be>
 800669e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80066a2:	49a8      	ldr	r1, [pc, #672]	@ (8006944 <_dtoa_r+0x89c>)
 80066a4:	2000      	movs	r0, #0
 80066a6:	f7f9 fdef 	bl	8000288 <__aeabi_dsub>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066b2:	f7fa fa13 	bl	8000adc <__aeabi_dcmplt>
 80066b6:	2800      	cmp	r0, #0
 80066b8:	f43f af14 	beq.w	80064e4 <_dtoa_r+0x43c>
 80066bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80066be:	1e73      	subs	r3, r6, #1
 80066c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80066c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80066c6:	2b30      	cmp	r3, #48	@ 0x30
 80066c8:	d0f8      	beq.n	80066bc <_dtoa_r+0x614>
 80066ca:	4647      	mov	r7, r8
 80066cc:	e03b      	b.n	8006746 <_dtoa_r+0x69e>
 80066ce:	4b9e      	ldr	r3, [pc, #632]	@ (8006948 <_dtoa_r+0x8a0>)
 80066d0:	f7f9 ff92 	bl	80005f8 <__aeabi_dmul>
 80066d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066d8:	e7bc      	b.n	8006654 <_dtoa_r+0x5ac>
 80066da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80066de:	4656      	mov	r6, sl
 80066e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066e4:	4620      	mov	r0, r4
 80066e6:	4629      	mov	r1, r5
 80066e8:	f7fa f8b0 	bl	800084c <__aeabi_ddiv>
 80066ec:	f7fa fa34 	bl	8000b58 <__aeabi_d2iz>
 80066f0:	4680      	mov	r8, r0
 80066f2:	f7f9 ff17 	bl	8000524 <__aeabi_i2d>
 80066f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066fa:	f7f9 ff7d 	bl	80005f8 <__aeabi_dmul>
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	4620      	mov	r0, r4
 8006704:	4629      	mov	r1, r5
 8006706:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800670a:	f7f9 fdbd 	bl	8000288 <__aeabi_dsub>
 800670e:	f806 4b01 	strb.w	r4, [r6], #1
 8006712:	9d03      	ldr	r5, [sp, #12]
 8006714:	eba6 040a 	sub.w	r4, r6, sl
 8006718:	42a5      	cmp	r5, r4
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	d133      	bne.n	8006788 <_dtoa_r+0x6e0>
 8006720:	f7f9 fdb4 	bl	800028c <__adddf3>
 8006724:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006728:	4604      	mov	r4, r0
 800672a:	460d      	mov	r5, r1
 800672c:	f7fa f9f4 	bl	8000b18 <__aeabi_dcmpgt>
 8006730:	b9c0      	cbnz	r0, 8006764 <_dtoa_r+0x6bc>
 8006732:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006736:	4620      	mov	r0, r4
 8006738:	4629      	mov	r1, r5
 800673a:	f7fa f9c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800673e:	b110      	cbz	r0, 8006746 <_dtoa_r+0x69e>
 8006740:	f018 0f01 	tst.w	r8, #1
 8006744:	d10e      	bne.n	8006764 <_dtoa_r+0x6bc>
 8006746:	9902      	ldr	r1, [sp, #8]
 8006748:	4648      	mov	r0, r9
 800674a:	f000 fbbd 	bl	8006ec8 <_Bfree>
 800674e:	2300      	movs	r3, #0
 8006750:	7033      	strb	r3, [r6, #0]
 8006752:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006754:	3701      	adds	r7, #1
 8006756:	601f      	str	r7, [r3, #0]
 8006758:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 824b 	beq.w	8006bf6 <_dtoa_r+0xb4e>
 8006760:	601e      	str	r6, [r3, #0]
 8006762:	e248      	b.n	8006bf6 <_dtoa_r+0xb4e>
 8006764:	46b8      	mov	r8, r7
 8006766:	4633      	mov	r3, r6
 8006768:	461e      	mov	r6, r3
 800676a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800676e:	2a39      	cmp	r2, #57	@ 0x39
 8006770:	d106      	bne.n	8006780 <_dtoa_r+0x6d8>
 8006772:	459a      	cmp	sl, r3
 8006774:	d1f8      	bne.n	8006768 <_dtoa_r+0x6c0>
 8006776:	2230      	movs	r2, #48	@ 0x30
 8006778:	f108 0801 	add.w	r8, r8, #1
 800677c:	f88a 2000 	strb.w	r2, [sl]
 8006780:	781a      	ldrb	r2, [r3, #0]
 8006782:	3201      	adds	r2, #1
 8006784:	701a      	strb	r2, [r3, #0]
 8006786:	e7a0      	b.n	80066ca <_dtoa_r+0x622>
 8006788:	4b6f      	ldr	r3, [pc, #444]	@ (8006948 <_dtoa_r+0x8a0>)
 800678a:	2200      	movs	r2, #0
 800678c:	f7f9 ff34 	bl	80005f8 <__aeabi_dmul>
 8006790:	2200      	movs	r2, #0
 8006792:	2300      	movs	r3, #0
 8006794:	4604      	mov	r4, r0
 8006796:	460d      	mov	r5, r1
 8006798:	f7fa f996 	bl	8000ac8 <__aeabi_dcmpeq>
 800679c:	2800      	cmp	r0, #0
 800679e:	d09f      	beq.n	80066e0 <_dtoa_r+0x638>
 80067a0:	e7d1      	b.n	8006746 <_dtoa_r+0x69e>
 80067a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067a4:	2a00      	cmp	r2, #0
 80067a6:	f000 80ea 	beq.w	800697e <_dtoa_r+0x8d6>
 80067aa:	9a07      	ldr	r2, [sp, #28]
 80067ac:	2a01      	cmp	r2, #1
 80067ae:	f300 80cd 	bgt.w	800694c <_dtoa_r+0x8a4>
 80067b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80067b4:	2a00      	cmp	r2, #0
 80067b6:	f000 80c1 	beq.w	800693c <_dtoa_r+0x894>
 80067ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80067be:	9c08      	ldr	r4, [sp, #32]
 80067c0:	9e00      	ldr	r6, [sp, #0]
 80067c2:	9a00      	ldr	r2, [sp, #0]
 80067c4:	441a      	add	r2, r3
 80067c6:	9200      	str	r2, [sp, #0]
 80067c8:	9a06      	ldr	r2, [sp, #24]
 80067ca:	2101      	movs	r1, #1
 80067cc:	441a      	add	r2, r3
 80067ce:	4648      	mov	r0, r9
 80067d0:	9206      	str	r2, [sp, #24]
 80067d2:	f000 fc77 	bl	80070c4 <__i2b>
 80067d6:	4605      	mov	r5, r0
 80067d8:	b166      	cbz	r6, 80067f4 <_dtoa_r+0x74c>
 80067da:	9b06      	ldr	r3, [sp, #24]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	dd09      	ble.n	80067f4 <_dtoa_r+0x74c>
 80067e0:	42b3      	cmp	r3, r6
 80067e2:	9a00      	ldr	r2, [sp, #0]
 80067e4:	bfa8      	it	ge
 80067e6:	4633      	movge	r3, r6
 80067e8:	1ad2      	subs	r2, r2, r3
 80067ea:	9200      	str	r2, [sp, #0]
 80067ec:	9a06      	ldr	r2, [sp, #24]
 80067ee:	1af6      	subs	r6, r6, r3
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	9306      	str	r3, [sp, #24]
 80067f4:	9b08      	ldr	r3, [sp, #32]
 80067f6:	b30b      	cbz	r3, 800683c <_dtoa_r+0x794>
 80067f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f000 80c6 	beq.w	800698c <_dtoa_r+0x8e4>
 8006800:	2c00      	cmp	r4, #0
 8006802:	f000 80c0 	beq.w	8006986 <_dtoa_r+0x8de>
 8006806:	4629      	mov	r1, r5
 8006808:	4622      	mov	r2, r4
 800680a:	4648      	mov	r0, r9
 800680c:	f000 fd12 	bl	8007234 <__pow5mult>
 8006810:	9a02      	ldr	r2, [sp, #8]
 8006812:	4601      	mov	r1, r0
 8006814:	4605      	mov	r5, r0
 8006816:	4648      	mov	r0, r9
 8006818:	f000 fc6a 	bl	80070f0 <__multiply>
 800681c:	9902      	ldr	r1, [sp, #8]
 800681e:	4680      	mov	r8, r0
 8006820:	4648      	mov	r0, r9
 8006822:	f000 fb51 	bl	8006ec8 <_Bfree>
 8006826:	9b08      	ldr	r3, [sp, #32]
 8006828:	1b1b      	subs	r3, r3, r4
 800682a:	9308      	str	r3, [sp, #32]
 800682c:	f000 80b1 	beq.w	8006992 <_dtoa_r+0x8ea>
 8006830:	9a08      	ldr	r2, [sp, #32]
 8006832:	4641      	mov	r1, r8
 8006834:	4648      	mov	r0, r9
 8006836:	f000 fcfd 	bl	8007234 <__pow5mult>
 800683a:	9002      	str	r0, [sp, #8]
 800683c:	2101      	movs	r1, #1
 800683e:	4648      	mov	r0, r9
 8006840:	f000 fc40 	bl	80070c4 <__i2b>
 8006844:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006846:	4604      	mov	r4, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 81d8 	beq.w	8006bfe <_dtoa_r+0xb56>
 800684e:	461a      	mov	r2, r3
 8006850:	4601      	mov	r1, r0
 8006852:	4648      	mov	r0, r9
 8006854:	f000 fcee 	bl	8007234 <__pow5mult>
 8006858:	9b07      	ldr	r3, [sp, #28]
 800685a:	2b01      	cmp	r3, #1
 800685c:	4604      	mov	r4, r0
 800685e:	f300 809f 	bgt.w	80069a0 <_dtoa_r+0x8f8>
 8006862:	9b04      	ldr	r3, [sp, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	f040 8097 	bne.w	8006998 <_dtoa_r+0x8f0>
 800686a:	9b05      	ldr	r3, [sp, #20]
 800686c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006870:	2b00      	cmp	r3, #0
 8006872:	f040 8093 	bne.w	800699c <_dtoa_r+0x8f4>
 8006876:	9b05      	ldr	r3, [sp, #20]
 8006878:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800687c:	0d1b      	lsrs	r3, r3, #20
 800687e:	051b      	lsls	r3, r3, #20
 8006880:	b133      	cbz	r3, 8006890 <_dtoa_r+0x7e8>
 8006882:	9b00      	ldr	r3, [sp, #0]
 8006884:	3301      	adds	r3, #1
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	9b06      	ldr	r3, [sp, #24]
 800688a:	3301      	adds	r3, #1
 800688c:	9306      	str	r3, [sp, #24]
 800688e:	2301      	movs	r3, #1
 8006890:	9308      	str	r3, [sp, #32]
 8006892:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 81b8 	beq.w	8006c0a <_dtoa_r+0xb62>
 800689a:	6923      	ldr	r3, [r4, #16]
 800689c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068a0:	6918      	ldr	r0, [r3, #16]
 80068a2:	f000 fbc3 	bl	800702c <__hi0bits>
 80068a6:	f1c0 0020 	rsb	r0, r0, #32
 80068aa:	9b06      	ldr	r3, [sp, #24]
 80068ac:	4418      	add	r0, r3
 80068ae:	f010 001f 	ands.w	r0, r0, #31
 80068b2:	f000 8082 	beq.w	80069ba <_dtoa_r+0x912>
 80068b6:	f1c0 0320 	rsb	r3, r0, #32
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	dd73      	ble.n	80069a6 <_dtoa_r+0x8fe>
 80068be:	9b00      	ldr	r3, [sp, #0]
 80068c0:	f1c0 001c 	rsb	r0, r0, #28
 80068c4:	4403      	add	r3, r0
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	9b06      	ldr	r3, [sp, #24]
 80068ca:	4403      	add	r3, r0
 80068cc:	4406      	add	r6, r0
 80068ce:	9306      	str	r3, [sp, #24]
 80068d0:	9b00      	ldr	r3, [sp, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	dd05      	ble.n	80068e2 <_dtoa_r+0x83a>
 80068d6:	9902      	ldr	r1, [sp, #8]
 80068d8:	461a      	mov	r2, r3
 80068da:	4648      	mov	r0, r9
 80068dc:	f000 fd04 	bl	80072e8 <__lshift>
 80068e0:	9002      	str	r0, [sp, #8]
 80068e2:	9b06      	ldr	r3, [sp, #24]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	dd05      	ble.n	80068f4 <_dtoa_r+0x84c>
 80068e8:	4621      	mov	r1, r4
 80068ea:	461a      	mov	r2, r3
 80068ec:	4648      	mov	r0, r9
 80068ee:	f000 fcfb 	bl	80072e8 <__lshift>
 80068f2:	4604      	mov	r4, r0
 80068f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d061      	beq.n	80069be <_dtoa_r+0x916>
 80068fa:	9802      	ldr	r0, [sp, #8]
 80068fc:	4621      	mov	r1, r4
 80068fe:	f000 fd5f 	bl	80073c0 <__mcmp>
 8006902:	2800      	cmp	r0, #0
 8006904:	da5b      	bge.n	80069be <_dtoa_r+0x916>
 8006906:	2300      	movs	r3, #0
 8006908:	9902      	ldr	r1, [sp, #8]
 800690a:	220a      	movs	r2, #10
 800690c:	4648      	mov	r0, r9
 800690e:	f000 fafd 	bl	8006f0c <__multadd>
 8006912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006914:	9002      	str	r0, [sp, #8]
 8006916:	f107 38ff 	add.w	r8, r7, #4294967295
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 8177 	beq.w	8006c0e <_dtoa_r+0xb66>
 8006920:	4629      	mov	r1, r5
 8006922:	2300      	movs	r3, #0
 8006924:	220a      	movs	r2, #10
 8006926:	4648      	mov	r0, r9
 8006928:	f000 faf0 	bl	8006f0c <__multadd>
 800692c:	f1bb 0f00 	cmp.w	fp, #0
 8006930:	4605      	mov	r5, r0
 8006932:	dc6f      	bgt.n	8006a14 <_dtoa_r+0x96c>
 8006934:	9b07      	ldr	r3, [sp, #28]
 8006936:	2b02      	cmp	r3, #2
 8006938:	dc49      	bgt.n	80069ce <_dtoa_r+0x926>
 800693a:	e06b      	b.n	8006a14 <_dtoa_r+0x96c>
 800693c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800693e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006942:	e73c      	b.n	80067be <_dtoa_r+0x716>
 8006944:	3fe00000 	.word	0x3fe00000
 8006948:	40240000 	.word	0x40240000
 800694c:	9b03      	ldr	r3, [sp, #12]
 800694e:	1e5c      	subs	r4, r3, #1
 8006950:	9b08      	ldr	r3, [sp, #32]
 8006952:	42a3      	cmp	r3, r4
 8006954:	db09      	blt.n	800696a <_dtoa_r+0x8c2>
 8006956:	1b1c      	subs	r4, r3, r4
 8006958:	9b03      	ldr	r3, [sp, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	f6bf af30 	bge.w	80067c0 <_dtoa_r+0x718>
 8006960:	9b00      	ldr	r3, [sp, #0]
 8006962:	9a03      	ldr	r2, [sp, #12]
 8006964:	1a9e      	subs	r6, r3, r2
 8006966:	2300      	movs	r3, #0
 8006968:	e72b      	b.n	80067c2 <_dtoa_r+0x71a>
 800696a:	9b08      	ldr	r3, [sp, #32]
 800696c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800696e:	9408      	str	r4, [sp, #32]
 8006970:	1ae3      	subs	r3, r4, r3
 8006972:	441a      	add	r2, r3
 8006974:	9e00      	ldr	r6, [sp, #0]
 8006976:	9b03      	ldr	r3, [sp, #12]
 8006978:	920d      	str	r2, [sp, #52]	@ 0x34
 800697a:	2400      	movs	r4, #0
 800697c:	e721      	b.n	80067c2 <_dtoa_r+0x71a>
 800697e:	9c08      	ldr	r4, [sp, #32]
 8006980:	9e00      	ldr	r6, [sp, #0]
 8006982:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006984:	e728      	b.n	80067d8 <_dtoa_r+0x730>
 8006986:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800698a:	e751      	b.n	8006830 <_dtoa_r+0x788>
 800698c:	9a08      	ldr	r2, [sp, #32]
 800698e:	9902      	ldr	r1, [sp, #8]
 8006990:	e750      	b.n	8006834 <_dtoa_r+0x78c>
 8006992:	f8cd 8008 	str.w	r8, [sp, #8]
 8006996:	e751      	b.n	800683c <_dtoa_r+0x794>
 8006998:	2300      	movs	r3, #0
 800699a:	e779      	b.n	8006890 <_dtoa_r+0x7e8>
 800699c:	9b04      	ldr	r3, [sp, #16]
 800699e:	e777      	b.n	8006890 <_dtoa_r+0x7e8>
 80069a0:	2300      	movs	r3, #0
 80069a2:	9308      	str	r3, [sp, #32]
 80069a4:	e779      	b.n	800689a <_dtoa_r+0x7f2>
 80069a6:	d093      	beq.n	80068d0 <_dtoa_r+0x828>
 80069a8:	9a00      	ldr	r2, [sp, #0]
 80069aa:	331c      	adds	r3, #28
 80069ac:	441a      	add	r2, r3
 80069ae:	9200      	str	r2, [sp, #0]
 80069b0:	9a06      	ldr	r2, [sp, #24]
 80069b2:	441a      	add	r2, r3
 80069b4:	441e      	add	r6, r3
 80069b6:	9206      	str	r2, [sp, #24]
 80069b8:	e78a      	b.n	80068d0 <_dtoa_r+0x828>
 80069ba:	4603      	mov	r3, r0
 80069bc:	e7f4      	b.n	80069a8 <_dtoa_r+0x900>
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	46b8      	mov	r8, r7
 80069c4:	dc20      	bgt.n	8006a08 <_dtoa_r+0x960>
 80069c6:	469b      	mov	fp, r3
 80069c8:	9b07      	ldr	r3, [sp, #28]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	dd1e      	ble.n	8006a0c <_dtoa_r+0x964>
 80069ce:	f1bb 0f00 	cmp.w	fp, #0
 80069d2:	f47f adb1 	bne.w	8006538 <_dtoa_r+0x490>
 80069d6:	4621      	mov	r1, r4
 80069d8:	465b      	mov	r3, fp
 80069da:	2205      	movs	r2, #5
 80069dc:	4648      	mov	r0, r9
 80069de:	f000 fa95 	bl	8006f0c <__multadd>
 80069e2:	4601      	mov	r1, r0
 80069e4:	4604      	mov	r4, r0
 80069e6:	9802      	ldr	r0, [sp, #8]
 80069e8:	f000 fcea 	bl	80073c0 <__mcmp>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	f77f ada3 	ble.w	8006538 <_dtoa_r+0x490>
 80069f2:	4656      	mov	r6, sl
 80069f4:	2331      	movs	r3, #49	@ 0x31
 80069f6:	f806 3b01 	strb.w	r3, [r6], #1
 80069fa:	f108 0801 	add.w	r8, r8, #1
 80069fe:	e59f      	b.n	8006540 <_dtoa_r+0x498>
 8006a00:	9c03      	ldr	r4, [sp, #12]
 8006a02:	46b8      	mov	r8, r7
 8006a04:	4625      	mov	r5, r4
 8006a06:	e7f4      	b.n	80069f2 <_dtoa_r+0x94a>
 8006a08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 8101 	beq.w	8006c16 <_dtoa_r+0xb6e>
 8006a14:	2e00      	cmp	r6, #0
 8006a16:	dd05      	ble.n	8006a24 <_dtoa_r+0x97c>
 8006a18:	4629      	mov	r1, r5
 8006a1a:	4632      	mov	r2, r6
 8006a1c:	4648      	mov	r0, r9
 8006a1e:	f000 fc63 	bl	80072e8 <__lshift>
 8006a22:	4605      	mov	r5, r0
 8006a24:	9b08      	ldr	r3, [sp, #32]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d05c      	beq.n	8006ae4 <_dtoa_r+0xa3c>
 8006a2a:	6869      	ldr	r1, [r5, #4]
 8006a2c:	4648      	mov	r0, r9
 8006a2e:	f000 fa0b 	bl	8006e48 <_Balloc>
 8006a32:	4606      	mov	r6, r0
 8006a34:	b928      	cbnz	r0, 8006a42 <_dtoa_r+0x99a>
 8006a36:	4b82      	ldr	r3, [pc, #520]	@ (8006c40 <_dtoa_r+0xb98>)
 8006a38:	4602      	mov	r2, r0
 8006a3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006a3e:	f7ff bb4a 	b.w	80060d6 <_dtoa_r+0x2e>
 8006a42:	692a      	ldr	r2, [r5, #16]
 8006a44:	3202      	adds	r2, #2
 8006a46:	0092      	lsls	r2, r2, #2
 8006a48:	f105 010c 	add.w	r1, r5, #12
 8006a4c:	300c      	adds	r0, #12
 8006a4e:	f001 ffed 	bl	8008a2c <memcpy>
 8006a52:	2201      	movs	r2, #1
 8006a54:	4631      	mov	r1, r6
 8006a56:	4648      	mov	r0, r9
 8006a58:	f000 fc46 	bl	80072e8 <__lshift>
 8006a5c:	f10a 0301 	add.w	r3, sl, #1
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	eb0a 030b 	add.w	r3, sl, fp
 8006a66:	9308      	str	r3, [sp, #32]
 8006a68:	9b04      	ldr	r3, [sp, #16]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	462f      	mov	r7, r5
 8006a70:	9306      	str	r3, [sp, #24]
 8006a72:	4605      	mov	r5, r0
 8006a74:	9b00      	ldr	r3, [sp, #0]
 8006a76:	9802      	ldr	r0, [sp, #8]
 8006a78:	4621      	mov	r1, r4
 8006a7a:	f103 3bff 	add.w	fp, r3, #4294967295
 8006a7e:	f7ff fa8b 	bl	8005f98 <quorem>
 8006a82:	4603      	mov	r3, r0
 8006a84:	3330      	adds	r3, #48	@ 0x30
 8006a86:	9003      	str	r0, [sp, #12]
 8006a88:	4639      	mov	r1, r7
 8006a8a:	9802      	ldr	r0, [sp, #8]
 8006a8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a8e:	f000 fc97 	bl	80073c0 <__mcmp>
 8006a92:	462a      	mov	r2, r5
 8006a94:	9004      	str	r0, [sp, #16]
 8006a96:	4621      	mov	r1, r4
 8006a98:	4648      	mov	r0, r9
 8006a9a:	f000 fcad 	bl	80073f8 <__mdiff>
 8006a9e:	68c2      	ldr	r2, [r0, #12]
 8006aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	bb02      	cbnz	r2, 8006ae8 <_dtoa_r+0xa40>
 8006aa6:	4601      	mov	r1, r0
 8006aa8:	9802      	ldr	r0, [sp, #8]
 8006aaa:	f000 fc89 	bl	80073c0 <__mcmp>
 8006aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4648      	mov	r0, r9
 8006ab6:	920c      	str	r2, [sp, #48]	@ 0x30
 8006ab8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006aba:	f000 fa05 	bl	8006ec8 <_Bfree>
 8006abe:	9b07      	ldr	r3, [sp, #28]
 8006ac0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006ac2:	9e00      	ldr	r6, [sp, #0]
 8006ac4:	ea42 0103 	orr.w	r1, r2, r3
 8006ac8:	9b06      	ldr	r3, [sp, #24]
 8006aca:	4319      	orrs	r1, r3
 8006acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ace:	d10d      	bne.n	8006aec <_dtoa_r+0xa44>
 8006ad0:	2b39      	cmp	r3, #57	@ 0x39
 8006ad2:	d027      	beq.n	8006b24 <_dtoa_r+0xa7c>
 8006ad4:	9a04      	ldr	r2, [sp, #16]
 8006ad6:	2a00      	cmp	r2, #0
 8006ad8:	dd01      	ble.n	8006ade <_dtoa_r+0xa36>
 8006ada:	9b03      	ldr	r3, [sp, #12]
 8006adc:	3331      	adds	r3, #49	@ 0x31
 8006ade:	f88b 3000 	strb.w	r3, [fp]
 8006ae2:	e52e      	b.n	8006542 <_dtoa_r+0x49a>
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	e7b9      	b.n	8006a5c <_dtoa_r+0x9b4>
 8006ae8:	2201      	movs	r2, #1
 8006aea:	e7e2      	b.n	8006ab2 <_dtoa_r+0xa0a>
 8006aec:	9904      	ldr	r1, [sp, #16]
 8006aee:	2900      	cmp	r1, #0
 8006af0:	db04      	blt.n	8006afc <_dtoa_r+0xa54>
 8006af2:	9807      	ldr	r0, [sp, #28]
 8006af4:	4301      	orrs	r1, r0
 8006af6:	9806      	ldr	r0, [sp, #24]
 8006af8:	4301      	orrs	r1, r0
 8006afa:	d120      	bne.n	8006b3e <_dtoa_r+0xa96>
 8006afc:	2a00      	cmp	r2, #0
 8006afe:	ddee      	ble.n	8006ade <_dtoa_r+0xa36>
 8006b00:	9902      	ldr	r1, [sp, #8]
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	2201      	movs	r2, #1
 8006b06:	4648      	mov	r0, r9
 8006b08:	f000 fbee 	bl	80072e8 <__lshift>
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	9002      	str	r0, [sp, #8]
 8006b10:	f000 fc56 	bl	80073c0 <__mcmp>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	9b00      	ldr	r3, [sp, #0]
 8006b18:	dc02      	bgt.n	8006b20 <_dtoa_r+0xa78>
 8006b1a:	d1e0      	bne.n	8006ade <_dtoa_r+0xa36>
 8006b1c:	07da      	lsls	r2, r3, #31
 8006b1e:	d5de      	bpl.n	8006ade <_dtoa_r+0xa36>
 8006b20:	2b39      	cmp	r3, #57	@ 0x39
 8006b22:	d1da      	bne.n	8006ada <_dtoa_r+0xa32>
 8006b24:	2339      	movs	r3, #57	@ 0x39
 8006b26:	f88b 3000 	strb.w	r3, [fp]
 8006b2a:	4633      	mov	r3, r6
 8006b2c:	461e      	mov	r6, r3
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006b34:	2a39      	cmp	r2, #57	@ 0x39
 8006b36:	d04e      	beq.n	8006bd6 <_dtoa_r+0xb2e>
 8006b38:	3201      	adds	r2, #1
 8006b3a:	701a      	strb	r2, [r3, #0]
 8006b3c:	e501      	b.n	8006542 <_dtoa_r+0x49a>
 8006b3e:	2a00      	cmp	r2, #0
 8006b40:	dd03      	ble.n	8006b4a <_dtoa_r+0xaa2>
 8006b42:	2b39      	cmp	r3, #57	@ 0x39
 8006b44:	d0ee      	beq.n	8006b24 <_dtoa_r+0xa7c>
 8006b46:	3301      	adds	r3, #1
 8006b48:	e7c9      	b.n	8006ade <_dtoa_r+0xa36>
 8006b4a:	9a00      	ldr	r2, [sp, #0]
 8006b4c:	9908      	ldr	r1, [sp, #32]
 8006b4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006b52:	428a      	cmp	r2, r1
 8006b54:	d028      	beq.n	8006ba8 <_dtoa_r+0xb00>
 8006b56:	9902      	ldr	r1, [sp, #8]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	220a      	movs	r2, #10
 8006b5c:	4648      	mov	r0, r9
 8006b5e:	f000 f9d5 	bl	8006f0c <__multadd>
 8006b62:	42af      	cmp	r7, r5
 8006b64:	9002      	str	r0, [sp, #8]
 8006b66:	f04f 0300 	mov.w	r3, #0
 8006b6a:	f04f 020a 	mov.w	r2, #10
 8006b6e:	4639      	mov	r1, r7
 8006b70:	4648      	mov	r0, r9
 8006b72:	d107      	bne.n	8006b84 <_dtoa_r+0xadc>
 8006b74:	f000 f9ca 	bl	8006f0c <__multadd>
 8006b78:	4607      	mov	r7, r0
 8006b7a:	4605      	mov	r5, r0
 8006b7c:	9b00      	ldr	r3, [sp, #0]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	e777      	b.n	8006a74 <_dtoa_r+0x9cc>
 8006b84:	f000 f9c2 	bl	8006f0c <__multadd>
 8006b88:	4629      	mov	r1, r5
 8006b8a:	4607      	mov	r7, r0
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	220a      	movs	r2, #10
 8006b90:	4648      	mov	r0, r9
 8006b92:	f000 f9bb 	bl	8006f0c <__multadd>
 8006b96:	4605      	mov	r5, r0
 8006b98:	e7f0      	b.n	8006b7c <_dtoa_r+0xad4>
 8006b9a:	f1bb 0f00 	cmp.w	fp, #0
 8006b9e:	bfcc      	ite	gt
 8006ba0:	465e      	movgt	r6, fp
 8006ba2:	2601      	movle	r6, #1
 8006ba4:	4456      	add	r6, sl
 8006ba6:	2700      	movs	r7, #0
 8006ba8:	9902      	ldr	r1, [sp, #8]
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	2201      	movs	r2, #1
 8006bae:	4648      	mov	r0, r9
 8006bb0:	f000 fb9a 	bl	80072e8 <__lshift>
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	9002      	str	r0, [sp, #8]
 8006bb8:	f000 fc02 	bl	80073c0 <__mcmp>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	dcb4      	bgt.n	8006b2a <_dtoa_r+0xa82>
 8006bc0:	d102      	bne.n	8006bc8 <_dtoa_r+0xb20>
 8006bc2:	9b00      	ldr	r3, [sp, #0]
 8006bc4:	07db      	lsls	r3, r3, #31
 8006bc6:	d4b0      	bmi.n	8006b2a <_dtoa_r+0xa82>
 8006bc8:	4633      	mov	r3, r6
 8006bca:	461e      	mov	r6, r3
 8006bcc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bd0:	2a30      	cmp	r2, #48	@ 0x30
 8006bd2:	d0fa      	beq.n	8006bca <_dtoa_r+0xb22>
 8006bd4:	e4b5      	b.n	8006542 <_dtoa_r+0x49a>
 8006bd6:	459a      	cmp	sl, r3
 8006bd8:	d1a8      	bne.n	8006b2c <_dtoa_r+0xa84>
 8006bda:	2331      	movs	r3, #49	@ 0x31
 8006bdc:	f108 0801 	add.w	r8, r8, #1
 8006be0:	f88a 3000 	strb.w	r3, [sl]
 8006be4:	e4ad      	b.n	8006542 <_dtoa_r+0x49a>
 8006be6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006be8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006c44 <_dtoa_r+0xb9c>
 8006bec:	b11b      	cbz	r3, 8006bf6 <_dtoa_r+0xb4e>
 8006bee:	f10a 0308 	add.w	r3, sl, #8
 8006bf2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	4650      	mov	r0, sl
 8006bf8:	b017      	add	sp, #92	@ 0x5c
 8006bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfe:	9b07      	ldr	r3, [sp, #28]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	f77f ae2e 	ble.w	8006862 <_dtoa_r+0x7ba>
 8006c06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c08:	9308      	str	r3, [sp, #32]
 8006c0a:	2001      	movs	r0, #1
 8006c0c:	e64d      	b.n	80068aa <_dtoa_r+0x802>
 8006c0e:	f1bb 0f00 	cmp.w	fp, #0
 8006c12:	f77f aed9 	ble.w	80069c8 <_dtoa_r+0x920>
 8006c16:	4656      	mov	r6, sl
 8006c18:	9802      	ldr	r0, [sp, #8]
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	f7ff f9bc 	bl	8005f98 <quorem>
 8006c20:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006c24:	f806 3b01 	strb.w	r3, [r6], #1
 8006c28:	eba6 020a 	sub.w	r2, r6, sl
 8006c2c:	4593      	cmp	fp, r2
 8006c2e:	ddb4      	ble.n	8006b9a <_dtoa_r+0xaf2>
 8006c30:	9902      	ldr	r1, [sp, #8]
 8006c32:	2300      	movs	r3, #0
 8006c34:	220a      	movs	r2, #10
 8006c36:	4648      	mov	r0, r9
 8006c38:	f000 f968 	bl	8006f0c <__multadd>
 8006c3c:	9002      	str	r0, [sp, #8]
 8006c3e:	e7eb      	b.n	8006c18 <_dtoa_r+0xb70>
 8006c40:	08009729 	.word	0x08009729
 8006c44:	080096ad 	.word	0x080096ad

08006c48 <_free_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	4605      	mov	r5, r0
 8006c4c:	2900      	cmp	r1, #0
 8006c4e:	d041      	beq.n	8006cd4 <_free_r+0x8c>
 8006c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c54:	1f0c      	subs	r4, r1, #4
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	bfb8      	it	lt
 8006c5a:	18e4      	addlt	r4, r4, r3
 8006c5c:	f000 f8e8 	bl	8006e30 <__malloc_lock>
 8006c60:	4a1d      	ldr	r2, [pc, #116]	@ (8006cd8 <_free_r+0x90>)
 8006c62:	6813      	ldr	r3, [r2, #0]
 8006c64:	b933      	cbnz	r3, 8006c74 <_free_r+0x2c>
 8006c66:	6063      	str	r3, [r4, #4]
 8006c68:	6014      	str	r4, [r2, #0]
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c70:	f000 b8e4 	b.w	8006e3c <__malloc_unlock>
 8006c74:	42a3      	cmp	r3, r4
 8006c76:	d908      	bls.n	8006c8a <_free_r+0x42>
 8006c78:	6820      	ldr	r0, [r4, #0]
 8006c7a:	1821      	adds	r1, r4, r0
 8006c7c:	428b      	cmp	r3, r1
 8006c7e:	bf01      	itttt	eq
 8006c80:	6819      	ldreq	r1, [r3, #0]
 8006c82:	685b      	ldreq	r3, [r3, #4]
 8006c84:	1809      	addeq	r1, r1, r0
 8006c86:	6021      	streq	r1, [r4, #0]
 8006c88:	e7ed      	b.n	8006c66 <_free_r+0x1e>
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	b10b      	cbz	r3, 8006c94 <_free_r+0x4c>
 8006c90:	42a3      	cmp	r3, r4
 8006c92:	d9fa      	bls.n	8006c8a <_free_r+0x42>
 8006c94:	6811      	ldr	r1, [r2, #0]
 8006c96:	1850      	adds	r0, r2, r1
 8006c98:	42a0      	cmp	r0, r4
 8006c9a:	d10b      	bne.n	8006cb4 <_free_r+0x6c>
 8006c9c:	6820      	ldr	r0, [r4, #0]
 8006c9e:	4401      	add	r1, r0
 8006ca0:	1850      	adds	r0, r2, r1
 8006ca2:	4283      	cmp	r3, r0
 8006ca4:	6011      	str	r1, [r2, #0]
 8006ca6:	d1e0      	bne.n	8006c6a <_free_r+0x22>
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	6053      	str	r3, [r2, #4]
 8006cae:	4408      	add	r0, r1
 8006cb0:	6010      	str	r0, [r2, #0]
 8006cb2:	e7da      	b.n	8006c6a <_free_r+0x22>
 8006cb4:	d902      	bls.n	8006cbc <_free_r+0x74>
 8006cb6:	230c      	movs	r3, #12
 8006cb8:	602b      	str	r3, [r5, #0]
 8006cba:	e7d6      	b.n	8006c6a <_free_r+0x22>
 8006cbc:	6820      	ldr	r0, [r4, #0]
 8006cbe:	1821      	adds	r1, r4, r0
 8006cc0:	428b      	cmp	r3, r1
 8006cc2:	bf04      	itt	eq
 8006cc4:	6819      	ldreq	r1, [r3, #0]
 8006cc6:	685b      	ldreq	r3, [r3, #4]
 8006cc8:	6063      	str	r3, [r4, #4]
 8006cca:	bf04      	itt	eq
 8006ccc:	1809      	addeq	r1, r1, r0
 8006cce:	6021      	streq	r1, [r4, #0]
 8006cd0:	6054      	str	r4, [r2, #4]
 8006cd2:	e7ca      	b.n	8006c6a <_free_r+0x22>
 8006cd4:	bd38      	pop	{r3, r4, r5, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000458 	.word	0x20000458

08006cdc <malloc>:
 8006cdc:	4b02      	ldr	r3, [pc, #8]	@ (8006ce8 <malloc+0xc>)
 8006cde:	4601      	mov	r1, r0
 8006ce0:	6818      	ldr	r0, [r3, #0]
 8006ce2:	f000 b825 	b.w	8006d30 <_malloc_r>
 8006ce6:	bf00      	nop
 8006ce8:	2000002c 	.word	0x2000002c

08006cec <sbrk_aligned>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	4e0f      	ldr	r6, [pc, #60]	@ (8006d2c <sbrk_aligned+0x40>)
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	6831      	ldr	r1, [r6, #0]
 8006cf4:	4605      	mov	r5, r0
 8006cf6:	b911      	cbnz	r1, 8006cfe <sbrk_aligned+0x12>
 8006cf8:	f001 fe88 	bl	8008a0c <_sbrk_r>
 8006cfc:	6030      	str	r0, [r6, #0]
 8006cfe:	4621      	mov	r1, r4
 8006d00:	4628      	mov	r0, r5
 8006d02:	f001 fe83 	bl	8008a0c <_sbrk_r>
 8006d06:	1c43      	adds	r3, r0, #1
 8006d08:	d103      	bne.n	8006d12 <sbrk_aligned+0x26>
 8006d0a:	f04f 34ff 	mov.w	r4, #4294967295
 8006d0e:	4620      	mov	r0, r4
 8006d10:	bd70      	pop	{r4, r5, r6, pc}
 8006d12:	1cc4      	adds	r4, r0, #3
 8006d14:	f024 0403 	bic.w	r4, r4, #3
 8006d18:	42a0      	cmp	r0, r4
 8006d1a:	d0f8      	beq.n	8006d0e <sbrk_aligned+0x22>
 8006d1c:	1a21      	subs	r1, r4, r0
 8006d1e:	4628      	mov	r0, r5
 8006d20:	f001 fe74 	bl	8008a0c <_sbrk_r>
 8006d24:	3001      	adds	r0, #1
 8006d26:	d1f2      	bne.n	8006d0e <sbrk_aligned+0x22>
 8006d28:	e7ef      	b.n	8006d0a <sbrk_aligned+0x1e>
 8006d2a:	bf00      	nop
 8006d2c:	20000454 	.word	0x20000454

08006d30 <_malloc_r>:
 8006d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d34:	1ccd      	adds	r5, r1, #3
 8006d36:	f025 0503 	bic.w	r5, r5, #3
 8006d3a:	3508      	adds	r5, #8
 8006d3c:	2d0c      	cmp	r5, #12
 8006d3e:	bf38      	it	cc
 8006d40:	250c      	movcc	r5, #12
 8006d42:	2d00      	cmp	r5, #0
 8006d44:	4606      	mov	r6, r0
 8006d46:	db01      	blt.n	8006d4c <_malloc_r+0x1c>
 8006d48:	42a9      	cmp	r1, r5
 8006d4a:	d904      	bls.n	8006d56 <_malloc_r+0x26>
 8006d4c:	230c      	movs	r3, #12
 8006d4e:	6033      	str	r3, [r6, #0]
 8006d50:	2000      	movs	r0, #0
 8006d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e2c <_malloc_r+0xfc>
 8006d5a:	f000 f869 	bl	8006e30 <__malloc_lock>
 8006d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8006d62:	461c      	mov	r4, r3
 8006d64:	bb44      	cbnz	r4, 8006db8 <_malloc_r+0x88>
 8006d66:	4629      	mov	r1, r5
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f7ff ffbf 	bl	8006cec <sbrk_aligned>
 8006d6e:	1c43      	adds	r3, r0, #1
 8006d70:	4604      	mov	r4, r0
 8006d72:	d158      	bne.n	8006e26 <_malloc_r+0xf6>
 8006d74:	f8d8 4000 	ldr.w	r4, [r8]
 8006d78:	4627      	mov	r7, r4
 8006d7a:	2f00      	cmp	r7, #0
 8006d7c:	d143      	bne.n	8006e06 <_malloc_r+0xd6>
 8006d7e:	2c00      	cmp	r4, #0
 8006d80:	d04b      	beq.n	8006e1a <_malloc_r+0xea>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	4639      	mov	r1, r7
 8006d86:	4630      	mov	r0, r6
 8006d88:	eb04 0903 	add.w	r9, r4, r3
 8006d8c:	f001 fe3e 	bl	8008a0c <_sbrk_r>
 8006d90:	4581      	cmp	r9, r0
 8006d92:	d142      	bne.n	8006e1a <_malloc_r+0xea>
 8006d94:	6821      	ldr	r1, [r4, #0]
 8006d96:	1a6d      	subs	r5, r5, r1
 8006d98:	4629      	mov	r1, r5
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	f7ff ffa6 	bl	8006cec <sbrk_aligned>
 8006da0:	3001      	adds	r0, #1
 8006da2:	d03a      	beq.n	8006e1a <_malloc_r+0xea>
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	442b      	add	r3, r5
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	f8d8 3000 	ldr.w	r3, [r8]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	bb62      	cbnz	r2, 8006e0c <_malloc_r+0xdc>
 8006db2:	f8c8 7000 	str.w	r7, [r8]
 8006db6:	e00f      	b.n	8006dd8 <_malloc_r+0xa8>
 8006db8:	6822      	ldr	r2, [r4, #0]
 8006dba:	1b52      	subs	r2, r2, r5
 8006dbc:	d420      	bmi.n	8006e00 <_malloc_r+0xd0>
 8006dbe:	2a0b      	cmp	r2, #11
 8006dc0:	d917      	bls.n	8006df2 <_malloc_r+0xc2>
 8006dc2:	1961      	adds	r1, r4, r5
 8006dc4:	42a3      	cmp	r3, r4
 8006dc6:	6025      	str	r5, [r4, #0]
 8006dc8:	bf18      	it	ne
 8006dca:	6059      	strne	r1, [r3, #4]
 8006dcc:	6863      	ldr	r3, [r4, #4]
 8006dce:	bf08      	it	eq
 8006dd0:	f8c8 1000 	streq.w	r1, [r8]
 8006dd4:	5162      	str	r2, [r4, r5]
 8006dd6:	604b      	str	r3, [r1, #4]
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f000 f82f 	bl	8006e3c <__malloc_unlock>
 8006dde:	f104 000b 	add.w	r0, r4, #11
 8006de2:	1d23      	adds	r3, r4, #4
 8006de4:	f020 0007 	bic.w	r0, r0, #7
 8006de8:	1ac2      	subs	r2, r0, r3
 8006dea:	bf1c      	itt	ne
 8006dec:	1a1b      	subne	r3, r3, r0
 8006dee:	50a3      	strne	r3, [r4, r2]
 8006df0:	e7af      	b.n	8006d52 <_malloc_r+0x22>
 8006df2:	6862      	ldr	r2, [r4, #4]
 8006df4:	42a3      	cmp	r3, r4
 8006df6:	bf0c      	ite	eq
 8006df8:	f8c8 2000 	streq.w	r2, [r8]
 8006dfc:	605a      	strne	r2, [r3, #4]
 8006dfe:	e7eb      	b.n	8006dd8 <_malloc_r+0xa8>
 8006e00:	4623      	mov	r3, r4
 8006e02:	6864      	ldr	r4, [r4, #4]
 8006e04:	e7ae      	b.n	8006d64 <_malloc_r+0x34>
 8006e06:	463c      	mov	r4, r7
 8006e08:	687f      	ldr	r7, [r7, #4]
 8006e0a:	e7b6      	b.n	8006d7a <_malloc_r+0x4a>
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	42a3      	cmp	r3, r4
 8006e12:	d1fb      	bne.n	8006e0c <_malloc_r+0xdc>
 8006e14:	2300      	movs	r3, #0
 8006e16:	6053      	str	r3, [r2, #4]
 8006e18:	e7de      	b.n	8006dd8 <_malloc_r+0xa8>
 8006e1a:	230c      	movs	r3, #12
 8006e1c:	6033      	str	r3, [r6, #0]
 8006e1e:	4630      	mov	r0, r6
 8006e20:	f000 f80c 	bl	8006e3c <__malloc_unlock>
 8006e24:	e794      	b.n	8006d50 <_malloc_r+0x20>
 8006e26:	6005      	str	r5, [r0, #0]
 8006e28:	e7d6      	b.n	8006dd8 <_malloc_r+0xa8>
 8006e2a:	bf00      	nop
 8006e2c:	20000458 	.word	0x20000458

08006e30 <__malloc_lock>:
 8006e30:	4801      	ldr	r0, [pc, #4]	@ (8006e38 <__malloc_lock+0x8>)
 8006e32:	f7ff b8a8 	b.w	8005f86 <__retarget_lock_acquire_recursive>
 8006e36:	bf00      	nop
 8006e38:	20000450 	.word	0x20000450

08006e3c <__malloc_unlock>:
 8006e3c:	4801      	ldr	r0, [pc, #4]	@ (8006e44 <__malloc_unlock+0x8>)
 8006e3e:	f7ff b8a3 	b.w	8005f88 <__retarget_lock_release_recursive>
 8006e42:	bf00      	nop
 8006e44:	20000450 	.word	0x20000450

08006e48 <_Balloc>:
 8006e48:	b570      	push	{r4, r5, r6, lr}
 8006e4a:	69c6      	ldr	r6, [r0, #28]
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	460d      	mov	r5, r1
 8006e50:	b976      	cbnz	r6, 8006e70 <_Balloc+0x28>
 8006e52:	2010      	movs	r0, #16
 8006e54:	f7ff ff42 	bl	8006cdc <malloc>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	61e0      	str	r0, [r4, #28]
 8006e5c:	b920      	cbnz	r0, 8006e68 <_Balloc+0x20>
 8006e5e:	4b18      	ldr	r3, [pc, #96]	@ (8006ec0 <_Balloc+0x78>)
 8006e60:	4818      	ldr	r0, [pc, #96]	@ (8006ec4 <_Balloc+0x7c>)
 8006e62:	216b      	movs	r1, #107	@ 0x6b
 8006e64:	f001 fdf8 	bl	8008a58 <__assert_func>
 8006e68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e6c:	6006      	str	r6, [r0, #0]
 8006e6e:	60c6      	str	r6, [r0, #12]
 8006e70:	69e6      	ldr	r6, [r4, #28]
 8006e72:	68f3      	ldr	r3, [r6, #12]
 8006e74:	b183      	cbz	r3, 8006e98 <_Balloc+0x50>
 8006e76:	69e3      	ldr	r3, [r4, #28]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e7e:	b9b8      	cbnz	r0, 8006eb0 <_Balloc+0x68>
 8006e80:	2101      	movs	r1, #1
 8006e82:	fa01 f605 	lsl.w	r6, r1, r5
 8006e86:	1d72      	adds	r2, r6, #5
 8006e88:	0092      	lsls	r2, r2, #2
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f001 fe02 	bl	8008a94 <_calloc_r>
 8006e90:	b160      	cbz	r0, 8006eac <_Balloc+0x64>
 8006e92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e96:	e00e      	b.n	8006eb6 <_Balloc+0x6e>
 8006e98:	2221      	movs	r2, #33	@ 0x21
 8006e9a:	2104      	movs	r1, #4
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f001 fdf9 	bl	8008a94 <_calloc_r>
 8006ea2:	69e3      	ldr	r3, [r4, #28]
 8006ea4:	60f0      	str	r0, [r6, #12]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e4      	bne.n	8006e76 <_Balloc+0x2e>
 8006eac:	2000      	movs	r0, #0
 8006eae:	bd70      	pop	{r4, r5, r6, pc}
 8006eb0:	6802      	ldr	r2, [r0, #0]
 8006eb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ebc:	e7f7      	b.n	8006eae <_Balloc+0x66>
 8006ebe:	bf00      	nop
 8006ec0:	080096ba 	.word	0x080096ba
 8006ec4:	0800973a 	.word	0x0800973a

08006ec8 <_Bfree>:
 8006ec8:	b570      	push	{r4, r5, r6, lr}
 8006eca:	69c6      	ldr	r6, [r0, #28]
 8006ecc:	4605      	mov	r5, r0
 8006ece:	460c      	mov	r4, r1
 8006ed0:	b976      	cbnz	r6, 8006ef0 <_Bfree+0x28>
 8006ed2:	2010      	movs	r0, #16
 8006ed4:	f7ff ff02 	bl	8006cdc <malloc>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	61e8      	str	r0, [r5, #28]
 8006edc:	b920      	cbnz	r0, 8006ee8 <_Bfree+0x20>
 8006ede:	4b09      	ldr	r3, [pc, #36]	@ (8006f04 <_Bfree+0x3c>)
 8006ee0:	4809      	ldr	r0, [pc, #36]	@ (8006f08 <_Bfree+0x40>)
 8006ee2:	218f      	movs	r1, #143	@ 0x8f
 8006ee4:	f001 fdb8 	bl	8008a58 <__assert_func>
 8006ee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006eec:	6006      	str	r6, [r0, #0]
 8006eee:	60c6      	str	r6, [r0, #12]
 8006ef0:	b13c      	cbz	r4, 8006f02 <_Bfree+0x3a>
 8006ef2:	69eb      	ldr	r3, [r5, #28]
 8006ef4:	6862      	ldr	r2, [r4, #4]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006efc:	6021      	str	r1, [r4, #0]
 8006efe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f02:	bd70      	pop	{r4, r5, r6, pc}
 8006f04:	080096ba 	.word	0x080096ba
 8006f08:	0800973a 	.word	0x0800973a

08006f0c <__multadd>:
 8006f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f10:	690d      	ldr	r5, [r1, #16]
 8006f12:	4607      	mov	r7, r0
 8006f14:	460c      	mov	r4, r1
 8006f16:	461e      	mov	r6, r3
 8006f18:	f101 0c14 	add.w	ip, r1, #20
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	f8dc 3000 	ldr.w	r3, [ip]
 8006f22:	b299      	uxth	r1, r3
 8006f24:	fb02 6101 	mla	r1, r2, r1, r6
 8006f28:	0c1e      	lsrs	r6, r3, #16
 8006f2a:	0c0b      	lsrs	r3, r1, #16
 8006f2c:	fb02 3306 	mla	r3, r2, r6, r3
 8006f30:	b289      	uxth	r1, r1
 8006f32:	3001      	adds	r0, #1
 8006f34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f38:	4285      	cmp	r5, r0
 8006f3a:	f84c 1b04 	str.w	r1, [ip], #4
 8006f3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f42:	dcec      	bgt.n	8006f1e <__multadd+0x12>
 8006f44:	b30e      	cbz	r6, 8006f8a <__multadd+0x7e>
 8006f46:	68a3      	ldr	r3, [r4, #8]
 8006f48:	42ab      	cmp	r3, r5
 8006f4a:	dc19      	bgt.n	8006f80 <__multadd+0x74>
 8006f4c:	6861      	ldr	r1, [r4, #4]
 8006f4e:	4638      	mov	r0, r7
 8006f50:	3101      	adds	r1, #1
 8006f52:	f7ff ff79 	bl	8006e48 <_Balloc>
 8006f56:	4680      	mov	r8, r0
 8006f58:	b928      	cbnz	r0, 8006f66 <__multadd+0x5a>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f90 <__multadd+0x84>)
 8006f5e:	480d      	ldr	r0, [pc, #52]	@ (8006f94 <__multadd+0x88>)
 8006f60:	21ba      	movs	r1, #186	@ 0xba
 8006f62:	f001 fd79 	bl	8008a58 <__assert_func>
 8006f66:	6922      	ldr	r2, [r4, #16]
 8006f68:	3202      	adds	r2, #2
 8006f6a:	f104 010c 	add.w	r1, r4, #12
 8006f6e:	0092      	lsls	r2, r2, #2
 8006f70:	300c      	adds	r0, #12
 8006f72:	f001 fd5b 	bl	8008a2c <memcpy>
 8006f76:	4621      	mov	r1, r4
 8006f78:	4638      	mov	r0, r7
 8006f7a:	f7ff ffa5 	bl	8006ec8 <_Bfree>
 8006f7e:	4644      	mov	r4, r8
 8006f80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f84:	3501      	adds	r5, #1
 8006f86:	615e      	str	r6, [r3, #20]
 8006f88:	6125      	str	r5, [r4, #16]
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f90:	08009729 	.word	0x08009729
 8006f94:	0800973a 	.word	0x0800973a

08006f98 <__s2b>:
 8006f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	4615      	mov	r5, r2
 8006fa0:	461f      	mov	r7, r3
 8006fa2:	2209      	movs	r2, #9
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fac:	2100      	movs	r1, #0
 8006fae:	2201      	movs	r2, #1
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	db09      	blt.n	8006fc8 <__s2b+0x30>
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f7ff ff47 	bl	8006e48 <_Balloc>
 8006fba:	b940      	cbnz	r0, 8006fce <__s2b+0x36>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	4b19      	ldr	r3, [pc, #100]	@ (8007024 <__s2b+0x8c>)
 8006fc0:	4819      	ldr	r0, [pc, #100]	@ (8007028 <__s2b+0x90>)
 8006fc2:	21d3      	movs	r1, #211	@ 0xd3
 8006fc4:	f001 fd48 	bl	8008a58 <__assert_func>
 8006fc8:	0052      	lsls	r2, r2, #1
 8006fca:	3101      	adds	r1, #1
 8006fcc:	e7f0      	b.n	8006fb0 <__s2b+0x18>
 8006fce:	9b08      	ldr	r3, [sp, #32]
 8006fd0:	6143      	str	r3, [r0, #20]
 8006fd2:	2d09      	cmp	r5, #9
 8006fd4:	f04f 0301 	mov.w	r3, #1
 8006fd8:	6103      	str	r3, [r0, #16]
 8006fda:	dd16      	ble.n	800700a <__s2b+0x72>
 8006fdc:	f104 0909 	add.w	r9, r4, #9
 8006fe0:	46c8      	mov	r8, r9
 8006fe2:	442c      	add	r4, r5
 8006fe4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006fe8:	4601      	mov	r1, r0
 8006fea:	3b30      	subs	r3, #48	@ 0x30
 8006fec:	220a      	movs	r2, #10
 8006fee:	4630      	mov	r0, r6
 8006ff0:	f7ff ff8c 	bl	8006f0c <__multadd>
 8006ff4:	45a0      	cmp	r8, r4
 8006ff6:	d1f5      	bne.n	8006fe4 <__s2b+0x4c>
 8006ff8:	f1a5 0408 	sub.w	r4, r5, #8
 8006ffc:	444c      	add	r4, r9
 8006ffe:	1b2d      	subs	r5, r5, r4
 8007000:	1963      	adds	r3, r4, r5
 8007002:	42bb      	cmp	r3, r7
 8007004:	db04      	blt.n	8007010 <__s2b+0x78>
 8007006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800700a:	340a      	adds	r4, #10
 800700c:	2509      	movs	r5, #9
 800700e:	e7f6      	b.n	8006ffe <__s2b+0x66>
 8007010:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007014:	4601      	mov	r1, r0
 8007016:	3b30      	subs	r3, #48	@ 0x30
 8007018:	220a      	movs	r2, #10
 800701a:	4630      	mov	r0, r6
 800701c:	f7ff ff76 	bl	8006f0c <__multadd>
 8007020:	e7ee      	b.n	8007000 <__s2b+0x68>
 8007022:	bf00      	nop
 8007024:	08009729 	.word	0x08009729
 8007028:	0800973a 	.word	0x0800973a

0800702c <__hi0bits>:
 800702c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007030:	4603      	mov	r3, r0
 8007032:	bf36      	itet	cc
 8007034:	0403      	lslcc	r3, r0, #16
 8007036:	2000      	movcs	r0, #0
 8007038:	2010      	movcc	r0, #16
 800703a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800703e:	bf3c      	itt	cc
 8007040:	021b      	lslcc	r3, r3, #8
 8007042:	3008      	addcc	r0, #8
 8007044:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007048:	bf3c      	itt	cc
 800704a:	011b      	lslcc	r3, r3, #4
 800704c:	3004      	addcc	r0, #4
 800704e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007052:	bf3c      	itt	cc
 8007054:	009b      	lslcc	r3, r3, #2
 8007056:	3002      	addcc	r0, #2
 8007058:	2b00      	cmp	r3, #0
 800705a:	db05      	blt.n	8007068 <__hi0bits+0x3c>
 800705c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007060:	f100 0001 	add.w	r0, r0, #1
 8007064:	bf08      	it	eq
 8007066:	2020      	moveq	r0, #32
 8007068:	4770      	bx	lr

0800706a <__lo0bits>:
 800706a:	6803      	ldr	r3, [r0, #0]
 800706c:	4602      	mov	r2, r0
 800706e:	f013 0007 	ands.w	r0, r3, #7
 8007072:	d00b      	beq.n	800708c <__lo0bits+0x22>
 8007074:	07d9      	lsls	r1, r3, #31
 8007076:	d421      	bmi.n	80070bc <__lo0bits+0x52>
 8007078:	0798      	lsls	r0, r3, #30
 800707a:	bf49      	itett	mi
 800707c:	085b      	lsrmi	r3, r3, #1
 800707e:	089b      	lsrpl	r3, r3, #2
 8007080:	2001      	movmi	r0, #1
 8007082:	6013      	strmi	r3, [r2, #0]
 8007084:	bf5c      	itt	pl
 8007086:	6013      	strpl	r3, [r2, #0]
 8007088:	2002      	movpl	r0, #2
 800708a:	4770      	bx	lr
 800708c:	b299      	uxth	r1, r3
 800708e:	b909      	cbnz	r1, 8007094 <__lo0bits+0x2a>
 8007090:	0c1b      	lsrs	r3, r3, #16
 8007092:	2010      	movs	r0, #16
 8007094:	b2d9      	uxtb	r1, r3
 8007096:	b909      	cbnz	r1, 800709c <__lo0bits+0x32>
 8007098:	3008      	adds	r0, #8
 800709a:	0a1b      	lsrs	r3, r3, #8
 800709c:	0719      	lsls	r1, r3, #28
 800709e:	bf04      	itt	eq
 80070a0:	091b      	lsreq	r3, r3, #4
 80070a2:	3004      	addeq	r0, #4
 80070a4:	0799      	lsls	r1, r3, #30
 80070a6:	bf04      	itt	eq
 80070a8:	089b      	lsreq	r3, r3, #2
 80070aa:	3002      	addeq	r0, #2
 80070ac:	07d9      	lsls	r1, r3, #31
 80070ae:	d403      	bmi.n	80070b8 <__lo0bits+0x4e>
 80070b0:	085b      	lsrs	r3, r3, #1
 80070b2:	f100 0001 	add.w	r0, r0, #1
 80070b6:	d003      	beq.n	80070c0 <__lo0bits+0x56>
 80070b8:	6013      	str	r3, [r2, #0]
 80070ba:	4770      	bx	lr
 80070bc:	2000      	movs	r0, #0
 80070be:	4770      	bx	lr
 80070c0:	2020      	movs	r0, #32
 80070c2:	4770      	bx	lr

080070c4 <__i2b>:
 80070c4:	b510      	push	{r4, lr}
 80070c6:	460c      	mov	r4, r1
 80070c8:	2101      	movs	r1, #1
 80070ca:	f7ff febd 	bl	8006e48 <_Balloc>
 80070ce:	4602      	mov	r2, r0
 80070d0:	b928      	cbnz	r0, 80070de <__i2b+0x1a>
 80070d2:	4b05      	ldr	r3, [pc, #20]	@ (80070e8 <__i2b+0x24>)
 80070d4:	4805      	ldr	r0, [pc, #20]	@ (80070ec <__i2b+0x28>)
 80070d6:	f240 1145 	movw	r1, #325	@ 0x145
 80070da:	f001 fcbd 	bl	8008a58 <__assert_func>
 80070de:	2301      	movs	r3, #1
 80070e0:	6144      	str	r4, [r0, #20]
 80070e2:	6103      	str	r3, [r0, #16]
 80070e4:	bd10      	pop	{r4, pc}
 80070e6:	bf00      	nop
 80070e8:	08009729 	.word	0x08009729
 80070ec:	0800973a 	.word	0x0800973a

080070f0 <__multiply>:
 80070f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f4:	4617      	mov	r7, r2
 80070f6:	690a      	ldr	r2, [r1, #16]
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	bfa8      	it	ge
 80070fe:	463b      	movge	r3, r7
 8007100:	4689      	mov	r9, r1
 8007102:	bfa4      	itt	ge
 8007104:	460f      	movge	r7, r1
 8007106:	4699      	movge	r9, r3
 8007108:	693d      	ldr	r5, [r7, #16]
 800710a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	6879      	ldr	r1, [r7, #4]
 8007112:	eb05 060a 	add.w	r6, r5, sl
 8007116:	42b3      	cmp	r3, r6
 8007118:	b085      	sub	sp, #20
 800711a:	bfb8      	it	lt
 800711c:	3101      	addlt	r1, #1
 800711e:	f7ff fe93 	bl	8006e48 <_Balloc>
 8007122:	b930      	cbnz	r0, 8007132 <__multiply+0x42>
 8007124:	4602      	mov	r2, r0
 8007126:	4b41      	ldr	r3, [pc, #260]	@ (800722c <__multiply+0x13c>)
 8007128:	4841      	ldr	r0, [pc, #260]	@ (8007230 <__multiply+0x140>)
 800712a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800712e:	f001 fc93 	bl	8008a58 <__assert_func>
 8007132:	f100 0414 	add.w	r4, r0, #20
 8007136:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800713a:	4623      	mov	r3, r4
 800713c:	2200      	movs	r2, #0
 800713e:	4573      	cmp	r3, lr
 8007140:	d320      	bcc.n	8007184 <__multiply+0x94>
 8007142:	f107 0814 	add.w	r8, r7, #20
 8007146:	f109 0114 	add.w	r1, r9, #20
 800714a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800714e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007152:	9302      	str	r3, [sp, #8]
 8007154:	1beb      	subs	r3, r5, r7
 8007156:	3b15      	subs	r3, #21
 8007158:	f023 0303 	bic.w	r3, r3, #3
 800715c:	3304      	adds	r3, #4
 800715e:	3715      	adds	r7, #21
 8007160:	42bd      	cmp	r5, r7
 8007162:	bf38      	it	cc
 8007164:	2304      	movcc	r3, #4
 8007166:	9301      	str	r3, [sp, #4]
 8007168:	9b02      	ldr	r3, [sp, #8]
 800716a:	9103      	str	r1, [sp, #12]
 800716c:	428b      	cmp	r3, r1
 800716e:	d80c      	bhi.n	800718a <__multiply+0x9a>
 8007170:	2e00      	cmp	r6, #0
 8007172:	dd03      	ble.n	800717c <__multiply+0x8c>
 8007174:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007178:	2b00      	cmp	r3, #0
 800717a:	d055      	beq.n	8007228 <__multiply+0x138>
 800717c:	6106      	str	r6, [r0, #16]
 800717e:	b005      	add	sp, #20
 8007180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007184:	f843 2b04 	str.w	r2, [r3], #4
 8007188:	e7d9      	b.n	800713e <__multiply+0x4e>
 800718a:	f8b1 a000 	ldrh.w	sl, [r1]
 800718e:	f1ba 0f00 	cmp.w	sl, #0
 8007192:	d01f      	beq.n	80071d4 <__multiply+0xe4>
 8007194:	46c4      	mov	ip, r8
 8007196:	46a1      	mov	r9, r4
 8007198:	2700      	movs	r7, #0
 800719a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800719e:	f8d9 3000 	ldr.w	r3, [r9]
 80071a2:	fa1f fb82 	uxth.w	fp, r2
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	fb0a 330b 	mla	r3, sl, fp, r3
 80071ac:	443b      	add	r3, r7
 80071ae:	f8d9 7000 	ldr.w	r7, [r9]
 80071b2:	0c12      	lsrs	r2, r2, #16
 80071b4:	0c3f      	lsrs	r7, r7, #16
 80071b6:	fb0a 7202 	mla	r2, sl, r2, r7
 80071ba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80071be:	b29b      	uxth	r3, r3
 80071c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071c4:	4565      	cmp	r5, ip
 80071c6:	f849 3b04 	str.w	r3, [r9], #4
 80071ca:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80071ce:	d8e4      	bhi.n	800719a <__multiply+0xaa>
 80071d0:	9b01      	ldr	r3, [sp, #4]
 80071d2:	50e7      	str	r7, [r4, r3]
 80071d4:	9b03      	ldr	r3, [sp, #12]
 80071d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80071da:	3104      	adds	r1, #4
 80071dc:	f1b9 0f00 	cmp.w	r9, #0
 80071e0:	d020      	beq.n	8007224 <__multiply+0x134>
 80071e2:	6823      	ldr	r3, [r4, #0]
 80071e4:	4647      	mov	r7, r8
 80071e6:	46a4      	mov	ip, r4
 80071e8:	f04f 0a00 	mov.w	sl, #0
 80071ec:	f8b7 b000 	ldrh.w	fp, [r7]
 80071f0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80071f4:	fb09 220b 	mla	r2, r9, fp, r2
 80071f8:	4452      	add	r2, sl
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007200:	f84c 3b04 	str.w	r3, [ip], #4
 8007204:	f857 3b04 	ldr.w	r3, [r7], #4
 8007208:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800720c:	f8bc 3000 	ldrh.w	r3, [ip]
 8007210:	fb09 330a 	mla	r3, r9, sl, r3
 8007214:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007218:	42bd      	cmp	r5, r7
 800721a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800721e:	d8e5      	bhi.n	80071ec <__multiply+0xfc>
 8007220:	9a01      	ldr	r2, [sp, #4]
 8007222:	50a3      	str	r3, [r4, r2]
 8007224:	3404      	adds	r4, #4
 8007226:	e79f      	b.n	8007168 <__multiply+0x78>
 8007228:	3e01      	subs	r6, #1
 800722a:	e7a1      	b.n	8007170 <__multiply+0x80>
 800722c:	08009729 	.word	0x08009729
 8007230:	0800973a 	.word	0x0800973a

08007234 <__pow5mult>:
 8007234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007238:	4615      	mov	r5, r2
 800723a:	f012 0203 	ands.w	r2, r2, #3
 800723e:	4607      	mov	r7, r0
 8007240:	460e      	mov	r6, r1
 8007242:	d007      	beq.n	8007254 <__pow5mult+0x20>
 8007244:	4c25      	ldr	r4, [pc, #148]	@ (80072dc <__pow5mult+0xa8>)
 8007246:	3a01      	subs	r2, #1
 8007248:	2300      	movs	r3, #0
 800724a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800724e:	f7ff fe5d 	bl	8006f0c <__multadd>
 8007252:	4606      	mov	r6, r0
 8007254:	10ad      	asrs	r5, r5, #2
 8007256:	d03d      	beq.n	80072d4 <__pow5mult+0xa0>
 8007258:	69fc      	ldr	r4, [r7, #28]
 800725a:	b97c      	cbnz	r4, 800727c <__pow5mult+0x48>
 800725c:	2010      	movs	r0, #16
 800725e:	f7ff fd3d 	bl	8006cdc <malloc>
 8007262:	4602      	mov	r2, r0
 8007264:	61f8      	str	r0, [r7, #28]
 8007266:	b928      	cbnz	r0, 8007274 <__pow5mult+0x40>
 8007268:	4b1d      	ldr	r3, [pc, #116]	@ (80072e0 <__pow5mult+0xac>)
 800726a:	481e      	ldr	r0, [pc, #120]	@ (80072e4 <__pow5mult+0xb0>)
 800726c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007270:	f001 fbf2 	bl	8008a58 <__assert_func>
 8007274:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007278:	6004      	str	r4, [r0, #0]
 800727a:	60c4      	str	r4, [r0, #12]
 800727c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007280:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007284:	b94c      	cbnz	r4, 800729a <__pow5mult+0x66>
 8007286:	f240 2171 	movw	r1, #625	@ 0x271
 800728a:	4638      	mov	r0, r7
 800728c:	f7ff ff1a 	bl	80070c4 <__i2b>
 8007290:	2300      	movs	r3, #0
 8007292:	f8c8 0008 	str.w	r0, [r8, #8]
 8007296:	4604      	mov	r4, r0
 8007298:	6003      	str	r3, [r0, #0]
 800729a:	f04f 0900 	mov.w	r9, #0
 800729e:	07eb      	lsls	r3, r5, #31
 80072a0:	d50a      	bpl.n	80072b8 <__pow5mult+0x84>
 80072a2:	4631      	mov	r1, r6
 80072a4:	4622      	mov	r2, r4
 80072a6:	4638      	mov	r0, r7
 80072a8:	f7ff ff22 	bl	80070f0 <__multiply>
 80072ac:	4631      	mov	r1, r6
 80072ae:	4680      	mov	r8, r0
 80072b0:	4638      	mov	r0, r7
 80072b2:	f7ff fe09 	bl	8006ec8 <_Bfree>
 80072b6:	4646      	mov	r6, r8
 80072b8:	106d      	asrs	r5, r5, #1
 80072ba:	d00b      	beq.n	80072d4 <__pow5mult+0xa0>
 80072bc:	6820      	ldr	r0, [r4, #0]
 80072be:	b938      	cbnz	r0, 80072d0 <__pow5mult+0x9c>
 80072c0:	4622      	mov	r2, r4
 80072c2:	4621      	mov	r1, r4
 80072c4:	4638      	mov	r0, r7
 80072c6:	f7ff ff13 	bl	80070f0 <__multiply>
 80072ca:	6020      	str	r0, [r4, #0]
 80072cc:	f8c0 9000 	str.w	r9, [r0]
 80072d0:	4604      	mov	r4, r0
 80072d2:	e7e4      	b.n	800729e <__pow5mult+0x6a>
 80072d4:	4630      	mov	r0, r6
 80072d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072da:	bf00      	nop
 80072dc:	0800984c 	.word	0x0800984c
 80072e0:	080096ba 	.word	0x080096ba
 80072e4:	0800973a 	.word	0x0800973a

080072e8 <__lshift>:
 80072e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ec:	460c      	mov	r4, r1
 80072ee:	6849      	ldr	r1, [r1, #4]
 80072f0:	6923      	ldr	r3, [r4, #16]
 80072f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072f6:	68a3      	ldr	r3, [r4, #8]
 80072f8:	4607      	mov	r7, r0
 80072fa:	4691      	mov	r9, r2
 80072fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007300:	f108 0601 	add.w	r6, r8, #1
 8007304:	42b3      	cmp	r3, r6
 8007306:	db0b      	blt.n	8007320 <__lshift+0x38>
 8007308:	4638      	mov	r0, r7
 800730a:	f7ff fd9d 	bl	8006e48 <_Balloc>
 800730e:	4605      	mov	r5, r0
 8007310:	b948      	cbnz	r0, 8007326 <__lshift+0x3e>
 8007312:	4602      	mov	r2, r0
 8007314:	4b28      	ldr	r3, [pc, #160]	@ (80073b8 <__lshift+0xd0>)
 8007316:	4829      	ldr	r0, [pc, #164]	@ (80073bc <__lshift+0xd4>)
 8007318:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800731c:	f001 fb9c 	bl	8008a58 <__assert_func>
 8007320:	3101      	adds	r1, #1
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	e7ee      	b.n	8007304 <__lshift+0x1c>
 8007326:	2300      	movs	r3, #0
 8007328:	f100 0114 	add.w	r1, r0, #20
 800732c:	f100 0210 	add.w	r2, r0, #16
 8007330:	4618      	mov	r0, r3
 8007332:	4553      	cmp	r3, sl
 8007334:	db33      	blt.n	800739e <__lshift+0xb6>
 8007336:	6920      	ldr	r0, [r4, #16]
 8007338:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800733c:	f104 0314 	add.w	r3, r4, #20
 8007340:	f019 091f 	ands.w	r9, r9, #31
 8007344:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007348:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800734c:	d02b      	beq.n	80073a6 <__lshift+0xbe>
 800734e:	f1c9 0e20 	rsb	lr, r9, #32
 8007352:	468a      	mov	sl, r1
 8007354:	2200      	movs	r2, #0
 8007356:	6818      	ldr	r0, [r3, #0]
 8007358:	fa00 f009 	lsl.w	r0, r0, r9
 800735c:	4310      	orrs	r0, r2
 800735e:	f84a 0b04 	str.w	r0, [sl], #4
 8007362:	f853 2b04 	ldr.w	r2, [r3], #4
 8007366:	459c      	cmp	ip, r3
 8007368:	fa22 f20e 	lsr.w	r2, r2, lr
 800736c:	d8f3      	bhi.n	8007356 <__lshift+0x6e>
 800736e:	ebac 0304 	sub.w	r3, ip, r4
 8007372:	3b15      	subs	r3, #21
 8007374:	f023 0303 	bic.w	r3, r3, #3
 8007378:	3304      	adds	r3, #4
 800737a:	f104 0015 	add.w	r0, r4, #21
 800737e:	4560      	cmp	r0, ip
 8007380:	bf88      	it	hi
 8007382:	2304      	movhi	r3, #4
 8007384:	50ca      	str	r2, [r1, r3]
 8007386:	b10a      	cbz	r2, 800738c <__lshift+0xa4>
 8007388:	f108 0602 	add.w	r6, r8, #2
 800738c:	3e01      	subs	r6, #1
 800738e:	4638      	mov	r0, r7
 8007390:	612e      	str	r6, [r5, #16]
 8007392:	4621      	mov	r1, r4
 8007394:	f7ff fd98 	bl	8006ec8 <_Bfree>
 8007398:	4628      	mov	r0, r5
 800739a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800739e:	f842 0f04 	str.w	r0, [r2, #4]!
 80073a2:	3301      	adds	r3, #1
 80073a4:	e7c5      	b.n	8007332 <__lshift+0x4a>
 80073a6:	3904      	subs	r1, #4
 80073a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80073b0:	459c      	cmp	ip, r3
 80073b2:	d8f9      	bhi.n	80073a8 <__lshift+0xc0>
 80073b4:	e7ea      	b.n	800738c <__lshift+0xa4>
 80073b6:	bf00      	nop
 80073b8:	08009729 	.word	0x08009729
 80073bc:	0800973a 	.word	0x0800973a

080073c0 <__mcmp>:
 80073c0:	690a      	ldr	r2, [r1, #16]
 80073c2:	4603      	mov	r3, r0
 80073c4:	6900      	ldr	r0, [r0, #16]
 80073c6:	1a80      	subs	r0, r0, r2
 80073c8:	b530      	push	{r4, r5, lr}
 80073ca:	d10e      	bne.n	80073ea <__mcmp+0x2a>
 80073cc:	3314      	adds	r3, #20
 80073ce:	3114      	adds	r1, #20
 80073d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80073d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80073d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80073dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80073e0:	4295      	cmp	r5, r2
 80073e2:	d003      	beq.n	80073ec <__mcmp+0x2c>
 80073e4:	d205      	bcs.n	80073f2 <__mcmp+0x32>
 80073e6:	f04f 30ff 	mov.w	r0, #4294967295
 80073ea:	bd30      	pop	{r4, r5, pc}
 80073ec:	42a3      	cmp	r3, r4
 80073ee:	d3f3      	bcc.n	80073d8 <__mcmp+0x18>
 80073f0:	e7fb      	b.n	80073ea <__mcmp+0x2a>
 80073f2:	2001      	movs	r0, #1
 80073f4:	e7f9      	b.n	80073ea <__mcmp+0x2a>
	...

080073f8 <__mdiff>:
 80073f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fc:	4689      	mov	r9, r1
 80073fe:	4606      	mov	r6, r0
 8007400:	4611      	mov	r1, r2
 8007402:	4648      	mov	r0, r9
 8007404:	4614      	mov	r4, r2
 8007406:	f7ff ffdb 	bl	80073c0 <__mcmp>
 800740a:	1e05      	subs	r5, r0, #0
 800740c:	d112      	bne.n	8007434 <__mdiff+0x3c>
 800740e:	4629      	mov	r1, r5
 8007410:	4630      	mov	r0, r6
 8007412:	f7ff fd19 	bl	8006e48 <_Balloc>
 8007416:	4602      	mov	r2, r0
 8007418:	b928      	cbnz	r0, 8007426 <__mdiff+0x2e>
 800741a:	4b3f      	ldr	r3, [pc, #252]	@ (8007518 <__mdiff+0x120>)
 800741c:	f240 2137 	movw	r1, #567	@ 0x237
 8007420:	483e      	ldr	r0, [pc, #248]	@ (800751c <__mdiff+0x124>)
 8007422:	f001 fb19 	bl	8008a58 <__assert_func>
 8007426:	2301      	movs	r3, #1
 8007428:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800742c:	4610      	mov	r0, r2
 800742e:	b003      	add	sp, #12
 8007430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007434:	bfbc      	itt	lt
 8007436:	464b      	movlt	r3, r9
 8007438:	46a1      	movlt	r9, r4
 800743a:	4630      	mov	r0, r6
 800743c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007440:	bfba      	itte	lt
 8007442:	461c      	movlt	r4, r3
 8007444:	2501      	movlt	r5, #1
 8007446:	2500      	movge	r5, #0
 8007448:	f7ff fcfe 	bl	8006e48 <_Balloc>
 800744c:	4602      	mov	r2, r0
 800744e:	b918      	cbnz	r0, 8007458 <__mdiff+0x60>
 8007450:	4b31      	ldr	r3, [pc, #196]	@ (8007518 <__mdiff+0x120>)
 8007452:	f240 2145 	movw	r1, #581	@ 0x245
 8007456:	e7e3      	b.n	8007420 <__mdiff+0x28>
 8007458:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800745c:	6926      	ldr	r6, [r4, #16]
 800745e:	60c5      	str	r5, [r0, #12]
 8007460:	f109 0310 	add.w	r3, r9, #16
 8007464:	f109 0514 	add.w	r5, r9, #20
 8007468:	f104 0e14 	add.w	lr, r4, #20
 800746c:	f100 0b14 	add.w	fp, r0, #20
 8007470:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007474:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007478:	9301      	str	r3, [sp, #4]
 800747a:	46d9      	mov	r9, fp
 800747c:	f04f 0c00 	mov.w	ip, #0
 8007480:	9b01      	ldr	r3, [sp, #4]
 8007482:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007486:	f853 af04 	ldr.w	sl, [r3, #4]!
 800748a:	9301      	str	r3, [sp, #4]
 800748c:	fa1f f38a 	uxth.w	r3, sl
 8007490:	4619      	mov	r1, r3
 8007492:	b283      	uxth	r3, r0
 8007494:	1acb      	subs	r3, r1, r3
 8007496:	0c00      	lsrs	r0, r0, #16
 8007498:	4463      	add	r3, ip
 800749a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800749e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80074a8:	4576      	cmp	r6, lr
 80074aa:	f849 3b04 	str.w	r3, [r9], #4
 80074ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074b2:	d8e5      	bhi.n	8007480 <__mdiff+0x88>
 80074b4:	1b33      	subs	r3, r6, r4
 80074b6:	3b15      	subs	r3, #21
 80074b8:	f023 0303 	bic.w	r3, r3, #3
 80074bc:	3415      	adds	r4, #21
 80074be:	3304      	adds	r3, #4
 80074c0:	42a6      	cmp	r6, r4
 80074c2:	bf38      	it	cc
 80074c4:	2304      	movcc	r3, #4
 80074c6:	441d      	add	r5, r3
 80074c8:	445b      	add	r3, fp
 80074ca:	461e      	mov	r6, r3
 80074cc:	462c      	mov	r4, r5
 80074ce:	4544      	cmp	r4, r8
 80074d0:	d30e      	bcc.n	80074f0 <__mdiff+0xf8>
 80074d2:	f108 0103 	add.w	r1, r8, #3
 80074d6:	1b49      	subs	r1, r1, r5
 80074d8:	f021 0103 	bic.w	r1, r1, #3
 80074dc:	3d03      	subs	r5, #3
 80074de:	45a8      	cmp	r8, r5
 80074e0:	bf38      	it	cc
 80074e2:	2100      	movcc	r1, #0
 80074e4:	440b      	add	r3, r1
 80074e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074ea:	b191      	cbz	r1, 8007512 <__mdiff+0x11a>
 80074ec:	6117      	str	r7, [r2, #16]
 80074ee:	e79d      	b.n	800742c <__mdiff+0x34>
 80074f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80074f4:	46e6      	mov	lr, ip
 80074f6:	0c08      	lsrs	r0, r1, #16
 80074f8:	fa1c fc81 	uxtah	ip, ip, r1
 80074fc:	4471      	add	r1, lr
 80074fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007502:	b289      	uxth	r1, r1
 8007504:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007508:	f846 1b04 	str.w	r1, [r6], #4
 800750c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007510:	e7dd      	b.n	80074ce <__mdiff+0xd6>
 8007512:	3f01      	subs	r7, #1
 8007514:	e7e7      	b.n	80074e6 <__mdiff+0xee>
 8007516:	bf00      	nop
 8007518:	08009729 	.word	0x08009729
 800751c:	0800973a 	.word	0x0800973a

08007520 <__ulp>:
 8007520:	b082      	sub	sp, #8
 8007522:	ed8d 0b00 	vstr	d0, [sp]
 8007526:	9a01      	ldr	r2, [sp, #4]
 8007528:	4b0f      	ldr	r3, [pc, #60]	@ (8007568 <__ulp+0x48>)
 800752a:	4013      	ands	r3, r2
 800752c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007530:	2b00      	cmp	r3, #0
 8007532:	dc08      	bgt.n	8007546 <__ulp+0x26>
 8007534:	425b      	negs	r3, r3
 8007536:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800753a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800753e:	da04      	bge.n	800754a <__ulp+0x2a>
 8007540:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007544:	4113      	asrs	r3, r2
 8007546:	2200      	movs	r2, #0
 8007548:	e008      	b.n	800755c <__ulp+0x3c>
 800754a:	f1a2 0314 	sub.w	r3, r2, #20
 800754e:	2b1e      	cmp	r3, #30
 8007550:	bfda      	itte	le
 8007552:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007556:	40da      	lsrle	r2, r3
 8007558:	2201      	movgt	r2, #1
 800755a:	2300      	movs	r3, #0
 800755c:	4619      	mov	r1, r3
 800755e:	4610      	mov	r0, r2
 8007560:	ec41 0b10 	vmov	d0, r0, r1
 8007564:	b002      	add	sp, #8
 8007566:	4770      	bx	lr
 8007568:	7ff00000 	.word	0x7ff00000

0800756c <__b2d>:
 800756c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007570:	6906      	ldr	r6, [r0, #16]
 8007572:	f100 0814 	add.w	r8, r0, #20
 8007576:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800757a:	1f37      	subs	r7, r6, #4
 800757c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007580:	4610      	mov	r0, r2
 8007582:	f7ff fd53 	bl	800702c <__hi0bits>
 8007586:	f1c0 0320 	rsb	r3, r0, #32
 800758a:	280a      	cmp	r0, #10
 800758c:	600b      	str	r3, [r1, #0]
 800758e:	491b      	ldr	r1, [pc, #108]	@ (80075fc <__b2d+0x90>)
 8007590:	dc15      	bgt.n	80075be <__b2d+0x52>
 8007592:	f1c0 0c0b 	rsb	ip, r0, #11
 8007596:	fa22 f30c 	lsr.w	r3, r2, ip
 800759a:	45b8      	cmp	r8, r7
 800759c:	ea43 0501 	orr.w	r5, r3, r1
 80075a0:	bf34      	ite	cc
 80075a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80075a6:	2300      	movcs	r3, #0
 80075a8:	3015      	adds	r0, #21
 80075aa:	fa02 f000 	lsl.w	r0, r2, r0
 80075ae:	fa23 f30c 	lsr.w	r3, r3, ip
 80075b2:	4303      	orrs	r3, r0
 80075b4:	461c      	mov	r4, r3
 80075b6:	ec45 4b10 	vmov	d0, r4, r5
 80075ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075be:	45b8      	cmp	r8, r7
 80075c0:	bf3a      	itte	cc
 80075c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80075c6:	f1a6 0708 	subcc.w	r7, r6, #8
 80075ca:	2300      	movcs	r3, #0
 80075cc:	380b      	subs	r0, #11
 80075ce:	d012      	beq.n	80075f6 <__b2d+0x8a>
 80075d0:	f1c0 0120 	rsb	r1, r0, #32
 80075d4:	fa23 f401 	lsr.w	r4, r3, r1
 80075d8:	4082      	lsls	r2, r0
 80075da:	4322      	orrs	r2, r4
 80075dc:	4547      	cmp	r7, r8
 80075de:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80075e2:	bf8c      	ite	hi
 80075e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80075e8:	2200      	movls	r2, #0
 80075ea:	4083      	lsls	r3, r0
 80075ec:	40ca      	lsrs	r2, r1
 80075ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80075f2:	4313      	orrs	r3, r2
 80075f4:	e7de      	b.n	80075b4 <__b2d+0x48>
 80075f6:	ea42 0501 	orr.w	r5, r2, r1
 80075fa:	e7db      	b.n	80075b4 <__b2d+0x48>
 80075fc:	3ff00000 	.word	0x3ff00000

08007600 <__d2b>:
 8007600:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007604:	460f      	mov	r7, r1
 8007606:	2101      	movs	r1, #1
 8007608:	ec59 8b10 	vmov	r8, r9, d0
 800760c:	4616      	mov	r6, r2
 800760e:	f7ff fc1b 	bl	8006e48 <_Balloc>
 8007612:	4604      	mov	r4, r0
 8007614:	b930      	cbnz	r0, 8007624 <__d2b+0x24>
 8007616:	4602      	mov	r2, r0
 8007618:	4b23      	ldr	r3, [pc, #140]	@ (80076a8 <__d2b+0xa8>)
 800761a:	4824      	ldr	r0, [pc, #144]	@ (80076ac <__d2b+0xac>)
 800761c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007620:	f001 fa1a 	bl	8008a58 <__assert_func>
 8007624:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007628:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800762c:	b10d      	cbz	r5, 8007632 <__d2b+0x32>
 800762e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007632:	9301      	str	r3, [sp, #4]
 8007634:	f1b8 0300 	subs.w	r3, r8, #0
 8007638:	d023      	beq.n	8007682 <__d2b+0x82>
 800763a:	4668      	mov	r0, sp
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	f7ff fd14 	bl	800706a <__lo0bits>
 8007642:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007646:	b1d0      	cbz	r0, 800767e <__d2b+0x7e>
 8007648:	f1c0 0320 	rsb	r3, r0, #32
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	430b      	orrs	r3, r1
 8007652:	40c2      	lsrs	r2, r0
 8007654:	6163      	str	r3, [r4, #20]
 8007656:	9201      	str	r2, [sp, #4]
 8007658:	9b01      	ldr	r3, [sp, #4]
 800765a:	61a3      	str	r3, [r4, #24]
 800765c:	2b00      	cmp	r3, #0
 800765e:	bf0c      	ite	eq
 8007660:	2201      	moveq	r2, #1
 8007662:	2202      	movne	r2, #2
 8007664:	6122      	str	r2, [r4, #16]
 8007666:	b1a5      	cbz	r5, 8007692 <__d2b+0x92>
 8007668:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800766c:	4405      	add	r5, r0
 800766e:	603d      	str	r5, [r7, #0]
 8007670:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007674:	6030      	str	r0, [r6, #0]
 8007676:	4620      	mov	r0, r4
 8007678:	b003      	add	sp, #12
 800767a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800767e:	6161      	str	r1, [r4, #20]
 8007680:	e7ea      	b.n	8007658 <__d2b+0x58>
 8007682:	a801      	add	r0, sp, #4
 8007684:	f7ff fcf1 	bl	800706a <__lo0bits>
 8007688:	9b01      	ldr	r3, [sp, #4]
 800768a:	6163      	str	r3, [r4, #20]
 800768c:	3020      	adds	r0, #32
 800768e:	2201      	movs	r2, #1
 8007690:	e7e8      	b.n	8007664 <__d2b+0x64>
 8007692:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007696:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800769a:	6038      	str	r0, [r7, #0]
 800769c:	6918      	ldr	r0, [r3, #16]
 800769e:	f7ff fcc5 	bl	800702c <__hi0bits>
 80076a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80076a6:	e7e5      	b.n	8007674 <__d2b+0x74>
 80076a8:	08009729 	.word	0x08009729
 80076ac:	0800973a 	.word	0x0800973a

080076b0 <__ratio>:
 80076b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b4:	b085      	sub	sp, #20
 80076b6:	e9cd 1000 	strd	r1, r0, [sp]
 80076ba:	a902      	add	r1, sp, #8
 80076bc:	f7ff ff56 	bl	800756c <__b2d>
 80076c0:	9800      	ldr	r0, [sp, #0]
 80076c2:	a903      	add	r1, sp, #12
 80076c4:	ec55 4b10 	vmov	r4, r5, d0
 80076c8:	f7ff ff50 	bl	800756c <__b2d>
 80076cc:	9b01      	ldr	r3, [sp, #4]
 80076ce:	6919      	ldr	r1, [r3, #16]
 80076d0:	9b00      	ldr	r3, [sp, #0]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	1ac9      	subs	r1, r1, r3
 80076d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80076da:	1a9b      	subs	r3, r3, r2
 80076dc:	ec5b ab10 	vmov	sl, fp, d0
 80076e0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	bfce      	itee	gt
 80076e8:	462a      	movgt	r2, r5
 80076ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80076ee:	465a      	movle	r2, fp
 80076f0:	462f      	mov	r7, r5
 80076f2:	46d9      	mov	r9, fp
 80076f4:	bfcc      	ite	gt
 80076f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80076fa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80076fe:	464b      	mov	r3, r9
 8007700:	4652      	mov	r2, sl
 8007702:	4620      	mov	r0, r4
 8007704:	4639      	mov	r1, r7
 8007706:	f7f9 f8a1 	bl	800084c <__aeabi_ddiv>
 800770a:	ec41 0b10 	vmov	d0, r0, r1
 800770e:	b005      	add	sp, #20
 8007710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007714 <__copybits>:
 8007714:	3901      	subs	r1, #1
 8007716:	b570      	push	{r4, r5, r6, lr}
 8007718:	1149      	asrs	r1, r1, #5
 800771a:	6914      	ldr	r4, [r2, #16]
 800771c:	3101      	adds	r1, #1
 800771e:	f102 0314 	add.w	r3, r2, #20
 8007722:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007726:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800772a:	1f05      	subs	r5, r0, #4
 800772c:	42a3      	cmp	r3, r4
 800772e:	d30c      	bcc.n	800774a <__copybits+0x36>
 8007730:	1aa3      	subs	r3, r4, r2
 8007732:	3b11      	subs	r3, #17
 8007734:	f023 0303 	bic.w	r3, r3, #3
 8007738:	3211      	adds	r2, #17
 800773a:	42a2      	cmp	r2, r4
 800773c:	bf88      	it	hi
 800773e:	2300      	movhi	r3, #0
 8007740:	4418      	add	r0, r3
 8007742:	2300      	movs	r3, #0
 8007744:	4288      	cmp	r0, r1
 8007746:	d305      	bcc.n	8007754 <__copybits+0x40>
 8007748:	bd70      	pop	{r4, r5, r6, pc}
 800774a:	f853 6b04 	ldr.w	r6, [r3], #4
 800774e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007752:	e7eb      	b.n	800772c <__copybits+0x18>
 8007754:	f840 3b04 	str.w	r3, [r0], #4
 8007758:	e7f4      	b.n	8007744 <__copybits+0x30>

0800775a <__any_on>:
 800775a:	f100 0214 	add.w	r2, r0, #20
 800775e:	6900      	ldr	r0, [r0, #16]
 8007760:	114b      	asrs	r3, r1, #5
 8007762:	4298      	cmp	r0, r3
 8007764:	b510      	push	{r4, lr}
 8007766:	db11      	blt.n	800778c <__any_on+0x32>
 8007768:	dd0a      	ble.n	8007780 <__any_on+0x26>
 800776a:	f011 011f 	ands.w	r1, r1, #31
 800776e:	d007      	beq.n	8007780 <__any_on+0x26>
 8007770:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007774:	fa24 f001 	lsr.w	r0, r4, r1
 8007778:	fa00 f101 	lsl.w	r1, r0, r1
 800777c:	428c      	cmp	r4, r1
 800777e:	d10b      	bne.n	8007798 <__any_on+0x3e>
 8007780:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007784:	4293      	cmp	r3, r2
 8007786:	d803      	bhi.n	8007790 <__any_on+0x36>
 8007788:	2000      	movs	r0, #0
 800778a:	bd10      	pop	{r4, pc}
 800778c:	4603      	mov	r3, r0
 800778e:	e7f7      	b.n	8007780 <__any_on+0x26>
 8007790:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007794:	2900      	cmp	r1, #0
 8007796:	d0f5      	beq.n	8007784 <__any_on+0x2a>
 8007798:	2001      	movs	r0, #1
 800779a:	e7f6      	b.n	800778a <__any_on+0x30>

0800779c <sulp>:
 800779c:	b570      	push	{r4, r5, r6, lr}
 800779e:	4604      	mov	r4, r0
 80077a0:	460d      	mov	r5, r1
 80077a2:	ec45 4b10 	vmov	d0, r4, r5
 80077a6:	4616      	mov	r6, r2
 80077a8:	f7ff feba 	bl	8007520 <__ulp>
 80077ac:	ec51 0b10 	vmov	r0, r1, d0
 80077b0:	b17e      	cbz	r6, 80077d2 <sulp+0x36>
 80077b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80077b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	dd09      	ble.n	80077d2 <sulp+0x36>
 80077be:	051b      	lsls	r3, r3, #20
 80077c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80077c4:	2400      	movs	r4, #0
 80077c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80077ca:	4622      	mov	r2, r4
 80077cc:	462b      	mov	r3, r5
 80077ce:	f7f8 ff13 	bl	80005f8 <__aeabi_dmul>
 80077d2:	ec41 0b10 	vmov	d0, r0, r1
 80077d6:	bd70      	pop	{r4, r5, r6, pc}

080077d8 <_strtod_l>:
 80077d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077dc:	b09f      	sub	sp, #124	@ 0x7c
 80077de:	460c      	mov	r4, r1
 80077e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80077e2:	2200      	movs	r2, #0
 80077e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80077e6:	9005      	str	r0, [sp, #20]
 80077e8:	f04f 0a00 	mov.w	sl, #0
 80077ec:	f04f 0b00 	mov.w	fp, #0
 80077f0:	460a      	mov	r2, r1
 80077f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80077f4:	7811      	ldrb	r1, [r2, #0]
 80077f6:	292b      	cmp	r1, #43	@ 0x2b
 80077f8:	d04a      	beq.n	8007890 <_strtod_l+0xb8>
 80077fa:	d838      	bhi.n	800786e <_strtod_l+0x96>
 80077fc:	290d      	cmp	r1, #13
 80077fe:	d832      	bhi.n	8007866 <_strtod_l+0x8e>
 8007800:	2908      	cmp	r1, #8
 8007802:	d832      	bhi.n	800786a <_strtod_l+0x92>
 8007804:	2900      	cmp	r1, #0
 8007806:	d03b      	beq.n	8007880 <_strtod_l+0xa8>
 8007808:	2200      	movs	r2, #0
 800780a:	920e      	str	r2, [sp, #56]	@ 0x38
 800780c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800780e:	782a      	ldrb	r2, [r5, #0]
 8007810:	2a30      	cmp	r2, #48	@ 0x30
 8007812:	f040 80b2 	bne.w	800797a <_strtod_l+0x1a2>
 8007816:	786a      	ldrb	r2, [r5, #1]
 8007818:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800781c:	2a58      	cmp	r2, #88	@ 0x58
 800781e:	d16e      	bne.n	80078fe <_strtod_l+0x126>
 8007820:	9302      	str	r3, [sp, #8]
 8007822:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	ab1a      	add	r3, sp, #104	@ 0x68
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	4a8f      	ldr	r2, [pc, #572]	@ (8007a68 <_strtod_l+0x290>)
 800782c:	9805      	ldr	r0, [sp, #20]
 800782e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007830:	a919      	add	r1, sp, #100	@ 0x64
 8007832:	f001 f9ab 	bl	8008b8c <__gethex>
 8007836:	f010 060f 	ands.w	r6, r0, #15
 800783a:	4604      	mov	r4, r0
 800783c:	d005      	beq.n	800784a <_strtod_l+0x72>
 800783e:	2e06      	cmp	r6, #6
 8007840:	d128      	bne.n	8007894 <_strtod_l+0xbc>
 8007842:	3501      	adds	r5, #1
 8007844:	2300      	movs	r3, #0
 8007846:	9519      	str	r5, [sp, #100]	@ 0x64
 8007848:	930e      	str	r3, [sp, #56]	@ 0x38
 800784a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800784c:	2b00      	cmp	r3, #0
 800784e:	f040 858e 	bne.w	800836e <_strtod_l+0xb96>
 8007852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007854:	b1cb      	cbz	r3, 800788a <_strtod_l+0xb2>
 8007856:	4652      	mov	r2, sl
 8007858:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800785c:	ec43 2b10 	vmov	d0, r2, r3
 8007860:	b01f      	add	sp, #124	@ 0x7c
 8007862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007866:	2920      	cmp	r1, #32
 8007868:	d1ce      	bne.n	8007808 <_strtod_l+0x30>
 800786a:	3201      	adds	r2, #1
 800786c:	e7c1      	b.n	80077f2 <_strtod_l+0x1a>
 800786e:	292d      	cmp	r1, #45	@ 0x2d
 8007870:	d1ca      	bne.n	8007808 <_strtod_l+0x30>
 8007872:	2101      	movs	r1, #1
 8007874:	910e      	str	r1, [sp, #56]	@ 0x38
 8007876:	1c51      	adds	r1, r2, #1
 8007878:	9119      	str	r1, [sp, #100]	@ 0x64
 800787a:	7852      	ldrb	r2, [r2, #1]
 800787c:	2a00      	cmp	r2, #0
 800787e:	d1c5      	bne.n	800780c <_strtod_l+0x34>
 8007880:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007882:	9419      	str	r4, [sp, #100]	@ 0x64
 8007884:	2b00      	cmp	r3, #0
 8007886:	f040 8570 	bne.w	800836a <_strtod_l+0xb92>
 800788a:	4652      	mov	r2, sl
 800788c:	465b      	mov	r3, fp
 800788e:	e7e5      	b.n	800785c <_strtod_l+0x84>
 8007890:	2100      	movs	r1, #0
 8007892:	e7ef      	b.n	8007874 <_strtod_l+0x9c>
 8007894:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007896:	b13a      	cbz	r2, 80078a8 <_strtod_l+0xd0>
 8007898:	2135      	movs	r1, #53	@ 0x35
 800789a:	a81c      	add	r0, sp, #112	@ 0x70
 800789c:	f7ff ff3a 	bl	8007714 <__copybits>
 80078a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078a2:	9805      	ldr	r0, [sp, #20]
 80078a4:	f7ff fb10 	bl	8006ec8 <_Bfree>
 80078a8:	3e01      	subs	r6, #1
 80078aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80078ac:	2e04      	cmp	r6, #4
 80078ae:	d806      	bhi.n	80078be <_strtod_l+0xe6>
 80078b0:	e8df f006 	tbb	[pc, r6]
 80078b4:	201d0314 	.word	0x201d0314
 80078b8:	14          	.byte	0x14
 80078b9:	00          	.byte	0x00
 80078ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80078be:	05e1      	lsls	r1, r4, #23
 80078c0:	bf48      	it	mi
 80078c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80078c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80078ca:	0d1b      	lsrs	r3, r3, #20
 80078cc:	051b      	lsls	r3, r3, #20
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1bb      	bne.n	800784a <_strtod_l+0x72>
 80078d2:	f7fe fb2d 	bl	8005f30 <__errno>
 80078d6:	2322      	movs	r3, #34	@ 0x22
 80078d8:	6003      	str	r3, [r0, #0]
 80078da:	e7b6      	b.n	800784a <_strtod_l+0x72>
 80078dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80078e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80078e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80078e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80078ec:	e7e7      	b.n	80078be <_strtod_l+0xe6>
 80078ee:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8007a70 <_strtod_l+0x298>
 80078f2:	e7e4      	b.n	80078be <_strtod_l+0xe6>
 80078f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80078f8:	f04f 3aff 	mov.w	sl, #4294967295
 80078fc:	e7df      	b.n	80078be <_strtod_l+0xe6>
 80078fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	9219      	str	r2, [sp, #100]	@ 0x64
 8007904:	785b      	ldrb	r3, [r3, #1]
 8007906:	2b30      	cmp	r3, #48	@ 0x30
 8007908:	d0f9      	beq.n	80078fe <_strtod_l+0x126>
 800790a:	2b00      	cmp	r3, #0
 800790c:	d09d      	beq.n	800784a <_strtod_l+0x72>
 800790e:	2301      	movs	r3, #1
 8007910:	2700      	movs	r7, #0
 8007912:	9308      	str	r3, [sp, #32]
 8007914:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007916:	930c      	str	r3, [sp, #48]	@ 0x30
 8007918:	970b      	str	r7, [sp, #44]	@ 0x2c
 800791a:	46b9      	mov	r9, r7
 800791c:	220a      	movs	r2, #10
 800791e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007920:	7805      	ldrb	r5, [r0, #0]
 8007922:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007926:	b2d9      	uxtb	r1, r3
 8007928:	2909      	cmp	r1, #9
 800792a:	d928      	bls.n	800797e <_strtod_l+0x1a6>
 800792c:	494f      	ldr	r1, [pc, #316]	@ (8007a6c <_strtod_l+0x294>)
 800792e:	2201      	movs	r2, #1
 8007930:	f001 f838 	bl	80089a4 <strncmp>
 8007934:	2800      	cmp	r0, #0
 8007936:	d032      	beq.n	800799e <_strtod_l+0x1c6>
 8007938:	2000      	movs	r0, #0
 800793a:	462a      	mov	r2, r5
 800793c:	900a      	str	r0, [sp, #40]	@ 0x28
 800793e:	464d      	mov	r5, r9
 8007940:	4603      	mov	r3, r0
 8007942:	2a65      	cmp	r2, #101	@ 0x65
 8007944:	d001      	beq.n	800794a <_strtod_l+0x172>
 8007946:	2a45      	cmp	r2, #69	@ 0x45
 8007948:	d114      	bne.n	8007974 <_strtod_l+0x19c>
 800794a:	b91d      	cbnz	r5, 8007954 <_strtod_l+0x17c>
 800794c:	9a08      	ldr	r2, [sp, #32]
 800794e:	4302      	orrs	r2, r0
 8007950:	d096      	beq.n	8007880 <_strtod_l+0xa8>
 8007952:	2500      	movs	r5, #0
 8007954:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007956:	1c62      	adds	r2, r4, #1
 8007958:	9219      	str	r2, [sp, #100]	@ 0x64
 800795a:	7862      	ldrb	r2, [r4, #1]
 800795c:	2a2b      	cmp	r2, #43	@ 0x2b
 800795e:	d07a      	beq.n	8007a56 <_strtod_l+0x27e>
 8007960:	2a2d      	cmp	r2, #45	@ 0x2d
 8007962:	d07e      	beq.n	8007a62 <_strtod_l+0x28a>
 8007964:	f04f 0c00 	mov.w	ip, #0
 8007968:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800796c:	2909      	cmp	r1, #9
 800796e:	f240 8085 	bls.w	8007a7c <_strtod_l+0x2a4>
 8007972:	9419      	str	r4, [sp, #100]	@ 0x64
 8007974:	f04f 0800 	mov.w	r8, #0
 8007978:	e0a5      	b.n	8007ac6 <_strtod_l+0x2ee>
 800797a:	2300      	movs	r3, #0
 800797c:	e7c8      	b.n	8007910 <_strtod_l+0x138>
 800797e:	f1b9 0f08 	cmp.w	r9, #8
 8007982:	bfd8      	it	le
 8007984:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007986:	f100 0001 	add.w	r0, r0, #1
 800798a:	bfda      	itte	le
 800798c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007990:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007992:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007996:	f109 0901 	add.w	r9, r9, #1
 800799a:	9019      	str	r0, [sp, #100]	@ 0x64
 800799c:	e7bf      	b.n	800791e <_strtod_l+0x146>
 800799e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80079a4:	785a      	ldrb	r2, [r3, #1]
 80079a6:	f1b9 0f00 	cmp.w	r9, #0
 80079aa:	d03b      	beq.n	8007a24 <_strtod_l+0x24c>
 80079ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80079ae:	464d      	mov	r5, r9
 80079b0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80079b4:	2b09      	cmp	r3, #9
 80079b6:	d912      	bls.n	80079de <_strtod_l+0x206>
 80079b8:	2301      	movs	r3, #1
 80079ba:	e7c2      	b.n	8007942 <_strtod_l+0x16a>
 80079bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80079c2:	785a      	ldrb	r2, [r3, #1]
 80079c4:	3001      	adds	r0, #1
 80079c6:	2a30      	cmp	r2, #48	@ 0x30
 80079c8:	d0f8      	beq.n	80079bc <_strtod_l+0x1e4>
 80079ca:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80079ce:	2b08      	cmp	r3, #8
 80079d0:	f200 84d2 	bhi.w	8008378 <_strtod_l+0xba0>
 80079d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079d6:	900a      	str	r0, [sp, #40]	@ 0x28
 80079d8:	2000      	movs	r0, #0
 80079da:	930c      	str	r3, [sp, #48]	@ 0x30
 80079dc:	4605      	mov	r5, r0
 80079de:	3a30      	subs	r2, #48	@ 0x30
 80079e0:	f100 0301 	add.w	r3, r0, #1
 80079e4:	d018      	beq.n	8007a18 <_strtod_l+0x240>
 80079e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80079e8:	4419      	add	r1, r3
 80079ea:	910a      	str	r1, [sp, #40]	@ 0x28
 80079ec:	462e      	mov	r6, r5
 80079ee:	f04f 0e0a 	mov.w	lr, #10
 80079f2:	1c71      	adds	r1, r6, #1
 80079f4:	eba1 0c05 	sub.w	ip, r1, r5
 80079f8:	4563      	cmp	r3, ip
 80079fa:	dc15      	bgt.n	8007a28 <_strtod_l+0x250>
 80079fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007a00:	182b      	adds	r3, r5, r0
 8007a02:	2b08      	cmp	r3, #8
 8007a04:	f105 0501 	add.w	r5, r5, #1
 8007a08:	4405      	add	r5, r0
 8007a0a:	dc1a      	bgt.n	8007a42 <_strtod_l+0x26a>
 8007a0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a0e:	230a      	movs	r3, #10
 8007a10:	fb03 2301 	mla	r3, r3, r1, r2
 8007a14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a16:	2300      	movs	r3, #0
 8007a18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a1a:	1c51      	adds	r1, r2, #1
 8007a1c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007a1e:	7852      	ldrb	r2, [r2, #1]
 8007a20:	4618      	mov	r0, r3
 8007a22:	e7c5      	b.n	80079b0 <_strtod_l+0x1d8>
 8007a24:	4648      	mov	r0, r9
 8007a26:	e7ce      	b.n	80079c6 <_strtod_l+0x1ee>
 8007a28:	2e08      	cmp	r6, #8
 8007a2a:	dc05      	bgt.n	8007a38 <_strtod_l+0x260>
 8007a2c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007a2e:	fb0e f606 	mul.w	r6, lr, r6
 8007a32:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007a34:	460e      	mov	r6, r1
 8007a36:	e7dc      	b.n	80079f2 <_strtod_l+0x21a>
 8007a38:	2910      	cmp	r1, #16
 8007a3a:	bfd8      	it	le
 8007a3c:	fb0e f707 	mulle.w	r7, lr, r7
 8007a40:	e7f8      	b.n	8007a34 <_strtod_l+0x25c>
 8007a42:	2b0f      	cmp	r3, #15
 8007a44:	bfdc      	itt	le
 8007a46:	230a      	movle	r3, #10
 8007a48:	fb03 2707 	mlale	r7, r3, r7, r2
 8007a4c:	e7e3      	b.n	8007a16 <_strtod_l+0x23e>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a52:	2301      	movs	r3, #1
 8007a54:	e77a      	b.n	800794c <_strtod_l+0x174>
 8007a56:	f04f 0c00 	mov.w	ip, #0
 8007a5a:	1ca2      	adds	r2, r4, #2
 8007a5c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a5e:	78a2      	ldrb	r2, [r4, #2]
 8007a60:	e782      	b.n	8007968 <_strtod_l+0x190>
 8007a62:	f04f 0c01 	mov.w	ip, #1
 8007a66:	e7f8      	b.n	8007a5a <_strtod_l+0x282>
 8007a68:	0800995c 	.word	0x0800995c
 8007a6c:	08009793 	.word	0x08009793
 8007a70:	7ff00000 	.word	0x7ff00000
 8007a74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a76:	1c51      	adds	r1, r2, #1
 8007a78:	9119      	str	r1, [sp, #100]	@ 0x64
 8007a7a:	7852      	ldrb	r2, [r2, #1]
 8007a7c:	2a30      	cmp	r2, #48	@ 0x30
 8007a7e:	d0f9      	beq.n	8007a74 <_strtod_l+0x29c>
 8007a80:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007a84:	2908      	cmp	r1, #8
 8007a86:	f63f af75 	bhi.w	8007974 <_strtod_l+0x19c>
 8007a8a:	3a30      	subs	r2, #48	@ 0x30
 8007a8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a90:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007a92:	f04f 080a 	mov.w	r8, #10
 8007a96:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a98:	1c56      	adds	r6, r2, #1
 8007a9a:	9619      	str	r6, [sp, #100]	@ 0x64
 8007a9c:	7852      	ldrb	r2, [r2, #1]
 8007a9e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007aa2:	f1be 0f09 	cmp.w	lr, #9
 8007aa6:	d939      	bls.n	8007b1c <_strtod_l+0x344>
 8007aa8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007aaa:	1a76      	subs	r6, r6, r1
 8007aac:	2e08      	cmp	r6, #8
 8007aae:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007ab2:	dc03      	bgt.n	8007abc <_strtod_l+0x2e4>
 8007ab4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ab6:	4588      	cmp	r8, r1
 8007ab8:	bfa8      	it	ge
 8007aba:	4688      	movge	r8, r1
 8007abc:	f1bc 0f00 	cmp.w	ip, #0
 8007ac0:	d001      	beq.n	8007ac6 <_strtod_l+0x2ee>
 8007ac2:	f1c8 0800 	rsb	r8, r8, #0
 8007ac6:	2d00      	cmp	r5, #0
 8007ac8:	d14e      	bne.n	8007b68 <_strtod_l+0x390>
 8007aca:	9908      	ldr	r1, [sp, #32]
 8007acc:	4308      	orrs	r0, r1
 8007ace:	f47f aebc 	bne.w	800784a <_strtod_l+0x72>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f47f aed4 	bne.w	8007880 <_strtod_l+0xa8>
 8007ad8:	2a69      	cmp	r2, #105	@ 0x69
 8007ada:	d028      	beq.n	8007b2e <_strtod_l+0x356>
 8007adc:	dc25      	bgt.n	8007b2a <_strtod_l+0x352>
 8007ade:	2a49      	cmp	r2, #73	@ 0x49
 8007ae0:	d025      	beq.n	8007b2e <_strtod_l+0x356>
 8007ae2:	2a4e      	cmp	r2, #78	@ 0x4e
 8007ae4:	f47f aecc 	bne.w	8007880 <_strtod_l+0xa8>
 8007ae8:	499a      	ldr	r1, [pc, #616]	@ (8007d54 <_strtod_l+0x57c>)
 8007aea:	a819      	add	r0, sp, #100	@ 0x64
 8007aec:	f001 fa70 	bl	8008fd0 <__match>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	f43f aec5 	beq.w	8007880 <_strtod_l+0xa8>
 8007af6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	2b28      	cmp	r3, #40	@ 0x28
 8007afc:	d12e      	bne.n	8007b5c <_strtod_l+0x384>
 8007afe:	4996      	ldr	r1, [pc, #600]	@ (8007d58 <_strtod_l+0x580>)
 8007b00:	aa1c      	add	r2, sp, #112	@ 0x70
 8007b02:	a819      	add	r0, sp, #100	@ 0x64
 8007b04:	f001 fa78 	bl	8008ff8 <__hexnan>
 8007b08:	2805      	cmp	r0, #5
 8007b0a:	d127      	bne.n	8007b5c <_strtod_l+0x384>
 8007b0c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007b0e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007b12:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007b16:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007b1a:	e696      	b.n	800784a <_strtod_l+0x72>
 8007b1c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b1e:	fb08 2101 	mla	r1, r8, r1, r2
 8007b22:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007b26:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b28:	e7b5      	b.n	8007a96 <_strtod_l+0x2be>
 8007b2a:	2a6e      	cmp	r2, #110	@ 0x6e
 8007b2c:	e7da      	b.n	8007ae4 <_strtod_l+0x30c>
 8007b2e:	498b      	ldr	r1, [pc, #556]	@ (8007d5c <_strtod_l+0x584>)
 8007b30:	a819      	add	r0, sp, #100	@ 0x64
 8007b32:	f001 fa4d 	bl	8008fd0 <__match>
 8007b36:	2800      	cmp	r0, #0
 8007b38:	f43f aea2 	beq.w	8007880 <_strtod_l+0xa8>
 8007b3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b3e:	4988      	ldr	r1, [pc, #544]	@ (8007d60 <_strtod_l+0x588>)
 8007b40:	3b01      	subs	r3, #1
 8007b42:	a819      	add	r0, sp, #100	@ 0x64
 8007b44:	9319      	str	r3, [sp, #100]	@ 0x64
 8007b46:	f001 fa43 	bl	8008fd0 <__match>
 8007b4a:	b910      	cbnz	r0, 8007b52 <_strtod_l+0x37a>
 8007b4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b4e:	3301      	adds	r3, #1
 8007b50:	9319      	str	r3, [sp, #100]	@ 0x64
 8007b52:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8007d70 <_strtod_l+0x598>
 8007b56:	f04f 0a00 	mov.w	sl, #0
 8007b5a:	e676      	b.n	800784a <_strtod_l+0x72>
 8007b5c:	4881      	ldr	r0, [pc, #516]	@ (8007d64 <_strtod_l+0x58c>)
 8007b5e:	f000 ff73 	bl	8008a48 <nan>
 8007b62:	ec5b ab10 	vmov	sl, fp, d0
 8007b66:	e670      	b.n	800784a <_strtod_l+0x72>
 8007b68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b6a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007b6c:	eba8 0303 	sub.w	r3, r8, r3
 8007b70:	f1b9 0f00 	cmp.w	r9, #0
 8007b74:	bf08      	it	eq
 8007b76:	46a9      	moveq	r9, r5
 8007b78:	2d10      	cmp	r5, #16
 8007b7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b7c:	462c      	mov	r4, r5
 8007b7e:	bfa8      	it	ge
 8007b80:	2410      	movge	r4, #16
 8007b82:	f7f8 fcbf 	bl	8000504 <__aeabi_ui2d>
 8007b86:	2d09      	cmp	r5, #9
 8007b88:	4682      	mov	sl, r0
 8007b8a:	468b      	mov	fp, r1
 8007b8c:	dc13      	bgt.n	8007bb6 <_strtod_l+0x3de>
 8007b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f43f ae5a 	beq.w	800784a <_strtod_l+0x72>
 8007b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b98:	dd78      	ble.n	8007c8c <_strtod_l+0x4b4>
 8007b9a:	2b16      	cmp	r3, #22
 8007b9c:	dc5f      	bgt.n	8007c5e <_strtod_l+0x486>
 8007b9e:	4972      	ldr	r1, [pc, #456]	@ (8007d68 <_strtod_l+0x590>)
 8007ba0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ba8:	4652      	mov	r2, sl
 8007baa:	465b      	mov	r3, fp
 8007bac:	f7f8 fd24 	bl	80005f8 <__aeabi_dmul>
 8007bb0:	4682      	mov	sl, r0
 8007bb2:	468b      	mov	fp, r1
 8007bb4:	e649      	b.n	800784a <_strtod_l+0x72>
 8007bb6:	4b6c      	ldr	r3, [pc, #432]	@ (8007d68 <_strtod_l+0x590>)
 8007bb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bbc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007bc0:	f7f8 fd1a 	bl	80005f8 <__aeabi_dmul>
 8007bc4:	4682      	mov	sl, r0
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	468b      	mov	fp, r1
 8007bca:	f7f8 fc9b 	bl	8000504 <__aeabi_ui2d>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4650      	mov	r0, sl
 8007bd4:	4659      	mov	r1, fp
 8007bd6:	f7f8 fb59 	bl	800028c <__adddf3>
 8007bda:	2d0f      	cmp	r5, #15
 8007bdc:	4682      	mov	sl, r0
 8007bde:	468b      	mov	fp, r1
 8007be0:	ddd5      	ble.n	8007b8e <_strtod_l+0x3b6>
 8007be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007be4:	1b2c      	subs	r4, r5, r4
 8007be6:	441c      	add	r4, r3
 8007be8:	2c00      	cmp	r4, #0
 8007bea:	f340 8093 	ble.w	8007d14 <_strtod_l+0x53c>
 8007bee:	f014 030f 	ands.w	r3, r4, #15
 8007bf2:	d00a      	beq.n	8007c0a <_strtod_l+0x432>
 8007bf4:	495c      	ldr	r1, [pc, #368]	@ (8007d68 <_strtod_l+0x590>)
 8007bf6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007bfa:	4652      	mov	r2, sl
 8007bfc:	465b      	mov	r3, fp
 8007bfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c02:	f7f8 fcf9 	bl	80005f8 <__aeabi_dmul>
 8007c06:	4682      	mov	sl, r0
 8007c08:	468b      	mov	fp, r1
 8007c0a:	f034 040f 	bics.w	r4, r4, #15
 8007c0e:	d073      	beq.n	8007cf8 <_strtod_l+0x520>
 8007c10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007c14:	dd49      	ble.n	8007caa <_strtod_l+0x4d2>
 8007c16:	2400      	movs	r4, #0
 8007c18:	46a0      	mov	r8, r4
 8007c1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007c1c:	46a1      	mov	r9, r4
 8007c1e:	9a05      	ldr	r2, [sp, #20]
 8007c20:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8007d70 <_strtod_l+0x598>
 8007c24:	2322      	movs	r3, #34	@ 0x22
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	f04f 0a00 	mov.w	sl, #0
 8007c2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f43f ae0b 	beq.w	800784a <_strtod_l+0x72>
 8007c34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c36:	9805      	ldr	r0, [sp, #20]
 8007c38:	f7ff f946 	bl	8006ec8 <_Bfree>
 8007c3c:	9805      	ldr	r0, [sp, #20]
 8007c3e:	4649      	mov	r1, r9
 8007c40:	f7ff f942 	bl	8006ec8 <_Bfree>
 8007c44:	9805      	ldr	r0, [sp, #20]
 8007c46:	4641      	mov	r1, r8
 8007c48:	f7ff f93e 	bl	8006ec8 <_Bfree>
 8007c4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c4e:	9805      	ldr	r0, [sp, #20]
 8007c50:	f7ff f93a 	bl	8006ec8 <_Bfree>
 8007c54:	9805      	ldr	r0, [sp, #20]
 8007c56:	4621      	mov	r1, r4
 8007c58:	f7ff f936 	bl	8006ec8 <_Bfree>
 8007c5c:	e5f5      	b.n	800784a <_strtod_l+0x72>
 8007c5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007c64:	4293      	cmp	r3, r2
 8007c66:	dbbc      	blt.n	8007be2 <_strtod_l+0x40a>
 8007c68:	4c3f      	ldr	r4, [pc, #252]	@ (8007d68 <_strtod_l+0x590>)
 8007c6a:	f1c5 050f 	rsb	r5, r5, #15
 8007c6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007c72:	4652      	mov	r2, sl
 8007c74:	465b      	mov	r3, fp
 8007c76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c7a:	f7f8 fcbd 	bl	80005f8 <__aeabi_dmul>
 8007c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c80:	1b5d      	subs	r5, r3, r5
 8007c82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007c86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007c8a:	e78f      	b.n	8007bac <_strtod_l+0x3d4>
 8007c8c:	3316      	adds	r3, #22
 8007c8e:	dba8      	blt.n	8007be2 <_strtod_l+0x40a>
 8007c90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c92:	eba3 0808 	sub.w	r8, r3, r8
 8007c96:	4b34      	ldr	r3, [pc, #208]	@ (8007d68 <_strtod_l+0x590>)
 8007c98:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007c9c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007ca0:	4650      	mov	r0, sl
 8007ca2:	4659      	mov	r1, fp
 8007ca4:	f7f8 fdd2 	bl	800084c <__aeabi_ddiv>
 8007ca8:	e782      	b.n	8007bb0 <_strtod_l+0x3d8>
 8007caa:	2300      	movs	r3, #0
 8007cac:	4f2f      	ldr	r7, [pc, #188]	@ (8007d6c <_strtod_l+0x594>)
 8007cae:	1124      	asrs	r4, r4, #4
 8007cb0:	4650      	mov	r0, sl
 8007cb2:	4659      	mov	r1, fp
 8007cb4:	461e      	mov	r6, r3
 8007cb6:	2c01      	cmp	r4, #1
 8007cb8:	dc21      	bgt.n	8007cfe <_strtod_l+0x526>
 8007cba:	b10b      	cbz	r3, 8007cc0 <_strtod_l+0x4e8>
 8007cbc:	4682      	mov	sl, r0
 8007cbe:	468b      	mov	fp, r1
 8007cc0:	492a      	ldr	r1, [pc, #168]	@ (8007d6c <_strtod_l+0x594>)
 8007cc2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007cc6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007cca:	4652      	mov	r2, sl
 8007ccc:	465b      	mov	r3, fp
 8007cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cd2:	f7f8 fc91 	bl	80005f8 <__aeabi_dmul>
 8007cd6:	4b26      	ldr	r3, [pc, #152]	@ (8007d70 <_strtod_l+0x598>)
 8007cd8:	460a      	mov	r2, r1
 8007cda:	400b      	ands	r3, r1
 8007cdc:	4925      	ldr	r1, [pc, #148]	@ (8007d74 <_strtod_l+0x59c>)
 8007cde:	428b      	cmp	r3, r1
 8007ce0:	4682      	mov	sl, r0
 8007ce2:	d898      	bhi.n	8007c16 <_strtod_l+0x43e>
 8007ce4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007ce8:	428b      	cmp	r3, r1
 8007cea:	bf86      	itte	hi
 8007cec:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8007d78 <_strtod_l+0x5a0>
 8007cf0:	f04f 3aff 	movhi.w	sl, #4294967295
 8007cf4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	9308      	str	r3, [sp, #32]
 8007cfc:	e076      	b.n	8007dec <_strtod_l+0x614>
 8007cfe:	07e2      	lsls	r2, r4, #31
 8007d00:	d504      	bpl.n	8007d0c <_strtod_l+0x534>
 8007d02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d06:	f7f8 fc77 	bl	80005f8 <__aeabi_dmul>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	3601      	adds	r6, #1
 8007d0e:	1064      	asrs	r4, r4, #1
 8007d10:	3708      	adds	r7, #8
 8007d12:	e7d0      	b.n	8007cb6 <_strtod_l+0x4de>
 8007d14:	d0f0      	beq.n	8007cf8 <_strtod_l+0x520>
 8007d16:	4264      	negs	r4, r4
 8007d18:	f014 020f 	ands.w	r2, r4, #15
 8007d1c:	d00a      	beq.n	8007d34 <_strtod_l+0x55c>
 8007d1e:	4b12      	ldr	r3, [pc, #72]	@ (8007d68 <_strtod_l+0x590>)
 8007d20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d24:	4650      	mov	r0, sl
 8007d26:	4659      	mov	r1, fp
 8007d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2c:	f7f8 fd8e 	bl	800084c <__aeabi_ddiv>
 8007d30:	4682      	mov	sl, r0
 8007d32:	468b      	mov	fp, r1
 8007d34:	1124      	asrs	r4, r4, #4
 8007d36:	d0df      	beq.n	8007cf8 <_strtod_l+0x520>
 8007d38:	2c1f      	cmp	r4, #31
 8007d3a:	dd1f      	ble.n	8007d7c <_strtod_l+0x5a4>
 8007d3c:	2400      	movs	r4, #0
 8007d3e:	46a0      	mov	r8, r4
 8007d40:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d42:	46a1      	mov	r9, r4
 8007d44:	9a05      	ldr	r2, [sp, #20]
 8007d46:	2322      	movs	r3, #34	@ 0x22
 8007d48:	f04f 0a00 	mov.w	sl, #0
 8007d4c:	f04f 0b00 	mov.w	fp, #0
 8007d50:	6013      	str	r3, [r2, #0]
 8007d52:	e76b      	b.n	8007c2c <_strtod_l+0x454>
 8007d54:	08009681 	.word	0x08009681
 8007d58:	08009948 	.word	0x08009948
 8007d5c:	08009679 	.word	0x08009679
 8007d60:	080096b0 	.word	0x080096b0
 8007d64:	080097e9 	.word	0x080097e9
 8007d68:	08009880 	.word	0x08009880
 8007d6c:	08009858 	.word	0x08009858
 8007d70:	7ff00000 	.word	0x7ff00000
 8007d74:	7ca00000 	.word	0x7ca00000
 8007d78:	7fefffff 	.word	0x7fefffff
 8007d7c:	f014 0310 	ands.w	r3, r4, #16
 8007d80:	bf18      	it	ne
 8007d82:	236a      	movne	r3, #106	@ 0x6a
 8007d84:	4ea9      	ldr	r6, [pc, #676]	@ (800802c <_strtod_l+0x854>)
 8007d86:	9308      	str	r3, [sp, #32]
 8007d88:	4650      	mov	r0, sl
 8007d8a:	4659      	mov	r1, fp
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	07e7      	lsls	r7, r4, #31
 8007d90:	d504      	bpl.n	8007d9c <_strtod_l+0x5c4>
 8007d92:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d96:	f7f8 fc2f 	bl	80005f8 <__aeabi_dmul>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	1064      	asrs	r4, r4, #1
 8007d9e:	f106 0608 	add.w	r6, r6, #8
 8007da2:	d1f4      	bne.n	8007d8e <_strtod_l+0x5b6>
 8007da4:	b10b      	cbz	r3, 8007daa <_strtod_l+0x5d2>
 8007da6:	4682      	mov	sl, r0
 8007da8:	468b      	mov	fp, r1
 8007daa:	9b08      	ldr	r3, [sp, #32]
 8007dac:	b1b3      	cbz	r3, 8007ddc <_strtod_l+0x604>
 8007dae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007db2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	4659      	mov	r1, fp
 8007dba:	dd0f      	ble.n	8007ddc <_strtod_l+0x604>
 8007dbc:	2b1f      	cmp	r3, #31
 8007dbe:	dd56      	ble.n	8007e6e <_strtod_l+0x696>
 8007dc0:	2b34      	cmp	r3, #52	@ 0x34
 8007dc2:	bfde      	ittt	le
 8007dc4:	f04f 33ff 	movle.w	r3, #4294967295
 8007dc8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007dcc:	4093      	lslle	r3, r2
 8007dce:	f04f 0a00 	mov.w	sl, #0
 8007dd2:	bfcc      	ite	gt
 8007dd4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007dd8:	ea03 0b01 	andle.w	fp, r3, r1
 8007ddc:	2200      	movs	r2, #0
 8007dde:	2300      	movs	r3, #0
 8007de0:	4650      	mov	r0, sl
 8007de2:	4659      	mov	r1, fp
 8007de4:	f7f8 fe70 	bl	8000ac8 <__aeabi_dcmpeq>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d1a7      	bne.n	8007d3c <_strtod_l+0x564>
 8007dec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007df2:	9805      	ldr	r0, [sp, #20]
 8007df4:	462b      	mov	r3, r5
 8007df6:	464a      	mov	r2, r9
 8007df8:	f7ff f8ce 	bl	8006f98 <__s2b>
 8007dfc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f43f af09 	beq.w	8007c16 <_strtod_l+0x43e>
 8007e04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e08:	2a00      	cmp	r2, #0
 8007e0a:	eba3 0308 	sub.w	r3, r3, r8
 8007e0e:	bfa8      	it	ge
 8007e10:	2300      	movge	r3, #0
 8007e12:	9312      	str	r3, [sp, #72]	@ 0x48
 8007e14:	2400      	movs	r4, #0
 8007e16:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007e1a:	9316      	str	r3, [sp, #88]	@ 0x58
 8007e1c:	46a0      	mov	r8, r4
 8007e1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e20:	9805      	ldr	r0, [sp, #20]
 8007e22:	6859      	ldr	r1, [r3, #4]
 8007e24:	f7ff f810 	bl	8006e48 <_Balloc>
 8007e28:	4681      	mov	r9, r0
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	f43f aef7 	beq.w	8007c1e <_strtod_l+0x446>
 8007e30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e32:	691a      	ldr	r2, [r3, #16]
 8007e34:	3202      	adds	r2, #2
 8007e36:	f103 010c 	add.w	r1, r3, #12
 8007e3a:	0092      	lsls	r2, r2, #2
 8007e3c:	300c      	adds	r0, #12
 8007e3e:	f000 fdf5 	bl	8008a2c <memcpy>
 8007e42:	ec4b ab10 	vmov	d0, sl, fp
 8007e46:	9805      	ldr	r0, [sp, #20]
 8007e48:	aa1c      	add	r2, sp, #112	@ 0x70
 8007e4a:	a91b      	add	r1, sp, #108	@ 0x6c
 8007e4c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007e50:	f7ff fbd6 	bl	8007600 <__d2b>
 8007e54:	901a      	str	r0, [sp, #104]	@ 0x68
 8007e56:	2800      	cmp	r0, #0
 8007e58:	f43f aee1 	beq.w	8007c1e <_strtod_l+0x446>
 8007e5c:	9805      	ldr	r0, [sp, #20]
 8007e5e:	2101      	movs	r1, #1
 8007e60:	f7ff f930 	bl	80070c4 <__i2b>
 8007e64:	4680      	mov	r8, r0
 8007e66:	b948      	cbnz	r0, 8007e7c <_strtod_l+0x6a4>
 8007e68:	f04f 0800 	mov.w	r8, #0
 8007e6c:	e6d7      	b.n	8007c1e <_strtod_l+0x446>
 8007e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e72:	fa02 f303 	lsl.w	r3, r2, r3
 8007e76:	ea03 0a0a 	and.w	sl, r3, sl
 8007e7a:	e7af      	b.n	8007ddc <_strtod_l+0x604>
 8007e7c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007e7e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007e80:	2d00      	cmp	r5, #0
 8007e82:	bfab      	itete	ge
 8007e84:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007e86:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007e88:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007e8a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007e8c:	bfac      	ite	ge
 8007e8e:	18ef      	addge	r7, r5, r3
 8007e90:	1b5e      	sublt	r6, r3, r5
 8007e92:	9b08      	ldr	r3, [sp, #32]
 8007e94:	1aed      	subs	r5, r5, r3
 8007e96:	4415      	add	r5, r2
 8007e98:	4b65      	ldr	r3, [pc, #404]	@ (8008030 <_strtod_l+0x858>)
 8007e9a:	3d01      	subs	r5, #1
 8007e9c:	429d      	cmp	r5, r3
 8007e9e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007ea2:	da50      	bge.n	8007f46 <_strtod_l+0x76e>
 8007ea4:	1b5b      	subs	r3, r3, r5
 8007ea6:	2b1f      	cmp	r3, #31
 8007ea8:	eba2 0203 	sub.w	r2, r2, r3
 8007eac:	f04f 0101 	mov.w	r1, #1
 8007eb0:	dc3d      	bgt.n	8007f2e <_strtod_l+0x756>
 8007eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007eb8:	2300      	movs	r3, #0
 8007eba:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ebc:	18bd      	adds	r5, r7, r2
 8007ebe:	9b08      	ldr	r3, [sp, #32]
 8007ec0:	42af      	cmp	r7, r5
 8007ec2:	4416      	add	r6, r2
 8007ec4:	441e      	add	r6, r3
 8007ec6:	463b      	mov	r3, r7
 8007ec8:	bfa8      	it	ge
 8007eca:	462b      	movge	r3, r5
 8007ecc:	42b3      	cmp	r3, r6
 8007ece:	bfa8      	it	ge
 8007ed0:	4633      	movge	r3, r6
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	bfc2      	ittt	gt
 8007ed6:	1aed      	subgt	r5, r5, r3
 8007ed8:	1af6      	subgt	r6, r6, r3
 8007eda:	1aff      	subgt	r7, r7, r3
 8007edc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	dd16      	ble.n	8007f10 <_strtod_l+0x738>
 8007ee2:	4641      	mov	r1, r8
 8007ee4:	9805      	ldr	r0, [sp, #20]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f7ff f9a4 	bl	8007234 <__pow5mult>
 8007eec:	4680      	mov	r8, r0
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d0ba      	beq.n	8007e68 <_strtod_l+0x690>
 8007ef2:	4601      	mov	r1, r0
 8007ef4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007ef6:	9805      	ldr	r0, [sp, #20]
 8007ef8:	f7ff f8fa 	bl	80070f0 <__multiply>
 8007efc:	900a      	str	r0, [sp, #40]	@ 0x28
 8007efe:	2800      	cmp	r0, #0
 8007f00:	f43f ae8d 	beq.w	8007c1e <_strtod_l+0x446>
 8007f04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f06:	9805      	ldr	r0, [sp, #20]
 8007f08:	f7fe ffde 	bl	8006ec8 <_Bfree>
 8007f0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f10:	2d00      	cmp	r5, #0
 8007f12:	dc1d      	bgt.n	8007f50 <_strtod_l+0x778>
 8007f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	dd23      	ble.n	8007f62 <_strtod_l+0x78a>
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007f1e:	9805      	ldr	r0, [sp, #20]
 8007f20:	f7ff f988 	bl	8007234 <__pow5mult>
 8007f24:	4681      	mov	r9, r0
 8007f26:	b9e0      	cbnz	r0, 8007f62 <_strtod_l+0x78a>
 8007f28:	f04f 0900 	mov.w	r9, #0
 8007f2c:	e677      	b.n	8007c1e <_strtod_l+0x446>
 8007f2e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007f32:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007f36:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007f3a:	35e2      	adds	r5, #226	@ 0xe2
 8007f3c:	fa01 f305 	lsl.w	r3, r1, r5
 8007f40:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f42:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007f44:	e7ba      	b.n	8007ebc <_strtod_l+0x6e4>
 8007f46:	2300      	movs	r3, #0
 8007f48:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f4e:	e7b5      	b.n	8007ebc <_strtod_l+0x6e4>
 8007f50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f52:	9805      	ldr	r0, [sp, #20]
 8007f54:	462a      	mov	r2, r5
 8007f56:	f7ff f9c7 	bl	80072e8 <__lshift>
 8007f5a:	901a      	str	r0, [sp, #104]	@ 0x68
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d1d9      	bne.n	8007f14 <_strtod_l+0x73c>
 8007f60:	e65d      	b.n	8007c1e <_strtod_l+0x446>
 8007f62:	2e00      	cmp	r6, #0
 8007f64:	dd07      	ble.n	8007f76 <_strtod_l+0x79e>
 8007f66:	4649      	mov	r1, r9
 8007f68:	9805      	ldr	r0, [sp, #20]
 8007f6a:	4632      	mov	r2, r6
 8007f6c:	f7ff f9bc 	bl	80072e8 <__lshift>
 8007f70:	4681      	mov	r9, r0
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d0d8      	beq.n	8007f28 <_strtod_l+0x750>
 8007f76:	2f00      	cmp	r7, #0
 8007f78:	dd08      	ble.n	8007f8c <_strtod_l+0x7b4>
 8007f7a:	4641      	mov	r1, r8
 8007f7c:	9805      	ldr	r0, [sp, #20]
 8007f7e:	463a      	mov	r2, r7
 8007f80:	f7ff f9b2 	bl	80072e8 <__lshift>
 8007f84:	4680      	mov	r8, r0
 8007f86:	2800      	cmp	r0, #0
 8007f88:	f43f ae49 	beq.w	8007c1e <_strtod_l+0x446>
 8007f8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f8e:	9805      	ldr	r0, [sp, #20]
 8007f90:	464a      	mov	r2, r9
 8007f92:	f7ff fa31 	bl	80073f8 <__mdiff>
 8007f96:	4604      	mov	r4, r0
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	f43f ae40 	beq.w	8007c1e <_strtod_l+0x446>
 8007f9e:	68c3      	ldr	r3, [r0, #12]
 8007fa0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60c3      	str	r3, [r0, #12]
 8007fa6:	4641      	mov	r1, r8
 8007fa8:	f7ff fa0a 	bl	80073c0 <__mcmp>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	da45      	bge.n	800803c <_strtod_l+0x864>
 8007fb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fb2:	ea53 030a 	orrs.w	r3, r3, sl
 8007fb6:	d16b      	bne.n	8008090 <_strtod_l+0x8b8>
 8007fb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d167      	bne.n	8008090 <_strtod_l+0x8b8>
 8007fc0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007fc4:	0d1b      	lsrs	r3, r3, #20
 8007fc6:	051b      	lsls	r3, r3, #20
 8007fc8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007fcc:	d960      	bls.n	8008090 <_strtod_l+0x8b8>
 8007fce:	6963      	ldr	r3, [r4, #20]
 8007fd0:	b913      	cbnz	r3, 8007fd8 <_strtod_l+0x800>
 8007fd2:	6923      	ldr	r3, [r4, #16]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	dd5b      	ble.n	8008090 <_strtod_l+0x8b8>
 8007fd8:	4621      	mov	r1, r4
 8007fda:	2201      	movs	r2, #1
 8007fdc:	9805      	ldr	r0, [sp, #20]
 8007fde:	f7ff f983 	bl	80072e8 <__lshift>
 8007fe2:	4641      	mov	r1, r8
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	f7ff f9eb 	bl	80073c0 <__mcmp>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	dd50      	ble.n	8008090 <_strtod_l+0x8b8>
 8007fee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ff2:	9a08      	ldr	r2, [sp, #32]
 8007ff4:	0d1b      	lsrs	r3, r3, #20
 8007ff6:	051b      	lsls	r3, r3, #20
 8007ff8:	2a00      	cmp	r2, #0
 8007ffa:	d06a      	beq.n	80080d2 <_strtod_l+0x8fa>
 8007ffc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008000:	d867      	bhi.n	80080d2 <_strtod_l+0x8fa>
 8008002:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008006:	f67f ae9d 	bls.w	8007d44 <_strtod_l+0x56c>
 800800a:	4b0a      	ldr	r3, [pc, #40]	@ (8008034 <_strtod_l+0x85c>)
 800800c:	4650      	mov	r0, sl
 800800e:	4659      	mov	r1, fp
 8008010:	2200      	movs	r2, #0
 8008012:	f7f8 faf1 	bl	80005f8 <__aeabi_dmul>
 8008016:	4b08      	ldr	r3, [pc, #32]	@ (8008038 <_strtod_l+0x860>)
 8008018:	400b      	ands	r3, r1
 800801a:	4682      	mov	sl, r0
 800801c:	468b      	mov	fp, r1
 800801e:	2b00      	cmp	r3, #0
 8008020:	f47f ae08 	bne.w	8007c34 <_strtod_l+0x45c>
 8008024:	9a05      	ldr	r2, [sp, #20]
 8008026:	2322      	movs	r3, #34	@ 0x22
 8008028:	6013      	str	r3, [r2, #0]
 800802a:	e603      	b.n	8007c34 <_strtod_l+0x45c>
 800802c:	08009970 	.word	0x08009970
 8008030:	fffffc02 	.word	0xfffffc02
 8008034:	39500000 	.word	0x39500000
 8008038:	7ff00000 	.word	0x7ff00000
 800803c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008040:	d165      	bne.n	800810e <_strtod_l+0x936>
 8008042:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008044:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008048:	b35a      	cbz	r2, 80080a2 <_strtod_l+0x8ca>
 800804a:	4a9f      	ldr	r2, [pc, #636]	@ (80082c8 <_strtod_l+0xaf0>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d12b      	bne.n	80080a8 <_strtod_l+0x8d0>
 8008050:	9b08      	ldr	r3, [sp, #32]
 8008052:	4651      	mov	r1, sl
 8008054:	b303      	cbz	r3, 8008098 <_strtod_l+0x8c0>
 8008056:	4b9d      	ldr	r3, [pc, #628]	@ (80082cc <_strtod_l+0xaf4>)
 8008058:	465a      	mov	r2, fp
 800805a:	4013      	ands	r3, r2
 800805c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008060:	f04f 32ff 	mov.w	r2, #4294967295
 8008064:	d81b      	bhi.n	800809e <_strtod_l+0x8c6>
 8008066:	0d1b      	lsrs	r3, r3, #20
 8008068:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800806c:	fa02 f303 	lsl.w	r3, r2, r3
 8008070:	4299      	cmp	r1, r3
 8008072:	d119      	bne.n	80080a8 <_strtod_l+0x8d0>
 8008074:	4b96      	ldr	r3, [pc, #600]	@ (80082d0 <_strtod_l+0xaf8>)
 8008076:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008078:	429a      	cmp	r2, r3
 800807a:	d102      	bne.n	8008082 <_strtod_l+0x8aa>
 800807c:	3101      	adds	r1, #1
 800807e:	f43f adce 	beq.w	8007c1e <_strtod_l+0x446>
 8008082:	4b92      	ldr	r3, [pc, #584]	@ (80082cc <_strtod_l+0xaf4>)
 8008084:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008086:	401a      	ands	r2, r3
 8008088:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800808c:	f04f 0a00 	mov.w	sl, #0
 8008090:	9b08      	ldr	r3, [sp, #32]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1b9      	bne.n	800800a <_strtod_l+0x832>
 8008096:	e5cd      	b.n	8007c34 <_strtod_l+0x45c>
 8008098:	f04f 33ff 	mov.w	r3, #4294967295
 800809c:	e7e8      	b.n	8008070 <_strtod_l+0x898>
 800809e:	4613      	mov	r3, r2
 80080a0:	e7e6      	b.n	8008070 <_strtod_l+0x898>
 80080a2:	ea53 030a 	orrs.w	r3, r3, sl
 80080a6:	d0a2      	beq.n	8007fee <_strtod_l+0x816>
 80080a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80080aa:	b1db      	cbz	r3, 80080e4 <_strtod_l+0x90c>
 80080ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080ae:	4213      	tst	r3, r2
 80080b0:	d0ee      	beq.n	8008090 <_strtod_l+0x8b8>
 80080b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080b4:	9a08      	ldr	r2, [sp, #32]
 80080b6:	4650      	mov	r0, sl
 80080b8:	4659      	mov	r1, fp
 80080ba:	b1bb      	cbz	r3, 80080ec <_strtod_l+0x914>
 80080bc:	f7ff fb6e 	bl	800779c <sulp>
 80080c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080c4:	ec53 2b10 	vmov	r2, r3, d0
 80080c8:	f7f8 f8e0 	bl	800028c <__adddf3>
 80080cc:	4682      	mov	sl, r0
 80080ce:	468b      	mov	fp, r1
 80080d0:	e7de      	b.n	8008090 <_strtod_l+0x8b8>
 80080d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80080d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80080da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80080de:	f04f 3aff 	mov.w	sl, #4294967295
 80080e2:	e7d5      	b.n	8008090 <_strtod_l+0x8b8>
 80080e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80080e6:	ea13 0f0a 	tst.w	r3, sl
 80080ea:	e7e1      	b.n	80080b0 <_strtod_l+0x8d8>
 80080ec:	f7ff fb56 	bl	800779c <sulp>
 80080f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080f4:	ec53 2b10 	vmov	r2, r3, d0
 80080f8:	f7f8 f8c6 	bl	8000288 <__aeabi_dsub>
 80080fc:	2200      	movs	r2, #0
 80080fe:	2300      	movs	r3, #0
 8008100:	4682      	mov	sl, r0
 8008102:	468b      	mov	fp, r1
 8008104:	f7f8 fce0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008108:	2800      	cmp	r0, #0
 800810a:	d0c1      	beq.n	8008090 <_strtod_l+0x8b8>
 800810c:	e61a      	b.n	8007d44 <_strtod_l+0x56c>
 800810e:	4641      	mov	r1, r8
 8008110:	4620      	mov	r0, r4
 8008112:	f7ff facd 	bl	80076b0 <__ratio>
 8008116:	ec57 6b10 	vmov	r6, r7, d0
 800811a:	2200      	movs	r2, #0
 800811c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008120:	4630      	mov	r0, r6
 8008122:	4639      	mov	r1, r7
 8008124:	f7f8 fce4 	bl	8000af0 <__aeabi_dcmple>
 8008128:	2800      	cmp	r0, #0
 800812a:	d06f      	beq.n	800820c <_strtod_l+0xa34>
 800812c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800812e:	2b00      	cmp	r3, #0
 8008130:	d17a      	bne.n	8008228 <_strtod_l+0xa50>
 8008132:	f1ba 0f00 	cmp.w	sl, #0
 8008136:	d158      	bne.n	80081ea <_strtod_l+0xa12>
 8008138:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800813a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800813e:	2b00      	cmp	r3, #0
 8008140:	d15a      	bne.n	80081f8 <_strtod_l+0xa20>
 8008142:	4b64      	ldr	r3, [pc, #400]	@ (80082d4 <_strtod_l+0xafc>)
 8008144:	2200      	movs	r2, #0
 8008146:	4630      	mov	r0, r6
 8008148:	4639      	mov	r1, r7
 800814a:	f7f8 fcc7 	bl	8000adc <__aeabi_dcmplt>
 800814e:	2800      	cmp	r0, #0
 8008150:	d159      	bne.n	8008206 <_strtod_l+0xa2e>
 8008152:	4630      	mov	r0, r6
 8008154:	4639      	mov	r1, r7
 8008156:	4b60      	ldr	r3, [pc, #384]	@ (80082d8 <_strtod_l+0xb00>)
 8008158:	2200      	movs	r2, #0
 800815a:	f7f8 fa4d 	bl	80005f8 <__aeabi_dmul>
 800815e:	4606      	mov	r6, r0
 8008160:	460f      	mov	r7, r1
 8008162:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008166:	9606      	str	r6, [sp, #24]
 8008168:	9307      	str	r3, [sp, #28]
 800816a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800816e:	4d57      	ldr	r5, [pc, #348]	@ (80082cc <_strtod_l+0xaf4>)
 8008170:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008174:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008176:	401d      	ands	r5, r3
 8008178:	4b58      	ldr	r3, [pc, #352]	@ (80082dc <_strtod_l+0xb04>)
 800817a:	429d      	cmp	r5, r3
 800817c:	f040 80b2 	bne.w	80082e4 <_strtod_l+0xb0c>
 8008180:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008182:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008186:	ec4b ab10 	vmov	d0, sl, fp
 800818a:	f7ff f9c9 	bl	8007520 <__ulp>
 800818e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008192:	ec51 0b10 	vmov	r0, r1, d0
 8008196:	f7f8 fa2f 	bl	80005f8 <__aeabi_dmul>
 800819a:	4652      	mov	r2, sl
 800819c:	465b      	mov	r3, fp
 800819e:	f7f8 f875 	bl	800028c <__adddf3>
 80081a2:	460b      	mov	r3, r1
 80081a4:	4949      	ldr	r1, [pc, #292]	@ (80082cc <_strtod_l+0xaf4>)
 80081a6:	4a4e      	ldr	r2, [pc, #312]	@ (80082e0 <_strtod_l+0xb08>)
 80081a8:	4019      	ands	r1, r3
 80081aa:	4291      	cmp	r1, r2
 80081ac:	4682      	mov	sl, r0
 80081ae:	d942      	bls.n	8008236 <_strtod_l+0xa5e>
 80081b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80081b2:	4b47      	ldr	r3, [pc, #284]	@ (80082d0 <_strtod_l+0xaf8>)
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d103      	bne.n	80081c0 <_strtod_l+0x9e8>
 80081b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081ba:	3301      	adds	r3, #1
 80081bc:	f43f ad2f 	beq.w	8007c1e <_strtod_l+0x446>
 80081c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80082d0 <_strtod_l+0xaf8>
 80081c4:	f04f 3aff 	mov.w	sl, #4294967295
 80081c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081ca:	9805      	ldr	r0, [sp, #20]
 80081cc:	f7fe fe7c 	bl	8006ec8 <_Bfree>
 80081d0:	9805      	ldr	r0, [sp, #20]
 80081d2:	4649      	mov	r1, r9
 80081d4:	f7fe fe78 	bl	8006ec8 <_Bfree>
 80081d8:	9805      	ldr	r0, [sp, #20]
 80081da:	4641      	mov	r1, r8
 80081dc:	f7fe fe74 	bl	8006ec8 <_Bfree>
 80081e0:	9805      	ldr	r0, [sp, #20]
 80081e2:	4621      	mov	r1, r4
 80081e4:	f7fe fe70 	bl	8006ec8 <_Bfree>
 80081e8:	e619      	b.n	8007e1e <_strtod_l+0x646>
 80081ea:	f1ba 0f01 	cmp.w	sl, #1
 80081ee:	d103      	bne.n	80081f8 <_strtod_l+0xa20>
 80081f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f43f ada6 	beq.w	8007d44 <_strtod_l+0x56c>
 80081f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80082a8 <_strtod_l+0xad0>
 80081fc:	4f35      	ldr	r7, [pc, #212]	@ (80082d4 <_strtod_l+0xafc>)
 80081fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008202:	2600      	movs	r6, #0
 8008204:	e7b1      	b.n	800816a <_strtod_l+0x992>
 8008206:	4f34      	ldr	r7, [pc, #208]	@ (80082d8 <_strtod_l+0xb00>)
 8008208:	2600      	movs	r6, #0
 800820a:	e7aa      	b.n	8008162 <_strtod_l+0x98a>
 800820c:	4b32      	ldr	r3, [pc, #200]	@ (80082d8 <_strtod_l+0xb00>)
 800820e:	4630      	mov	r0, r6
 8008210:	4639      	mov	r1, r7
 8008212:	2200      	movs	r2, #0
 8008214:	f7f8 f9f0 	bl	80005f8 <__aeabi_dmul>
 8008218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800821a:	4606      	mov	r6, r0
 800821c:	460f      	mov	r7, r1
 800821e:	2b00      	cmp	r3, #0
 8008220:	d09f      	beq.n	8008162 <_strtod_l+0x98a>
 8008222:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008226:	e7a0      	b.n	800816a <_strtod_l+0x992>
 8008228:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80082b0 <_strtod_l+0xad8>
 800822c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008230:	ec57 6b17 	vmov	r6, r7, d7
 8008234:	e799      	b.n	800816a <_strtod_l+0x992>
 8008236:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800823a:	9b08      	ldr	r3, [sp, #32]
 800823c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1c1      	bne.n	80081c8 <_strtod_l+0x9f0>
 8008244:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008248:	0d1b      	lsrs	r3, r3, #20
 800824a:	051b      	lsls	r3, r3, #20
 800824c:	429d      	cmp	r5, r3
 800824e:	d1bb      	bne.n	80081c8 <_strtod_l+0x9f0>
 8008250:	4630      	mov	r0, r6
 8008252:	4639      	mov	r1, r7
 8008254:	f7f8 fd30 	bl	8000cb8 <__aeabi_d2lz>
 8008258:	f7f8 f9a0 	bl	800059c <__aeabi_l2d>
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	4630      	mov	r0, r6
 8008262:	4639      	mov	r1, r7
 8008264:	f7f8 f810 	bl	8000288 <__aeabi_dsub>
 8008268:	460b      	mov	r3, r1
 800826a:	4602      	mov	r2, r0
 800826c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008270:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008276:	ea46 060a 	orr.w	r6, r6, sl
 800827a:	431e      	orrs	r6, r3
 800827c:	d06f      	beq.n	800835e <_strtod_l+0xb86>
 800827e:	a30e      	add	r3, pc, #56	@ (adr r3, 80082b8 <_strtod_l+0xae0>)
 8008280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008284:	f7f8 fc2a 	bl	8000adc <__aeabi_dcmplt>
 8008288:	2800      	cmp	r0, #0
 800828a:	f47f acd3 	bne.w	8007c34 <_strtod_l+0x45c>
 800828e:	a30c      	add	r3, pc, #48	@ (adr r3, 80082c0 <_strtod_l+0xae8>)
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008298:	f7f8 fc3e 	bl	8000b18 <__aeabi_dcmpgt>
 800829c:	2800      	cmp	r0, #0
 800829e:	d093      	beq.n	80081c8 <_strtod_l+0x9f0>
 80082a0:	e4c8      	b.n	8007c34 <_strtod_l+0x45c>
 80082a2:	bf00      	nop
 80082a4:	f3af 8000 	nop.w
 80082a8:	00000000 	.word	0x00000000
 80082ac:	bff00000 	.word	0xbff00000
 80082b0:	00000000 	.word	0x00000000
 80082b4:	3ff00000 	.word	0x3ff00000
 80082b8:	94a03595 	.word	0x94a03595
 80082bc:	3fdfffff 	.word	0x3fdfffff
 80082c0:	35afe535 	.word	0x35afe535
 80082c4:	3fe00000 	.word	0x3fe00000
 80082c8:	000fffff 	.word	0x000fffff
 80082cc:	7ff00000 	.word	0x7ff00000
 80082d0:	7fefffff 	.word	0x7fefffff
 80082d4:	3ff00000 	.word	0x3ff00000
 80082d8:	3fe00000 	.word	0x3fe00000
 80082dc:	7fe00000 	.word	0x7fe00000
 80082e0:	7c9fffff 	.word	0x7c9fffff
 80082e4:	9b08      	ldr	r3, [sp, #32]
 80082e6:	b323      	cbz	r3, 8008332 <_strtod_l+0xb5a>
 80082e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80082ec:	d821      	bhi.n	8008332 <_strtod_l+0xb5a>
 80082ee:	a328      	add	r3, pc, #160	@ (adr r3, 8008390 <_strtod_l+0xbb8>)
 80082f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f4:	4630      	mov	r0, r6
 80082f6:	4639      	mov	r1, r7
 80082f8:	f7f8 fbfa 	bl	8000af0 <__aeabi_dcmple>
 80082fc:	b1a0      	cbz	r0, 8008328 <_strtod_l+0xb50>
 80082fe:	4639      	mov	r1, r7
 8008300:	4630      	mov	r0, r6
 8008302:	f7f8 fc51 	bl	8000ba8 <__aeabi_d2uiz>
 8008306:	2801      	cmp	r0, #1
 8008308:	bf38      	it	cc
 800830a:	2001      	movcc	r0, #1
 800830c:	f7f8 f8fa 	bl	8000504 <__aeabi_ui2d>
 8008310:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008312:	4606      	mov	r6, r0
 8008314:	460f      	mov	r7, r1
 8008316:	b9fb      	cbnz	r3, 8008358 <_strtod_l+0xb80>
 8008318:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800831c:	9014      	str	r0, [sp, #80]	@ 0x50
 800831e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008320:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008324:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008328:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800832a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800832e:	1b5b      	subs	r3, r3, r5
 8008330:	9311      	str	r3, [sp, #68]	@ 0x44
 8008332:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008336:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800833a:	f7ff f8f1 	bl	8007520 <__ulp>
 800833e:	4650      	mov	r0, sl
 8008340:	ec53 2b10 	vmov	r2, r3, d0
 8008344:	4659      	mov	r1, fp
 8008346:	f7f8 f957 	bl	80005f8 <__aeabi_dmul>
 800834a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800834e:	f7f7 ff9d 	bl	800028c <__adddf3>
 8008352:	4682      	mov	sl, r0
 8008354:	468b      	mov	fp, r1
 8008356:	e770      	b.n	800823a <_strtod_l+0xa62>
 8008358:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800835c:	e7e0      	b.n	8008320 <_strtod_l+0xb48>
 800835e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008398 <_strtod_l+0xbc0>)
 8008360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008364:	f7f8 fbba 	bl	8000adc <__aeabi_dcmplt>
 8008368:	e798      	b.n	800829c <_strtod_l+0xac4>
 800836a:	2300      	movs	r3, #0
 800836c:	930e      	str	r3, [sp, #56]	@ 0x38
 800836e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008370:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	f7ff ba6d 	b.w	8007852 <_strtod_l+0x7a>
 8008378:	2a65      	cmp	r2, #101	@ 0x65
 800837a:	f43f ab68 	beq.w	8007a4e <_strtod_l+0x276>
 800837e:	2a45      	cmp	r2, #69	@ 0x45
 8008380:	f43f ab65 	beq.w	8007a4e <_strtod_l+0x276>
 8008384:	2301      	movs	r3, #1
 8008386:	f7ff bba0 	b.w	8007aca <_strtod_l+0x2f2>
 800838a:	bf00      	nop
 800838c:	f3af 8000 	nop.w
 8008390:	ffc00000 	.word	0xffc00000
 8008394:	41dfffff 	.word	0x41dfffff
 8008398:	94a03595 	.word	0x94a03595
 800839c:	3fcfffff 	.word	0x3fcfffff

080083a0 <_strtod_r>:
 80083a0:	4b01      	ldr	r3, [pc, #4]	@ (80083a8 <_strtod_r+0x8>)
 80083a2:	f7ff ba19 	b.w	80077d8 <_strtod_l>
 80083a6:	bf00      	nop
 80083a8:	2000007c 	.word	0x2000007c

080083ac <_strtol_l.isra.0>:
 80083ac:	2b24      	cmp	r3, #36	@ 0x24
 80083ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083b2:	4686      	mov	lr, r0
 80083b4:	4690      	mov	r8, r2
 80083b6:	d801      	bhi.n	80083bc <_strtol_l.isra.0+0x10>
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d106      	bne.n	80083ca <_strtol_l.isra.0+0x1e>
 80083bc:	f7fd fdb8 	bl	8005f30 <__errno>
 80083c0:	2316      	movs	r3, #22
 80083c2:	6003      	str	r3, [r0, #0]
 80083c4:	2000      	movs	r0, #0
 80083c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ca:	4834      	ldr	r0, [pc, #208]	@ (800849c <_strtol_l.isra.0+0xf0>)
 80083cc:	460d      	mov	r5, r1
 80083ce:	462a      	mov	r2, r5
 80083d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083d4:	5d06      	ldrb	r6, [r0, r4]
 80083d6:	f016 0608 	ands.w	r6, r6, #8
 80083da:	d1f8      	bne.n	80083ce <_strtol_l.isra.0+0x22>
 80083dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80083de:	d110      	bne.n	8008402 <_strtol_l.isra.0+0x56>
 80083e0:	782c      	ldrb	r4, [r5, #0]
 80083e2:	2601      	movs	r6, #1
 80083e4:	1c95      	adds	r5, r2, #2
 80083e6:	f033 0210 	bics.w	r2, r3, #16
 80083ea:	d115      	bne.n	8008418 <_strtol_l.isra.0+0x6c>
 80083ec:	2c30      	cmp	r4, #48	@ 0x30
 80083ee:	d10d      	bne.n	800840c <_strtol_l.isra.0+0x60>
 80083f0:	782a      	ldrb	r2, [r5, #0]
 80083f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80083f6:	2a58      	cmp	r2, #88	@ 0x58
 80083f8:	d108      	bne.n	800840c <_strtol_l.isra.0+0x60>
 80083fa:	786c      	ldrb	r4, [r5, #1]
 80083fc:	3502      	adds	r5, #2
 80083fe:	2310      	movs	r3, #16
 8008400:	e00a      	b.n	8008418 <_strtol_l.isra.0+0x6c>
 8008402:	2c2b      	cmp	r4, #43	@ 0x2b
 8008404:	bf04      	itt	eq
 8008406:	782c      	ldrbeq	r4, [r5, #0]
 8008408:	1c95      	addeq	r5, r2, #2
 800840a:	e7ec      	b.n	80083e6 <_strtol_l.isra.0+0x3a>
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1f6      	bne.n	80083fe <_strtol_l.isra.0+0x52>
 8008410:	2c30      	cmp	r4, #48	@ 0x30
 8008412:	bf14      	ite	ne
 8008414:	230a      	movne	r3, #10
 8008416:	2308      	moveq	r3, #8
 8008418:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800841c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008420:	2200      	movs	r2, #0
 8008422:	fbbc f9f3 	udiv	r9, ip, r3
 8008426:	4610      	mov	r0, r2
 8008428:	fb03 ca19 	mls	sl, r3, r9, ip
 800842c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008430:	2f09      	cmp	r7, #9
 8008432:	d80f      	bhi.n	8008454 <_strtol_l.isra.0+0xa8>
 8008434:	463c      	mov	r4, r7
 8008436:	42a3      	cmp	r3, r4
 8008438:	dd1b      	ble.n	8008472 <_strtol_l.isra.0+0xc6>
 800843a:	1c57      	adds	r7, r2, #1
 800843c:	d007      	beq.n	800844e <_strtol_l.isra.0+0xa2>
 800843e:	4581      	cmp	r9, r0
 8008440:	d314      	bcc.n	800846c <_strtol_l.isra.0+0xc0>
 8008442:	d101      	bne.n	8008448 <_strtol_l.isra.0+0x9c>
 8008444:	45a2      	cmp	sl, r4
 8008446:	db11      	blt.n	800846c <_strtol_l.isra.0+0xc0>
 8008448:	fb00 4003 	mla	r0, r0, r3, r4
 800844c:	2201      	movs	r2, #1
 800844e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008452:	e7eb      	b.n	800842c <_strtol_l.isra.0+0x80>
 8008454:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008458:	2f19      	cmp	r7, #25
 800845a:	d801      	bhi.n	8008460 <_strtol_l.isra.0+0xb4>
 800845c:	3c37      	subs	r4, #55	@ 0x37
 800845e:	e7ea      	b.n	8008436 <_strtol_l.isra.0+0x8a>
 8008460:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008464:	2f19      	cmp	r7, #25
 8008466:	d804      	bhi.n	8008472 <_strtol_l.isra.0+0xc6>
 8008468:	3c57      	subs	r4, #87	@ 0x57
 800846a:	e7e4      	b.n	8008436 <_strtol_l.isra.0+0x8a>
 800846c:	f04f 32ff 	mov.w	r2, #4294967295
 8008470:	e7ed      	b.n	800844e <_strtol_l.isra.0+0xa2>
 8008472:	1c53      	adds	r3, r2, #1
 8008474:	d108      	bne.n	8008488 <_strtol_l.isra.0+0xdc>
 8008476:	2322      	movs	r3, #34	@ 0x22
 8008478:	f8ce 3000 	str.w	r3, [lr]
 800847c:	4660      	mov	r0, ip
 800847e:	f1b8 0f00 	cmp.w	r8, #0
 8008482:	d0a0      	beq.n	80083c6 <_strtol_l.isra.0+0x1a>
 8008484:	1e69      	subs	r1, r5, #1
 8008486:	e006      	b.n	8008496 <_strtol_l.isra.0+0xea>
 8008488:	b106      	cbz	r6, 800848c <_strtol_l.isra.0+0xe0>
 800848a:	4240      	negs	r0, r0
 800848c:	f1b8 0f00 	cmp.w	r8, #0
 8008490:	d099      	beq.n	80083c6 <_strtol_l.isra.0+0x1a>
 8008492:	2a00      	cmp	r2, #0
 8008494:	d1f6      	bne.n	8008484 <_strtol_l.isra.0+0xd8>
 8008496:	f8c8 1000 	str.w	r1, [r8]
 800849a:	e794      	b.n	80083c6 <_strtol_l.isra.0+0x1a>
 800849c:	08009999 	.word	0x08009999

080084a0 <_strtol_r>:
 80084a0:	f7ff bf84 	b.w	80083ac <_strtol_l.isra.0>

080084a4 <__ssputs_r>:
 80084a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a8:	688e      	ldr	r6, [r1, #8]
 80084aa:	461f      	mov	r7, r3
 80084ac:	42be      	cmp	r6, r7
 80084ae:	680b      	ldr	r3, [r1, #0]
 80084b0:	4682      	mov	sl, r0
 80084b2:	460c      	mov	r4, r1
 80084b4:	4690      	mov	r8, r2
 80084b6:	d82d      	bhi.n	8008514 <__ssputs_r+0x70>
 80084b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084c0:	d026      	beq.n	8008510 <__ssputs_r+0x6c>
 80084c2:	6965      	ldr	r5, [r4, #20]
 80084c4:	6909      	ldr	r1, [r1, #16]
 80084c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084ca:	eba3 0901 	sub.w	r9, r3, r1
 80084ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084d2:	1c7b      	adds	r3, r7, #1
 80084d4:	444b      	add	r3, r9
 80084d6:	106d      	asrs	r5, r5, #1
 80084d8:	429d      	cmp	r5, r3
 80084da:	bf38      	it	cc
 80084dc:	461d      	movcc	r5, r3
 80084de:	0553      	lsls	r3, r2, #21
 80084e0:	d527      	bpl.n	8008532 <__ssputs_r+0x8e>
 80084e2:	4629      	mov	r1, r5
 80084e4:	f7fe fc24 	bl	8006d30 <_malloc_r>
 80084e8:	4606      	mov	r6, r0
 80084ea:	b360      	cbz	r0, 8008546 <__ssputs_r+0xa2>
 80084ec:	6921      	ldr	r1, [r4, #16]
 80084ee:	464a      	mov	r2, r9
 80084f0:	f000 fa9c 	bl	8008a2c <memcpy>
 80084f4:	89a3      	ldrh	r3, [r4, #12]
 80084f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80084fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084fe:	81a3      	strh	r3, [r4, #12]
 8008500:	6126      	str	r6, [r4, #16]
 8008502:	6165      	str	r5, [r4, #20]
 8008504:	444e      	add	r6, r9
 8008506:	eba5 0509 	sub.w	r5, r5, r9
 800850a:	6026      	str	r6, [r4, #0]
 800850c:	60a5      	str	r5, [r4, #8]
 800850e:	463e      	mov	r6, r7
 8008510:	42be      	cmp	r6, r7
 8008512:	d900      	bls.n	8008516 <__ssputs_r+0x72>
 8008514:	463e      	mov	r6, r7
 8008516:	6820      	ldr	r0, [r4, #0]
 8008518:	4632      	mov	r2, r6
 800851a:	4641      	mov	r1, r8
 800851c:	f000 fa28 	bl	8008970 <memmove>
 8008520:	68a3      	ldr	r3, [r4, #8]
 8008522:	1b9b      	subs	r3, r3, r6
 8008524:	60a3      	str	r3, [r4, #8]
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	4433      	add	r3, r6
 800852a:	6023      	str	r3, [r4, #0]
 800852c:	2000      	movs	r0, #0
 800852e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008532:	462a      	mov	r2, r5
 8008534:	f000 fe0d 	bl	8009152 <_realloc_r>
 8008538:	4606      	mov	r6, r0
 800853a:	2800      	cmp	r0, #0
 800853c:	d1e0      	bne.n	8008500 <__ssputs_r+0x5c>
 800853e:	6921      	ldr	r1, [r4, #16]
 8008540:	4650      	mov	r0, sl
 8008542:	f7fe fb81 	bl	8006c48 <_free_r>
 8008546:	230c      	movs	r3, #12
 8008548:	f8ca 3000 	str.w	r3, [sl]
 800854c:	89a3      	ldrh	r3, [r4, #12]
 800854e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008552:	81a3      	strh	r3, [r4, #12]
 8008554:	f04f 30ff 	mov.w	r0, #4294967295
 8008558:	e7e9      	b.n	800852e <__ssputs_r+0x8a>
	...

0800855c <_svfiprintf_r>:
 800855c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008560:	4698      	mov	r8, r3
 8008562:	898b      	ldrh	r3, [r1, #12]
 8008564:	061b      	lsls	r3, r3, #24
 8008566:	b09d      	sub	sp, #116	@ 0x74
 8008568:	4607      	mov	r7, r0
 800856a:	460d      	mov	r5, r1
 800856c:	4614      	mov	r4, r2
 800856e:	d510      	bpl.n	8008592 <_svfiprintf_r+0x36>
 8008570:	690b      	ldr	r3, [r1, #16]
 8008572:	b973      	cbnz	r3, 8008592 <_svfiprintf_r+0x36>
 8008574:	2140      	movs	r1, #64	@ 0x40
 8008576:	f7fe fbdb 	bl	8006d30 <_malloc_r>
 800857a:	6028      	str	r0, [r5, #0]
 800857c:	6128      	str	r0, [r5, #16]
 800857e:	b930      	cbnz	r0, 800858e <_svfiprintf_r+0x32>
 8008580:	230c      	movs	r3, #12
 8008582:	603b      	str	r3, [r7, #0]
 8008584:	f04f 30ff 	mov.w	r0, #4294967295
 8008588:	b01d      	add	sp, #116	@ 0x74
 800858a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858e:	2340      	movs	r3, #64	@ 0x40
 8008590:	616b      	str	r3, [r5, #20]
 8008592:	2300      	movs	r3, #0
 8008594:	9309      	str	r3, [sp, #36]	@ 0x24
 8008596:	2320      	movs	r3, #32
 8008598:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800859c:	f8cd 800c 	str.w	r8, [sp, #12]
 80085a0:	2330      	movs	r3, #48	@ 0x30
 80085a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008740 <_svfiprintf_r+0x1e4>
 80085a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085aa:	f04f 0901 	mov.w	r9, #1
 80085ae:	4623      	mov	r3, r4
 80085b0:	469a      	mov	sl, r3
 80085b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085b6:	b10a      	cbz	r2, 80085bc <_svfiprintf_r+0x60>
 80085b8:	2a25      	cmp	r2, #37	@ 0x25
 80085ba:	d1f9      	bne.n	80085b0 <_svfiprintf_r+0x54>
 80085bc:	ebba 0b04 	subs.w	fp, sl, r4
 80085c0:	d00b      	beq.n	80085da <_svfiprintf_r+0x7e>
 80085c2:	465b      	mov	r3, fp
 80085c4:	4622      	mov	r2, r4
 80085c6:	4629      	mov	r1, r5
 80085c8:	4638      	mov	r0, r7
 80085ca:	f7ff ff6b 	bl	80084a4 <__ssputs_r>
 80085ce:	3001      	adds	r0, #1
 80085d0:	f000 80a7 	beq.w	8008722 <_svfiprintf_r+0x1c6>
 80085d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085d6:	445a      	add	r2, fp
 80085d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80085da:	f89a 3000 	ldrb.w	r3, [sl]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f000 809f 	beq.w	8008722 <_svfiprintf_r+0x1c6>
 80085e4:	2300      	movs	r3, #0
 80085e6:	f04f 32ff 	mov.w	r2, #4294967295
 80085ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085ee:	f10a 0a01 	add.w	sl, sl, #1
 80085f2:	9304      	str	r3, [sp, #16]
 80085f4:	9307      	str	r3, [sp, #28]
 80085f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80085fc:	4654      	mov	r4, sl
 80085fe:	2205      	movs	r2, #5
 8008600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008604:	484e      	ldr	r0, [pc, #312]	@ (8008740 <_svfiprintf_r+0x1e4>)
 8008606:	f7f7 fde3 	bl	80001d0 <memchr>
 800860a:	9a04      	ldr	r2, [sp, #16]
 800860c:	b9d8      	cbnz	r0, 8008646 <_svfiprintf_r+0xea>
 800860e:	06d0      	lsls	r0, r2, #27
 8008610:	bf44      	itt	mi
 8008612:	2320      	movmi	r3, #32
 8008614:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008618:	0711      	lsls	r1, r2, #28
 800861a:	bf44      	itt	mi
 800861c:	232b      	movmi	r3, #43	@ 0x2b
 800861e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008622:	f89a 3000 	ldrb.w	r3, [sl]
 8008626:	2b2a      	cmp	r3, #42	@ 0x2a
 8008628:	d015      	beq.n	8008656 <_svfiprintf_r+0xfa>
 800862a:	9a07      	ldr	r2, [sp, #28]
 800862c:	4654      	mov	r4, sl
 800862e:	2000      	movs	r0, #0
 8008630:	f04f 0c0a 	mov.w	ip, #10
 8008634:	4621      	mov	r1, r4
 8008636:	f811 3b01 	ldrb.w	r3, [r1], #1
 800863a:	3b30      	subs	r3, #48	@ 0x30
 800863c:	2b09      	cmp	r3, #9
 800863e:	d94b      	bls.n	80086d8 <_svfiprintf_r+0x17c>
 8008640:	b1b0      	cbz	r0, 8008670 <_svfiprintf_r+0x114>
 8008642:	9207      	str	r2, [sp, #28]
 8008644:	e014      	b.n	8008670 <_svfiprintf_r+0x114>
 8008646:	eba0 0308 	sub.w	r3, r0, r8
 800864a:	fa09 f303 	lsl.w	r3, r9, r3
 800864e:	4313      	orrs	r3, r2
 8008650:	9304      	str	r3, [sp, #16]
 8008652:	46a2      	mov	sl, r4
 8008654:	e7d2      	b.n	80085fc <_svfiprintf_r+0xa0>
 8008656:	9b03      	ldr	r3, [sp, #12]
 8008658:	1d19      	adds	r1, r3, #4
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	9103      	str	r1, [sp, #12]
 800865e:	2b00      	cmp	r3, #0
 8008660:	bfbb      	ittet	lt
 8008662:	425b      	neglt	r3, r3
 8008664:	f042 0202 	orrlt.w	r2, r2, #2
 8008668:	9307      	strge	r3, [sp, #28]
 800866a:	9307      	strlt	r3, [sp, #28]
 800866c:	bfb8      	it	lt
 800866e:	9204      	strlt	r2, [sp, #16]
 8008670:	7823      	ldrb	r3, [r4, #0]
 8008672:	2b2e      	cmp	r3, #46	@ 0x2e
 8008674:	d10a      	bne.n	800868c <_svfiprintf_r+0x130>
 8008676:	7863      	ldrb	r3, [r4, #1]
 8008678:	2b2a      	cmp	r3, #42	@ 0x2a
 800867a:	d132      	bne.n	80086e2 <_svfiprintf_r+0x186>
 800867c:	9b03      	ldr	r3, [sp, #12]
 800867e:	1d1a      	adds	r2, r3, #4
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	9203      	str	r2, [sp, #12]
 8008684:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008688:	3402      	adds	r4, #2
 800868a:	9305      	str	r3, [sp, #20]
 800868c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008750 <_svfiprintf_r+0x1f4>
 8008690:	7821      	ldrb	r1, [r4, #0]
 8008692:	2203      	movs	r2, #3
 8008694:	4650      	mov	r0, sl
 8008696:	f7f7 fd9b 	bl	80001d0 <memchr>
 800869a:	b138      	cbz	r0, 80086ac <_svfiprintf_r+0x150>
 800869c:	9b04      	ldr	r3, [sp, #16]
 800869e:	eba0 000a 	sub.w	r0, r0, sl
 80086a2:	2240      	movs	r2, #64	@ 0x40
 80086a4:	4082      	lsls	r2, r0
 80086a6:	4313      	orrs	r3, r2
 80086a8:	3401      	adds	r4, #1
 80086aa:	9304      	str	r3, [sp, #16]
 80086ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086b0:	4824      	ldr	r0, [pc, #144]	@ (8008744 <_svfiprintf_r+0x1e8>)
 80086b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086b6:	2206      	movs	r2, #6
 80086b8:	f7f7 fd8a 	bl	80001d0 <memchr>
 80086bc:	2800      	cmp	r0, #0
 80086be:	d036      	beq.n	800872e <_svfiprintf_r+0x1d2>
 80086c0:	4b21      	ldr	r3, [pc, #132]	@ (8008748 <_svfiprintf_r+0x1ec>)
 80086c2:	bb1b      	cbnz	r3, 800870c <_svfiprintf_r+0x1b0>
 80086c4:	9b03      	ldr	r3, [sp, #12]
 80086c6:	3307      	adds	r3, #7
 80086c8:	f023 0307 	bic.w	r3, r3, #7
 80086cc:	3308      	adds	r3, #8
 80086ce:	9303      	str	r3, [sp, #12]
 80086d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086d2:	4433      	add	r3, r6
 80086d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80086d6:	e76a      	b.n	80085ae <_svfiprintf_r+0x52>
 80086d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80086dc:	460c      	mov	r4, r1
 80086de:	2001      	movs	r0, #1
 80086e0:	e7a8      	b.n	8008634 <_svfiprintf_r+0xd8>
 80086e2:	2300      	movs	r3, #0
 80086e4:	3401      	adds	r4, #1
 80086e6:	9305      	str	r3, [sp, #20]
 80086e8:	4619      	mov	r1, r3
 80086ea:	f04f 0c0a 	mov.w	ip, #10
 80086ee:	4620      	mov	r0, r4
 80086f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086f4:	3a30      	subs	r2, #48	@ 0x30
 80086f6:	2a09      	cmp	r2, #9
 80086f8:	d903      	bls.n	8008702 <_svfiprintf_r+0x1a6>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d0c6      	beq.n	800868c <_svfiprintf_r+0x130>
 80086fe:	9105      	str	r1, [sp, #20]
 8008700:	e7c4      	b.n	800868c <_svfiprintf_r+0x130>
 8008702:	fb0c 2101 	mla	r1, ip, r1, r2
 8008706:	4604      	mov	r4, r0
 8008708:	2301      	movs	r3, #1
 800870a:	e7f0      	b.n	80086ee <_svfiprintf_r+0x192>
 800870c:	ab03      	add	r3, sp, #12
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	462a      	mov	r2, r5
 8008712:	4b0e      	ldr	r3, [pc, #56]	@ (800874c <_svfiprintf_r+0x1f0>)
 8008714:	a904      	add	r1, sp, #16
 8008716:	4638      	mov	r0, r7
 8008718:	f7fc fbda 	bl	8004ed0 <_printf_float>
 800871c:	1c42      	adds	r2, r0, #1
 800871e:	4606      	mov	r6, r0
 8008720:	d1d6      	bne.n	80086d0 <_svfiprintf_r+0x174>
 8008722:	89ab      	ldrh	r3, [r5, #12]
 8008724:	065b      	lsls	r3, r3, #25
 8008726:	f53f af2d 	bmi.w	8008584 <_svfiprintf_r+0x28>
 800872a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800872c:	e72c      	b.n	8008588 <_svfiprintf_r+0x2c>
 800872e:	ab03      	add	r3, sp, #12
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	462a      	mov	r2, r5
 8008734:	4b05      	ldr	r3, [pc, #20]	@ (800874c <_svfiprintf_r+0x1f0>)
 8008736:	a904      	add	r1, sp, #16
 8008738:	4638      	mov	r0, r7
 800873a:	f7fc fe61 	bl	8005400 <_printf_i>
 800873e:	e7ed      	b.n	800871c <_svfiprintf_r+0x1c0>
 8008740:	08009795 	.word	0x08009795
 8008744:	0800979f 	.word	0x0800979f
 8008748:	08004ed1 	.word	0x08004ed1
 800874c:	080084a5 	.word	0x080084a5
 8008750:	0800979b 	.word	0x0800979b

08008754 <__sflush_r>:
 8008754:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800875c:	0716      	lsls	r6, r2, #28
 800875e:	4605      	mov	r5, r0
 8008760:	460c      	mov	r4, r1
 8008762:	d454      	bmi.n	800880e <__sflush_r+0xba>
 8008764:	684b      	ldr	r3, [r1, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	dc02      	bgt.n	8008770 <__sflush_r+0x1c>
 800876a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800876c:	2b00      	cmp	r3, #0
 800876e:	dd48      	ble.n	8008802 <__sflush_r+0xae>
 8008770:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008772:	2e00      	cmp	r6, #0
 8008774:	d045      	beq.n	8008802 <__sflush_r+0xae>
 8008776:	2300      	movs	r3, #0
 8008778:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800877c:	682f      	ldr	r7, [r5, #0]
 800877e:	6a21      	ldr	r1, [r4, #32]
 8008780:	602b      	str	r3, [r5, #0]
 8008782:	d030      	beq.n	80087e6 <__sflush_r+0x92>
 8008784:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008786:	89a3      	ldrh	r3, [r4, #12]
 8008788:	0759      	lsls	r1, r3, #29
 800878a:	d505      	bpl.n	8008798 <__sflush_r+0x44>
 800878c:	6863      	ldr	r3, [r4, #4]
 800878e:	1ad2      	subs	r2, r2, r3
 8008790:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008792:	b10b      	cbz	r3, 8008798 <__sflush_r+0x44>
 8008794:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008796:	1ad2      	subs	r2, r2, r3
 8008798:	2300      	movs	r3, #0
 800879a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800879c:	6a21      	ldr	r1, [r4, #32]
 800879e:	4628      	mov	r0, r5
 80087a0:	47b0      	blx	r6
 80087a2:	1c43      	adds	r3, r0, #1
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	d106      	bne.n	80087b6 <__sflush_r+0x62>
 80087a8:	6829      	ldr	r1, [r5, #0]
 80087aa:	291d      	cmp	r1, #29
 80087ac:	d82b      	bhi.n	8008806 <__sflush_r+0xb2>
 80087ae:	4a2a      	ldr	r2, [pc, #168]	@ (8008858 <__sflush_r+0x104>)
 80087b0:	40ca      	lsrs	r2, r1
 80087b2:	07d6      	lsls	r6, r2, #31
 80087b4:	d527      	bpl.n	8008806 <__sflush_r+0xb2>
 80087b6:	2200      	movs	r2, #0
 80087b8:	6062      	str	r2, [r4, #4]
 80087ba:	04d9      	lsls	r1, r3, #19
 80087bc:	6922      	ldr	r2, [r4, #16]
 80087be:	6022      	str	r2, [r4, #0]
 80087c0:	d504      	bpl.n	80087cc <__sflush_r+0x78>
 80087c2:	1c42      	adds	r2, r0, #1
 80087c4:	d101      	bne.n	80087ca <__sflush_r+0x76>
 80087c6:	682b      	ldr	r3, [r5, #0]
 80087c8:	b903      	cbnz	r3, 80087cc <__sflush_r+0x78>
 80087ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80087cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087ce:	602f      	str	r7, [r5, #0]
 80087d0:	b1b9      	cbz	r1, 8008802 <__sflush_r+0xae>
 80087d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087d6:	4299      	cmp	r1, r3
 80087d8:	d002      	beq.n	80087e0 <__sflush_r+0x8c>
 80087da:	4628      	mov	r0, r5
 80087dc:	f7fe fa34 	bl	8006c48 <_free_r>
 80087e0:	2300      	movs	r3, #0
 80087e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80087e4:	e00d      	b.n	8008802 <__sflush_r+0xae>
 80087e6:	2301      	movs	r3, #1
 80087e8:	4628      	mov	r0, r5
 80087ea:	47b0      	blx	r6
 80087ec:	4602      	mov	r2, r0
 80087ee:	1c50      	adds	r0, r2, #1
 80087f0:	d1c9      	bne.n	8008786 <__sflush_r+0x32>
 80087f2:	682b      	ldr	r3, [r5, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d0c6      	beq.n	8008786 <__sflush_r+0x32>
 80087f8:	2b1d      	cmp	r3, #29
 80087fa:	d001      	beq.n	8008800 <__sflush_r+0xac>
 80087fc:	2b16      	cmp	r3, #22
 80087fe:	d11e      	bne.n	800883e <__sflush_r+0xea>
 8008800:	602f      	str	r7, [r5, #0]
 8008802:	2000      	movs	r0, #0
 8008804:	e022      	b.n	800884c <__sflush_r+0xf8>
 8008806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800880a:	b21b      	sxth	r3, r3
 800880c:	e01b      	b.n	8008846 <__sflush_r+0xf2>
 800880e:	690f      	ldr	r7, [r1, #16]
 8008810:	2f00      	cmp	r7, #0
 8008812:	d0f6      	beq.n	8008802 <__sflush_r+0xae>
 8008814:	0793      	lsls	r3, r2, #30
 8008816:	680e      	ldr	r6, [r1, #0]
 8008818:	bf08      	it	eq
 800881a:	694b      	ldreq	r3, [r1, #20]
 800881c:	600f      	str	r7, [r1, #0]
 800881e:	bf18      	it	ne
 8008820:	2300      	movne	r3, #0
 8008822:	eba6 0807 	sub.w	r8, r6, r7
 8008826:	608b      	str	r3, [r1, #8]
 8008828:	f1b8 0f00 	cmp.w	r8, #0
 800882c:	dde9      	ble.n	8008802 <__sflush_r+0xae>
 800882e:	6a21      	ldr	r1, [r4, #32]
 8008830:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008832:	4643      	mov	r3, r8
 8008834:	463a      	mov	r2, r7
 8008836:	4628      	mov	r0, r5
 8008838:	47b0      	blx	r6
 800883a:	2800      	cmp	r0, #0
 800883c:	dc08      	bgt.n	8008850 <__sflush_r+0xfc>
 800883e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008846:	81a3      	strh	r3, [r4, #12]
 8008848:	f04f 30ff 	mov.w	r0, #4294967295
 800884c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008850:	4407      	add	r7, r0
 8008852:	eba8 0800 	sub.w	r8, r8, r0
 8008856:	e7e7      	b.n	8008828 <__sflush_r+0xd4>
 8008858:	20400001 	.word	0x20400001

0800885c <_fflush_r>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	690b      	ldr	r3, [r1, #16]
 8008860:	4605      	mov	r5, r0
 8008862:	460c      	mov	r4, r1
 8008864:	b913      	cbnz	r3, 800886c <_fflush_r+0x10>
 8008866:	2500      	movs	r5, #0
 8008868:	4628      	mov	r0, r5
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	b118      	cbz	r0, 8008876 <_fflush_r+0x1a>
 800886e:	6a03      	ldr	r3, [r0, #32]
 8008870:	b90b      	cbnz	r3, 8008876 <_fflush_r+0x1a>
 8008872:	f7fd f97d 	bl	8005b70 <__sinit>
 8008876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d0f3      	beq.n	8008866 <_fflush_r+0xa>
 800887e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008880:	07d0      	lsls	r0, r2, #31
 8008882:	d404      	bmi.n	800888e <_fflush_r+0x32>
 8008884:	0599      	lsls	r1, r3, #22
 8008886:	d402      	bmi.n	800888e <_fflush_r+0x32>
 8008888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800888a:	f7fd fb7c 	bl	8005f86 <__retarget_lock_acquire_recursive>
 800888e:	4628      	mov	r0, r5
 8008890:	4621      	mov	r1, r4
 8008892:	f7ff ff5f 	bl	8008754 <__sflush_r>
 8008896:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008898:	07da      	lsls	r2, r3, #31
 800889a:	4605      	mov	r5, r0
 800889c:	d4e4      	bmi.n	8008868 <_fflush_r+0xc>
 800889e:	89a3      	ldrh	r3, [r4, #12]
 80088a0:	059b      	lsls	r3, r3, #22
 80088a2:	d4e1      	bmi.n	8008868 <_fflush_r+0xc>
 80088a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088a6:	f7fd fb6f 	bl	8005f88 <__retarget_lock_release_recursive>
 80088aa:	e7dd      	b.n	8008868 <_fflush_r+0xc>

080088ac <__swhatbuf_r>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	460c      	mov	r4, r1
 80088b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b4:	2900      	cmp	r1, #0
 80088b6:	b096      	sub	sp, #88	@ 0x58
 80088b8:	4615      	mov	r5, r2
 80088ba:	461e      	mov	r6, r3
 80088bc:	da0d      	bge.n	80088da <__swhatbuf_r+0x2e>
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80088c4:	f04f 0100 	mov.w	r1, #0
 80088c8:	bf14      	ite	ne
 80088ca:	2340      	movne	r3, #64	@ 0x40
 80088cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80088d0:	2000      	movs	r0, #0
 80088d2:	6031      	str	r1, [r6, #0]
 80088d4:	602b      	str	r3, [r5, #0]
 80088d6:	b016      	add	sp, #88	@ 0x58
 80088d8:	bd70      	pop	{r4, r5, r6, pc}
 80088da:	466a      	mov	r2, sp
 80088dc:	f000 f874 	bl	80089c8 <_fstat_r>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	dbec      	blt.n	80088be <__swhatbuf_r+0x12>
 80088e4:	9901      	ldr	r1, [sp, #4]
 80088e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80088ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80088ee:	4259      	negs	r1, r3
 80088f0:	4159      	adcs	r1, r3
 80088f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088f6:	e7eb      	b.n	80088d0 <__swhatbuf_r+0x24>

080088f8 <__smakebuf_r>:
 80088f8:	898b      	ldrh	r3, [r1, #12]
 80088fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088fc:	079d      	lsls	r5, r3, #30
 80088fe:	4606      	mov	r6, r0
 8008900:	460c      	mov	r4, r1
 8008902:	d507      	bpl.n	8008914 <__smakebuf_r+0x1c>
 8008904:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	6123      	str	r3, [r4, #16]
 800890c:	2301      	movs	r3, #1
 800890e:	6163      	str	r3, [r4, #20]
 8008910:	b003      	add	sp, #12
 8008912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008914:	ab01      	add	r3, sp, #4
 8008916:	466a      	mov	r2, sp
 8008918:	f7ff ffc8 	bl	80088ac <__swhatbuf_r>
 800891c:	9f00      	ldr	r7, [sp, #0]
 800891e:	4605      	mov	r5, r0
 8008920:	4639      	mov	r1, r7
 8008922:	4630      	mov	r0, r6
 8008924:	f7fe fa04 	bl	8006d30 <_malloc_r>
 8008928:	b948      	cbnz	r0, 800893e <__smakebuf_r+0x46>
 800892a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800892e:	059a      	lsls	r2, r3, #22
 8008930:	d4ee      	bmi.n	8008910 <__smakebuf_r+0x18>
 8008932:	f023 0303 	bic.w	r3, r3, #3
 8008936:	f043 0302 	orr.w	r3, r3, #2
 800893a:	81a3      	strh	r3, [r4, #12]
 800893c:	e7e2      	b.n	8008904 <__smakebuf_r+0xc>
 800893e:	89a3      	ldrh	r3, [r4, #12]
 8008940:	6020      	str	r0, [r4, #0]
 8008942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008946:	81a3      	strh	r3, [r4, #12]
 8008948:	9b01      	ldr	r3, [sp, #4]
 800894a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800894e:	b15b      	cbz	r3, 8008968 <__smakebuf_r+0x70>
 8008950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008954:	4630      	mov	r0, r6
 8008956:	f000 f849 	bl	80089ec <_isatty_r>
 800895a:	b128      	cbz	r0, 8008968 <__smakebuf_r+0x70>
 800895c:	89a3      	ldrh	r3, [r4, #12]
 800895e:	f023 0303 	bic.w	r3, r3, #3
 8008962:	f043 0301 	orr.w	r3, r3, #1
 8008966:	81a3      	strh	r3, [r4, #12]
 8008968:	89a3      	ldrh	r3, [r4, #12]
 800896a:	431d      	orrs	r5, r3
 800896c:	81a5      	strh	r5, [r4, #12]
 800896e:	e7cf      	b.n	8008910 <__smakebuf_r+0x18>

08008970 <memmove>:
 8008970:	4288      	cmp	r0, r1
 8008972:	b510      	push	{r4, lr}
 8008974:	eb01 0402 	add.w	r4, r1, r2
 8008978:	d902      	bls.n	8008980 <memmove+0x10>
 800897a:	4284      	cmp	r4, r0
 800897c:	4623      	mov	r3, r4
 800897e:	d807      	bhi.n	8008990 <memmove+0x20>
 8008980:	1e43      	subs	r3, r0, #1
 8008982:	42a1      	cmp	r1, r4
 8008984:	d008      	beq.n	8008998 <memmove+0x28>
 8008986:	f811 2b01 	ldrb.w	r2, [r1], #1
 800898a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800898e:	e7f8      	b.n	8008982 <memmove+0x12>
 8008990:	4402      	add	r2, r0
 8008992:	4601      	mov	r1, r0
 8008994:	428a      	cmp	r2, r1
 8008996:	d100      	bne.n	800899a <memmove+0x2a>
 8008998:	bd10      	pop	{r4, pc}
 800899a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800899e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089a2:	e7f7      	b.n	8008994 <memmove+0x24>

080089a4 <strncmp>:
 80089a4:	b510      	push	{r4, lr}
 80089a6:	b16a      	cbz	r2, 80089c4 <strncmp+0x20>
 80089a8:	3901      	subs	r1, #1
 80089aa:	1884      	adds	r4, r0, r2
 80089ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d103      	bne.n	80089c0 <strncmp+0x1c>
 80089b8:	42a0      	cmp	r0, r4
 80089ba:	d001      	beq.n	80089c0 <strncmp+0x1c>
 80089bc:	2a00      	cmp	r2, #0
 80089be:	d1f5      	bne.n	80089ac <strncmp+0x8>
 80089c0:	1ad0      	subs	r0, r2, r3
 80089c2:	bd10      	pop	{r4, pc}
 80089c4:	4610      	mov	r0, r2
 80089c6:	e7fc      	b.n	80089c2 <strncmp+0x1e>

080089c8 <_fstat_r>:
 80089c8:	b538      	push	{r3, r4, r5, lr}
 80089ca:	4d07      	ldr	r5, [pc, #28]	@ (80089e8 <_fstat_r+0x20>)
 80089cc:	2300      	movs	r3, #0
 80089ce:	4604      	mov	r4, r0
 80089d0:	4608      	mov	r0, r1
 80089d2:	4611      	mov	r1, r2
 80089d4:	602b      	str	r3, [r5, #0]
 80089d6:	f7f9 f93b 	bl	8001c50 <_fstat>
 80089da:	1c43      	adds	r3, r0, #1
 80089dc:	d102      	bne.n	80089e4 <_fstat_r+0x1c>
 80089de:	682b      	ldr	r3, [r5, #0]
 80089e0:	b103      	cbz	r3, 80089e4 <_fstat_r+0x1c>
 80089e2:	6023      	str	r3, [r4, #0]
 80089e4:	bd38      	pop	{r3, r4, r5, pc}
 80089e6:	bf00      	nop
 80089e8:	2000044c 	.word	0x2000044c

080089ec <_isatty_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	4d06      	ldr	r5, [pc, #24]	@ (8008a08 <_isatty_r+0x1c>)
 80089f0:	2300      	movs	r3, #0
 80089f2:	4604      	mov	r4, r0
 80089f4:	4608      	mov	r0, r1
 80089f6:	602b      	str	r3, [r5, #0]
 80089f8:	f7f9 f93a 	bl	8001c70 <_isatty>
 80089fc:	1c43      	adds	r3, r0, #1
 80089fe:	d102      	bne.n	8008a06 <_isatty_r+0x1a>
 8008a00:	682b      	ldr	r3, [r5, #0]
 8008a02:	b103      	cbz	r3, 8008a06 <_isatty_r+0x1a>
 8008a04:	6023      	str	r3, [r4, #0]
 8008a06:	bd38      	pop	{r3, r4, r5, pc}
 8008a08:	2000044c 	.word	0x2000044c

08008a0c <_sbrk_r>:
 8008a0c:	b538      	push	{r3, r4, r5, lr}
 8008a0e:	4d06      	ldr	r5, [pc, #24]	@ (8008a28 <_sbrk_r+0x1c>)
 8008a10:	2300      	movs	r3, #0
 8008a12:	4604      	mov	r4, r0
 8008a14:	4608      	mov	r0, r1
 8008a16:	602b      	str	r3, [r5, #0]
 8008a18:	f7f9 f942 	bl	8001ca0 <_sbrk>
 8008a1c:	1c43      	adds	r3, r0, #1
 8008a1e:	d102      	bne.n	8008a26 <_sbrk_r+0x1a>
 8008a20:	682b      	ldr	r3, [r5, #0]
 8008a22:	b103      	cbz	r3, 8008a26 <_sbrk_r+0x1a>
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	bd38      	pop	{r3, r4, r5, pc}
 8008a28:	2000044c 	.word	0x2000044c

08008a2c <memcpy>:
 8008a2c:	440a      	add	r2, r1
 8008a2e:	4291      	cmp	r1, r2
 8008a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a34:	d100      	bne.n	8008a38 <memcpy+0xc>
 8008a36:	4770      	bx	lr
 8008a38:	b510      	push	{r4, lr}
 8008a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a42:	4291      	cmp	r1, r2
 8008a44:	d1f9      	bne.n	8008a3a <memcpy+0xe>
 8008a46:	bd10      	pop	{r4, pc}

08008a48 <nan>:
 8008a48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008a50 <nan+0x8>
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	00000000 	.word	0x00000000
 8008a54:	7ff80000 	.word	0x7ff80000

08008a58 <__assert_func>:
 8008a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a5a:	4614      	mov	r4, r2
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	4b09      	ldr	r3, [pc, #36]	@ (8008a84 <__assert_func+0x2c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4605      	mov	r5, r0
 8008a64:	68d8      	ldr	r0, [r3, #12]
 8008a66:	b14c      	cbz	r4, 8008a7c <__assert_func+0x24>
 8008a68:	4b07      	ldr	r3, [pc, #28]	@ (8008a88 <__assert_func+0x30>)
 8008a6a:	9100      	str	r1, [sp, #0]
 8008a6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a70:	4906      	ldr	r1, [pc, #24]	@ (8008a8c <__assert_func+0x34>)
 8008a72:	462b      	mov	r3, r5
 8008a74:	f000 fba8 	bl	80091c8 <fiprintf>
 8008a78:	f000 fbb8 	bl	80091ec <abort>
 8008a7c:	4b04      	ldr	r3, [pc, #16]	@ (8008a90 <__assert_func+0x38>)
 8008a7e:	461c      	mov	r4, r3
 8008a80:	e7f3      	b.n	8008a6a <__assert_func+0x12>
 8008a82:	bf00      	nop
 8008a84:	2000002c 	.word	0x2000002c
 8008a88:	080097ae 	.word	0x080097ae
 8008a8c:	080097bb 	.word	0x080097bb
 8008a90:	080097e9 	.word	0x080097e9

08008a94 <_calloc_r>:
 8008a94:	b570      	push	{r4, r5, r6, lr}
 8008a96:	fba1 5402 	umull	r5, r4, r1, r2
 8008a9a:	b934      	cbnz	r4, 8008aaa <_calloc_r+0x16>
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	f7fe f947 	bl	8006d30 <_malloc_r>
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	b928      	cbnz	r0, 8008ab2 <_calloc_r+0x1e>
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	bd70      	pop	{r4, r5, r6, pc}
 8008aaa:	220c      	movs	r2, #12
 8008aac:	6002      	str	r2, [r0, #0]
 8008aae:	2600      	movs	r6, #0
 8008ab0:	e7f9      	b.n	8008aa6 <_calloc_r+0x12>
 8008ab2:	462a      	mov	r2, r5
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	f7fd f9e9 	bl	8005e8c <memset>
 8008aba:	e7f4      	b.n	8008aa6 <_calloc_r+0x12>

08008abc <rshift>:
 8008abc:	6903      	ldr	r3, [r0, #16]
 8008abe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008ac2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ac6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008aca:	f100 0414 	add.w	r4, r0, #20
 8008ace:	dd45      	ble.n	8008b5c <rshift+0xa0>
 8008ad0:	f011 011f 	ands.w	r1, r1, #31
 8008ad4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008ad8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008adc:	d10c      	bne.n	8008af8 <rshift+0x3c>
 8008ade:	f100 0710 	add.w	r7, r0, #16
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	42b1      	cmp	r1, r6
 8008ae6:	d334      	bcc.n	8008b52 <rshift+0x96>
 8008ae8:	1a9b      	subs	r3, r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	1eea      	subs	r2, r5, #3
 8008aee:	4296      	cmp	r6, r2
 8008af0:	bf38      	it	cc
 8008af2:	2300      	movcc	r3, #0
 8008af4:	4423      	add	r3, r4
 8008af6:	e015      	b.n	8008b24 <rshift+0x68>
 8008af8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008afc:	f1c1 0820 	rsb	r8, r1, #32
 8008b00:	40cf      	lsrs	r7, r1
 8008b02:	f105 0e04 	add.w	lr, r5, #4
 8008b06:	46a1      	mov	r9, r4
 8008b08:	4576      	cmp	r6, lr
 8008b0a:	46f4      	mov	ip, lr
 8008b0c:	d815      	bhi.n	8008b3a <rshift+0x7e>
 8008b0e:	1a9a      	subs	r2, r3, r2
 8008b10:	0092      	lsls	r2, r2, #2
 8008b12:	3a04      	subs	r2, #4
 8008b14:	3501      	adds	r5, #1
 8008b16:	42ae      	cmp	r6, r5
 8008b18:	bf38      	it	cc
 8008b1a:	2200      	movcc	r2, #0
 8008b1c:	18a3      	adds	r3, r4, r2
 8008b1e:	50a7      	str	r7, [r4, r2]
 8008b20:	b107      	cbz	r7, 8008b24 <rshift+0x68>
 8008b22:	3304      	adds	r3, #4
 8008b24:	1b1a      	subs	r2, r3, r4
 8008b26:	42a3      	cmp	r3, r4
 8008b28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b2c:	bf08      	it	eq
 8008b2e:	2300      	moveq	r3, #0
 8008b30:	6102      	str	r2, [r0, #16]
 8008b32:	bf08      	it	eq
 8008b34:	6143      	streq	r3, [r0, #20]
 8008b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b3a:	f8dc c000 	ldr.w	ip, [ip]
 8008b3e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008b42:	ea4c 0707 	orr.w	r7, ip, r7
 8008b46:	f849 7b04 	str.w	r7, [r9], #4
 8008b4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b4e:	40cf      	lsrs	r7, r1
 8008b50:	e7da      	b.n	8008b08 <rshift+0x4c>
 8008b52:	f851 cb04 	ldr.w	ip, [r1], #4
 8008b56:	f847 cf04 	str.w	ip, [r7, #4]!
 8008b5a:	e7c3      	b.n	8008ae4 <rshift+0x28>
 8008b5c:	4623      	mov	r3, r4
 8008b5e:	e7e1      	b.n	8008b24 <rshift+0x68>

08008b60 <__hexdig_fun>:
 8008b60:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008b64:	2b09      	cmp	r3, #9
 8008b66:	d802      	bhi.n	8008b6e <__hexdig_fun+0xe>
 8008b68:	3820      	subs	r0, #32
 8008b6a:	b2c0      	uxtb	r0, r0
 8008b6c:	4770      	bx	lr
 8008b6e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008b72:	2b05      	cmp	r3, #5
 8008b74:	d801      	bhi.n	8008b7a <__hexdig_fun+0x1a>
 8008b76:	3847      	subs	r0, #71	@ 0x47
 8008b78:	e7f7      	b.n	8008b6a <__hexdig_fun+0xa>
 8008b7a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008b7e:	2b05      	cmp	r3, #5
 8008b80:	d801      	bhi.n	8008b86 <__hexdig_fun+0x26>
 8008b82:	3827      	subs	r0, #39	@ 0x27
 8008b84:	e7f1      	b.n	8008b6a <__hexdig_fun+0xa>
 8008b86:	2000      	movs	r0, #0
 8008b88:	4770      	bx	lr
	...

08008b8c <__gethex>:
 8008b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b90:	b085      	sub	sp, #20
 8008b92:	468a      	mov	sl, r1
 8008b94:	9302      	str	r3, [sp, #8]
 8008b96:	680b      	ldr	r3, [r1, #0]
 8008b98:	9001      	str	r0, [sp, #4]
 8008b9a:	4690      	mov	r8, r2
 8008b9c:	1c9c      	adds	r4, r3, #2
 8008b9e:	46a1      	mov	r9, r4
 8008ba0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008ba4:	2830      	cmp	r0, #48	@ 0x30
 8008ba6:	d0fa      	beq.n	8008b9e <__gethex+0x12>
 8008ba8:	eba9 0303 	sub.w	r3, r9, r3
 8008bac:	f1a3 0b02 	sub.w	fp, r3, #2
 8008bb0:	f7ff ffd6 	bl	8008b60 <__hexdig_fun>
 8008bb4:	4605      	mov	r5, r0
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d168      	bne.n	8008c8c <__gethex+0x100>
 8008bba:	49a0      	ldr	r1, [pc, #640]	@ (8008e3c <__gethex+0x2b0>)
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	4648      	mov	r0, r9
 8008bc0:	f7ff fef0 	bl	80089a4 <strncmp>
 8008bc4:	4607      	mov	r7, r0
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d167      	bne.n	8008c9a <__gethex+0x10e>
 8008bca:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008bce:	4626      	mov	r6, r4
 8008bd0:	f7ff ffc6 	bl	8008b60 <__hexdig_fun>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d062      	beq.n	8008c9e <__gethex+0x112>
 8008bd8:	4623      	mov	r3, r4
 8008bda:	7818      	ldrb	r0, [r3, #0]
 8008bdc:	2830      	cmp	r0, #48	@ 0x30
 8008bde:	4699      	mov	r9, r3
 8008be0:	f103 0301 	add.w	r3, r3, #1
 8008be4:	d0f9      	beq.n	8008bda <__gethex+0x4e>
 8008be6:	f7ff ffbb 	bl	8008b60 <__hexdig_fun>
 8008bea:	fab0 f580 	clz	r5, r0
 8008bee:	096d      	lsrs	r5, r5, #5
 8008bf0:	f04f 0b01 	mov.w	fp, #1
 8008bf4:	464a      	mov	r2, r9
 8008bf6:	4616      	mov	r6, r2
 8008bf8:	3201      	adds	r2, #1
 8008bfa:	7830      	ldrb	r0, [r6, #0]
 8008bfc:	f7ff ffb0 	bl	8008b60 <__hexdig_fun>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d1f8      	bne.n	8008bf6 <__gethex+0x6a>
 8008c04:	498d      	ldr	r1, [pc, #564]	@ (8008e3c <__gethex+0x2b0>)
 8008c06:	2201      	movs	r2, #1
 8008c08:	4630      	mov	r0, r6
 8008c0a:	f7ff fecb 	bl	80089a4 <strncmp>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d13f      	bne.n	8008c92 <__gethex+0x106>
 8008c12:	b944      	cbnz	r4, 8008c26 <__gethex+0x9a>
 8008c14:	1c74      	adds	r4, r6, #1
 8008c16:	4622      	mov	r2, r4
 8008c18:	4616      	mov	r6, r2
 8008c1a:	3201      	adds	r2, #1
 8008c1c:	7830      	ldrb	r0, [r6, #0]
 8008c1e:	f7ff ff9f 	bl	8008b60 <__hexdig_fun>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d1f8      	bne.n	8008c18 <__gethex+0x8c>
 8008c26:	1ba4      	subs	r4, r4, r6
 8008c28:	00a7      	lsls	r7, r4, #2
 8008c2a:	7833      	ldrb	r3, [r6, #0]
 8008c2c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008c30:	2b50      	cmp	r3, #80	@ 0x50
 8008c32:	d13e      	bne.n	8008cb2 <__gethex+0x126>
 8008c34:	7873      	ldrb	r3, [r6, #1]
 8008c36:	2b2b      	cmp	r3, #43	@ 0x2b
 8008c38:	d033      	beq.n	8008ca2 <__gethex+0x116>
 8008c3a:	2b2d      	cmp	r3, #45	@ 0x2d
 8008c3c:	d034      	beq.n	8008ca8 <__gethex+0x11c>
 8008c3e:	1c71      	adds	r1, r6, #1
 8008c40:	2400      	movs	r4, #0
 8008c42:	7808      	ldrb	r0, [r1, #0]
 8008c44:	f7ff ff8c 	bl	8008b60 <__hexdig_fun>
 8008c48:	1e43      	subs	r3, r0, #1
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	2b18      	cmp	r3, #24
 8008c4e:	d830      	bhi.n	8008cb2 <__gethex+0x126>
 8008c50:	f1a0 0210 	sub.w	r2, r0, #16
 8008c54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c58:	f7ff ff82 	bl	8008b60 <__hexdig_fun>
 8008c5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008c60:	fa5f fc8c 	uxtb.w	ip, ip
 8008c64:	f1bc 0f18 	cmp.w	ip, #24
 8008c68:	f04f 030a 	mov.w	r3, #10
 8008c6c:	d91e      	bls.n	8008cac <__gethex+0x120>
 8008c6e:	b104      	cbz	r4, 8008c72 <__gethex+0xe6>
 8008c70:	4252      	negs	r2, r2
 8008c72:	4417      	add	r7, r2
 8008c74:	f8ca 1000 	str.w	r1, [sl]
 8008c78:	b1ed      	cbz	r5, 8008cb6 <__gethex+0x12a>
 8008c7a:	f1bb 0f00 	cmp.w	fp, #0
 8008c7e:	bf0c      	ite	eq
 8008c80:	2506      	moveq	r5, #6
 8008c82:	2500      	movne	r5, #0
 8008c84:	4628      	mov	r0, r5
 8008c86:	b005      	add	sp, #20
 8008c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8c:	2500      	movs	r5, #0
 8008c8e:	462c      	mov	r4, r5
 8008c90:	e7b0      	b.n	8008bf4 <__gethex+0x68>
 8008c92:	2c00      	cmp	r4, #0
 8008c94:	d1c7      	bne.n	8008c26 <__gethex+0x9a>
 8008c96:	4627      	mov	r7, r4
 8008c98:	e7c7      	b.n	8008c2a <__gethex+0x9e>
 8008c9a:	464e      	mov	r6, r9
 8008c9c:	462f      	mov	r7, r5
 8008c9e:	2501      	movs	r5, #1
 8008ca0:	e7c3      	b.n	8008c2a <__gethex+0x9e>
 8008ca2:	2400      	movs	r4, #0
 8008ca4:	1cb1      	adds	r1, r6, #2
 8008ca6:	e7cc      	b.n	8008c42 <__gethex+0xb6>
 8008ca8:	2401      	movs	r4, #1
 8008caa:	e7fb      	b.n	8008ca4 <__gethex+0x118>
 8008cac:	fb03 0002 	mla	r0, r3, r2, r0
 8008cb0:	e7ce      	b.n	8008c50 <__gethex+0xc4>
 8008cb2:	4631      	mov	r1, r6
 8008cb4:	e7de      	b.n	8008c74 <__gethex+0xe8>
 8008cb6:	eba6 0309 	sub.w	r3, r6, r9
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	2b07      	cmp	r3, #7
 8008cc0:	dc0a      	bgt.n	8008cd8 <__gethex+0x14c>
 8008cc2:	9801      	ldr	r0, [sp, #4]
 8008cc4:	f7fe f8c0 	bl	8006e48 <_Balloc>
 8008cc8:	4604      	mov	r4, r0
 8008cca:	b940      	cbnz	r0, 8008cde <__gethex+0x152>
 8008ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8008e40 <__gethex+0x2b4>)
 8008cce:	4602      	mov	r2, r0
 8008cd0:	21e4      	movs	r1, #228	@ 0xe4
 8008cd2:	485c      	ldr	r0, [pc, #368]	@ (8008e44 <__gethex+0x2b8>)
 8008cd4:	f7ff fec0 	bl	8008a58 <__assert_func>
 8008cd8:	3101      	adds	r1, #1
 8008cda:	105b      	asrs	r3, r3, #1
 8008cdc:	e7ef      	b.n	8008cbe <__gethex+0x132>
 8008cde:	f100 0a14 	add.w	sl, r0, #20
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	4655      	mov	r5, sl
 8008ce6:	469b      	mov	fp, r3
 8008ce8:	45b1      	cmp	r9, r6
 8008cea:	d337      	bcc.n	8008d5c <__gethex+0x1d0>
 8008cec:	f845 bb04 	str.w	fp, [r5], #4
 8008cf0:	eba5 050a 	sub.w	r5, r5, sl
 8008cf4:	10ad      	asrs	r5, r5, #2
 8008cf6:	6125      	str	r5, [r4, #16]
 8008cf8:	4658      	mov	r0, fp
 8008cfa:	f7fe f997 	bl	800702c <__hi0bits>
 8008cfe:	016d      	lsls	r5, r5, #5
 8008d00:	f8d8 6000 	ldr.w	r6, [r8]
 8008d04:	1a2d      	subs	r5, r5, r0
 8008d06:	42b5      	cmp	r5, r6
 8008d08:	dd54      	ble.n	8008db4 <__gethex+0x228>
 8008d0a:	1bad      	subs	r5, r5, r6
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f7fe fd23 	bl	800775a <__any_on>
 8008d14:	4681      	mov	r9, r0
 8008d16:	b178      	cbz	r0, 8008d38 <__gethex+0x1ac>
 8008d18:	1e6b      	subs	r3, r5, #1
 8008d1a:	1159      	asrs	r1, r3, #5
 8008d1c:	f003 021f 	and.w	r2, r3, #31
 8008d20:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008d24:	f04f 0901 	mov.w	r9, #1
 8008d28:	fa09 f202 	lsl.w	r2, r9, r2
 8008d2c:	420a      	tst	r2, r1
 8008d2e:	d003      	beq.n	8008d38 <__gethex+0x1ac>
 8008d30:	454b      	cmp	r3, r9
 8008d32:	dc36      	bgt.n	8008da2 <__gethex+0x216>
 8008d34:	f04f 0902 	mov.w	r9, #2
 8008d38:	4629      	mov	r1, r5
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f7ff febe 	bl	8008abc <rshift>
 8008d40:	442f      	add	r7, r5
 8008d42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d46:	42bb      	cmp	r3, r7
 8008d48:	da42      	bge.n	8008dd0 <__gethex+0x244>
 8008d4a:	9801      	ldr	r0, [sp, #4]
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	f7fe f8bb 	bl	8006ec8 <_Bfree>
 8008d52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d54:	2300      	movs	r3, #0
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	25a3      	movs	r5, #163	@ 0xa3
 8008d5a:	e793      	b.n	8008c84 <__gethex+0xf8>
 8008d5c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008d60:	2a2e      	cmp	r2, #46	@ 0x2e
 8008d62:	d012      	beq.n	8008d8a <__gethex+0x1fe>
 8008d64:	2b20      	cmp	r3, #32
 8008d66:	d104      	bne.n	8008d72 <__gethex+0x1e6>
 8008d68:	f845 bb04 	str.w	fp, [r5], #4
 8008d6c:	f04f 0b00 	mov.w	fp, #0
 8008d70:	465b      	mov	r3, fp
 8008d72:	7830      	ldrb	r0, [r6, #0]
 8008d74:	9303      	str	r3, [sp, #12]
 8008d76:	f7ff fef3 	bl	8008b60 <__hexdig_fun>
 8008d7a:	9b03      	ldr	r3, [sp, #12]
 8008d7c:	f000 000f 	and.w	r0, r0, #15
 8008d80:	4098      	lsls	r0, r3
 8008d82:	ea4b 0b00 	orr.w	fp, fp, r0
 8008d86:	3304      	adds	r3, #4
 8008d88:	e7ae      	b.n	8008ce8 <__gethex+0x15c>
 8008d8a:	45b1      	cmp	r9, r6
 8008d8c:	d8ea      	bhi.n	8008d64 <__gethex+0x1d8>
 8008d8e:	492b      	ldr	r1, [pc, #172]	@ (8008e3c <__gethex+0x2b0>)
 8008d90:	9303      	str	r3, [sp, #12]
 8008d92:	2201      	movs	r2, #1
 8008d94:	4630      	mov	r0, r6
 8008d96:	f7ff fe05 	bl	80089a4 <strncmp>
 8008d9a:	9b03      	ldr	r3, [sp, #12]
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	d1e1      	bne.n	8008d64 <__gethex+0x1d8>
 8008da0:	e7a2      	b.n	8008ce8 <__gethex+0x15c>
 8008da2:	1ea9      	subs	r1, r5, #2
 8008da4:	4620      	mov	r0, r4
 8008da6:	f7fe fcd8 	bl	800775a <__any_on>
 8008daa:	2800      	cmp	r0, #0
 8008dac:	d0c2      	beq.n	8008d34 <__gethex+0x1a8>
 8008dae:	f04f 0903 	mov.w	r9, #3
 8008db2:	e7c1      	b.n	8008d38 <__gethex+0x1ac>
 8008db4:	da09      	bge.n	8008dca <__gethex+0x23e>
 8008db6:	1b75      	subs	r5, r6, r5
 8008db8:	4621      	mov	r1, r4
 8008dba:	9801      	ldr	r0, [sp, #4]
 8008dbc:	462a      	mov	r2, r5
 8008dbe:	f7fe fa93 	bl	80072e8 <__lshift>
 8008dc2:	1b7f      	subs	r7, r7, r5
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	f100 0a14 	add.w	sl, r0, #20
 8008dca:	f04f 0900 	mov.w	r9, #0
 8008dce:	e7b8      	b.n	8008d42 <__gethex+0x1b6>
 8008dd0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008dd4:	42bd      	cmp	r5, r7
 8008dd6:	dd6f      	ble.n	8008eb8 <__gethex+0x32c>
 8008dd8:	1bed      	subs	r5, r5, r7
 8008dda:	42ae      	cmp	r6, r5
 8008ddc:	dc34      	bgt.n	8008e48 <__gethex+0x2bc>
 8008dde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d022      	beq.n	8008e2c <__gethex+0x2a0>
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	d024      	beq.n	8008e34 <__gethex+0x2a8>
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d115      	bne.n	8008e1a <__gethex+0x28e>
 8008dee:	42ae      	cmp	r6, r5
 8008df0:	d113      	bne.n	8008e1a <__gethex+0x28e>
 8008df2:	2e01      	cmp	r6, #1
 8008df4:	d10b      	bne.n	8008e0e <__gethex+0x282>
 8008df6:	9a02      	ldr	r2, [sp, #8]
 8008df8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008dfc:	6013      	str	r3, [r2, #0]
 8008dfe:	2301      	movs	r3, #1
 8008e00:	6123      	str	r3, [r4, #16]
 8008e02:	f8ca 3000 	str.w	r3, [sl]
 8008e06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e08:	2562      	movs	r5, #98	@ 0x62
 8008e0a:	601c      	str	r4, [r3, #0]
 8008e0c:	e73a      	b.n	8008c84 <__gethex+0xf8>
 8008e0e:	1e71      	subs	r1, r6, #1
 8008e10:	4620      	mov	r0, r4
 8008e12:	f7fe fca2 	bl	800775a <__any_on>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d1ed      	bne.n	8008df6 <__gethex+0x26a>
 8008e1a:	9801      	ldr	r0, [sp, #4]
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	f7fe f853 	bl	8006ec8 <_Bfree>
 8008e22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e24:	2300      	movs	r3, #0
 8008e26:	6013      	str	r3, [r2, #0]
 8008e28:	2550      	movs	r5, #80	@ 0x50
 8008e2a:	e72b      	b.n	8008c84 <__gethex+0xf8>
 8008e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1f3      	bne.n	8008e1a <__gethex+0x28e>
 8008e32:	e7e0      	b.n	8008df6 <__gethex+0x26a>
 8008e34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1dd      	bne.n	8008df6 <__gethex+0x26a>
 8008e3a:	e7ee      	b.n	8008e1a <__gethex+0x28e>
 8008e3c:	08009793 	.word	0x08009793
 8008e40:	08009729 	.word	0x08009729
 8008e44:	080097ea 	.word	0x080097ea
 8008e48:	1e6f      	subs	r7, r5, #1
 8008e4a:	f1b9 0f00 	cmp.w	r9, #0
 8008e4e:	d130      	bne.n	8008eb2 <__gethex+0x326>
 8008e50:	b127      	cbz	r7, 8008e5c <__gethex+0x2d0>
 8008e52:	4639      	mov	r1, r7
 8008e54:	4620      	mov	r0, r4
 8008e56:	f7fe fc80 	bl	800775a <__any_on>
 8008e5a:	4681      	mov	r9, r0
 8008e5c:	117a      	asrs	r2, r7, #5
 8008e5e:	2301      	movs	r3, #1
 8008e60:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008e64:	f007 071f 	and.w	r7, r7, #31
 8008e68:	40bb      	lsls	r3, r7
 8008e6a:	4213      	tst	r3, r2
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	4620      	mov	r0, r4
 8008e70:	bf18      	it	ne
 8008e72:	f049 0902 	orrne.w	r9, r9, #2
 8008e76:	f7ff fe21 	bl	8008abc <rshift>
 8008e7a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008e7e:	1b76      	subs	r6, r6, r5
 8008e80:	2502      	movs	r5, #2
 8008e82:	f1b9 0f00 	cmp.w	r9, #0
 8008e86:	d047      	beq.n	8008f18 <__gethex+0x38c>
 8008e88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d015      	beq.n	8008ebc <__gethex+0x330>
 8008e90:	2b03      	cmp	r3, #3
 8008e92:	d017      	beq.n	8008ec4 <__gethex+0x338>
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d109      	bne.n	8008eac <__gethex+0x320>
 8008e98:	f019 0f02 	tst.w	r9, #2
 8008e9c:	d006      	beq.n	8008eac <__gethex+0x320>
 8008e9e:	f8da 3000 	ldr.w	r3, [sl]
 8008ea2:	ea49 0903 	orr.w	r9, r9, r3
 8008ea6:	f019 0f01 	tst.w	r9, #1
 8008eaa:	d10e      	bne.n	8008eca <__gethex+0x33e>
 8008eac:	f045 0510 	orr.w	r5, r5, #16
 8008eb0:	e032      	b.n	8008f18 <__gethex+0x38c>
 8008eb2:	f04f 0901 	mov.w	r9, #1
 8008eb6:	e7d1      	b.n	8008e5c <__gethex+0x2d0>
 8008eb8:	2501      	movs	r5, #1
 8008eba:	e7e2      	b.n	8008e82 <__gethex+0x2f6>
 8008ebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ebe:	f1c3 0301 	rsb	r3, r3, #1
 8008ec2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0f0      	beq.n	8008eac <__gethex+0x320>
 8008eca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ece:	f104 0314 	add.w	r3, r4, #20
 8008ed2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008ed6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008eda:	f04f 0c00 	mov.w	ip, #0
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ee4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008ee8:	d01b      	beq.n	8008f22 <__gethex+0x396>
 8008eea:	3201      	adds	r2, #1
 8008eec:	6002      	str	r2, [r0, #0]
 8008eee:	2d02      	cmp	r5, #2
 8008ef0:	f104 0314 	add.w	r3, r4, #20
 8008ef4:	d13c      	bne.n	8008f70 <__gethex+0x3e4>
 8008ef6:	f8d8 2000 	ldr.w	r2, [r8]
 8008efa:	3a01      	subs	r2, #1
 8008efc:	42b2      	cmp	r2, r6
 8008efe:	d109      	bne.n	8008f14 <__gethex+0x388>
 8008f00:	1171      	asrs	r1, r6, #5
 8008f02:	2201      	movs	r2, #1
 8008f04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f08:	f006 061f 	and.w	r6, r6, #31
 8008f0c:	fa02 f606 	lsl.w	r6, r2, r6
 8008f10:	421e      	tst	r6, r3
 8008f12:	d13a      	bne.n	8008f8a <__gethex+0x3fe>
 8008f14:	f045 0520 	orr.w	r5, r5, #32
 8008f18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f1a:	601c      	str	r4, [r3, #0]
 8008f1c:	9b02      	ldr	r3, [sp, #8]
 8008f1e:	601f      	str	r7, [r3, #0]
 8008f20:	e6b0      	b.n	8008c84 <__gethex+0xf8>
 8008f22:	4299      	cmp	r1, r3
 8008f24:	f843 cc04 	str.w	ip, [r3, #-4]
 8008f28:	d8d9      	bhi.n	8008ede <__gethex+0x352>
 8008f2a:	68a3      	ldr	r3, [r4, #8]
 8008f2c:	459b      	cmp	fp, r3
 8008f2e:	db17      	blt.n	8008f60 <__gethex+0x3d4>
 8008f30:	6861      	ldr	r1, [r4, #4]
 8008f32:	9801      	ldr	r0, [sp, #4]
 8008f34:	3101      	adds	r1, #1
 8008f36:	f7fd ff87 	bl	8006e48 <_Balloc>
 8008f3a:	4681      	mov	r9, r0
 8008f3c:	b918      	cbnz	r0, 8008f46 <__gethex+0x3ba>
 8008f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8008fa8 <__gethex+0x41c>)
 8008f40:	4602      	mov	r2, r0
 8008f42:	2184      	movs	r1, #132	@ 0x84
 8008f44:	e6c5      	b.n	8008cd2 <__gethex+0x146>
 8008f46:	6922      	ldr	r2, [r4, #16]
 8008f48:	3202      	adds	r2, #2
 8008f4a:	f104 010c 	add.w	r1, r4, #12
 8008f4e:	0092      	lsls	r2, r2, #2
 8008f50:	300c      	adds	r0, #12
 8008f52:	f7ff fd6b 	bl	8008a2c <memcpy>
 8008f56:	4621      	mov	r1, r4
 8008f58:	9801      	ldr	r0, [sp, #4]
 8008f5a:	f7fd ffb5 	bl	8006ec8 <_Bfree>
 8008f5e:	464c      	mov	r4, r9
 8008f60:	6923      	ldr	r3, [r4, #16]
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f68:	6122      	str	r2, [r4, #16]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	615a      	str	r2, [r3, #20]
 8008f6e:	e7be      	b.n	8008eee <__gethex+0x362>
 8008f70:	6922      	ldr	r2, [r4, #16]
 8008f72:	455a      	cmp	r2, fp
 8008f74:	dd0b      	ble.n	8008f8e <__gethex+0x402>
 8008f76:	2101      	movs	r1, #1
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f7ff fd9f 	bl	8008abc <rshift>
 8008f7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f82:	3701      	adds	r7, #1
 8008f84:	42bb      	cmp	r3, r7
 8008f86:	f6ff aee0 	blt.w	8008d4a <__gethex+0x1be>
 8008f8a:	2501      	movs	r5, #1
 8008f8c:	e7c2      	b.n	8008f14 <__gethex+0x388>
 8008f8e:	f016 061f 	ands.w	r6, r6, #31
 8008f92:	d0fa      	beq.n	8008f8a <__gethex+0x3fe>
 8008f94:	4453      	add	r3, sl
 8008f96:	f1c6 0620 	rsb	r6, r6, #32
 8008f9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008f9e:	f7fe f845 	bl	800702c <__hi0bits>
 8008fa2:	42b0      	cmp	r0, r6
 8008fa4:	dbe7      	blt.n	8008f76 <__gethex+0x3ea>
 8008fa6:	e7f0      	b.n	8008f8a <__gethex+0x3fe>
 8008fa8:	08009729 	.word	0x08009729

08008fac <L_shift>:
 8008fac:	f1c2 0208 	rsb	r2, r2, #8
 8008fb0:	0092      	lsls	r2, r2, #2
 8008fb2:	b570      	push	{r4, r5, r6, lr}
 8008fb4:	f1c2 0620 	rsb	r6, r2, #32
 8008fb8:	6843      	ldr	r3, [r0, #4]
 8008fba:	6804      	ldr	r4, [r0, #0]
 8008fbc:	fa03 f506 	lsl.w	r5, r3, r6
 8008fc0:	432c      	orrs	r4, r5
 8008fc2:	40d3      	lsrs	r3, r2
 8008fc4:	6004      	str	r4, [r0, #0]
 8008fc6:	f840 3f04 	str.w	r3, [r0, #4]!
 8008fca:	4288      	cmp	r0, r1
 8008fcc:	d3f4      	bcc.n	8008fb8 <L_shift+0xc>
 8008fce:	bd70      	pop	{r4, r5, r6, pc}

08008fd0 <__match>:
 8008fd0:	b530      	push	{r4, r5, lr}
 8008fd2:	6803      	ldr	r3, [r0, #0]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fda:	b914      	cbnz	r4, 8008fe2 <__match+0x12>
 8008fdc:	6003      	str	r3, [r0, #0]
 8008fde:	2001      	movs	r0, #1
 8008fe0:	bd30      	pop	{r4, r5, pc}
 8008fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fe6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008fea:	2d19      	cmp	r5, #25
 8008fec:	bf98      	it	ls
 8008fee:	3220      	addls	r2, #32
 8008ff0:	42a2      	cmp	r2, r4
 8008ff2:	d0f0      	beq.n	8008fd6 <__match+0x6>
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	e7f3      	b.n	8008fe0 <__match+0x10>

08008ff8 <__hexnan>:
 8008ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffc:	680b      	ldr	r3, [r1, #0]
 8008ffe:	6801      	ldr	r1, [r0, #0]
 8009000:	115e      	asrs	r6, r3, #5
 8009002:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009006:	f013 031f 	ands.w	r3, r3, #31
 800900a:	b087      	sub	sp, #28
 800900c:	bf18      	it	ne
 800900e:	3604      	addne	r6, #4
 8009010:	2500      	movs	r5, #0
 8009012:	1f37      	subs	r7, r6, #4
 8009014:	4682      	mov	sl, r0
 8009016:	4690      	mov	r8, r2
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	f846 5c04 	str.w	r5, [r6, #-4]
 800901e:	46b9      	mov	r9, r7
 8009020:	463c      	mov	r4, r7
 8009022:	9502      	str	r5, [sp, #8]
 8009024:	46ab      	mov	fp, r5
 8009026:	784a      	ldrb	r2, [r1, #1]
 8009028:	1c4b      	adds	r3, r1, #1
 800902a:	9303      	str	r3, [sp, #12]
 800902c:	b342      	cbz	r2, 8009080 <__hexnan+0x88>
 800902e:	4610      	mov	r0, r2
 8009030:	9105      	str	r1, [sp, #20]
 8009032:	9204      	str	r2, [sp, #16]
 8009034:	f7ff fd94 	bl	8008b60 <__hexdig_fun>
 8009038:	2800      	cmp	r0, #0
 800903a:	d151      	bne.n	80090e0 <__hexnan+0xe8>
 800903c:	9a04      	ldr	r2, [sp, #16]
 800903e:	9905      	ldr	r1, [sp, #20]
 8009040:	2a20      	cmp	r2, #32
 8009042:	d818      	bhi.n	8009076 <__hexnan+0x7e>
 8009044:	9b02      	ldr	r3, [sp, #8]
 8009046:	459b      	cmp	fp, r3
 8009048:	dd13      	ble.n	8009072 <__hexnan+0x7a>
 800904a:	454c      	cmp	r4, r9
 800904c:	d206      	bcs.n	800905c <__hexnan+0x64>
 800904e:	2d07      	cmp	r5, #7
 8009050:	dc04      	bgt.n	800905c <__hexnan+0x64>
 8009052:	462a      	mov	r2, r5
 8009054:	4649      	mov	r1, r9
 8009056:	4620      	mov	r0, r4
 8009058:	f7ff ffa8 	bl	8008fac <L_shift>
 800905c:	4544      	cmp	r4, r8
 800905e:	d952      	bls.n	8009106 <__hexnan+0x10e>
 8009060:	2300      	movs	r3, #0
 8009062:	f1a4 0904 	sub.w	r9, r4, #4
 8009066:	f844 3c04 	str.w	r3, [r4, #-4]
 800906a:	f8cd b008 	str.w	fp, [sp, #8]
 800906e:	464c      	mov	r4, r9
 8009070:	461d      	mov	r5, r3
 8009072:	9903      	ldr	r1, [sp, #12]
 8009074:	e7d7      	b.n	8009026 <__hexnan+0x2e>
 8009076:	2a29      	cmp	r2, #41	@ 0x29
 8009078:	d157      	bne.n	800912a <__hexnan+0x132>
 800907a:	3102      	adds	r1, #2
 800907c:	f8ca 1000 	str.w	r1, [sl]
 8009080:	f1bb 0f00 	cmp.w	fp, #0
 8009084:	d051      	beq.n	800912a <__hexnan+0x132>
 8009086:	454c      	cmp	r4, r9
 8009088:	d206      	bcs.n	8009098 <__hexnan+0xa0>
 800908a:	2d07      	cmp	r5, #7
 800908c:	dc04      	bgt.n	8009098 <__hexnan+0xa0>
 800908e:	462a      	mov	r2, r5
 8009090:	4649      	mov	r1, r9
 8009092:	4620      	mov	r0, r4
 8009094:	f7ff ff8a 	bl	8008fac <L_shift>
 8009098:	4544      	cmp	r4, r8
 800909a:	d936      	bls.n	800910a <__hexnan+0x112>
 800909c:	f1a8 0204 	sub.w	r2, r8, #4
 80090a0:	4623      	mov	r3, r4
 80090a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80090a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80090aa:	429f      	cmp	r7, r3
 80090ac:	d2f9      	bcs.n	80090a2 <__hexnan+0xaa>
 80090ae:	1b3b      	subs	r3, r7, r4
 80090b0:	f023 0303 	bic.w	r3, r3, #3
 80090b4:	3304      	adds	r3, #4
 80090b6:	3401      	adds	r4, #1
 80090b8:	3e03      	subs	r6, #3
 80090ba:	42b4      	cmp	r4, r6
 80090bc:	bf88      	it	hi
 80090be:	2304      	movhi	r3, #4
 80090c0:	4443      	add	r3, r8
 80090c2:	2200      	movs	r2, #0
 80090c4:	f843 2b04 	str.w	r2, [r3], #4
 80090c8:	429f      	cmp	r7, r3
 80090ca:	d2fb      	bcs.n	80090c4 <__hexnan+0xcc>
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	b91b      	cbnz	r3, 80090d8 <__hexnan+0xe0>
 80090d0:	4547      	cmp	r7, r8
 80090d2:	d128      	bne.n	8009126 <__hexnan+0x12e>
 80090d4:	2301      	movs	r3, #1
 80090d6:	603b      	str	r3, [r7, #0]
 80090d8:	2005      	movs	r0, #5
 80090da:	b007      	add	sp, #28
 80090dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e0:	3501      	adds	r5, #1
 80090e2:	2d08      	cmp	r5, #8
 80090e4:	f10b 0b01 	add.w	fp, fp, #1
 80090e8:	dd06      	ble.n	80090f8 <__hexnan+0x100>
 80090ea:	4544      	cmp	r4, r8
 80090ec:	d9c1      	bls.n	8009072 <__hexnan+0x7a>
 80090ee:	2300      	movs	r3, #0
 80090f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80090f4:	2501      	movs	r5, #1
 80090f6:	3c04      	subs	r4, #4
 80090f8:	6822      	ldr	r2, [r4, #0]
 80090fa:	f000 000f 	and.w	r0, r0, #15
 80090fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009102:	6020      	str	r0, [r4, #0]
 8009104:	e7b5      	b.n	8009072 <__hexnan+0x7a>
 8009106:	2508      	movs	r5, #8
 8009108:	e7b3      	b.n	8009072 <__hexnan+0x7a>
 800910a:	9b01      	ldr	r3, [sp, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d0dd      	beq.n	80090cc <__hexnan+0xd4>
 8009110:	f1c3 0320 	rsb	r3, r3, #32
 8009114:	f04f 32ff 	mov.w	r2, #4294967295
 8009118:	40da      	lsrs	r2, r3
 800911a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800911e:	4013      	ands	r3, r2
 8009120:	f846 3c04 	str.w	r3, [r6, #-4]
 8009124:	e7d2      	b.n	80090cc <__hexnan+0xd4>
 8009126:	3f04      	subs	r7, #4
 8009128:	e7d0      	b.n	80090cc <__hexnan+0xd4>
 800912a:	2004      	movs	r0, #4
 800912c:	e7d5      	b.n	80090da <__hexnan+0xe2>

0800912e <__ascii_mbtowc>:
 800912e:	b082      	sub	sp, #8
 8009130:	b901      	cbnz	r1, 8009134 <__ascii_mbtowc+0x6>
 8009132:	a901      	add	r1, sp, #4
 8009134:	b142      	cbz	r2, 8009148 <__ascii_mbtowc+0x1a>
 8009136:	b14b      	cbz	r3, 800914c <__ascii_mbtowc+0x1e>
 8009138:	7813      	ldrb	r3, [r2, #0]
 800913a:	600b      	str	r3, [r1, #0]
 800913c:	7812      	ldrb	r2, [r2, #0]
 800913e:	1e10      	subs	r0, r2, #0
 8009140:	bf18      	it	ne
 8009142:	2001      	movne	r0, #1
 8009144:	b002      	add	sp, #8
 8009146:	4770      	bx	lr
 8009148:	4610      	mov	r0, r2
 800914a:	e7fb      	b.n	8009144 <__ascii_mbtowc+0x16>
 800914c:	f06f 0001 	mvn.w	r0, #1
 8009150:	e7f8      	b.n	8009144 <__ascii_mbtowc+0x16>

08009152 <_realloc_r>:
 8009152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009156:	4607      	mov	r7, r0
 8009158:	4614      	mov	r4, r2
 800915a:	460d      	mov	r5, r1
 800915c:	b921      	cbnz	r1, 8009168 <_realloc_r+0x16>
 800915e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009162:	4611      	mov	r1, r2
 8009164:	f7fd bde4 	b.w	8006d30 <_malloc_r>
 8009168:	b92a      	cbnz	r2, 8009176 <_realloc_r+0x24>
 800916a:	f7fd fd6d 	bl	8006c48 <_free_r>
 800916e:	4625      	mov	r5, r4
 8009170:	4628      	mov	r0, r5
 8009172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009176:	f000 f840 	bl	80091fa <_malloc_usable_size_r>
 800917a:	4284      	cmp	r4, r0
 800917c:	4606      	mov	r6, r0
 800917e:	d802      	bhi.n	8009186 <_realloc_r+0x34>
 8009180:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009184:	d8f4      	bhi.n	8009170 <_realloc_r+0x1e>
 8009186:	4621      	mov	r1, r4
 8009188:	4638      	mov	r0, r7
 800918a:	f7fd fdd1 	bl	8006d30 <_malloc_r>
 800918e:	4680      	mov	r8, r0
 8009190:	b908      	cbnz	r0, 8009196 <_realloc_r+0x44>
 8009192:	4645      	mov	r5, r8
 8009194:	e7ec      	b.n	8009170 <_realloc_r+0x1e>
 8009196:	42b4      	cmp	r4, r6
 8009198:	4622      	mov	r2, r4
 800919a:	4629      	mov	r1, r5
 800919c:	bf28      	it	cs
 800919e:	4632      	movcs	r2, r6
 80091a0:	f7ff fc44 	bl	8008a2c <memcpy>
 80091a4:	4629      	mov	r1, r5
 80091a6:	4638      	mov	r0, r7
 80091a8:	f7fd fd4e 	bl	8006c48 <_free_r>
 80091ac:	e7f1      	b.n	8009192 <_realloc_r+0x40>

080091ae <__ascii_wctomb>:
 80091ae:	4603      	mov	r3, r0
 80091b0:	4608      	mov	r0, r1
 80091b2:	b141      	cbz	r1, 80091c6 <__ascii_wctomb+0x18>
 80091b4:	2aff      	cmp	r2, #255	@ 0xff
 80091b6:	d904      	bls.n	80091c2 <__ascii_wctomb+0x14>
 80091b8:	228a      	movs	r2, #138	@ 0x8a
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	f04f 30ff 	mov.w	r0, #4294967295
 80091c0:	4770      	bx	lr
 80091c2:	700a      	strb	r2, [r1, #0]
 80091c4:	2001      	movs	r0, #1
 80091c6:	4770      	bx	lr

080091c8 <fiprintf>:
 80091c8:	b40e      	push	{r1, r2, r3}
 80091ca:	b503      	push	{r0, r1, lr}
 80091cc:	4601      	mov	r1, r0
 80091ce:	ab03      	add	r3, sp, #12
 80091d0:	4805      	ldr	r0, [pc, #20]	@ (80091e8 <fiprintf+0x20>)
 80091d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091d6:	6800      	ldr	r0, [r0, #0]
 80091d8:	9301      	str	r3, [sp, #4]
 80091da:	f000 f83f 	bl	800925c <_vfiprintf_r>
 80091de:	b002      	add	sp, #8
 80091e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091e4:	b003      	add	sp, #12
 80091e6:	4770      	bx	lr
 80091e8:	2000002c 	.word	0x2000002c

080091ec <abort>:
 80091ec:	b508      	push	{r3, lr}
 80091ee:	2006      	movs	r0, #6
 80091f0:	f000 f974 	bl	80094dc <raise>
 80091f4:	2001      	movs	r0, #1
 80091f6:	f7f8 fcdb 	bl	8001bb0 <_exit>

080091fa <_malloc_usable_size_r>:
 80091fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091fe:	1f18      	subs	r0, r3, #4
 8009200:	2b00      	cmp	r3, #0
 8009202:	bfbc      	itt	lt
 8009204:	580b      	ldrlt	r3, [r1, r0]
 8009206:	18c0      	addlt	r0, r0, r3
 8009208:	4770      	bx	lr

0800920a <__sfputc_r>:
 800920a:	6893      	ldr	r3, [r2, #8]
 800920c:	3b01      	subs	r3, #1
 800920e:	2b00      	cmp	r3, #0
 8009210:	b410      	push	{r4}
 8009212:	6093      	str	r3, [r2, #8]
 8009214:	da08      	bge.n	8009228 <__sfputc_r+0x1e>
 8009216:	6994      	ldr	r4, [r2, #24]
 8009218:	42a3      	cmp	r3, r4
 800921a:	db01      	blt.n	8009220 <__sfputc_r+0x16>
 800921c:	290a      	cmp	r1, #10
 800921e:	d103      	bne.n	8009228 <__sfputc_r+0x1e>
 8009220:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009224:	f7fc bd9d 	b.w	8005d62 <__swbuf_r>
 8009228:	6813      	ldr	r3, [r2, #0]
 800922a:	1c58      	adds	r0, r3, #1
 800922c:	6010      	str	r0, [r2, #0]
 800922e:	7019      	strb	r1, [r3, #0]
 8009230:	4608      	mov	r0, r1
 8009232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009236:	4770      	bx	lr

08009238 <__sfputs_r>:
 8009238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923a:	4606      	mov	r6, r0
 800923c:	460f      	mov	r7, r1
 800923e:	4614      	mov	r4, r2
 8009240:	18d5      	adds	r5, r2, r3
 8009242:	42ac      	cmp	r4, r5
 8009244:	d101      	bne.n	800924a <__sfputs_r+0x12>
 8009246:	2000      	movs	r0, #0
 8009248:	e007      	b.n	800925a <__sfputs_r+0x22>
 800924a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800924e:	463a      	mov	r2, r7
 8009250:	4630      	mov	r0, r6
 8009252:	f7ff ffda 	bl	800920a <__sfputc_r>
 8009256:	1c43      	adds	r3, r0, #1
 8009258:	d1f3      	bne.n	8009242 <__sfputs_r+0xa>
 800925a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800925c <_vfiprintf_r>:
 800925c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009260:	460d      	mov	r5, r1
 8009262:	b09d      	sub	sp, #116	@ 0x74
 8009264:	4614      	mov	r4, r2
 8009266:	4698      	mov	r8, r3
 8009268:	4606      	mov	r6, r0
 800926a:	b118      	cbz	r0, 8009274 <_vfiprintf_r+0x18>
 800926c:	6a03      	ldr	r3, [r0, #32]
 800926e:	b90b      	cbnz	r3, 8009274 <_vfiprintf_r+0x18>
 8009270:	f7fc fc7e 	bl	8005b70 <__sinit>
 8009274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009276:	07d9      	lsls	r1, r3, #31
 8009278:	d405      	bmi.n	8009286 <_vfiprintf_r+0x2a>
 800927a:	89ab      	ldrh	r3, [r5, #12]
 800927c:	059a      	lsls	r2, r3, #22
 800927e:	d402      	bmi.n	8009286 <_vfiprintf_r+0x2a>
 8009280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009282:	f7fc fe80 	bl	8005f86 <__retarget_lock_acquire_recursive>
 8009286:	89ab      	ldrh	r3, [r5, #12]
 8009288:	071b      	lsls	r3, r3, #28
 800928a:	d501      	bpl.n	8009290 <_vfiprintf_r+0x34>
 800928c:	692b      	ldr	r3, [r5, #16]
 800928e:	b99b      	cbnz	r3, 80092b8 <_vfiprintf_r+0x5c>
 8009290:	4629      	mov	r1, r5
 8009292:	4630      	mov	r0, r6
 8009294:	f7fc fda4 	bl	8005de0 <__swsetup_r>
 8009298:	b170      	cbz	r0, 80092b8 <_vfiprintf_r+0x5c>
 800929a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800929c:	07dc      	lsls	r4, r3, #31
 800929e:	d504      	bpl.n	80092aa <_vfiprintf_r+0x4e>
 80092a0:	f04f 30ff 	mov.w	r0, #4294967295
 80092a4:	b01d      	add	sp, #116	@ 0x74
 80092a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092aa:	89ab      	ldrh	r3, [r5, #12]
 80092ac:	0598      	lsls	r0, r3, #22
 80092ae:	d4f7      	bmi.n	80092a0 <_vfiprintf_r+0x44>
 80092b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092b2:	f7fc fe69 	bl	8005f88 <__retarget_lock_release_recursive>
 80092b6:	e7f3      	b.n	80092a0 <_vfiprintf_r+0x44>
 80092b8:	2300      	movs	r3, #0
 80092ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80092bc:	2320      	movs	r3, #32
 80092be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80092c6:	2330      	movs	r3, #48	@ 0x30
 80092c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009478 <_vfiprintf_r+0x21c>
 80092cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092d0:	f04f 0901 	mov.w	r9, #1
 80092d4:	4623      	mov	r3, r4
 80092d6:	469a      	mov	sl, r3
 80092d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092dc:	b10a      	cbz	r2, 80092e2 <_vfiprintf_r+0x86>
 80092de:	2a25      	cmp	r2, #37	@ 0x25
 80092e0:	d1f9      	bne.n	80092d6 <_vfiprintf_r+0x7a>
 80092e2:	ebba 0b04 	subs.w	fp, sl, r4
 80092e6:	d00b      	beq.n	8009300 <_vfiprintf_r+0xa4>
 80092e8:	465b      	mov	r3, fp
 80092ea:	4622      	mov	r2, r4
 80092ec:	4629      	mov	r1, r5
 80092ee:	4630      	mov	r0, r6
 80092f0:	f7ff ffa2 	bl	8009238 <__sfputs_r>
 80092f4:	3001      	adds	r0, #1
 80092f6:	f000 80a7 	beq.w	8009448 <_vfiprintf_r+0x1ec>
 80092fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092fc:	445a      	add	r2, fp
 80092fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8009300:	f89a 3000 	ldrb.w	r3, [sl]
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 809f 	beq.w	8009448 <_vfiprintf_r+0x1ec>
 800930a:	2300      	movs	r3, #0
 800930c:	f04f 32ff 	mov.w	r2, #4294967295
 8009310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009314:	f10a 0a01 	add.w	sl, sl, #1
 8009318:	9304      	str	r3, [sp, #16]
 800931a:	9307      	str	r3, [sp, #28]
 800931c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009320:	931a      	str	r3, [sp, #104]	@ 0x68
 8009322:	4654      	mov	r4, sl
 8009324:	2205      	movs	r2, #5
 8009326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800932a:	4853      	ldr	r0, [pc, #332]	@ (8009478 <_vfiprintf_r+0x21c>)
 800932c:	f7f6 ff50 	bl	80001d0 <memchr>
 8009330:	9a04      	ldr	r2, [sp, #16]
 8009332:	b9d8      	cbnz	r0, 800936c <_vfiprintf_r+0x110>
 8009334:	06d1      	lsls	r1, r2, #27
 8009336:	bf44      	itt	mi
 8009338:	2320      	movmi	r3, #32
 800933a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800933e:	0713      	lsls	r3, r2, #28
 8009340:	bf44      	itt	mi
 8009342:	232b      	movmi	r3, #43	@ 0x2b
 8009344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009348:	f89a 3000 	ldrb.w	r3, [sl]
 800934c:	2b2a      	cmp	r3, #42	@ 0x2a
 800934e:	d015      	beq.n	800937c <_vfiprintf_r+0x120>
 8009350:	9a07      	ldr	r2, [sp, #28]
 8009352:	4654      	mov	r4, sl
 8009354:	2000      	movs	r0, #0
 8009356:	f04f 0c0a 	mov.w	ip, #10
 800935a:	4621      	mov	r1, r4
 800935c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009360:	3b30      	subs	r3, #48	@ 0x30
 8009362:	2b09      	cmp	r3, #9
 8009364:	d94b      	bls.n	80093fe <_vfiprintf_r+0x1a2>
 8009366:	b1b0      	cbz	r0, 8009396 <_vfiprintf_r+0x13a>
 8009368:	9207      	str	r2, [sp, #28]
 800936a:	e014      	b.n	8009396 <_vfiprintf_r+0x13a>
 800936c:	eba0 0308 	sub.w	r3, r0, r8
 8009370:	fa09 f303 	lsl.w	r3, r9, r3
 8009374:	4313      	orrs	r3, r2
 8009376:	9304      	str	r3, [sp, #16]
 8009378:	46a2      	mov	sl, r4
 800937a:	e7d2      	b.n	8009322 <_vfiprintf_r+0xc6>
 800937c:	9b03      	ldr	r3, [sp, #12]
 800937e:	1d19      	adds	r1, r3, #4
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	9103      	str	r1, [sp, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	bfbb      	ittet	lt
 8009388:	425b      	neglt	r3, r3
 800938a:	f042 0202 	orrlt.w	r2, r2, #2
 800938e:	9307      	strge	r3, [sp, #28]
 8009390:	9307      	strlt	r3, [sp, #28]
 8009392:	bfb8      	it	lt
 8009394:	9204      	strlt	r2, [sp, #16]
 8009396:	7823      	ldrb	r3, [r4, #0]
 8009398:	2b2e      	cmp	r3, #46	@ 0x2e
 800939a:	d10a      	bne.n	80093b2 <_vfiprintf_r+0x156>
 800939c:	7863      	ldrb	r3, [r4, #1]
 800939e:	2b2a      	cmp	r3, #42	@ 0x2a
 80093a0:	d132      	bne.n	8009408 <_vfiprintf_r+0x1ac>
 80093a2:	9b03      	ldr	r3, [sp, #12]
 80093a4:	1d1a      	adds	r2, r3, #4
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	9203      	str	r2, [sp, #12]
 80093aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093ae:	3402      	adds	r4, #2
 80093b0:	9305      	str	r3, [sp, #20]
 80093b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009488 <_vfiprintf_r+0x22c>
 80093b6:	7821      	ldrb	r1, [r4, #0]
 80093b8:	2203      	movs	r2, #3
 80093ba:	4650      	mov	r0, sl
 80093bc:	f7f6 ff08 	bl	80001d0 <memchr>
 80093c0:	b138      	cbz	r0, 80093d2 <_vfiprintf_r+0x176>
 80093c2:	9b04      	ldr	r3, [sp, #16]
 80093c4:	eba0 000a 	sub.w	r0, r0, sl
 80093c8:	2240      	movs	r2, #64	@ 0x40
 80093ca:	4082      	lsls	r2, r0
 80093cc:	4313      	orrs	r3, r2
 80093ce:	3401      	adds	r4, #1
 80093d0:	9304      	str	r3, [sp, #16]
 80093d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093d6:	4829      	ldr	r0, [pc, #164]	@ (800947c <_vfiprintf_r+0x220>)
 80093d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093dc:	2206      	movs	r2, #6
 80093de:	f7f6 fef7 	bl	80001d0 <memchr>
 80093e2:	2800      	cmp	r0, #0
 80093e4:	d03f      	beq.n	8009466 <_vfiprintf_r+0x20a>
 80093e6:	4b26      	ldr	r3, [pc, #152]	@ (8009480 <_vfiprintf_r+0x224>)
 80093e8:	bb1b      	cbnz	r3, 8009432 <_vfiprintf_r+0x1d6>
 80093ea:	9b03      	ldr	r3, [sp, #12]
 80093ec:	3307      	adds	r3, #7
 80093ee:	f023 0307 	bic.w	r3, r3, #7
 80093f2:	3308      	adds	r3, #8
 80093f4:	9303      	str	r3, [sp, #12]
 80093f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f8:	443b      	add	r3, r7
 80093fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80093fc:	e76a      	b.n	80092d4 <_vfiprintf_r+0x78>
 80093fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009402:	460c      	mov	r4, r1
 8009404:	2001      	movs	r0, #1
 8009406:	e7a8      	b.n	800935a <_vfiprintf_r+0xfe>
 8009408:	2300      	movs	r3, #0
 800940a:	3401      	adds	r4, #1
 800940c:	9305      	str	r3, [sp, #20]
 800940e:	4619      	mov	r1, r3
 8009410:	f04f 0c0a 	mov.w	ip, #10
 8009414:	4620      	mov	r0, r4
 8009416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800941a:	3a30      	subs	r2, #48	@ 0x30
 800941c:	2a09      	cmp	r2, #9
 800941e:	d903      	bls.n	8009428 <_vfiprintf_r+0x1cc>
 8009420:	2b00      	cmp	r3, #0
 8009422:	d0c6      	beq.n	80093b2 <_vfiprintf_r+0x156>
 8009424:	9105      	str	r1, [sp, #20]
 8009426:	e7c4      	b.n	80093b2 <_vfiprintf_r+0x156>
 8009428:	fb0c 2101 	mla	r1, ip, r1, r2
 800942c:	4604      	mov	r4, r0
 800942e:	2301      	movs	r3, #1
 8009430:	e7f0      	b.n	8009414 <_vfiprintf_r+0x1b8>
 8009432:	ab03      	add	r3, sp, #12
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	462a      	mov	r2, r5
 8009438:	4b12      	ldr	r3, [pc, #72]	@ (8009484 <_vfiprintf_r+0x228>)
 800943a:	a904      	add	r1, sp, #16
 800943c:	4630      	mov	r0, r6
 800943e:	f7fb fd47 	bl	8004ed0 <_printf_float>
 8009442:	4607      	mov	r7, r0
 8009444:	1c78      	adds	r0, r7, #1
 8009446:	d1d6      	bne.n	80093f6 <_vfiprintf_r+0x19a>
 8009448:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800944a:	07d9      	lsls	r1, r3, #31
 800944c:	d405      	bmi.n	800945a <_vfiprintf_r+0x1fe>
 800944e:	89ab      	ldrh	r3, [r5, #12]
 8009450:	059a      	lsls	r2, r3, #22
 8009452:	d402      	bmi.n	800945a <_vfiprintf_r+0x1fe>
 8009454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009456:	f7fc fd97 	bl	8005f88 <__retarget_lock_release_recursive>
 800945a:	89ab      	ldrh	r3, [r5, #12]
 800945c:	065b      	lsls	r3, r3, #25
 800945e:	f53f af1f 	bmi.w	80092a0 <_vfiprintf_r+0x44>
 8009462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009464:	e71e      	b.n	80092a4 <_vfiprintf_r+0x48>
 8009466:	ab03      	add	r3, sp, #12
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	462a      	mov	r2, r5
 800946c:	4b05      	ldr	r3, [pc, #20]	@ (8009484 <_vfiprintf_r+0x228>)
 800946e:	a904      	add	r1, sp, #16
 8009470:	4630      	mov	r0, r6
 8009472:	f7fb ffc5 	bl	8005400 <_printf_i>
 8009476:	e7e4      	b.n	8009442 <_vfiprintf_r+0x1e6>
 8009478:	08009795 	.word	0x08009795
 800947c:	0800979f 	.word	0x0800979f
 8009480:	08004ed1 	.word	0x08004ed1
 8009484:	08009239 	.word	0x08009239
 8009488:	0800979b 	.word	0x0800979b

0800948c <_raise_r>:
 800948c:	291f      	cmp	r1, #31
 800948e:	b538      	push	{r3, r4, r5, lr}
 8009490:	4605      	mov	r5, r0
 8009492:	460c      	mov	r4, r1
 8009494:	d904      	bls.n	80094a0 <_raise_r+0x14>
 8009496:	2316      	movs	r3, #22
 8009498:	6003      	str	r3, [r0, #0]
 800949a:	f04f 30ff 	mov.w	r0, #4294967295
 800949e:	bd38      	pop	{r3, r4, r5, pc}
 80094a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80094a2:	b112      	cbz	r2, 80094aa <_raise_r+0x1e>
 80094a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094a8:	b94b      	cbnz	r3, 80094be <_raise_r+0x32>
 80094aa:	4628      	mov	r0, r5
 80094ac:	f000 f830 	bl	8009510 <_getpid_r>
 80094b0:	4622      	mov	r2, r4
 80094b2:	4601      	mov	r1, r0
 80094b4:	4628      	mov	r0, r5
 80094b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094ba:	f000 b817 	b.w	80094ec <_kill_r>
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d00a      	beq.n	80094d8 <_raise_r+0x4c>
 80094c2:	1c59      	adds	r1, r3, #1
 80094c4:	d103      	bne.n	80094ce <_raise_r+0x42>
 80094c6:	2316      	movs	r3, #22
 80094c8:	6003      	str	r3, [r0, #0]
 80094ca:	2001      	movs	r0, #1
 80094cc:	e7e7      	b.n	800949e <_raise_r+0x12>
 80094ce:	2100      	movs	r1, #0
 80094d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80094d4:	4620      	mov	r0, r4
 80094d6:	4798      	blx	r3
 80094d8:	2000      	movs	r0, #0
 80094da:	e7e0      	b.n	800949e <_raise_r+0x12>

080094dc <raise>:
 80094dc:	4b02      	ldr	r3, [pc, #8]	@ (80094e8 <raise+0xc>)
 80094de:	4601      	mov	r1, r0
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	f7ff bfd3 	b.w	800948c <_raise_r>
 80094e6:	bf00      	nop
 80094e8:	2000002c 	.word	0x2000002c

080094ec <_kill_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4d07      	ldr	r5, [pc, #28]	@ (800950c <_kill_r+0x20>)
 80094f0:	2300      	movs	r3, #0
 80094f2:	4604      	mov	r4, r0
 80094f4:	4608      	mov	r0, r1
 80094f6:	4611      	mov	r1, r2
 80094f8:	602b      	str	r3, [r5, #0]
 80094fa:	f7f8 fb49 	bl	8001b90 <_kill>
 80094fe:	1c43      	adds	r3, r0, #1
 8009500:	d102      	bne.n	8009508 <_kill_r+0x1c>
 8009502:	682b      	ldr	r3, [r5, #0]
 8009504:	b103      	cbz	r3, 8009508 <_kill_r+0x1c>
 8009506:	6023      	str	r3, [r4, #0]
 8009508:	bd38      	pop	{r3, r4, r5, pc}
 800950a:	bf00      	nop
 800950c:	2000044c 	.word	0x2000044c

08009510 <_getpid_r>:
 8009510:	f7f8 bb36 	b.w	8001b80 <_getpid>

08009514 <_init>:
 8009514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009516:	bf00      	nop
 8009518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800951a:	bc08      	pop	{r3}
 800951c:	469e      	mov	lr, r3
 800951e:	4770      	bx	lr

08009520 <_fini>:
 8009520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009522:	bf00      	nop
 8009524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009526:	bc08      	pop	{r3}
 8009528:	469e      	mov	lr, r3
 800952a:	4770      	bx	lr
