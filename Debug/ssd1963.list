
ssd1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000172f4  0800a750  0800a750  0000b750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021a44  08021a44  00023244  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08021a44  08021a44  00022a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021a4c  08021a4c  00023244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021a4c  08021a4c  00022a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08021a50  08021a50  00022a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000244  20000000  08021a54  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00023244  2**0
                  CONTENTS
 10 .bss          000002f8  20000244  20000244  00023244  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000053c  2000053c  00023244  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00023244  2**0
                  CONTENTS, READONLY
 13 .debug_info   000104f0  00000000  00000000  00023274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002282  00000000  00000000  00033764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  000359e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c0c  00000000  00000000  00036958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e2a  00000000  00000000  00037564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d5e  00000000  00000000  0005a38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d282f  00000000  00000000  0006b0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013d91b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056c4  00000000  00000000  0013d960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00143024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000244 	.word	0x20000244
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a734 	.word	0x0800a734

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000248 	.word	0x20000248
 80001cc:	0800a734 	.word	0x0800a734

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <Lcd_Write_Cmd>:
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

void Lcd_Write_Cmd(uint16_t Cmd)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
   *(uint16_t *) (LCD_REG) = Cmd;
 800102a:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	8013      	strh	r3, [r2, #0]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <Lcd_Write_Data>:
////////////////////////
void Lcd_Write_Data(uint16_t data)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
   *(uint16_t *) (LCD_DATA)= data;
 800104a:	4a04      	ldr	r2, [pc, #16]	@ (800105c <Lcd_Write_Data+0x1c>)
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	8013      	strh	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	60020000 	.word	0x60020000

08001060 <LCD_Write_DATA>:


void LCD_Write_DATA(uint16_t data)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	80fb      	strh	r3, [r7, #6]
	 *(uint16_t *) (LCD_DATA)= data;
 800106a:	4a04      	ldr	r2, [pc, #16]	@ (800107c <LCD_Write_DATA+0x1c>)
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	8013      	strh	r3, [r2, #0]

}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	60020000 	.word	0x60020000

08001080 <LCD_Write_COM>:

void LCD_Write_COM(uint16_t data)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	80fb      	strh	r3, [r7, #6]
	*(uint16_t *) (LCD_REG) = data;
 800108a:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	8013      	strh	r3, [r2, #0]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <Lcd_SetArea>:
///////////////////
void Lcd_SetArea(uint16_t sx, uint16_t ex, uint16_t sy, uint16_t ey)
{
 800109e:	b590      	push	{r4, r7, lr}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4604      	mov	r4, r0
 80010a6:	4608      	mov	r0, r1
 80010a8:	4611      	mov	r1, r2
 80010aa:	461a      	mov	r2, r3
 80010ac:	4623      	mov	r3, r4
 80010ae:	80fb      	strh	r3, [r7, #6]
 80010b0:	4603      	mov	r3, r0
 80010b2:	80bb      	strh	r3, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	807b      	strh	r3, [r7, #2]
 80010b8:	4613      	mov	r3, r2
 80010ba:	803b      	strh	r3, [r7, #0]
Lcd_Write_Cmd(SSD1963_SET_COLUMN_ADDRESS);	
 80010bc:	202a      	movs	r0, #42	@ 0x2a
 80010be:	f7ff ffaf 	bl	8001020 <Lcd_Write_Cmd>
Lcd_Write_Data((sx >> 8) & 0xFF);
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ffb9 	bl	8001040 <Lcd_Write_Data>
Lcd_Write_Data((sx >> 0) & 0xFF);
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ffb3 	bl	8001040 <Lcd_Write_Data>
Lcd_Write_Data((ex >> 8) & 0xFF);
 80010da:	88bb      	ldrh	r3, [r7, #4]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ffad 	bl	8001040 <Lcd_Write_Data>
Lcd_Write_Data((ex >> 0) & 0xFF);
 80010e6:	88bb      	ldrh	r3, [r7, #4]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ffa7 	bl	8001040 <Lcd_Write_Data>

Lcd_Write_Cmd(SSD1963_SET_PAGE_ADDRESS);	
 80010f2:	202b      	movs	r0, #43	@ 0x2b
 80010f4:	f7ff ff94 	bl	8001020 <Lcd_Write_Cmd>
Lcd_Write_Data((sy >> 8) & 0xFF);
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	0a1b      	lsrs	r3, r3, #8
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff9e 	bl	8001040 <Lcd_Write_Data>
Lcd_Write_Data((sy >> 0) & 0xFF);
 8001104:	887b      	ldrh	r3, [r7, #2]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	b29b      	uxth	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff98 	bl	8001040 <Lcd_Write_Data>
Lcd_Write_Data((ey >> 8) & 0xFF);
 8001110:	883b      	ldrh	r3, [r7, #0]
 8001112:	0a1b      	lsrs	r3, r3, #8
 8001114:	b29b      	uxth	r3, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff92 	bl	8001040 <Lcd_Write_Data>
Lcd_Write_Data((ey >> 0) & 0xFF);
 800111c:	883b      	ldrh	r3, [r7, #0]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	b29b      	uxth	r3, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff8c 	bl	8001040 <Lcd_Write_Data>
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bd90      	pop	{r4, r7, pc}

08001130 <Lcd_SetPixel>:
                }
	}
}

void Lcd_SetPixel(int16_t x, int16_t y, int16_t color)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
 800113a:	460b      	mov	r3, r1
 800113c:	80bb      	strh	r3, [r7, #4]
 800113e:	4613      	mov	r3, r2
 8001140:	807b      	strh	r3, [r7, #2]
Lcd_SetArea(x, x, y, y);
 8001142:	88f8      	ldrh	r0, [r7, #6]
 8001144:	88f9      	ldrh	r1, [r7, #6]
 8001146:	88ba      	ldrh	r2, [r7, #4]
 8001148:	88bb      	ldrh	r3, [r7, #4]
 800114a:	f7ff ffa8 	bl	800109e <Lcd_SetArea>
Lcd_Write_Cmd(0x2c);
 800114e:	202c      	movs	r0, #44	@ 0x2c
 8001150:	f7ff ff66 	bl	8001020 <Lcd_Write_Cmd>
Lcd_Write_Data(color);
 8001154:	887b      	ldrh	r3, [r7, #2]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff72 	bl	8001040 <Lcd_Write_Data>
Lcd_Write_Cmd(0x0);
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff ff5f 	bl	8001020 <Lcd_Write_Cmd>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <Init_SSD1963>:


void Init_SSD1963(void)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	af00      	add	r7, sp, #0
//
//Lcd_Write_Cmd(0x2c);



LCD_Write_COM(0xE2);		//PLL multiplier, set PLL clock to 120M
 800116e:	20e2      	movs	r0, #226	@ 0xe2
 8001170:	f7ff ff86 	bl	8001080 <LCD_Write_COM>
LCD_Write_DATA(0x23);	    //N=0x36 for 6.5M, 0x23 for 10M crystal
 8001174:	2023      	movs	r0, #35	@ 0x23
 8001176:	f7ff ff73 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x02);
 800117a:	2002      	movs	r0, #2
 800117c:	f7ff ff70 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x04);
 8001180:	2004      	movs	r0, #4
 8001182:	f7ff ff6d 	bl	8001060 <LCD_Write_DATA>
LCD_Write_COM(0xE0);		// PLL enable
 8001186:	20e0      	movs	r0, #224	@ 0xe0
 8001188:	f7ff ff7a 	bl	8001080 <LCD_Write_COM>
LCD_Write_DATA(0x01);
 800118c:	2001      	movs	r0, #1
 800118e:	f7ff ff67 	bl	8001060 <LCD_Write_DATA>
HAL_Delay(10);
 8001192:	200a      	movs	r0, #10
 8001194:	f002 fff0 	bl	8004178 <HAL_Delay>
LCD_Write_COM(0xE0);
 8001198:	20e0      	movs	r0, #224	@ 0xe0
 800119a:	f7ff ff71 	bl	8001080 <LCD_Write_COM>
LCD_Write_DATA(0x03);
 800119e:	2003      	movs	r0, #3
 80011a0:	f7ff ff5e 	bl	8001060 <LCD_Write_DATA>
HAL_Delay(10);
 80011a4:	200a      	movs	r0, #10
 80011a6:	f002 ffe7 	bl	8004178 <HAL_Delay>
LCD_Write_COM(0x01);		// software reset
 80011aa:	2001      	movs	r0, #1
 80011ac:	f7ff ff68 	bl	8001080 <LCD_Write_COM>
HAL_Delay(100);
 80011b0:	2064      	movs	r0, #100	@ 0x64
 80011b2:	f002 ffe1 	bl	8004178 <HAL_Delay>
LCD_Write_COM(0xE6);		//PLL setting for PCLK, depends on resolution
 80011b6:	20e6      	movs	r0, #230	@ 0xe6
 80011b8:	f7ff ff62 	bl	8001080 <LCD_Write_COM>
LCD_Write_DATA(0x04);
 80011bc:	2004      	movs	r0, #4
 80011be:	f7ff ff4f 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x93);
 80011c2:	2093      	movs	r0, #147	@ 0x93
 80011c4:	f7ff ff4c 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0xE0);
 80011c8:	20e0      	movs	r0, #224	@ 0xe0
 80011ca:	f7ff ff49 	bl	8001060 <LCD_Write_DATA>

LCD_Write_COM(0xB0);		//LCD SPECIFICATION
 80011ce:	20b0      	movs	r0, #176	@ 0xb0
 80011d0:	f7ff ff56 	bl	8001080 <LCD_Write_COM>
LCD_Write_DATA(0x00);	// 0x24
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff ff43 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff ff40 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x03);		//Set HDP	799
 80011e0:	2003      	movs	r0, #3
 80011e2:	f7ff ff3d 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x1F);
 80011e6:	201f      	movs	r0, #31
 80011e8:	f7ff ff3a 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x01);		//Set VDP	479
 80011ec:	2001      	movs	r0, #1
 80011ee:	f7ff ff37 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0xDF);
 80011f2:	20df      	movs	r0, #223	@ 0xdf
 80011f4:	f7ff ff34 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff ff31 	bl	8001060 <LCD_Write_DATA>

LCD_Write_COM(0xB4);		//HSYNC
 80011fe:	20b4      	movs	r0, #180	@ 0xb4
 8001200:	f7ff ff3e 	bl	8001080 <LCD_Write_COM>
LCD_Write_DATA(0x03);		//Set HT	928
 8001204:	2003      	movs	r0, #3
 8001206:	f7ff ff2b 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0xA0);
 800120a:	20a0      	movs	r0, #160	@ 0xa0
 800120c:	f7ff ff28 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set HPS	46
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff ff25 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x2E);
 8001216:	202e      	movs	r0, #46	@ 0x2e
 8001218:	f7ff ff22 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x30);		//Set HPW	48
 800121c:	2030      	movs	r0, #48	@ 0x30
 800121e:	f7ff ff1f 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set LPS	15
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff ff1c 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x0F);
 8001228:	200f      	movs	r0, #15
 800122a:	f7ff ff19 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff ff16 	bl	8001060 <LCD_Write_DATA>

LCD_Write_COM(0xB6);		//VSYNC
 8001234:	20b6      	movs	r0, #182	@ 0xb6
 8001236:	f7ff ff23 	bl	8001080 <LCD_Write_COM>
LCD_Write_DATA(0x02);		//Set VT	525
 800123a:	2002      	movs	r0, #2
 800123c:	f7ff ff10 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x0D);
 8001240:	200d      	movs	r0, #13
 8001242:	f7ff ff0d 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set VPS	16
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff ff0a 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x10);
 800124c:	2010      	movs	r0, #16
 800124e:	f7ff ff07 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x10);		//Set VPW	16
 8001252:	2010      	movs	r0, #16
 8001254:	f7ff ff04 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set FPS	8
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff ff01 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x08);
 800125e:	2008      	movs	r0, #8
 8001260:	f7ff fefe 	bl	8001060 <LCD_Write_DATA>

LCD_Write_COM(0xBA);
 8001264:	20ba      	movs	r0, #186	@ 0xba
 8001266:	f7ff ff0b 	bl	8001080 <LCD_Write_COM>
LCD_Write_DATA(0x05);		//GPIO[3:0] out 1
 800126a:	2005      	movs	r0, #5
 800126c:	f7ff fef8 	bl	8001060 <LCD_Write_DATA>

LCD_Write_COM(0xB8);
 8001270:	20b8      	movs	r0, #184	@ 0xb8
 8001272:	f7ff ff05 	bl	8001080 <LCD_Write_COM>
LCD_Write_DATA(0x07);	    //GPIO3=input, GPIO[2:0]=output
 8001276:	2007      	movs	r0, #7
 8001278:	f7ff fef2 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x01);		//GPIO0 normal
 800127c:	2001      	movs	r0, #1
 800127e:	f7ff feef 	bl	8001060 <LCD_Write_DATA>

//LCD_Write_COM(0x36);		//rotation
//LCD_Write_DATA(0x21);		// -- Set to 0x22 to rotate 180 degrees 0x21

LCD_Write_COM(0xba);		//rotation
 8001282:	20ba      	movs	r0, #186	@ 0xba
 8001284:	f7ff fefc 	bl	8001080 <LCD_Write_COM>
LCD_Write_DATA(0x01);		// -- Set to 0x22 to rotate 180 degrees 0x21
 8001288:	2001      	movs	r0, #1
 800128a:	f7ff fee9 	bl	8001060 <LCD_Write_DATA>


LCD_Write_COM(0xF0);		//pixel data interface
 800128e:	20f0      	movs	r0, #240	@ 0xf0
 8001290:	f7ff fef6 	bl	8001080 <LCD_Write_COM>
LCD_Write_DATA(0x03);
 8001294:	2003      	movs	r0, #3
 8001296:	f7ff fee3 	bl	8001060 <LCD_Write_DATA>


HAL_Delay(10);
 800129a:	200a      	movs	r0, #10
 800129c:	f002 ff6c 	bl	8004178 <HAL_Delay>
//Lcd_Write_Data(0x00);//SET start page address=0
//Lcd_Write_Data(0x00);
//Lcd_Write_Data(0x01);//SET end page address=479
//Lcd_Write_Data(0xdf);  //1f

LCD_Write_COM(0x29);		//display on
 80012a0:	2029      	movs	r0, #41	@ 0x29
 80012a2:	f7ff feed 	bl	8001080 <LCD_Write_COM>

LCD_Write_COM(0xBE);		//set PWM for B/L
 80012a6:	20be      	movs	r0, #190	@ 0xbe
 80012a8:	f7ff feea 	bl	8001080 <LCD_Write_COM>
LCD_Write_DATA(0x06);
 80012ac:	2006      	movs	r0, #6
 80012ae:	f7ff fed7 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0xF0);
 80012b2:	20f0      	movs	r0, #240	@ 0xf0
 80012b4:	f7ff fed4 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x01);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f7ff fed1 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0xF0);
 80012be:	20f0      	movs	r0, #240	@ 0xf0
 80012c0:	f7ff fece 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff fecb 	bl	8001060 <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff fec8 	bl	8001060 <LCD_Write_DATA>

LCD_Write_COM(0xD0);
 80012d0:	20d0      	movs	r0, #208	@ 0xd0
 80012d2:	f7ff fed5 	bl	8001080 <LCD_Write_COM>
LCD_Write_DATA(0x0D);
 80012d6:	200d      	movs	r0, #13
 80012d8:	f7ff fec2 	bl	8001060 <LCD_Write_DATA>

LCD_Write_COM(0x2C);
 80012dc:	202c      	movs	r0, #44	@ 0x2c
 80012de:	f7ff fecf 	bl	8001080 <LCD_Write_COM>


}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <TFT_Send_Cmd>:
//===========================================================================
//===========================================================================
//�-��� ��� �������� ������
//static __inline  - not work before define of function 
void 	TFT_Send_Cmd(uint8_t index)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	71fb      	strb	r3, [r7, #7]
	*(uint8_t *) (LCD_REG) = index;	  
 80012f0:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	7013      	strb	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <TFT_Write_Data>:

//�-��� ��� �������� ������
void TFT_Write_Data(uint16_t data)
{   
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
    *(uint16_t *) (LCD_DATA) = data; 	
 800130e:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <TFT_Write_Data+0x1c>)
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	8013      	strh	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	60020000 	.word	0x60020000

08001324 <TFT_Set_X>:
//�-��� ������������� ������� ������� �� X
void TFT_Set_X(uint16_t start_x,uint16_t end_x)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	460a      	mov	r2, r1
 800132e:	80fb      	strh	r3, [r7, #6]
 8001330:	4613      	mov	r3, r2
 8001332:	80bb      	strh	r3, [r7, #4]
	TFT_Send_Cmd(0x002A);
 8001334:	202a      	movs	r0, #42	@ 0x2a
 8001336:	f7ff ffd6 	bl	80012e6 <TFT_Send_Cmd>
	TFT_Write_Data(start_x>>8);
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	b29b      	uxth	r3, r3
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ffdf 	bl	8001304 <TFT_Write_Data>
	TFT_Write_Data(start_x&0x00ff);
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	b29b      	uxth	r3, r3
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ffd9 	bl	8001304 <TFT_Write_Data>
	
	TFT_Write_Data(end_x>>8);
 8001352:	88bb      	ldrh	r3, [r7, #4]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	b29b      	uxth	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ffd3 	bl	8001304 <TFT_Write_Data>
	TFT_Write_Data(end_x&0x00ff);
 800135e:	88bb      	ldrh	r3, [r7, #4]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ffcd 	bl	8001304 <TFT_Write_Data>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <TFT_Set_Y>:

//�-��� ������������� ������� ������� �� Y
void TFT_Set_Y(uint16_t start_y,uint16_t end_y)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	460a      	mov	r2, r1
 800137c:	80fb      	strh	r3, [r7, #6]
 800137e:	4613      	mov	r3, r2
 8001380:	80bb      	strh	r3, [r7, #4]
	TFT_Send_Cmd(0x002B);
 8001382:	202b      	movs	r0, #43	@ 0x2b
 8001384:	f7ff ffaf 	bl	80012e6 <TFT_Send_Cmd>
	TFT_Write_Data(start_y>>8);
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	0a1b      	lsrs	r3, r3, #8
 800138c:	b29b      	uxth	r3, r3
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ffb8 	bl	8001304 <TFT_Write_Data>
	TFT_Write_Data(start_y&0x00ff);
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	b29b      	uxth	r3, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ffb2 	bl	8001304 <TFT_Write_Data>
	
	TFT_Write_Data(end_y>>8);
 80013a0:	88bb      	ldrh	r3, [r7, #4]
 80013a2:	0a1b      	lsrs	r3, r3, #8
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ffac 	bl	8001304 <TFT_Write_Data>
	TFT_Write_Data(end_y&0x00ff);
 80013ac:	88bb      	ldrh	r3, [r7, #4]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ffa6 	bl	8001304 <TFT_Write_Data>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <TFT_Set_Work_Area>:
}


//�-���  ������ ���������� ������� �������
void TFT_Set_Work_Area(uint16_t x, uint16_t y, uint16_t length, uint16_t width)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4604      	mov	r4, r0
 80013c8:	4608      	mov	r0, r1
 80013ca:	4611      	mov	r1, r2
 80013cc:	461a      	mov	r2, r3
 80013ce:	4623      	mov	r3, r4
 80013d0:	80fb      	strh	r3, [r7, #6]
 80013d2:	4603      	mov	r3, r0
 80013d4:	80bb      	strh	r3, [r7, #4]
 80013d6:	460b      	mov	r3, r1
 80013d8:	807b      	strh	r3, [r7, #2]
 80013da:	4613      	mov	r3, r2
 80013dc:	803b      	strh	r3, [r7, #0]
	TFT_Set_X(x, x+length-1);
 80013de:	88fa      	ldrh	r2, [r7, #6]
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	4413      	add	r3, r2
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	3b01      	subs	r3, #1
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff98 	bl	8001324 <TFT_Set_X>
	TFT_Set_Y(y, y+width-1);
 80013f4:	88ba      	ldrh	r2, [r7, #4]
 80013f6:	883b      	ldrh	r3, [r7, #0]
 80013f8:	4413      	add	r3, r2
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	3b01      	subs	r3, #1
 80013fe:	b29a      	uxth	r2, r3
 8001400:	88bb      	ldrh	r3, [r7, #4]
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ffb4 	bl	8001372 <TFT_Set_Y>
	TFT_Send_Cmd(0x2C);
 800140a:	202c      	movs	r0, #44	@ 0x2c
 800140c:	f7ff ff6b 	bl	80012e6 <TFT_Send_Cmd>
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bd90      	pop	{r4, r7, pc}

08001418 <TFT_Clear_Screen>:


void TFT_Clear_Screen(uint16_t color)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]
	uint32_t i=0;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
	TFT_Set_Work_Area(0,0,800,480);
 8001426:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800142a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800142e:	2100      	movs	r1, #0
 8001430:	2000      	movs	r0, #0
 8001432:	f7ff ffc5 	bl	80013c0 <TFT_Set_Work_Area>
	for(i=0; i < 384000; i++)
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	e006      	b.n	800144a <TFT_Clear_Screen+0x32>
	{
		TFT_Write_Data(color);	//������� ��������� �����
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff60 	bl	8001304 <TFT_Write_Data>
	for(i=0; i < 384000; i++)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3301      	adds	r3, #1
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4a03      	ldr	r2, [pc, #12]	@ (800145c <TFT_Clear_Screen+0x44>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d9f4      	bls.n	800143c <TFT_Clear_Screen+0x24>
	}
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	0005dbff 	.word	0x0005dbff

08001460 <TFT_Draw_HLine>:
	}
}

//�-��� ������ �������������� �����, ��������� �����, ������� � �����
void TFT_Draw_HLine(uint16_t x, uint16_t y, uint16_t length, uint16_t size, uint16_t color)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	4604      	mov	r4, r0
 8001468:	4608      	mov	r0, r1
 800146a:	4611      	mov	r1, r2
 800146c:	461a      	mov	r2, r3
 800146e:	4623      	mov	r3, r4
 8001470:	80fb      	strh	r3, [r7, #6]
 8001472:	4603      	mov	r3, r0
 8001474:	80bb      	strh	r3, [r7, #4]
 8001476:	460b      	mov	r3, r1
 8001478:	807b      	strh	r3, [r7, #2]
 800147a:	4613      	mov	r3, r2
 800147c:	803b      	strh	r3, [r7, #0]
	uint16_t i=0;
 800147e:	2300      	movs	r3, #0
 8001480:	81fb      	strh	r3, [r7, #14]
	
	TFT_Set_Work_Area(x,y,length,size);
 8001482:	883b      	ldrh	r3, [r7, #0]
 8001484:	887a      	ldrh	r2, [r7, #2]
 8001486:	88b9      	ldrh	r1, [r7, #4]
 8001488:	88f8      	ldrh	r0, [r7, #6]
 800148a:	f7ff ff99 	bl	80013c0 <TFT_Set_Work_Area>
	for(i=0; i<(length*size); i++)
 800148e:	2300      	movs	r3, #0
 8001490:	81fb      	strh	r3, [r7, #14]
 8001492:	e006      	b.n	80014a2 <TFT_Draw_HLine+0x42>
	TFT_Write_Data(color);
 8001494:	8c3b      	ldrh	r3, [r7, #32]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff ff34 	bl	8001304 <TFT_Write_Data>
	for(i=0; i<(length*size); i++)
 800149c:	89fb      	ldrh	r3, [r7, #14]
 800149e:	3301      	adds	r3, #1
 80014a0:	81fb      	strh	r3, [r7, #14]
 80014a2:	89fa      	ldrh	r2, [r7, #14]
 80014a4:	887b      	ldrh	r3, [r7, #2]
 80014a6:	8839      	ldrh	r1, [r7, #0]
 80014a8:	fb01 f303 	mul.w	r3, r1, r3
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbf1      	blt.n	8001494 <TFT_Draw_HLine+0x34>
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd90      	pop	{r4, r7, pc}

080014ba <TFT_Draw_VLine>:

//�-��� ������ ������������ �����, ��������� �����, ������� � �����
void TFT_Draw_VLine(uint16_t x, uint16_t y, uint16_t length, uint16_t size, uint16_t color)
{
 80014ba:	b590      	push	{r4, r7, lr}
 80014bc:	b085      	sub	sp, #20
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4604      	mov	r4, r0
 80014c2:	4608      	mov	r0, r1
 80014c4:	4611      	mov	r1, r2
 80014c6:	461a      	mov	r2, r3
 80014c8:	4623      	mov	r3, r4
 80014ca:	80fb      	strh	r3, [r7, #6]
 80014cc:	4603      	mov	r3, r0
 80014ce:	80bb      	strh	r3, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
 80014d4:	4613      	mov	r3, r2
 80014d6:	803b      	strh	r3, [r7, #0]
	uint16_t i=0;
 80014d8:	2300      	movs	r3, #0
 80014da:	81fb      	strh	r3, [r7, #14]
	
	TFT_Set_Work_Area(x,y,size,length);
 80014dc:	887b      	ldrh	r3, [r7, #2]
 80014de:	883a      	ldrh	r2, [r7, #0]
 80014e0:	88b9      	ldrh	r1, [r7, #4]
 80014e2:	88f8      	ldrh	r0, [r7, #6]
 80014e4:	f7ff ff6c 	bl	80013c0 <TFT_Set_Work_Area>
	for(i=0; i<(length*size); i++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	81fb      	strh	r3, [r7, #14]
 80014ec:	e006      	b.n	80014fc <TFT_Draw_VLine+0x42>
	TFT_Write_Data(color);
 80014ee:	8c3b      	ldrh	r3, [r7, #32]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff07 	bl	8001304 <TFT_Write_Data>
	for(i=0; i<(length*size); i++)
 80014f6:	89fb      	ldrh	r3, [r7, #14]
 80014f8:	3301      	adds	r3, #1
 80014fa:	81fb      	strh	r3, [r7, #14]
 80014fc:	89fa      	ldrh	r2, [r7, #14]
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	8839      	ldrh	r1, [r7, #0]
 8001502:	fb01 f303 	mul.w	r3, r1, r3
 8001506:	429a      	cmp	r2, r3
 8001508:	dbf1      	blt.n	80014ee <TFT_Draw_VLine+0x34>
}
 800150a:	bf00      	nop
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	bd90      	pop	{r4, r7, pc}

08001514 <TFT_Draw_Fill_Rectangle>:
	TFT_Draw_VLine(x + length - size, y, width, size, color);
}

//�-��� ������ ����������� �������������, ��������� �����, ������, �����
void TFT_Draw_Fill_Rectangle(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t color)
{
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	4604      	mov	r4, r0
 800151c:	4608      	mov	r0, r1
 800151e:	4611      	mov	r1, r2
 8001520:	461a      	mov	r2, r3
 8001522:	4623      	mov	r3, r4
 8001524:	80fb      	strh	r3, [r7, #6]
 8001526:	4603      	mov	r3, r0
 8001528:	80bb      	strh	r3, [r7, #4]
 800152a:	460b      	mov	r3, r1
 800152c:	807b      	strh	r3, [r7, #2]
 800152e:	4613      	mov	r3, r2
 8001530:	803b      	strh	r3, [r7, #0]
	uint32_t i=0;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
	
	TFT_Set_Work_Area(x,y,length, width);
 8001536:	883b      	ldrh	r3, [r7, #0]
 8001538:	887a      	ldrh	r2, [r7, #2]
 800153a:	88b9      	ldrh	r1, [r7, #4]
 800153c:	88f8      	ldrh	r0, [r7, #6]
 800153e:	f7ff ff3f 	bl	80013c0 <TFT_Set_Work_Area>
	for(i=0; i < length*width; i++)
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	e006      	b.n	8001556 <TFT_Draw_Fill_Rectangle+0x42>
	{
		TFT_Write_Data(color);	//������� ��������� �����
 8001548:	8c3b      	ldrh	r3, [r7, #32]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff feda 	bl	8001304 <TFT_Write_Data>
	for(i=0; i < length*width; i++)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	3301      	adds	r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	887b      	ldrh	r3, [r7, #2]
 8001558:	883a      	ldrh	r2, [r7, #0]
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	461a      	mov	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4293      	cmp	r3, r2
 8001564:	d3f0      	bcc.n	8001548 <TFT_Draw_Fill_Rectangle+0x34>
	}
}
 8001566:	bf00      	nop
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	bd90      	pop	{r4, r7, pc}

08001570 <TFT_Draw_Fill_Triangle_Simple>:


void TFT_Draw_Fill_Triangle_Simple(uint16_t x, uint16_t y,
                                   uint16_t width, uint16_t height,
                                   uint8_t size, uint16_t color)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b087      	sub	sp, #28
 8001574:	af02      	add	r7, sp, #8
 8001576:	4604      	mov	r4, r0
 8001578:	4608      	mov	r0, r1
 800157a:	4611      	mov	r1, r2
 800157c:	461a      	mov	r2, r3
 800157e:	4623      	mov	r3, r4
 8001580:	80fb      	strh	r3, [r7, #6]
 8001582:	4603      	mov	r3, r0
 8001584:	80bb      	strh	r3, [r7, #4]
 8001586:	460b      	mov	r3, r1
 8001588:	807b      	strh	r3, [r7, #2]
 800158a:	4613      	mov	r3, r2
 800158c:	803b      	strh	r3, [r7, #0]
    for (uint16_t i = 0; i <= height; i++)
 800158e:	2300      	movs	r3, #0
 8001590:	81fb      	strh	r3, [r7, #14]
 8001592:	e022      	b.n	80015da <TFT_Draw_Fill_Triangle_Simple+0x6a>
    {
        // para cada linha i, a largura cresce de 0 até width
        uint16_t w = (uint32_t)width * i / height;
 8001594:	887b      	ldrh	r3, [r7, #2]
 8001596:	89fa      	ldrh	r2, [r7, #14]
 8001598:	fb03 f202 	mul.w	r2, r3, r2
 800159c:	883b      	ldrh	r3, [r7, #0]
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	81bb      	strh	r3, [r7, #12]
        // desloca de forma a manter o triângulo centrado na caixa
        uint16_t x0 = x + (width - w) / 2;
 80015a4:	887a      	ldrh	r2, [r7, #2]
 80015a6:	89bb      	ldrh	r3, [r7, #12]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	0fda      	lsrs	r2, r3, #31
 80015ac:	4413      	add	r3, r2
 80015ae:	105b      	asrs	r3, r3, #1
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	4413      	add	r3, r2
 80015b6:	817b      	strh	r3, [r7, #10]
        TFT_Draw_HLine(x0, y + i, w, size, color);
 80015b8:	88ba      	ldrh	r2, [r7, #4]
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	4413      	add	r3, r2
 80015be:	b299      	uxth	r1, r3
 80015c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015c4:	b29c      	uxth	r4, r3
 80015c6:	89ba      	ldrh	r2, [r7, #12]
 80015c8:	8978      	ldrh	r0, [r7, #10]
 80015ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	4623      	mov	r3, r4
 80015d0:	f7ff ff46 	bl	8001460 <TFT_Draw_HLine>
    for (uint16_t i = 0; i <= height; i++)
 80015d4:	89fb      	ldrh	r3, [r7, #14]
 80015d6:	3301      	adds	r3, #1
 80015d8:	81fb      	strh	r3, [r7, #14]
 80015da:	89fa      	ldrh	r2, [r7, #14]
 80015dc:	883b      	ldrh	r3, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d9d8      	bls.n	8001594 <TFT_Draw_Fill_Triangle_Simple+0x24>
    }
}
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd90      	pop	{r4, r7, pc}

080015ec <TFT_Draw_Fill_Triangle_Inverted_Simple>:
// Preenche um triângulo isósceles apontando para baixo
// mesma convenção de parâmetros, mas base no topo
void TFT_Draw_Fill_Triangle_Inverted_Simple(uint16_t x, uint16_t y,
                                            uint16_t width, uint16_t height,
                                            uint8_t size, uint16_t color)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	4604      	mov	r4, r0
 80015f4:	4608      	mov	r0, r1
 80015f6:	4611      	mov	r1, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	4623      	mov	r3, r4
 80015fc:	80fb      	strh	r3, [r7, #6]
 80015fe:	4603      	mov	r3, r0
 8001600:	80bb      	strh	r3, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	807b      	strh	r3, [r7, #2]
 8001606:	4613      	mov	r3, r2
 8001608:	803b      	strh	r3, [r7, #0]
    for (uint16_t i = 0; i <= height; i++)
 800160a:	2300      	movs	r3, #0
 800160c:	81fb      	strh	r3, [r7, #14]
 800160e:	e024      	b.n	800165a <TFT_Draw_Fill_Triangle_Inverted_Simple+0x6e>
    {
        // aqui a largura decresce de width até 0
        uint16_t w = (uint32_t)width * (height - i) / height;
 8001610:	887b      	ldrh	r3, [r7, #2]
 8001612:	8839      	ldrh	r1, [r7, #0]
 8001614:	89fa      	ldrh	r2, [r7, #14]
 8001616:	1a8a      	subs	r2, r1, r2
 8001618:	fb03 f202 	mul.w	r2, r3, r2
 800161c:	883b      	ldrh	r3, [r7, #0]
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	81bb      	strh	r3, [r7, #12]
        uint16_t x0 = x + (width - w) / 2;
 8001624:	887a      	ldrh	r2, [r7, #2]
 8001626:	89bb      	ldrh	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	0fda      	lsrs	r2, r3, #31
 800162c:	4413      	add	r3, r2
 800162e:	105b      	asrs	r3, r3, #1
 8001630:	b29a      	uxth	r2, r3
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	4413      	add	r3, r2
 8001636:	817b      	strh	r3, [r7, #10]
        TFT_Draw_HLine(x0, y + i, w, size, color);
 8001638:	88ba      	ldrh	r2, [r7, #4]
 800163a:	89fb      	ldrh	r3, [r7, #14]
 800163c:	4413      	add	r3, r2
 800163e:	b299      	uxth	r1, r3
 8001640:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001644:	b29c      	uxth	r4, r3
 8001646:	89ba      	ldrh	r2, [r7, #12]
 8001648:	8978      	ldrh	r0, [r7, #10]
 800164a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	4623      	mov	r3, r4
 8001650:	f7ff ff06 	bl	8001460 <TFT_Draw_HLine>
    for (uint16_t i = 0; i <= height; i++)
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	3301      	adds	r3, #1
 8001658:	81fb      	strh	r3, [r7, #14]
 800165a:	89fa      	ldrh	r2, [r7, #14]
 800165c:	883b      	ldrh	r3, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d9d6      	bls.n	8001610 <TFT_Draw_Fill_Triangle_Inverted_Simple+0x24>
    }
}
 8001662:	bf00      	nop
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}

0800166c <TFT_Draw_Circle>:
}

//�-��� ������ ���������� ������� �������, ������ �������� ������� � ��������� ������, ����� �������� 
//������ ���������� ������ ������ ��� ����� ���������� �������� fill ������ �������, ����� ����
void TFT_Draw_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint16_t color)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b089      	sub	sp, #36	@ 0x24
 8001670:	af02      	add	r7, sp, #8
 8001672:	4604      	mov	r4, r0
 8001674:	4608      	mov	r0, r1
 8001676:	4611      	mov	r1, r2
 8001678:	461a      	mov	r2, r3
 800167a:	4623      	mov	r3, r4
 800167c:	80fb      	strh	r3, [r7, #6]
 800167e:	4603      	mov	r3, r0
 8001680:	80bb      	strh	r3, [r7, #4]
 8001682:	460b      	mov	r3, r1
 8001684:	70fb      	strb	r3, [r7, #3]
 8001686:	4613      	mov	r3, r2
 8001688:	70bb      	strb	r3, [r7, #2]
	int a_,b_,P;
	a_ = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
	b_ = radius;
 800168e:	78fb      	ldrb	r3, [r7, #3]
 8001690:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	f1c3 0301 	rsb	r3, r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 800169a:	e0fc      	b.n	8001896 <TFT_Draw_Circle+0x22a>
	{
		if(fill == 1)
 800169c:	78bb      	ldrb	r3, [r7, #2]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d136      	bne.n	8001710 <TFT_Draw_Circle+0xa4>
		{
			TFT_Draw_Fill_Rectangle(x-a_,y-b_,2*a_+1,2*b_+1,color);
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	88fa      	ldrh	r2, [r7, #6]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	b298      	uxth	r0, r3
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	88ba      	ldrh	r2, [r7, #4]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	b299      	uxth	r1, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	b29b      	uxth	r3, r3
 80016be:	3301      	adds	r3, #1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	3301      	adds	r3, #1
 80016cc:	b29c      	uxth	r4, r3
 80016ce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	4623      	mov	r3, r4
 80016d4:	f7ff ff1e 	bl	8001514 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-b_,y-a_,2*b_+1,2*a_+1,color);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	88fa      	ldrh	r2, [r7, #6]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	b298      	uxth	r0, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	88ba      	ldrh	r2, [r7, #4]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	b299      	uxth	r1, r3
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3301      	adds	r3, #1
 8001702:	b29c      	uxth	r4, r3
 8001704:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	4623      	mov	r3, r4
 800170a:	f7ff ff03 	bl	8001514 <TFT_Draw_Fill_Rectangle>
 800170e:	e0a7      	b.n	8001860 <TFT_Draw_Circle+0x1f4>
		}
		else
		{
			TFT_Draw_Fill_Rectangle(a_+x, b_+y, size, size, color);
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	b29a      	uxth	r2, r3
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	4413      	add	r3, r2
 8001718:	b298      	uxth	r0, r3
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	b29a      	uxth	r2, r3
 800171e:	88bb      	ldrh	r3, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	b299      	uxth	r1, r3
 8001724:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001728:	b29a      	uxth	r2, r3
 800172a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800172e:	b29c      	uxth	r4, r3
 8001730:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	4623      	mov	r3, r4
 8001736:	f7ff feed 	bl	8001514 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(b_+x, a_+y, size, size, color);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	b29a      	uxth	r2, r3
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	4413      	add	r3, r2
 8001742:	b298      	uxth	r0, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	b29a      	uxth	r2, r3
 8001748:	88bb      	ldrh	r3, [r7, #4]
 800174a:	4413      	add	r3, r2
 800174c:	b299      	uxth	r1, r3
 800174e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001752:	b29a      	uxth	r2, r3
 8001754:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001758:	b29c      	uxth	r4, r3
 800175a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	4623      	mov	r3, r4
 8001760:	f7ff fed8 	bl	8001514 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-a_, b_+y, size, size, color);
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	b29b      	uxth	r3, r3
 8001768:	88fa      	ldrh	r2, [r7, #6]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	b298      	uxth	r0, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	b29a      	uxth	r2, r3
 8001772:	88bb      	ldrh	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	b299      	uxth	r1, r3
 8001778:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800177c:	b29a      	uxth	r2, r3
 800177e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001782:	b29c      	uxth	r4, r3
 8001784:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	4623      	mov	r3, r4
 800178a:	f7ff fec3 	bl	8001514 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-b_, a_+y, size, size, color);
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	b29b      	uxth	r3, r3
 8001792:	88fa      	ldrh	r2, [r7, #6]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	b298      	uxth	r0, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	b29a      	uxth	r2, r3
 800179c:	88bb      	ldrh	r3, [r7, #4]
 800179e:	4413      	add	r3, r2
 80017a0:	b299      	uxth	r1, r3
 80017a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017ac:	b29c      	uxth	r4, r3
 80017ae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	4623      	mov	r3, r4
 80017b4:	f7ff feae 	bl	8001514 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(b_+x, y-a_, size, size, color);
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	4413      	add	r3, r2
 80017c0:	b298      	uxth	r0, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	88ba      	ldrh	r2, [r7, #4]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	b299      	uxth	r1, r3
 80017cc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017d6:	b29c      	uxth	r4, r3
 80017d8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	4623      	mov	r3, r4
 80017de:	f7ff fe99 	bl	8001514 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(a_+x, y-b_, size, size, color);
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	4413      	add	r3, r2
 80017ea:	b298      	uxth	r0, r3
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	88ba      	ldrh	r2, [r7, #4]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	b299      	uxth	r1, r3
 80017f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001800:	b29c      	uxth	r4, r3
 8001802:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	4623      	mov	r3, r4
 8001808:	f7ff fe84 	bl	8001514 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-a_, y-b_, size, size, color);
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	b29b      	uxth	r3, r3
 8001810:	88fa      	ldrh	r2, [r7, #6]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	b298      	uxth	r0, r3
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	b29b      	uxth	r3, r3
 800181a:	88ba      	ldrh	r2, [r7, #4]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	b299      	uxth	r1, r3
 8001820:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001824:	b29a      	uxth	r2, r3
 8001826:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800182a:	b29c      	uxth	r4, r3
 800182c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	4623      	mov	r3, r4
 8001832:	f7ff fe6f 	bl	8001514 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-b_, y-a_, size, size, color);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	b29b      	uxth	r3, r3
 800183a:	88fa      	ldrh	r2, [r7, #6]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	b298      	uxth	r0, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	b29b      	uxth	r3, r3
 8001844:	88ba      	ldrh	r2, [r7, #4]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	b299      	uxth	r1, r3
 800184a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800184e:	b29a      	uxth	r2, r3
 8001850:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001854:	b29c      	uxth	r4, r3
 8001856:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	4623      	mov	r3, r4
 800185c:	f7ff fe5a 	bl	8001514 <TFT_Draw_Fill_Rectangle>
		}
		if (P < 0 )
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	da09      	bge.n	800187a <TFT_Draw_Circle+0x20e>
		{
			P = (P + 3) + (2* a_);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1cda      	adds	r2, r3, #3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
			a_ ++;
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	3301      	adds	r3, #1
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	e00d      	b.n	8001896 <TFT_Draw_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2* (a_ - b_));
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1d5a      	adds	r2, r3, #5
 800187e:	6979      	ldr	r1, [r7, #20]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1acb      	subs	r3, r1, r3
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
			a_ ++;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3301      	adds	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
			b_ --;
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	3b01      	subs	r3, #1
 8001894:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	429a      	cmp	r2, r3
 800189c:	f77f aefe 	ble.w	800169c <TFT_Draw_Circle+0x30>
		}
	}
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}

080018aa <TFT_Draw_Circle_Helper>:

//��������������� �-��� ��� ����������� ���� ��������������
void TFT_Draw_Circle_Helper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint16_t color)
{
 80018aa:	b590      	push	{r4, r7, lr}
 80018ac:	b089      	sub	sp, #36	@ 0x24
 80018ae:	af02      	add	r7, sp, #8
 80018b0:	4604      	mov	r4, r0
 80018b2:	4608      	mov	r0, r1
 80018b4:	4611      	mov	r1, r2
 80018b6:	461a      	mov	r2, r3
 80018b8:	4623      	mov	r3, r4
 80018ba:	80fb      	strh	r3, [r7, #6]
 80018bc:	4603      	mov	r3, r0
 80018be:	80bb      	strh	r3, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	807b      	strh	r3, [r7, #2]
 80018c4:	4613      	mov	r3, r2
 80018c6:	707b      	strb	r3, [r7, #1]
  int16_t f     = 1 - r;
 80018c8:	887b      	ldrh	r3, [r7, #2]
 80018ca:	f1c3 0301 	rsb	r3, r3, #1
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 80018d2:	2301      	movs	r3, #1
 80018d4:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 80018d6:	887b      	ldrh	r3, [r7, #2]
 80018d8:	461a      	mov	r2, r3
 80018da:	03d2      	lsls	r2, r2, #15
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 80018ec:	e0cd      	b.n	8001a8a <TFT_Draw_Circle_Helper+0x1e0>
    if (f >= 0) {
 80018ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0e      	blt.n	8001914 <TFT_Draw_Circle_Helper+0x6a>
      y--;
 80018f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b29b      	uxth	r3, r3
 8001900:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8001902:	8a7b      	ldrh	r3, [r7, #18]
 8001904:	3302      	adds	r3, #2
 8001906:	b29b      	uxth	r3, r3
 8001908:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 800190a:	8afa      	ldrh	r2, [r7, #22]
 800190c:	8a7b      	ldrh	r3, [r7, #18]
 800190e:	4413      	add	r3, r2
 8001910:	b29b      	uxth	r3, r3
 8001912:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8001914:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001918:	b29b      	uxth	r3, r3
 800191a:	3301      	adds	r3, #1
 800191c:	b29b      	uxth	r3, r3
 800191e:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8001920:	8abb      	ldrh	r3, [r7, #20]
 8001922:	3302      	adds	r3, #2
 8001924:	b29b      	uxth	r3, r3
 8001926:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8001928:	8afa      	ldrh	r2, [r7, #22]
 800192a:	8abb      	ldrh	r3, [r7, #20]
 800192c:	4413      	add	r3, r2
 800192e:	b29b      	uxth	r3, r3
 8001930:	82fb      	strh	r3, [r7, #22]
    if (cornername & 0x4) {
 8001932:	787b      	ldrb	r3, [r7, #1]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d025      	beq.n	8001988 <TFT_Draw_Circle_Helper+0xde>
      TFT_Draw_Fill_Rectangle(x0 + x, y0 + y, size, size, color);
 800193c:	88fa      	ldrh	r2, [r7, #6]
 800193e:	8a3b      	ldrh	r3, [r7, #16]
 8001940:	4413      	add	r3, r2
 8001942:	b298      	uxth	r0, r3
 8001944:	88ba      	ldrh	r2, [r7, #4]
 8001946:	89fb      	ldrh	r3, [r7, #14]
 8001948:	4413      	add	r3, r2
 800194a:	b299      	uxth	r1, r3
 800194c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001950:	b29a      	uxth	r2, r3
 8001952:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001956:	b29c      	uxth	r4, r3
 8001958:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	4623      	mov	r3, r4
 800195e:	f7ff fdd9 	bl	8001514 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 + y, y0 + x, size, size, color);
 8001962:	88fa      	ldrh	r2, [r7, #6]
 8001964:	89fb      	ldrh	r3, [r7, #14]
 8001966:	4413      	add	r3, r2
 8001968:	b298      	uxth	r0, r3
 800196a:	88ba      	ldrh	r2, [r7, #4]
 800196c:	8a3b      	ldrh	r3, [r7, #16]
 800196e:	4413      	add	r3, r2
 8001970:	b299      	uxth	r1, r3
 8001972:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001976:	b29a      	uxth	r2, r3
 8001978:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800197c:	b29c      	uxth	r4, r3
 800197e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	4623      	mov	r3, r4
 8001984:	f7ff fdc6 	bl	8001514 <TFT_Draw_Fill_Rectangle>
    }
    if (cornername & 0x2) {
 8001988:	787b      	ldrb	r3, [r7, #1]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d025      	beq.n	80019de <TFT_Draw_Circle_Helper+0x134>
      TFT_Draw_Fill_Rectangle(x0 + x, y0 - y, size, size, color);
 8001992:	88fa      	ldrh	r2, [r7, #6]
 8001994:	8a3b      	ldrh	r3, [r7, #16]
 8001996:	4413      	add	r3, r2
 8001998:	b298      	uxth	r0, r3
 800199a:	88ba      	ldrh	r2, [r7, #4]
 800199c:	89fb      	ldrh	r3, [r7, #14]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	b299      	uxth	r1, r3
 80019a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019ac:	b29c      	uxth	r4, r3
 80019ae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	4623      	mov	r3, r4
 80019b4:	f7ff fdae 	bl	8001514 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 + y, y0 - x, size, size, color);
 80019b8:	88fa      	ldrh	r2, [r7, #6]
 80019ba:	89fb      	ldrh	r3, [r7, #14]
 80019bc:	4413      	add	r3, r2
 80019be:	b298      	uxth	r0, r3
 80019c0:	88ba      	ldrh	r2, [r7, #4]
 80019c2:	8a3b      	ldrh	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	b299      	uxth	r1, r3
 80019c8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019d2:	b29c      	uxth	r4, r3
 80019d4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	4623      	mov	r3, r4
 80019da:	f7ff fd9b 	bl	8001514 <TFT_Draw_Fill_Rectangle>
    }
    if (cornername & 0x8) {
 80019de:	787b      	ldrb	r3, [r7, #1]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d025      	beq.n	8001a34 <TFT_Draw_Circle_Helper+0x18a>
      TFT_Draw_Fill_Rectangle(x0 - y, y0 + x, size, size, color);
 80019e8:	88fa      	ldrh	r2, [r7, #6]
 80019ea:	89fb      	ldrh	r3, [r7, #14]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	b298      	uxth	r0, r3
 80019f0:	88ba      	ldrh	r2, [r7, #4]
 80019f2:	8a3b      	ldrh	r3, [r7, #16]
 80019f4:	4413      	add	r3, r2
 80019f6:	b299      	uxth	r1, r3
 80019f8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a02:	b29c      	uxth	r4, r3
 8001a04:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	4623      	mov	r3, r4
 8001a0a:	f7ff fd83 	bl	8001514 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 - x, y0 + y, size, size, color);
 8001a0e:	88fa      	ldrh	r2, [r7, #6]
 8001a10:	8a3b      	ldrh	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	b298      	uxth	r0, r3
 8001a16:	88ba      	ldrh	r2, [r7, #4]
 8001a18:	89fb      	ldrh	r3, [r7, #14]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b299      	uxth	r1, r3
 8001a1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a28:	b29c      	uxth	r4, r3
 8001a2a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	4623      	mov	r3, r4
 8001a30:	f7ff fd70 	bl	8001514 <TFT_Draw_Fill_Rectangle>
    }
    if (cornername & 0x1) {
 8001a34:	787b      	ldrb	r3, [r7, #1]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d025      	beq.n	8001a8a <TFT_Draw_Circle_Helper+0x1e0>
      TFT_Draw_Fill_Rectangle(x0 - y, y0 - x, size, size, color);
 8001a3e:	88fa      	ldrh	r2, [r7, #6]
 8001a40:	89fb      	ldrh	r3, [r7, #14]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	b298      	uxth	r0, r3
 8001a46:	88ba      	ldrh	r2, [r7, #4]
 8001a48:	8a3b      	ldrh	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	b299      	uxth	r1, r3
 8001a4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a58:	b29c      	uxth	r4, r3
 8001a5a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	4623      	mov	r3, r4
 8001a60:	f7ff fd58 	bl	8001514 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 - x, y0 - y, size, size, color);
 8001a64:	88fa      	ldrh	r2, [r7, #6]
 8001a66:	8a3b      	ldrh	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	b298      	uxth	r0, r3
 8001a6c:	88ba      	ldrh	r2, [r7, #4]
 8001a6e:	89fb      	ldrh	r3, [r7, #14]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	b299      	uxth	r1, r3
 8001a74:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a7e:	b29c      	uxth	r4, r3
 8001a80:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	4623      	mov	r3, r4
 8001a86:	f7ff fd45 	bl	8001514 <TFT_Draw_Fill_Rectangle>
  while (x<y) {
 8001a8a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001a8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	f6ff af2b 	blt.w	80018ee <TFT_Draw_Circle_Helper+0x44>
    }
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	371c      	adds	r7, #28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd90      	pop	{r4, r7, pc}

08001aa2 <TFT_Draw_Round_Rect>:

//�-��� ������ ������������� �������� �����, ������, �������� ����������� ����, ������� ����� � ��������� ������
void TFT_Draw_Round_Rect(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint16_t color)
{
 8001aa2:	b590      	push	{r4, r7, lr}
 8001aa4:	b085      	sub	sp, #20
 8001aa6:	af02      	add	r7, sp, #8
 8001aa8:	4604      	mov	r4, r0
 8001aaa:	4608      	mov	r0, r1
 8001aac:	4611      	mov	r1, r2
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4623      	mov	r3, r4
 8001ab2:	80fb      	strh	r3, [r7, #6]
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	80bb      	strh	r3, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]
 8001abc:	4613      	mov	r3, r2
 8001abe:	803b      	strh	r3, [r7, #0]

  TFT_Draw_HLine(x+r  , y    , length-2*r, size, color); // Top
 8001ac0:	88fa      	ldrh	r2, [r7, #6]
 8001ac2:	8b3b      	ldrh	r3, [r7, #24]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	b298      	uxth	r0, r3
 8001ac8:	8b3b      	ldrh	r3, [r7, #24]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	7f3b      	ldrb	r3, [r7, #28]
 8001ad6:	b29c      	uxth	r4, r3
 8001ad8:	88b9      	ldrh	r1, [r7, #4]
 8001ada:	8c3b      	ldrh	r3, [r7, #32]
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	4623      	mov	r3, r4
 8001ae0:	f7ff fcbe 	bl	8001460 <TFT_Draw_HLine>
  TFT_Draw_HLine(x+r  , y+width-1, length-2*r, size, color); // Bottom
 8001ae4:	88fa      	ldrh	r2, [r7, #6]
 8001ae6:	8b3b      	ldrh	r3, [r7, #24]
 8001ae8:	4413      	add	r3, r2
 8001aea:	b298      	uxth	r0, r3
 8001aec:	88ba      	ldrh	r2, [r7, #4]
 8001aee:	883b      	ldrh	r3, [r7, #0]
 8001af0:	4413      	add	r3, r2
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b299      	uxth	r1, r3
 8001af8:	8b3b      	ldrh	r3, [r7, #24]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	887a      	ldrh	r2, [r7, #2]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	7f3b      	ldrb	r3, [r7, #28]
 8001b06:	b29c      	uxth	r4, r3
 8001b08:	8c3b      	ldrh	r3, [r7, #32]
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	4623      	mov	r3, r4
 8001b0e:	f7ff fca7 	bl	8001460 <TFT_Draw_HLine>
  TFT_Draw_VLine(x    , y+r  , width-2*r, size, color); // Left
 8001b12:	88ba      	ldrh	r2, [r7, #4]
 8001b14:	8b3b      	ldrh	r3, [r7, #24]
 8001b16:	4413      	add	r3, r2
 8001b18:	b299      	uxth	r1, r3
 8001b1a:	8b3b      	ldrh	r3, [r7, #24]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	883a      	ldrh	r2, [r7, #0]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	7f3b      	ldrb	r3, [r7, #28]
 8001b28:	b29c      	uxth	r4, r3
 8001b2a:	88f8      	ldrh	r0, [r7, #6]
 8001b2c:	8c3b      	ldrh	r3, [r7, #32]
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	4623      	mov	r3, r4
 8001b32:	f7ff fcc2 	bl	80014ba <TFT_Draw_VLine>
  TFT_Draw_VLine(x+length-1, y+r  , width-2*r, size, color); // Right
 8001b36:	88fa      	ldrh	r2, [r7, #6]
 8001b38:	887b      	ldrh	r3, [r7, #2]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b298      	uxth	r0, r3
 8001b42:	88ba      	ldrh	r2, [r7, #4]
 8001b44:	8b3b      	ldrh	r3, [r7, #24]
 8001b46:	4413      	add	r3, r2
 8001b48:	b299      	uxth	r1, r3
 8001b4a:	8b3b      	ldrh	r3, [r7, #24]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	883a      	ldrh	r2, [r7, #0]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	7f3b      	ldrb	r3, [r7, #28]
 8001b58:	b29c      	uxth	r4, r3
 8001b5a:	8c3b      	ldrh	r3, [r7, #32]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	4623      	mov	r3, r4
 8001b60:	f7ff fcab 	bl	80014ba <TFT_Draw_VLine>

  TFT_Draw_Circle_Helper(x+r    , y+r    , r, 		 			1, size, color);
 8001b64:	88fa      	ldrh	r2, [r7, #6]
 8001b66:	8b3b      	ldrh	r3, [r7, #24]
 8001b68:	4413      	add	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	b218      	sxth	r0, r3
 8001b6e:	88ba      	ldrh	r2, [r7, #4]
 8001b70:	8b3b      	ldrh	r3, [r7, #24]
 8001b72:	4413      	add	r3, r2
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	b219      	sxth	r1, r3
 8001b78:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001b7c:	8c3b      	ldrh	r3, [r7, #32]
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	7f3b      	ldrb	r3, [r7, #28]
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2301      	movs	r3, #1
 8001b86:	f7ff fe90 	bl	80018aa <TFT_Draw_Circle_Helper>
  TFT_Draw_Circle_Helper(x+length-r-1, y+r    , r, 			2, size, color);
 8001b8a:	88fa      	ldrh	r2, [r7, #6]
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	4413      	add	r3, r2
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	8b3b      	ldrh	r3, [r7, #24]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	b218      	sxth	r0, r3
 8001b9e:	88ba      	ldrh	r2, [r7, #4]
 8001ba0:	8b3b      	ldrh	r3, [r7, #24]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	b219      	sxth	r1, r3
 8001ba8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001bac:	8c3b      	ldrh	r3, [r7, #32]
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	7f3b      	ldrb	r3, [r7, #28]
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	f7ff fe78 	bl	80018aa <TFT_Draw_Circle_Helper>
  TFT_Draw_Circle_Helper(x+length-r-1, y+width-r-1, r,  4, size, color);
 8001bba:	88fa      	ldrh	r2, [r7, #6]
 8001bbc:	887b      	ldrh	r3, [r7, #2]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	8b3b      	ldrh	r3, [r7, #24]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	b218      	sxth	r0, r3
 8001bce:	88ba      	ldrh	r2, [r7, #4]
 8001bd0:	883b      	ldrh	r3, [r7, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	8b3b      	ldrh	r3, [r7, #24]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	b219      	sxth	r1, r3
 8001be2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001be6:	8c3b      	ldrh	r3, [r7, #32]
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	7f3b      	ldrb	r3, [r7, #28]
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2304      	movs	r3, #4
 8001bf0:	f7ff fe5b 	bl	80018aa <TFT_Draw_Circle_Helper>
  TFT_Draw_Circle_Helper(x+r    , y+width-r-1, r, 			8, size, color);
 8001bf4:	88fa      	ldrh	r2, [r7, #6]
 8001bf6:	8b3b      	ldrh	r3, [r7, #24]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	b218      	sxth	r0, r3
 8001bfe:	88ba      	ldrh	r2, [r7, #4]
 8001c00:	883b      	ldrh	r3, [r7, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	8b3b      	ldrh	r3, [r7, #24]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	b219      	sxth	r1, r3
 8001c12:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001c16:	8c3b      	ldrh	r3, [r7, #32]
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	7f3b      	ldrb	r3, [r7, #28]
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2308      	movs	r3, #8
 8001c20:	f7ff fe43 	bl	80018aa <TFT_Draw_Circle_Helper>
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd90      	pop	{r4, r7, pc}

08001c2c <TFT_Draw_Fill_Circle_Helper>:

//��������������� �-��� ��� ����������� ���� ������������ ��������������
void TFT_Draw_Fill_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) 
{
 8001c2c:	b590      	push	{r4, r7, lr}
 8001c2e:	b089      	sub	sp, #36	@ 0x24
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	4604      	mov	r4, r0
 8001c34:	4608      	mov	r0, r1
 8001c36:	4611      	mov	r1, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4623      	mov	r3, r4
 8001c3c:	80fb      	strh	r3, [r7, #6]
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80bb      	strh	r3, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	807b      	strh	r3, [r7, #2]
 8001c46:	4613      	mov	r3, r2
 8001c48:	707b      	strb	r3, [r7, #1]

  int16_t f     = 1 - r;
 8001c4a:	887b      	ldrh	r3, [r7, #2]
 8001c4c:	f1c3 0301 	rsb	r3, r3, #1
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8001c54:	2301      	movs	r3, #1
 8001c56:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8001c58:	887b      	ldrh	r3, [r7, #2]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	03d2      	lsls	r2, r2, #15
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8001c6a:	887b      	ldrh	r3, [r7, #2]
 8001c6c:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8001c6e:	e07f      	b.n	8001d70 <TFT_Draw_Fill_Circle_Helper+0x144>
    if (f >= 0) {
 8001c70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db0e      	blt.n	8001c96 <TFT_Draw_Fill_Circle_Helper+0x6a>
      y--;
 8001c78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8001c84:	8a7b      	ldrh	r3, [r7, #18]
 8001c86:	3302      	adds	r3, #2
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8001c8c:	8afa      	ldrh	r2, [r7, #22]
 8001c8e:	8a7b      	ldrh	r3, [r7, #18]
 8001c90:	4413      	add	r3, r2
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8001c96:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8001ca2:	8abb      	ldrh	r3, [r7, #20]
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8001caa:	8afa      	ldrh	r2, [r7, #22]
 8001cac:	8abb      	ldrh	r3, [r7, #20]
 8001cae:	4413      	add	r3, r2
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8001cb4:	787b      	ldrb	r3, [r7, #1]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d029      	beq.n	8001d12 <TFT_Draw_Fill_Circle_Helper+0xe6>
      TFT_Draw_VLine(x0+x, y0-y, 2*y+1+delta, 1, color);
 8001cbe:	88fa      	ldrh	r2, [r7, #6]
 8001cc0:	8a3b      	ldrh	r3, [r7, #16]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	b298      	uxth	r0, r3
 8001cc6:	88ba      	ldrh	r2, [r7, #4]
 8001cc8:	89fb      	ldrh	r3, [r7, #14]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	b299      	uxth	r1, r3
 8001cce:	89fb      	ldrh	r3, [r7, #14]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f7ff fbe9 	bl	80014ba <TFT_Draw_VLine>
      TFT_Draw_VLine(x0+y, y0-x, 2*x+1+delta, 1, color);
 8001ce8:	88fa      	ldrh	r2, [r7, #6]
 8001cea:	89fb      	ldrh	r3, [r7, #14]
 8001cec:	4413      	add	r3, r2
 8001cee:	b298      	uxth	r0, r3
 8001cf0:	88ba      	ldrh	r2, [r7, #4]
 8001cf2:	8a3b      	ldrh	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	b299      	uxth	r1, r3
 8001cf8:	8a3b      	ldrh	r3, [r7, #16]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d00:	4413      	add	r3, r2
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3301      	adds	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	f7ff fbd4 	bl	80014ba <TFT_Draw_VLine>
    }
    if (cornername & 0x2) {
 8001d12:	787b      	ldrb	r3, [r7, #1]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d029      	beq.n	8001d70 <TFT_Draw_Fill_Circle_Helper+0x144>
     TFT_Draw_VLine(x0-x, y0-y, 2*y+1+delta, 1, color);
 8001d1c:	88fa      	ldrh	r2, [r7, #6]
 8001d1e:	8a3b      	ldrh	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	b298      	uxth	r0, r3
 8001d24:	88ba      	ldrh	r2, [r7, #4]
 8001d26:	89fb      	ldrh	r3, [r7, #14]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	b299      	uxth	r1, r3
 8001d2c:	89fb      	ldrh	r3, [r7, #14]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d34:	4413      	add	r3, r2
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3301      	adds	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2301      	movs	r3, #1
 8001d42:	f7ff fbba 	bl	80014ba <TFT_Draw_VLine>
     TFT_Draw_VLine(x0-y, y0-x, 2*x+1+delta, 1, color);
 8001d46:	88fa      	ldrh	r2, [r7, #6]
 8001d48:	89fb      	ldrh	r3, [r7, #14]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	b298      	uxth	r0, r3
 8001d4e:	88ba      	ldrh	r2, [r7, #4]
 8001d50:	8a3b      	ldrh	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	b299      	uxth	r1, r3
 8001d56:	8a3b      	ldrh	r3, [r7, #16]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d5e:	4413      	add	r3, r2
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3301      	adds	r3, #1
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	f7ff fba5 	bl	80014ba <TFT_Draw_VLine>
  while (x<y) {
 8001d70:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001d74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	f6ff af79 	blt.w	8001c70 <TFT_Draw_Fill_Circle_Helper+0x44>
    }
  }
}
 8001d7e:	bf00      	nop
 8001d80:	bf00      	nop
 8001d82:	371c      	adds	r7, #28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd90      	pop	{r4, r7, pc}

08001d88 <TFT_Draw_Fill_Round_Rect>:

//�-��� ������ ����������� ������������� �������� �����, ������, �������� ����������� ����� � ��������� ������
void TFT_Draw_Fill_Round_Rect(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint16_t color)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af02      	add	r7, sp, #8
 8001d8e:	4604      	mov	r4, r0
 8001d90:	4608      	mov	r0, r1
 8001d92:	4611      	mov	r1, r2
 8001d94:	461a      	mov	r2, r3
 8001d96:	4623      	mov	r3, r4
 8001d98:	80fb      	strh	r3, [r7, #6]
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80bb      	strh	r3, [r7, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	807b      	strh	r3, [r7, #2]
 8001da2:	4613      	mov	r3, r2
 8001da4:	803b      	strh	r3, [r7, #0]
  TFT_Draw_Fill_Rectangle(x+r, y, length-2*r, width, color);
 8001da6:	88fa      	ldrh	r2, [r7, #6]
 8001da8:	8b3b      	ldrh	r3, [r7, #24]
 8001daa:	4413      	add	r3, r2
 8001dac:	b298      	uxth	r0, r3
 8001dae:	8b3b      	ldrh	r3, [r7, #24]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	887a      	ldrh	r2, [r7, #2]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	883c      	ldrh	r4, [r7, #0]
 8001dbc:	88b9      	ldrh	r1, [r7, #4]
 8001dbe:	8bbb      	ldrh	r3, [r7, #28]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	4623      	mov	r3, r4
 8001dc4:	f7ff fba6 	bl	8001514 <TFT_Draw_Fill_Rectangle>

  TFT_Draw_Fill_Circle_Helper(x+length-r-1, y+r, r, 1, width-2*r-1, color);
 8001dc8:	88fa      	ldrh	r2, [r7, #6]
 8001dca:	887b      	ldrh	r3, [r7, #2]
 8001dcc:	4413      	add	r3, r2
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	8b3b      	ldrh	r3, [r7, #24]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	b218      	sxth	r0, r3
 8001ddc:	88ba      	ldrh	r2, [r7, #4]
 8001dde:	8b3b      	ldrh	r3, [r7, #24]
 8001de0:	4413      	add	r3, r2
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	b219      	sxth	r1, r3
 8001de6:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001dea:	8b3b      	ldrh	r3, [r7, #24]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	883a      	ldrh	r2, [r7, #0]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3b01      	subs	r3, #1
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	8bba      	ldrh	r2, [r7, #28]
 8001dfe:	9201      	str	r2, [sp, #4]
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	2301      	movs	r3, #1
 8001e04:	4622      	mov	r2, r4
 8001e06:	f7ff ff11 	bl	8001c2c <TFT_Draw_Fill_Circle_Helper>
  TFT_Draw_Fill_Circle_Helper(x+r    , y+r, r, 2, width-2*r-1, color);
 8001e0a:	88fa      	ldrh	r2, [r7, #6]
 8001e0c:	8b3b      	ldrh	r3, [r7, #24]
 8001e0e:	4413      	add	r3, r2
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	b218      	sxth	r0, r3
 8001e14:	88ba      	ldrh	r2, [r7, #4]
 8001e16:	8b3b      	ldrh	r3, [r7, #24]
 8001e18:	4413      	add	r3, r2
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	b219      	sxth	r1, r3
 8001e1e:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001e22:	8b3b      	ldrh	r3, [r7, #24]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	883a      	ldrh	r2, [r7, #0]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	b21b      	sxth	r3, r3
 8001e34:	8bba      	ldrh	r2, [r7, #28]
 8001e36:	9201      	str	r2, [sp, #4]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	4622      	mov	r2, r4
 8001e3e:	f7ff fef5 	bl	8001c2c <TFT_Draw_Fill_Circle_Helper>
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd90      	pop	{r4, r7, pc}

08001e4a <LCD_Char>:

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8001e4a:	b590      	push	{r4, r7, lr}
 8001e4c:	b08b      	sub	sp, #44	@ 0x2c
 8001e4e:	af02      	add	r7, sp, #8
 8001e50:	60ba      	str	r2, [r7, #8]
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	4603      	mov	r3, r0
 8001e56:	81fb      	strh	r3, [r7, #14]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	777b      	strb	r3, [r7, #29]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	763b      	strb	r3, [r7, #24]
 8001e78:	e095      	b.n	8001fa6 <LCD_Char+0x15c>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	767b      	strb	r3, [r7, #25]
 8001e7e:	e053      	b.n	8001f28 <LCD_Char+0xde>
		{
			if(bit == 0)
 8001e80:	7f3b      	ldrb	r3, [r7, #28]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d109      	bne.n	8001e9a <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8001e86:	8bfb      	ldrh	r3, [r7, #30]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	83fa      	strh	r2, [r7, #30]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	4413      	add	r3, r2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8001e96:	2380      	movs	r3, #128	@ 0x80
 8001e98:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 8001e9a:	7f7a      	ldrb	r2, [r7, #29]
 8001e9c:	7f3b      	ldrb	r3, [r7, #28]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <LCD_Char+0x64>
			{
				set_pixels++;
 8001ea6:	8b7b      	ldrh	r3, [r7, #26]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	837b      	strh	r3, [r7, #26]
 8001eac:	e036      	b.n	8001f1c <LCD_Char+0xd2>
			}
			else if (set_pixels > 0)
 8001eae:	8b7b      	ldrh	r3, [r7, #26]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d033      	beq.n	8001f1c <LCD_Char+0xd2>
			{
				TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	7e7b      	ldrb	r3, [r7, #25]
 8001ebe:	441a      	add	r2, r3
 8001ec0:	8b7b      	ldrh	r3, [r7, #26]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	fb12 f303 	smulbb	r3, r2, r3
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	89fb      	ldrh	r3, [r7, #14]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	b298      	uxth	r0, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	7e3b      	ldrb	r3, [r7, #24]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	fb12 f303 	smulbb	r3, r2, r3
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	89bb      	ldrh	r3, [r7, #12]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	b299      	uxth	r1, r3
 8001ef8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	8b7a      	ldrh	r2, [r7, #26]
 8001f00:	fb12 f303 	smulbb	r3, r2, r3
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001f0a:	b29c      	uxth	r4, r3
 8001f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	4623      	mov	r3, r4
 8001f14:	f7ff fafe 	bl	8001514 <TFT_Draw_Fill_Rectangle>
				set_pixels = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8001f1c:	7f3b      	ldrb	r3, [r7, #28]
 8001f1e:	085b      	lsrs	r3, r3, #1
 8001f20:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001f22:	7e7b      	ldrb	r3, [r7, #25]
 8001f24:	3301      	adds	r3, #1
 8001f26:	767b      	strb	r3, [r7, #25]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	789b      	ldrb	r3, [r3, #2]
 8001f2c:	7e7a      	ldrb	r2, [r7, #25]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d3a6      	bcc.n	8001e80 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8001f32:	8b7b      	ldrh	r3, [r7, #26]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d033      	beq.n	8001fa0 <LCD_Char+0x156>
		{
			TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	7e7b      	ldrb	r3, [r7, #25]
 8001f42:	441a      	add	r2, r3
 8001f44:	8b7b      	ldrh	r3, [r7, #26]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	fb12 f303 	smulbb	r3, r2, r3
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	89fb      	ldrh	r3, [r7, #14]
 8001f58:	4413      	add	r3, r2
 8001f5a:	b298      	uxth	r0, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001f62:	461a      	mov	r2, r3
 8001f64:	7e3b      	ldrb	r3, [r7, #24]
 8001f66:	4413      	add	r3, r2
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	fb12 f303 	smulbb	r3, r2, r3
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	89bb      	ldrh	r3, [r7, #12]
 8001f78:	4413      	add	r3, r2
 8001f7a:	b299      	uxth	r1, r3
 8001f7c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	8b7a      	ldrh	r2, [r7, #26]
 8001f84:	fb12 f303 	smulbb	r3, r2, r3
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001f8e:	b29c      	uxth	r4, r3
 8001f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	4623      	mov	r3, r4
 8001f98:	f7ff fabc 	bl	8001514 <TFT_Draw_Fill_Rectangle>
			set_pixels = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001fa0:	7e3b      	ldrb	r3, [r7, #24]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	763b      	strb	r3, [r7, #24]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	78db      	ldrb	r3, [r3, #3]
 8001faa:	7e3a      	ldrb	r2, [r7, #24]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	f4ff af64 	bcc.w	8001e7a <LCD_Char+0x30>
		}
	}
}
 8001fb2:	bf00      	nop
 8001fb4:	bf00      	nop
 8001fb6:	3724      	adds	r7, #36	@ 0x24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd90      	pop	{r4, r7, pc}

08001fbc <LCD_Font>:
void LCD_Font(uint16_t x, uint16_t y, char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b08f      	sub	sp, #60	@ 0x3c
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	60ba      	str	r2, [r7, #8]
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	81fb      	strh	r3, [r7, #14]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 8001fce:	89fb      	ldrh	r3, [r7, #14]
 8001fd0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int16_t cursor_y = y;
 8001fd2:	89bb      	ldrh	r3, [r7, #12]
 8001fd4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001fd6:	f107 031c 	add.w	r3, r7, #28
 8001fda:	220c      	movs	r2, #12
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f005 f84b 	bl	800707a <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001fe8:	e056      	b.n	8002098 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 8001fea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	4413      	add	r3, r2
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		if(c == '\n')
 8001ff6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001ffa:	2b0a      	cmp	r3, #10
 8001ffc:	d10f      	bne.n	800201e <LCD_Font+0x62>
		{
			cursor_x = x;
 8001ffe:	89fb      	ldrh	r3, [r7, #14]
 8002000:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			cursor_y += font.yAdvance * size;
 8002002:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002006:	461a      	mov	r2, r3
 8002008:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800200c:	b29b      	uxth	r3, r3
 800200e:	fb12 f303 	smulbb	r3, r2, r3
 8002012:	b29a      	uxth	r2, r3
 8002014:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002016:	4413      	add	r3, r2
 8002018:	b29b      	uxth	r3, r3
 800201a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800201c:	e039      	b.n	8002092 <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 800201e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002022:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8002026:	429a      	cmp	r2, r3
 8002028:	d333      	bcc.n	8002092 <LCD_Font+0xd6>
 800202a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800202e:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8002032:	429a      	cmp	r2, r3
 8002034:	d82d      	bhi.n	8002092 <LCD_Font+0xd6>
 8002036:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800203a:	2b0d      	cmp	r3, #13
 800203c:	d029      	beq.n	8002092 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800203e:	6a3a      	ldr	r2, [r7, #32]
 8002040:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002044:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8002048:	1a5b      	subs	r3, r3, r1
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	18d1      	adds	r1, r2, r3
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	2208      	movs	r2, #8
 8002054:	4618      	mov	r0, r3
 8002056:	f005 f810 	bl	800707a <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800205a:	f107 041c 	add.w	r4, r7, #28
 800205e:	f107 0214 	add.w	r2, r7, #20
 8002062:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8002066:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800206a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	4623      	mov	r3, r4
 8002076:	f7ff fee8 	bl	8001e4a <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 800207a:	7e3b      	ldrb	r3, [r7, #24]
 800207c:	461a      	mov	r2, r3
 800207e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002082:	b29b      	uxth	r3, r3
 8002084:	fb12 f303 	smulbb	r3, r2, r3
 8002088:	b29a      	uxth	r2, r3
 800208a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800208c:	4413      	add	r3, r2
 800208e:	b29b      	uxth	r3, r3
 8002090:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8002092:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002094:	3301      	adds	r3, #1
 8002096:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8002098:	8d7c      	ldrh	r4, [r7, #42]	@ 0x2a
 800209a:	68b8      	ldr	r0, [r7, #8]
 800209c:	f7fe f8e8 	bl	8000270 <strlen>
 80020a0:	4603      	mov	r3, r0
 80020a2:	429c      	cmp	r4, r3
 80020a4:	d3a1      	bcc.n	8001fea <LCD_Font+0x2e>
		}
	}
}
 80020a6:	bf00      	nop
 80020a8:	bf00      	nop
 80020aa:	3734      	adds	r7, #52	@ 0x34
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd90      	pop	{r4, r7, pc}

080020b0 <TFT_Draw_Bitmap>:
        cursor_x += glyph.xAdvance * size;
    }
}

void TFT_Draw_Bitmap(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *bmp, uint32_t color24)
{
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4604      	mov	r4, r0
 80020b8:	4608      	mov	r0, r1
 80020ba:	4611      	mov	r1, r2
 80020bc:	461a      	mov	r2, r3
 80020be:	4623      	mov	r3, r4
 80020c0:	80fb      	strh	r3, [r7, #6]
 80020c2:	4603      	mov	r3, r0
 80020c4:	80bb      	strh	r3, [r7, #4]
 80020c6:	460b      	mov	r3, r1
 80020c8:	807b      	strh	r3, [r7, #2]
 80020ca:	4613      	mov	r3, r2
 80020cc:	803b      	strh	r3, [r7, #0]
	for (uint16_t row = 0; row < h; row++)
 80020ce:	2300      	movs	r3, #0
 80020d0:	81fb      	strh	r3, [r7, #14]
 80020d2:	e029      	b.n	8002128 <TFT_Draw_Bitmap+0x78>
		{
			for (uint16_t col = 0; col < w; col++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	81bb      	strh	r3, [r7, #12]
 80020d8:	e01f      	b.n	800211a <TFT_Draw_Bitmap+0x6a>
			{
				uint16_t c = bmp[row * w + col];
 80020da:	89fb      	ldrh	r3, [r7, #14]
 80020dc:	887a      	ldrh	r2, [r7, #2]
 80020de:	fb03 f202 	mul.w	r2, r3, r2
 80020e2:	89bb      	ldrh	r3, [r7, #12]
 80020e4:	4413      	add	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	6a3a      	ldr	r2, [r7, #32]
 80020ea:	4413      	add	r3, r2
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	817b      	strh	r3, [r7, #10]
				if (c != 0x0000)
 80020f0:	897b      	ldrh	r3, [r7, #10]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00e      	beq.n	8002114 <TFT_Draw_Bitmap+0x64>
				{
					// Lcd_SetPixel faz: SetArea(x,x,y,y); Cmd(0x2C); Write_Data(color);
					Lcd_SetPixel(x + col, y + row, color24);
 80020f6:	88fa      	ldrh	r2, [r7, #6]
 80020f8:	89bb      	ldrh	r3, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	b218      	sxth	r0, r3
 8002100:	88ba      	ldrh	r2, [r7, #4]
 8002102:	89fb      	ldrh	r3, [r7, #14]
 8002104:	4413      	add	r3, r2
 8002106:	b29b      	uxth	r3, r3
 8002108:	b21b      	sxth	r3, r3
 800210a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800210c:	b212      	sxth	r2, r2
 800210e:	4619      	mov	r1, r3
 8002110:	f7ff f80e 	bl	8001130 <Lcd_SetPixel>
			for (uint16_t col = 0; col < w; col++)
 8002114:	89bb      	ldrh	r3, [r7, #12]
 8002116:	3301      	adds	r3, #1
 8002118:	81bb      	strh	r3, [r7, #12]
 800211a:	89ba      	ldrh	r2, [r7, #12]
 800211c:	887b      	ldrh	r3, [r7, #2]
 800211e:	429a      	cmp	r2, r3
 8002120:	d3db      	bcc.n	80020da <TFT_Draw_Bitmap+0x2a>
	for (uint16_t row = 0; row < h; row++)
 8002122:	89fb      	ldrh	r3, [r7, #14]
 8002124:	3301      	adds	r3, #1
 8002126:	81fb      	strh	r3, [r7, #14]
 8002128:	89fa      	ldrh	r2, [r7, #14]
 800212a:	883b      	ldrh	r3, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d3d1      	bcc.n	80020d4 <TFT_Draw_Bitmap+0x24>
				}
			}
		}
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	bd90      	pop	{r4, r7, pc}
	...

0800213c <starter_Screen>:
  CONFIGURACAO_BITMAP_HEIGHT
};


void starter_Screen (void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af02      	add	r7, sp, #8
	if(ultimo_estado_menu == -1)
 8002142:	4bb5      	ldr	r3, [pc, #724]	@ (8002418 <starter_Screen+0x2dc>)
 8002144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d10d      	bne.n	800216a <starter_Screen+0x2e>
	{
		TFT_Clear_Screen(VIVID_BLUE);
 800214e:	f240 401f 	movw	r0, #1055	@ 0x41f
 8002152:	f7ff f961 	bl	8001418 <TFT_Clear_Screen>
		TFT_Draw_HLine(30, 45, 740, 3, WHITE);
 8002156:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2303      	movs	r3, #3
 800215e:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8002162:	212d      	movs	r1, #45	@ 0x2d
 8002164:	201e      	movs	r0, #30
 8002166:	f7ff f97b 	bl	8001460 <TFT_Draw_HLine>
	}

	if(current_screen == 1)
 800216a:	4bac      	ldr	r3, [pc, #688]	@ (800241c <starter_Screen+0x2e0>)
 800216c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002170:	2b01      	cmp	r3, #1
 8002172:	f040 814e 	bne.w	8002412 <starter_Screen+0x2d6>
	{
		if(item_selected == 0)
 8002176:	4baa      	ldr	r3, [pc, #680]	@ (8002420 <starter_Screen+0x2e4>)
 8002178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800217c:	2b00      	cmp	r3, #0
 800217e:	f040 8148 	bne.w	8002412 <starter_Screen+0x2d6>
		{
			// Printar SetPoint grande na tela
			sprintf(buffer, "%d", temp);
 8002182:	4ba8      	ldr	r3, [pc, #672]	@ (8002424 <starter_Screen+0x2e8>)
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	49a7      	ldr	r1, [pc, #668]	@ (8002428 <starter_Screen+0x2ec>)
 800218a:	48a8      	ldr	r0, [pc, #672]	@ (800242c <starter_Screen+0x2f0>)
 800218c:	f004 fe90 	bl	8006eb0 <siprintf>
			LCD_Font(160, 280, buffer,_Open_Sans_Bold_128, 1, WHITE);
 8002190:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	2301      	movs	r3, #1
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	4ba5      	ldr	r3, [pc, #660]	@ (8002430 <starter_Screen+0x2f4>)
 800219c:	4aa3      	ldr	r2, [pc, #652]	@ (800242c <starter_Screen+0x2f0>)
 800219e:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80021a2:	20a0      	movs	r0, #160	@ 0xa0
 80021a4:	f7ff ff0a 	bl	8001fbc <LCD_Font>
			LCD_Font(320, 225, "C",_Open_Sans_Bold_48, 1, WHITE);
 80021a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	2301      	movs	r3, #1
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	4ba0      	ldr	r3, [pc, #640]	@ (8002434 <starter_Screen+0x2f8>)
 80021b4:	4aa0      	ldr	r2, [pc, #640]	@ (8002438 <starter_Screen+0x2fc>)
 80021b6:	21e1      	movs	r1, #225	@ 0xe1
 80021b8:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 80021bc:	f7ff fefe 	bl	8001fbc <LCD_Font>
			TFT_Draw_Circle(315, 185, 4, 0, 1, WHITE);
 80021c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	2301      	movs	r3, #1
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2300      	movs	r3, #0
 80021cc:	2204      	movs	r2, #4
 80021ce:	21b9      	movs	r1, #185	@ 0xb9
 80021d0:	f240 103b 	movw	r0, #315	@ 0x13b
 80021d4:	f7ff fa4a 	bl	800166c <TFT_Draw_Circle>

			// Printar toda a parte de volume na tela
			LCD_Font(705, 90, "Volume",_Open_Sans_Bold_16, 1, GRAYISH_BLUE);
 80021d8:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	2301      	movs	r3, #1
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	4b96      	ldr	r3, [pc, #600]	@ (800243c <starter_Screen+0x300>)
 80021e4:	4a96      	ldr	r2, [pc, #600]	@ (8002440 <starter_Screen+0x304>)
 80021e6:	215a      	movs	r1, #90	@ 0x5a
 80021e8:	f240 20c1 	movw	r0, #705	@ 0x2c1
 80021ec:	f7ff fee6 	bl	8001fbc <LCD_Font>
			LCD_Font(660, 115, "Reservatorio",_Open_Sans_Bold_16, 1, GRAYISH_BLUE);
 80021f0:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	2301      	movs	r3, #1
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	4b90      	ldr	r3, [pc, #576]	@ (800243c <starter_Screen+0x300>)
 80021fc:	4a91      	ldr	r2, [pc, #580]	@ (8002444 <starter_Screen+0x308>)
 80021fe:	2173      	movs	r1, #115	@ 0x73
 8002200:	f44f 7025 	mov.w	r0, #660	@ 0x294
 8002204:	f7ff feda 	bl	8001fbc <LCD_Font>
			sprintf(buffer, "%.1f", volume_ficticio);
 8002208:	4b8f      	ldr	r3, [pc, #572]	@ (8002448 <starter_Screen+0x30c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe f99b 	bl	8000548 <__aeabi_f2d>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	498d      	ldr	r1, [pc, #564]	@ (800244c <starter_Screen+0x310>)
 8002218:	4884      	ldr	r0, [pc, #528]	@ (800242c <starter_Screen+0x2f0>)
 800221a:	f004 fe49 	bl	8006eb0 <siprintf>
			LCD_Font(600, 155, buffer,_Open_Sans_Bold_28, 1, WHITE);
 800221e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	2301      	movs	r3, #1
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	4b89      	ldr	r3, [pc, #548]	@ (8002450 <starter_Screen+0x314>)
 800222a:	4a80      	ldr	r2, [pc, #512]	@ (800242c <starter_Screen+0x2f0>)
 800222c:	219b      	movs	r1, #155	@ 0x9b
 800222e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8002232:	f7ff fec3 	bl	8001fbc <LCD_Font>
			LCD_Font(670, 155, "| 20.0",_Open_Sans_Bold_28, 1, GRAYISH_BLUE);
 8002236:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	2301      	movs	r3, #1
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	4b83      	ldr	r3, [pc, #524]	@ (8002450 <starter_Screen+0x314>)
 8002242:	4a84      	ldr	r2, [pc, #528]	@ (8002454 <starter_Screen+0x318>)
 8002244:	219b      	movs	r1, #155	@ 0x9b
 8002246:	f240 209e 	movw	r0, #670	@ 0x29e
 800224a:	f7ff feb7 	bl	8001fbc <LCD_Font>
			LCD_Font(760, 155, "L",_Open_Sans_Bold_16, 1, WHITE);
 800224e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	2301      	movs	r3, #1
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	4b78      	ldr	r3, [pc, #480]	@ (800243c <starter_Screen+0x300>)
 800225a:	4a7f      	ldr	r2, [pc, #508]	@ (8002458 <starter_Screen+0x31c>)
 800225c:	219b      	movs	r1, #155	@ 0x9b
 800225e:	f44f 703e 	mov.w	r0, #760	@ 0x2f8
 8002262:	f7ff feab 	bl	8001fbc <LCD_Font>

			if(volume_ficticio >= 10.0f)
 8002266:	4b78      	ldr	r3, [pc, #480]	@ (8002448 <starter_Screen+0x30c>)
 8002268:	edd3 7a00 	vldr	s15, [r3]
 800226c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002278:	db18      	blt.n	80022ac <starter_Screen+0x170>
			{
				TFT_Draw_Fill_Round_Rect(620, 175, 150, 25, 5, GREEN);
 800227a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	2305      	movs	r3, #5
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	2319      	movs	r3, #25
 8002286:	2296      	movs	r2, #150	@ 0x96
 8002288:	21af      	movs	r1, #175	@ 0xaf
 800228a:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 800228e:	f7ff fd7b 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
				LCD_Font(658, 191, "nivel bom",_Open_Sans_Bold_14, 1, VIVID_BLUE);
 8002292:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	2301      	movs	r3, #1
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	4b6f      	ldr	r3, [pc, #444]	@ (800245c <starter_Screen+0x320>)
 800229e:	4a70      	ldr	r2, [pc, #448]	@ (8002460 <starter_Screen+0x324>)
 80022a0:	21bf      	movs	r1, #191	@ 0xbf
 80022a2:	f240 2092 	movw	r0, #658	@ 0x292
 80022a6:	f7ff fe89 	bl	8001fbc <LCD_Font>
 80022aa:	e044      	b.n	8002336 <starter_Screen+0x1fa>
			}
			else if(volume_ficticio > 5.0f && volume_ficticio < 10.0f)
 80022ac:	4b66      	ldr	r3, [pc, #408]	@ (8002448 <starter_Screen+0x30c>)
 80022ae:	edd3 7a00 	vldr	s15, [r3]
 80022b2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80022b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022be:	dd22      	ble.n	8002306 <starter_Screen+0x1ca>
 80022c0:	4b61      	ldr	r3, [pc, #388]	@ (8002448 <starter_Screen+0x30c>)
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80022ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d2:	d518      	bpl.n	8002306 <starter_Screen+0x1ca>
			{
				TFT_Draw_Fill_Round_Rect(620, 175, 150, 25, 5, YELLOW);
 80022d4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	2305      	movs	r3, #5
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2319      	movs	r3, #25
 80022e0:	2296      	movs	r2, #150	@ 0x96
 80022e2:	21af      	movs	r1, #175	@ 0xaf
 80022e4:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 80022e8:	f7ff fd4e 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
				LCD_Font(655, 191, "nivel baixo",_Open_Sans_Bold_14, 1, VIVID_BLUE);
 80022ec:	f240 431f 	movw	r3, #1055	@ 0x41f
 80022f0:	9301      	str	r3, [sp, #4]
 80022f2:	2301      	movs	r3, #1
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	4b59      	ldr	r3, [pc, #356]	@ (800245c <starter_Screen+0x320>)
 80022f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002464 <starter_Screen+0x328>)
 80022fa:	21bf      	movs	r1, #191	@ 0xbf
 80022fc:	f240 208f 	movw	r0, #655	@ 0x28f
 8002300:	f7ff fe5c 	bl	8001fbc <LCD_Font>
 8002304:	e017      	b.n	8002336 <starter_Screen+0x1fa>
			}
			else
			{
				TFT_Draw_Fill_Round_Rect(620, 175, 150, 25, 5, RED);
 8002306:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800230a:	9301      	str	r3, [sp, #4]
 800230c:	2305      	movs	r3, #5
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	2319      	movs	r3, #25
 8002312:	2296      	movs	r2, #150	@ 0x96
 8002314:	21af      	movs	r1, #175	@ 0xaf
 8002316:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 800231a:	f7ff fd35 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
				LCD_Font(630, 191, "nivel insuficiente",_Open_Sans_Bold_14, 1, VIVID_BLUE);
 800231e:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	2301      	movs	r3, #1
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	4b4c      	ldr	r3, [pc, #304]	@ (800245c <starter_Screen+0x320>)
 800232a:	4a4f      	ldr	r2, [pc, #316]	@ (8002468 <starter_Screen+0x32c>)
 800232c:	21bf      	movs	r1, #191	@ 0xbf
 800232e:	f240 2076 	movw	r0, #630	@ 0x276
 8002332:	f7ff fe43 	bl	8001fbc <LCD_Font>
			}

			// Printar todos os 3 ícones apagados no início da tela
			TFT_Draw_Bitmap(610, 237, BANHO_PRONTO_WIDTH, BANHO_PRONTO_HEIGHT, banho_pronto_bitmap, GRAYISH_BLUE);
 8002336:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	4b4b      	ldr	r3, [pc, #300]	@ (800246c <starter_Screen+0x330>)
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	231b      	movs	r3, #27
 8002342:	2218      	movs	r2, #24
 8002344:	21ed      	movs	r1, #237	@ 0xed
 8002346:	f240 2062 	movw	r0, #610	@ 0x262
 800234a:	f7ff feb1 	bl	80020b0 <TFT_Draw_Bitmap>
			LCD_Font(650, 257, "Banho Pronto",_Open_Sans_Bold_16, 1, GRAYISH_BLUE);
 800234e:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	2301      	movs	r3, #1
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	4b38      	ldr	r3, [pc, #224]	@ (800243c <starter_Screen+0x300>)
 800235a:	4a45      	ldr	r2, [pc, #276]	@ (8002470 <starter_Screen+0x334>)
 800235c:	f240 1101 	movw	r1, #257	@ 0x101
 8002360:	f240 208a 	movw	r0, #650	@ 0x28a
 8002364:	f7ff fe2a 	bl	8001fbc <LCD_Font>
			sprintf(buffer, "%d|25", temp);
 8002368:	4b2e      	ldr	r3, [pc, #184]	@ (8002424 <starter_Screen+0x2e8>)
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	4941      	ldr	r1, [pc, #260]	@ (8002474 <starter_Screen+0x338>)
 8002370:	482e      	ldr	r0, [pc, #184]	@ (800242c <starter_Screen+0x2f0>)
 8002372:	f004 fd9d 	bl	8006eb0 <siprintf>
			LCD_Font(540, 310, buffer, _Open_Sans_Bold_24, 1, GRAYISH_BLUE);
 8002376:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	2301      	movs	r3, #1
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	4b3d      	ldr	r3, [pc, #244]	@ (8002478 <starter_Screen+0x33c>)
 8002382:	4a2a      	ldr	r2, [pc, #168]	@ (800242c <starter_Screen+0x2f0>)
 8002384:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8002388:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800238c:	f7ff fe16 	bl	8001fbc <LCD_Font>
			LCD_Font(620, 307, "c", _Open_Sans_Bold_18, 1, GRAYISH_BLUE);
 8002390:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	2301      	movs	r3, #1
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	4b38      	ldr	r3, [pc, #224]	@ (800247c <starter_Screen+0x340>)
 800239c:	4a38      	ldr	r2, [pc, #224]	@ (8002480 <starter_Screen+0x344>)
 800239e:	f240 1133 	movw	r1, #307	@ 0x133
 80023a2:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 80023a6:	f7ff fe09 	bl	8001fbc <LCD_Font>
			TFT_Draw_Circle(618, 293, 2, 0, 1, GRAYISH_BLUE);
 80023aa:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	2301      	movs	r3, #1
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	2300      	movs	r3, #0
 80023b6:	2202      	movs	r2, #2
 80023b8:	f240 1125 	movw	r1, #293	@ 0x125
 80023bc:	f240 206a 	movw	r0, #618	@ 0x26a
 80023c0:	f7ff f954 	bl	800166c <TFT_Draw_Circle>
			LCD_Font(650, 307, "Aquecendo",_Open_Sans_Bold_16, 1, GRAYISH_BLUE);
 80023c4:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	2301      	movs	r3, #1
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <starter_Screen+0x300>)
 80023d0:	4a2c      	ldr	r2, [pc, #176]	@ (8002484 <starter_Screen+0x348>)
 80023d2:	f240 1133 	movw	r1, #307	@ 0x133
 80023d6:	f240 208a 	movw	r0, #650	@ 0x28a
 80023da:	f7ff fdef 	bl	8001fbc <LCD_Font>
			TFT_Draw_Bitmap(610, 337, RECIRCULACAO_WIDTH, RECIRCULACAO_HEIGHT, recirculacao_bitmap, GRAYISH_BLUE);
 80023de:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 80023e2:	9301      	str	r3, [sp, #4]
 80023e4:	4b28      	ldr	r3, [pc, #160]	@ (8002488 <starter_Screen+0x34c>)
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	231b      	movs	r3, #27
 80023ea:	2215      	movs	r2, #21
 80023ec:	f240 1151 	movw	r1, #337	@ 0x151
 80023f0:	f240 2062 	movw	r0, #610	@ 0x262
 80023f4:	f7ff fe5c 	bl	80020b0 <TFT_Draw_Bitmap>
			LCD_Font(650, 357, "Recirculando",_Open_Sans_Bold_16, 1, GRAYISH_BLUE);
 80023f8:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	2301      	movs	r3, #1
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	4b0e      	ldr	r3, [pc, #56]	@ (800243c <starter_Screen+0x300>)
 8002404:	4a21      	ldr	r2, [pc, #132]	@ (800248c <starter_Screen+0x350>)
 8002406:	f240 1165 	movw	r1, #357	@ 0x165
 800240a:	f240 208a 	movw	r0, #650	@ 0x28a
 800240e:	f7ff fdd5 	bl	8001fbc <LCD_Font>
		}
	}
}
 8002412:	bf00      	nop
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000050 	.word	0x20000050
 800241c:	20000260 	.word	0x20000260
 8002420:	20000262 	.word	0x20000262
 8002424:	2000005c 	.word	0x2000005c
 8002428:	0800a750 	.word	0x0800a750
 800242c:	20000298 	.word	0x20000298
 8002430:	0801f29c 	.word	0x0801f29c
 8002434:	0800ff54 	.word	0x0800ff54
 8002438:	0800a754 	.word	0x0800a754
 800243c:	0800b678 	.word	0x0800b678
 8002440:	0800a758 	.word	0x0800a758
 8002444:	0800a760 	.word	0x0800a760
 8002448:	20000058 	.word	0x20000058
 800244c:	0800a770 	.word	0x0800a770
 8002450:	0800d9e8 	.word	0x0800d9e8
 8002454:	0800a778 	.word	0x0800a778
 8002458:	0800a780 	.word	0x0800a780
 800245c:	0800aef4 	.word	0x0800aef4
 8002460:	0800a784 	.word	0x0800a784
 8002464:	0800a790 	.word	0x0800a790
 8002468:	0800a79c 	.word	0x0800a79c
 800246c:	080210d4 	.word	0x080210d4
 8002470:	0800a7b0 	.word	0x0800a7b0
 8002474:	0800a7c0 	.word	0x0800a7c0
 8002478:	0800cad0 	.word	0x0800cad0
 800247c:	0800beb4 	.word	0x0800beb4
 8002480:	0800a7c8 	.word	0x0800a7c8
 8002484:	0800a7cc 	.word	0x0800a7cc
 8002488:	08020c64 	.word	0x08020c64
 800248c:	0800a7d8 	.word	0x0800a7d8

08002490 <home_screen>:

void home_screen(void) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af04      	add	r7, sp, #16
	TFT_Draw_Round_Rect(30, 90, 740, 65, 10, 1, WHITE);
 8002496:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800249a:	9302      	str	r3, [sp, #8]
 800249c:	2301      	movs	r3, #1
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	230a      	movs	r3, #10
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	2341      	movs	r3, #65	@ 0x41
 80024a6:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80024aa:	215a      	movs	r1, #90	@ 0x5a
 80024ac:	201e      	movs	r0, #30
 80024ae:	f7ff faf8 	bl	8001aa2 <TFT_Draw_Round_Rect>
	TFT_Draw_Round_Rect(30, 165, 740, 65, 10, 1, WHITE);
 80024b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024b6:	9302      	str	r3, [sp, #8]
 80024b8:	2301      	movs	r3, #1
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	230a      	movs	r3, #10
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2341      	movs	r3, #65	@ 0x41
 80024c2:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80024c6:	21a5      	movs	r1, #165	@ 0xa5
 80024c8:	201e      	movs	r0, #30
 80024ca:	f7ff faea 	bl	8001aa2 <TFT_Draw_Round_Rect>
	TFT_Draw_Round_Rect(30, 240, 740, 65, 10, 1, WHITE);
 80024ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024d2:	9302      	str	r3, [sp, #8]
 80024d4:	2301      	movs	r3, #1
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	230a      	movs	r3, #10
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2341      	movs	r3, #65	@ 0x41
 80024de:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80024e2:	21f0      	movs	r1, #240	@ 0xf0
 80024e4:	201e      	movs	r0, #30
 80024e6:	f7ff fadc 	bl	8001aa2 <TFT_Draw_Round_Rect>
	TFT_Draw_Round_Rect(30, 315, 740, 65, 10, 1, WHITE);
 80024ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024ee:	9302      	str	r3, [sp, #8]
 80024f0:	2301      	movs	r3, #1
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	230a      	movs	r3, #10
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	2341      	movs	r3, #65	@ 0x41
 80024fa:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80024fe:	f240 113b 	movw	r1, #315	@ 0x13b
 8002502:	201e      	movs	r0, #30
 8002504:	f7ff facd 	bl	8001aa2 <TFT_Draw_Round_Rect>

	// Escreve os 4 modos nas suas devidas posições
	LCD_Font(140, 130, menu_items[0], _Open_Sans_Bold_24, 1, WHITE);
 8002508:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	2301      	movs	r3, #1
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	4b2c      	ldr	r3, [pc, #176]	@ (80025c4 <home_screen+0x134>)
 8002514:	4a2c      	ldr	r2, [pc, #176]	@ (80025c8 <home_screen+0x138>)
 8002516:	2182      	movs	r1, #130	@ 0x82
 8002518:	208c      	movs	r0, #140	@ 0x8c
 800251a:	f7ff fd4f 	bl	8001fbc <LCD_Font>
	LCD_Font(140, 205, menu_items[1], _Open_Sans_Bold_24, 1, WHITE);
 800251e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002522:	9301      	str	r3, [sp, #4]
 8002524:	2301      	movs	r3, #1
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	4b26      	ldr	r3, [pc, #152]	@ (80025c4 <home_screen+0x134>)
 800252a:	4a28      	ldr	r2, [pc, #160]	@ (80025cc <home_screen+0x13c>)
 800252c:	21cd      	movs	r1, #205	@ 0xcd
 800252e:	208c      	movs	r0, #140	@ 0x8c
 8002530:	f7ff fd44 	bl	8001fbc <LCD_Font>
	LCD_Font(140, 280, menu_items[2], _Open_Sans_Bold_24, 1, WHITE);
 8002534:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	2301      	movs	r3, #1
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	4b21      	ldr	r3, [pc, #132]	@ (80025c4 <home_screen+0x134>)
 8002540:	4a23      	ldr	r2, [pc, #140]	@ (80025d0 <home_screen+0x140>)
 8002542:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002546:	208c      	movs	r0, #140	@ 0x8c
 8002548:	f7ff fd38 	bl	8001fbc <LCD_Font>
	LCD_Font(140, 355, menu_items[3], _Open_Sans_Bold_24, 1, WHITE);
 800254c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	2301      	movs	r3, #1
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <home_screen+0x134>)
 8002558:	4a1e      	ldr	r2, [pc, #120]	@ (80025d4 <home_screen+0x144>)
 800255a:	f240 1163 	movw	r1, #355	@ 0x163
 800255e:	208c      	movs	r0, #140	@ 0x8c
 8002560:	f7ff fd2c 	bl	8001fbc <LCD_Font>

	TFT_Draw_Bitmap(70, 105, BANHO_BITMAP_WIDTH, BANHO_BITMAP_HEIGHT, banho_bitmap, WHITE);
 8002564:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	4b1b      	ldr	r3, [pc, #108]	@ (80025d8 <home_screen+0x148>)
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2318      	movs	r3, #24
 8002570:	2212      	movs	r2, #18
 8002572:	2169      	movs	r1, #105	@ 0x69
 8002574:	2046      	movs	r0, #70	@ 0x46
 8002576:	f7ff fd9b 	bl	80020b0 <TFT_Draw_Bitmap>
	TFT_Draw_Bitmap(70, 180, ABASTECIMENTO_BITMAP_WIDTH, ABASTECIMENTO_BITMAP_HEIGHT, abastecimento_bitmap, WHITE);
 800257a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800257e:	9301      	str	r3, [sp, #4]
 8002580:	4b16      	ldr	r3, [pc, #88]	@ (80025dc <home_screen+0x14c>)
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2318      	movs	r3, #24
 8002586:	2217      	movs	r2, #23
 8002588:	21b4      	movs	r1, #180	@ 0xb4
 800258a:	2046      	movs	r0, #70	@ 0x46
 800258c:	f7ff fd90 	bl	80020b0 <TFT_Draw_Bitmap>
	TFT_Draw_Bitmap(70, 255, DRENAGEM_BITMAP_WIDTH, DRENAGEM_BITMAP_HEIGHT, drenagem_bitmap, WHITE);
 8002590:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	4b12      	ldr	r3, [pc, #72]	@ (80025e0 <home_screen+0x150>)
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2318      	movs	r3, #24
 800259c:	2212      	movs	r2, #18
 800259e:	21ff      	movs	r1, #255	@ 0xff
 80025a0:	2046      	movs	r0, #70	@ 0x46
 80025a2:	f7ff fd85 	bl	80020b0 <TFT_Draw_Bitmap>
	TFT_Draw_Bitmap(70, 330, CONFIGURACAO_BITMAP_WIDTH, CONFIGURACAO_BITMAP_HEIGHT, configuracao_bitmap, WHITE);
 80025a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	4b0d      	ldr	r3, [pc, #52]	@ (80025e4 <home_screen+0x154>)
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	231a      	movs	r3, #26
 80025b2:	2216      	movs	r2, #22
 80025b4:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80025b8:	2046      	movs	r0, #70	@ 0x46
 80025ba:	f7ff fd79 	bl	80020b0 <TFT_Draw_Bitmap>
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	0800cad0 	.word	0x0800cad0
 80025c8:	20000000 	.word	0x20000000
 80025cc:	20000014 	.word	0x20000014
 80025d0:	20000028 	.word	0x20000028
 80025d4:	2000003c 	.word	0x2000003c
 80025d8:	0801fcdc 	.word	0x0801fcdc
 80025dc:	0802003c 	.word	0x0802003c
 80025e0:	0802048c 	.word	0x0802048c
 80025e4:	080207ec 	.word	0x080207ec

080025e8 <atualiza_Cursor>:

void atualiza_Cursor (void)
{
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af02      	add	r7, sp, #8
	// Inserir o Cursor na primeira iteração
	if(ultimo_item_selecionado == -1)
 80025ee:	4ba7      	ldr	r3, [pc, #668]	@ (800288c <atualiza_Cursor+0x2a4>)
 80025f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f8:	d124      	bne.n	8002644 <atualiza_Cursor+0x5c>
	{
		TFT_Draw_Fill_Round_Rect(31, 91, 738, 63, 6, WHITE);
 80025fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	2306      	movs	r3, #6
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	233f      	movs	r3, #63	@ 0x3f
 8002606:	f240 22e2 	movw	r2, #738	@ 0x2e2
 800260a:	215b      	movs	r1, #91	@ 0x5b
 800260c:	201f      	movs	r0, #31
 800260e:	f7ff fbbb 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
		LCD_Font(140, 130, menu_items[0], _Open_Sans_Bold_24, 1, VIVID_BLUE);
 8002612:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002616:	9301      	str	r3, [sp, #4]
 8002618:	2301      	movs	r3, #1
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	4b9c      	ldr	r3, [pc, #624]	@ (8002890 <atualiza_Cursor+0x2a8>)
 800261e:	4a9d      	ldr	r2, [pc, #628]	@ (8002894 <atualiza_Cursor+0x2ac>)
 8002620:	2182      	movs	r1, #130	@ 0x82
 8002622:	208c      	movs	r0, #140	@ 0x8c
 8002624:	f7ff fcca 	bl	8001fbc <LCD_Font>
		TFT_Draw_Bitmap(70, 105, BANHO_BITMAP_WIDTH, BANHO_BITMAP_HEIGHT, banho_bitmap, VIVID_BLUE);
 8002628:	f240 431f 	movw	r3, #1055	@ 0x41f
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	4b9a      	ldr	r3, [pc, #616]	@ (8002898 <atualiza_Cursor+0x2b0>)
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2318      	movs	r3, #24
 8002634:	2212      	movs	r2, #18
 8002636:	2169      	movs	r1, #105	@ 0x69
 8002638:	2046      	movs	r0, #70	@ 0x46
 800263a:	f7ff fd39 	bl	80020b0 <TFT_Draw_Bitmap>
		ultimo_item_selecionado = 0;
 800263e:	4b93      	ldr	r3, [pc, #588]	@ (800288c <atualiza_Cursor+0x2a4>)
 8002640:	2200      	movs	r2, #0
 8002642:	801a      	strh	r2, [r3, #0]

	}

	// Inserir o cursor após a troca de tela
	if(ultimo_estado_menu != current_screen && ultimo_estado_menu != 0)
 8002644:	4b95      	ldr	r3, [pc, #596]	@ (800289c <atualiza_Cursor+0x2b4>)
 8002646:	f9b3 2000 	ldrsh.w	r2, [r3]
 800264a:	4b95      	ldr	r3, [pc, #596]	@ (80028a0 <atualiza_Cursor+0x2b8>)
 800264c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002650:	429a      	cmp	r2, r3
 8002652:	d06b      	beq.n	800272c <atualiza_Cursor+0x144>
 8002654:	4b91      	ldr	r3, [pc, #580]	@ (800289c <atualiza_Cursor+0x2b4>)
 8002656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d066      	beq.n	800272c <atualiza_Cursor+0x144>
	{
		ultimo_estado_menu = current_screen;
 800265e:	4b90      	ldr	r3, [pc, #576]	@ (80028a0 <atualiza_Cursor+0x2b8>)
 8002660:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002664:	4b8d      	ldr	r3, [pc, #564]	@ (800289c <atualiza_Cursor+0x2b4>)
 8002666:	801a      	strh	r2, [r3, #0]
		TFT_Draw_Fill_Round_Rect(31, (item_selected * (65 + 10)) + 91, 738, 63, 8, WHITE);
 8002668:	4b8e      	ldr	r3, [pc, #568]	@ (80028a4 <atualiza_Cursor+0x2bc>)
 800266a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800266e:	b29b      	uxth	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	0092      	lsls	r2, r2, #2
 8002674:	4413      	add	r3, r2
 8002676:	461a      	mov	r2, r3
 8002678:	0112      	lsls	r2, r2, #4
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	b29b      	uxth	r3, r3
 800267e:	335b      	adds	r3, #91	@ 0x5b
 8002680:	b299      	uxth	r1, r3
 8002682:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	2308      	movs	r3, #8
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	233f      	movs	r3, #63	@ 0x3f
 800268e:	f240 22e2 	movw	r2, #738	@ 0x2e2
 8002692:	201f      	movs	r0, #31
 8002694:	f7ff fb78 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
		LCD_Font(140, (item_selected * (65 + 10)) + 131, menu_items[item_selected], _Open_Sans_Bold_24, 1, VIVID_BLUE);
 8002698:	4b82      	ldr	r3, [pc, #520]	@ (80028a4 <atualiza_Cursor+0x2bc>)
 800269a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	0092      	lsls	r2, r2, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	461a      	mov	r2, r3
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3383      	adds	r3, #131	@ 0x83
 80026b0:	b299      	uxth	r1, r3
 80026b2:	4b7c      	ldr	r3, [pc, #496]	@ (80028a4 <atualiza_Cursor+0x2bc>)
 80026b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026b8:	461a      	mov	r2, r3
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4a74      	ldr	r2, [pc, #464]	@ (8002894 <atualiza_Cursor+0x2ac>)
 80026c4:	441a      	add	r2, r3
 80026c6:	f240 431f 	movw	r3, #1055	@ 0x41f
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	2301      	movs	r3, #1
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002890 <atualiza_Cursor+0x2a8>)
 80026d2:	208c      	movs	r0, #140	@ 0x8c
 80026d4:	f7ff fc72 	bl	8001fbc <LCD_Font>
		TFT_Draw_Bitmap(70, (item_selected * (65 + 10)) + 105, bitmap_w[item_selected], bitmap_h[item_selected], bitmap_icons[item_selected], VIVID_BLUE);
 80026d8:	4b72      	ldr	r3, [pc, #456]	@ (80028a4 <atualiza_Cursor+0x2bc>)
 80026da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	0092      	lsls	r2, r2, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	461a      	mov	r2, r3
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3369      	adds	r3, #105	@ 0x69
 80026f0:	b299      	uxth	r1, r3
 80026f2:	4b6c      	ldr	r3, [pc, #432]	@ (80028a4 <atualiza_Cursor+0x2bc>)
 80026f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026f8:	461a      	mov	r2, r3
 80026fa:	4b6b      	ldr	r3, [pc, #428]	@ (80028a8 <atualiza_Cursor+0x2c0>)
 80026fc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002700:	4b68      	ldr	r3, [pc, #416]	@ (80028a4 <atualiza_Cursor+0x2bc>)
 8002702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002706:	4618      	mov	r0, r3
 8002708:	4b68      	ldr	r3, [pc, #416]	@ (80028ac <atualiza_Cursor+0x2c4>)
 800270a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800270e:	4b65      	ldr	r3, [pc, #404]	@ (80028a4 <atualiza_Cursor+0x2bc>)
 8002710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002714:	461c      	mov	r4, r3
 8002716:	4b66      	ldr	r3, [pc, #408]	@ (80028b0 <atualiza_Cursor+0x2c8>)
 8002718:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800271c:	f240 441f 	movw	r4, #1055	@ 0x41f
 8002720:	9401      	str	r4, [sp, #4]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	4603      	mov	r3, r0
 8002726:	2046      	movs	r0, #70	@ 0x46
 8002728:	f7ff fcc2 	bl	80020b0 <TFT_Draw_Bitmap>
	}

	// Verifica se a variável item_selecionado mudou = a posição do cursor deve mudar para a nova posição
	if (ultimo_item_selecionado != item_selected)
 800272c:	4b57      	ldr	r3, [pc, #348]	@ (800288c <atualiza_Cursor+0x2a4>)
 800272e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002732:	4b5c      	ldr	r3, [pc, #368]	@ (80028a4 <atualiza_Cursor+0x2bc>)
 8002734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002738:	429a      	cmp	r2, r3
 800273a:	f000 80a3 	beq.w	8002884 <atualiza_Cursor+0x29c>
	{
		uint16_t y_old = (ultimo_item_selecionado*(65+10)) + 110;
 800273e:	4b53      	ldr	r3, [pc, #332]	@ (800288c <atualiza_Cursor+0x2a4>)
 8002740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002744:	b29b      	uxth	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	0092      	lsls	r2, r2, #2
 800274a:	4413      	add	r3, r2
 800274c:	461a      	mov	r2, r3
 800274e:	0112      	lsls	r2, r2, #4
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	b29b      	uxth	r3, r3
 8002754:	336e      	adds	r3, #110	@ 0x6e
 8002756:	80fb      	strh	r3, [r7, #6]
		uint16_t y_new = (item_selected*(65+10)) + 110;
 8002758:	4b52      	ldr	r3, [pc, #328]	@ (80028a4 <atualiza_Cursor+0x2bc>)
 800275a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800275e:	b29b      	uxth	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	0092      	lsls	r2, r2, #2
 8002764:	4413      	add	r3, r2
 8002766:	461a      	mov	r2, r3
 8002768:	0112      	lsls	r2, r2, #4
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	b29b      	uxth	r3, r3
 800276e:	336e      	adds	r3, #110	@ 0x6e
 8002770:	80bb      	strh	r3, [r7, #4]

		// Escreve os antigos cursores com branco para não precisar apagar a tela totalmente
		TFT_Draw_Fill_Round_Rect(31, y_old-19, 738, 63, 8, VIVID_BLUE);
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	3b13      	subs	r3, #19
 8002776:	b299      	uxth	r1, r3
 8002778:	f240 431f 	movw	r3, #1055	@ 0x41f
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	2308      	movs	r3, #8
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	233f      	movs	r3, #63	@ 0x3f
 8002784:	f240 22e2 	movw	r2, #738	@ 0x2e2
 8002788:	201f      	movs	r0, #31
 800278a:	f7ff fafd 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
		LCD_Font(140, y_old+21, menu_items[ultimo_item_selecionado], _Open_Sans_Bold_24, 1, WHITE);
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	3315      	adds	r3, #21
 8002792:	b299      	uxth	r1, r3
 8002794:	4b3d      	ldr	r3, [pc, #244]	@ (800288c <atualiza_Cursor+0x2a4>)
 8002796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800279a:	461a      	mov	r2, r3
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4a3b      	ldr	r2, [pc, #236]	@ (8002894 <atualiza_Cursor+0x2ac>)
 80027a6:	441a      	add	r2, r3
 80027a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	2301      	movs	r3, #1
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	4b37      	ldr	r3, [pc, #220]	@ (8002890 <atualiza_Cursor+0x2a8>)
 80027b4:	208c      	movs	r0, #140	@ 0x8c
 80027b6:	f7ff fc01 	bl	8001fbc <LCD_Font>
		TFT_Draw_Bitmap(70, y_old, bitmap_w[ultimo_item_selecionado], bitmap_h[ultimo_item_selecionado], bitmap_icons[ultimo_item_selecionado], WHITE);
 80027ba:	4b34      	ldr	r3, [pc, #208]	@ (800288c <atualiza_Cursor+0x2a4>)
 80027bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b39      	ldr	r3, [pc, #228]	@ (80028a8 <atualiza_Cursor+0x2c0>)
 80027c4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80027c8:	4b30      	ldr	r3, [pc, #192]	@ (800288c <atualiza_Cursor+0x2a4>)
 80027ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ce:	4619      	mov	r1, r3
 80027d0:	4b36      	ldr	r3, [pc, #216]	@ (80028ac <atualiza_Cursor+0x2c4>)
 80027d2:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80027d6:	4b2d      	ldr	r3, [pc, #180]	@ (800288c <atualiza_Cursor+0x2a4>)
 80027d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027dc:	4619      	mov	r1, r3
 80027de:	4b34      	ldr	r3, [pc, #208]	@ (80028b0 <atualiza_Cursor+0x2c8>)
 80027e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027e4:	88f9      	ldrh	r1, [r7, #6]
 80027e6:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 80027ea:	9401      	str	r4, [sp, #4]
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	4603      	mov	r3, r0
 80027f0:	2046      	movs	r0, #70	@ 0x46
 80027f2:	f7ff fc5d 	bl	80020b0 <TFT_Draw_Bitmap>

		ultimo_item_selecionado = item_selected; // Muda o item selecionado
 80027f6:	4b2b      	ldr	r3, [pc, #172]	@ (80028a4 <atualiza_Cursor+0x2bc>)
 80027f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027fc:	4b23      	ldr	r3, [pc, #140]	@ (800288c <atualiza_Cursor+0x2a4>)
 80027fe:	801a      	strh	r2, [r3, #0]

		TFT_Draw_Fill_Round_Rect(31, y_new-19, 738, 63, 8, WHITE);
 8002800:	88bb      	ldrh	r3, [r7, #4]
 8002802:	3b13      	subs	r3, #19
 8002804:	b299      	uxth	r1, r3
 8002806:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	2308      	movs	r3, #8
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	233f      	movs	r3, #63	@ 0x3f
 8002812:	f240 22e2 	movw	r2, #738	@ 0x2e2
 8002816:	201f      	movs	r0, #31
 8002818:	f7ff fab6 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
		LCD_Font(140, y_new+21, menu_items[item_selected], _Open_Sans_Bold_24, 1, VIVID_BLUE);
 800281c:	88bb      	ldrh	r3, [r7, #4]
 800281e:	3315      	adds	r3, #21
 8002820:	b299      	uxth	r1, r3
 8002822:	4b20      	ldr	r3, [pc, #128]	@ (80028a4 <atualiza_Cursor+0x2bc>)
 8002824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002828:	461a      	mov	r2, r3
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4a18      	ldr	r2, [pc, #96]	@ (8002894 <atualiza_Cursor+0x2ac>)
 8002834:	441a      	add	r2, r3
 8002836:	f240 431f 	movw	r3, #1055	@ 0x41f
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	2301      	movs	r3, #1
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	4b13      	ldr	r3, [pc, #76]	@ (8002890 <atualiza_Cursor+0x2a8>)
 8002842:	208c      	movs	r0, #140	@ 0x8c
 8002844:	f7ff fbba 	bl	8001fbc <LCD_Font>
		TFT_Draw_Bitmap(70, y_new, bitmap_w[item_selected], bitmap_h[item_selected], bitmap_icons[item_selected], VIVID_BLUE);
 8002848:	4b16      	ldr	r3, [pc, #88]	@ (80028a4 <atualiza_Cursor+0x2bc>)
 800284a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800284e:	461a      	mov	r2, r3
 8002850:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <atualiza_Cursor+0x2c0>)
 8002852:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002856:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <atualiza_Cursor+0x2bc>)
 8002858:	f9b3 3000 	ldrsh.w	r3, [r3]
 800285c:	4619      	mov	r1, r3
 800285e:	4b13      	ldr	r3, [pc, #76]	@ (80028ac <atualiza_Cursor+0x2c4>)
 8002860:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8002864:	4b0f      	ldr	r3, [pc, #60]	@ (80028a4 <atualiza_Cursor+0x2bc>)
 8002866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800286a:	4619      	mov	r1, r3
 800286c:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <atualiza_Cursor+0x2c8>)
 800286e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002872:	88b9      	ldrh	r1, [r7, #4]
 8002874:	f240 441f 	movw	r4, #1055	@ 0x41f
 8002878:	9401      	str	r4, [sp, #4]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	4603      	mov	r3, r0
 800287e:	2046      	movs	r0, #70	@ 0x46
 8002880:	f7ff fc16 	bl	80020b0 <TFT_Draw_Bitmap>
	}
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bd90      	pop	{r4, r7, pc}
 800288c:	20000052 	.word	0x20000052
 8002890:	0800cad0 	.word	0x0800cad0
 8002894:	20000000 	.word	0x20000000
 8002898:	0801fcdc 	.word	0x0801fcdc
 800289c:	20000050 	.word	0x20000050
 80028a0:	20000260 	.word	0x20000260
 80028a4:	20000262 	.word	0x20000262
 80028a8:	080215f4 	.word	0x080215f4
 80028ac:	080215fc 	.word	0x080215fc
 80028b0:	20000060 	.word	0x20000060

080028b4 <header_fotter>:
	LCD_Font(x, 50, titulo, _Open_Sans_Bold_48, 1, BLACK);
	TFT_Draw_HLine(5, 100, 795, 2, BLACK);
}

void header_fotter (void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af02      	add	r7, sp, #8
	if(flag_escrita_tela)
 80028ba:	4bb1      	ldr	r3, [pc, #708]	@ (8002b80 <header_fotter+0x2cc>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8329 	beq.w	8002f18 <header_fotter+0x664>
	{
		if(current_screen == 0)
 80028c6:	4baf      	ldr	r3, [pc, #700]	@ (8002b84 <header_fotter+0x2d0>)
 80028c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d16e      	bne.n	80029ae <header_fotter+0xfa>
		{
			TFT_Draw_Fill_Rectangle(30, 0, 600, 35, VIVID_BLUE);
 80028d0:	f240 431f 	movw	r3, #1055	@ 0x41f
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2323      	movs	r3, #35	@ 0x23
 80028d8:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80028dc:	2100      	movs	r1, #0
 80028de:	201e      	movs	r0, #30
 80028e0:	f7fe fe18 	bl	8001514 <TFT_Draw_Fill_Rectangle>
			LCD_Font(33, 30, "Menu", _Open_Sans_Bold_18, 1, WHITE);
 80028e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	2301      	movs	r3, #1
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	4ba6      	ldr	r3, [pc, #664]	@ (8002b88 <header_fotter+0x2d4>)
 80028f0:	4aa6      	ldr	r2, [pc, #664]	@ (8002b8c <header_fotter+0x2d8>)
 80028f2:	211e      	movs	r1, #30
 80028f4:	2021      	movs	r0, #33	@ 0x21
 80028f6:	f7ff fb61 	bl	8001fbc <LCD_Font>
			TFT_Draw_Fill_Round_Rect(41, 421, 138, 38, 8, VIVID_BLUE);
 80028fa:	f240 431f 	movw	r3, #1055	@ 0x41f
 80028fe:	9301      	str	r3, [sp, #4]
 8002900:	2308      	movs	r3, #8
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	2326      	movs	r3, #38	@ 0x26
 8002906:	228a      	movs	r2, #138	@ 0x8a
 8002908:	f240 11a5 	movw	r1, #421	@ 0x1a5
 800290c:	2029      	movs	r0, #41	@ 0x29
 800290e:	f7ff fa3b 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
			TFT_Draw_Fill_Round_Rect(231, 421, 138, 38, 8, WHITE);
 8002912:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	2308      	movs	r3, #8
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	2326      	movs	r3, #38	@ 0x26
 800291e:	228a      	movs	r2, #138	@ 0x8a
 8002920:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002924:	20e7      	movs	r0, #231	@ 0xe7
 8002926:	f7ff fa2f 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
			TFT_Draw_Fill_Round_Rect(421, 421, 138, 38, 8, WHITE);
 800292a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	2308      	movs	r3, #8
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	2326      	movs	r3, #38	@ 0x26
 8002936:	228a      	movs	r2, #138	@ 0x8a
 8002938:	f240 11a5 	movw	r1, #421	@ 0x1a5
 800293c:	f240 10a5 	movw	r0, #421	@ 0x1a5
 8002940:	f7ff fa22 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
			TFT_Draw_Fill_Round_Rect(621, 421, 138, 38, 8, WHITE);
 8002944:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	2308      	movs	r3, #8
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	2326      	movs	r3, #38	@ 0x26
 8002950:	228a      	movs	r2, #138	@ 0x8a
 8002952:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002956:	f240 206d 	movw	r0, #621	@ 0x26d
 800295a:	f7ff fa15 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>

			TFT_Draw_Fill_Triangle_Simple(285, 427, 30, 18, 1, VIVID_BLUE);
 800295e:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	2301      	movs	r3, #1
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	2312      	movs	r3, #18
 800296a:	221e      	movs	r2, #30
 800296c:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8002970:	f240 101d 	movw	r0, #285	@ 0x11d
 8002974:	f7fe fdfc 	bl	8001570 <TFT_Draw_Fill_Triangle_Simple>
			TFT_Draw_Fill_Triangle_Inverted_Simple(475, 432, 30, 18, 1, VIVID_BLUE);
 8002978:	f240 431f 	movw	r3, #1055	@ 0x41f
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	2301      	movs	r3, #1
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	2312      	movs	r3, #18
 8002984:	221e      	movs	r2, #30
 8002986:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 800298a:	f240 10db 	movw	r0, #475	@ 0x1db
 800298e:	f7fe fe2d 	bl	80015ec <TFT_Draw_Fill_Triangle_Inverted_Simple>
			LCD_Font(660, 446, "Entrar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8002992:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	2301      	movs	r3, #1
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	4b7a      	ldr	r3, [pc, #488]	@ (8002b88 <header_fotter+0x2d4>)
 800299e:	4a7c      	ldr	r2, [pc, #496]	@ (8002b90 <header_fotter+0x2dc>)
 80029a0:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 80029a4:	f44f 7025 	mov.w	r0, #660	@ 0x294
 80029a8:	f7ff fb08 	bl	8001fbc <LCD_Font>
 80029ac:	e2b1      	b.n	8002f12 <header_fotter+0x65e>
		}
		else // current_screen == 1
		{
			if(item_selected == 0)
 80029ae:	4b79      	ldr	r3, [pc, #484]	@ (8002b94 <header_fotter+0x2e0>)
 80029b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f040 8161 	bne.w	8002c7c <header_fotter+0x3c8>
			{
				TFT_Draw_Fill_Rectangle(30, 0, 600, 35, VIVID_BLUE);
 80029ba:	f240 431f 	movw	r3, #1055	@ 0x41f
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	2323      	movs	r3, #35	@ 0x23
 80029c2:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80029c6:	2100      	movs	r1, #0
 80029c8:	201e      	movs	r0, #30
 80029ca:	f7fe fda3 	bl	8001514 <TFT_Draw_Fill_Rectangle>

				if(flag_desligar_banho)
 80029ce:	4b72      	ldr	r3, [pc, #456]	@ (8002b98 <header_fotter+0x2e4>)
 80029d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d064      	beq.n	8002aa2 <header_fotter+0x1ee>
				{
					LCD_Font(33, 30, "Banho / Finalizando", _Open_Sans_Bold_18, 1, WHITE);
 80029d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	2301      	movs	r3, #1
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	4b69      	ldr	r3, [pc, #420]	@ (8002b88 <header_fotter+0x2d4>)
 80029e4:	4a6d      	ldr	r2, [pc, #436]	@ (8002b9c <header_fotter+0x2e8>)
 80029e6:	211e      	movs	r1, #30
 80029e8:	2021      	movs	r0, #33	@ 0x21
 80029ea:	f7ff fae7 	bl	8001fbc <LCD_Font>

					TFT_Draw_Fill_Round_Rect(41, 421, 138, 38, 8, VIVID_BLUE);
 80029ee:	f240 431f 	movw	r3, #1055	@ 0x41f
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	2308      	movs	r3, #8
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2326      	movs	r3, #38	@ 0x26
 80029fa:	228a      	movs	r2, #138	@ 0x8a
 80029fc:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002a00:	2029      	movs	r0, #41	@ 0x29
 8002a02:	f7ff f9c1 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
					TFT_Draw_Fill_Round_Rect(231, 421, 138, 38, 8, GRAYISH_BLUE);
 8002a06:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	2308      	movs	r3, #8
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2326      	movs	r3, #38	@ 0x26
 8002a12:	228a      	movs	r2, #138	@ 0x8a
 8002a14:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002a18:	20e7      	movs	r0, #231	@ 0xe7
 8002a1a:	f7ff f9b5 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
					TFT_Draw_Fill_Round_Rect(421, 421, 138, 38, 8, GRAYISH_BLUE);
 8002a1e:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	2308      	movs	r3, #8
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2326      	movs	r3, #38	@ 0x26
 8002a2a:	228a      	movs	r2, #138	@ 0x8a
 8002a2c:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002a30:	f240 10a5 	movw	r0, #421	@ 0x1a5
 8002a34:	f7ff f9a8 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
					TFT_Draw_Fill_Round_Rect(621, 421, 138, 38, 8, GRAYISH_BLUE);
 8002a38:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	2308      	movs	r3, #8
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	2326      	movs	r3, #38	@ 0x26
 8002a44:	228a      	movs	r2, #138	@ 0x8a
 8002a46:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002a4a:	f240 206d 	movw	r0, #621	@ 0x26d
 8002a4e:	f7ff f99b 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>

					TFT_Draw_Fill_Triangle_Simple(285, 427, 30, 18, 1, VIVID_BLUE);
 8002a52:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002a56:	9301      	str	r3, [sp, #4]
 8002a58:	2301      	movs	r3, #1
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2312      	movs	r3, #18
 8002a5e:	221e      	movs	r2, #30
 8002a60:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8002a64:	f240 101d 	movw	r0, #285	@ 0x11d
 8002a68:	f7fe fd82 	bl	8001570 <TFT_Draw_Fill_Triangle_Simple>
					TFT_Draw_Fill_Triangle_Inverted_Simple(475, 432, 30, 18, 1, VIVID_BLUE);
 8002a6c:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002a70:	9301      	str	r3, [sp, #4]
 8002a72:	2301      	movs	r3, #1
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	2312      	movs	r3, #18
 8002a78:	221e      	movs	r2, #30
 8002a7a:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8002a7e:	f240 10db 	movw	r0, #475	@ 0x1db
 8002a82:	f7fe fdb3 	bl	80015ec <TFT_Draw_Fill_Triangle_Inverted_Simple>
					LCD_Font(665, 446, "Parar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8002a86:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	4b3d      	ldr	r3, [pc, #244]	@ (8002b88 <header_fotter+0x2d4>)
 8002a92:	4a43      	ldr	r2, [pc, #268]	@ (8002ba0 <header_fotter+0x2ec>)
 8002a94:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8002a98:	f240 2099 	movw	r0, #665	@ 0x299
 8002a9c:	f7ff fa8e 	bl	8001fbc <LCD_Font>
 8002aa0:	e237      	b.n	8002f12 <header_fotter+0x65e>
				}
				else
				{
					LCD_Font(33, 30, "Banho / Ajuste a Temperatura do Banho", _Open_Sans_Bold_18, 1, WHITE);
 8002aa2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002aa6:	9301      	str	r3, [sp, #4]
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	4b36      	ldr	r3, [pc, #216]	@ (8002b88 <header_fotter+0x2d4>)
 8002aae:	4a3d      	ldr	r2, [pc, #244]	@ (8002ba4 <header_fotter+0x2f0>)
 8002ab0:	211e      	movs	r1, #30
 8002ab2:	2021      	movs	r0, #33	@ 0x21
 8002ab4:	f7ff fa82 	bl	8001fbc <LCD_Font>

					if(flag_estado_banho || flag_iniciar_banho)
 8002ab8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ba8 <header_fotter+0x2f4>)
 8002aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d104      	bne.n	8002acc <header_fotter+0x218>
 8002ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8002bac <header_fotter+0x2f8>)
 8002ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d071      	beq.n	8002bb0 <header_fotter+0x2fc>
					{
						TFT_Draw_Fill_Round_Rect(41, 421, 138, 38, 8, VIVID_BLUE);
 8002acc:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	2308      	movs	r3, #8
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	2326      	movs	r3, #38	@ 0x26
 8002ad8:	228a      	movs	r2, #138	@ 0x8a
 8002ada:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002ade:	2029      	movs	r0, #41	@ 0x29
 8002ae0:	f7ff f952 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
						TFT_Draw_Fill_Round_Rect(231, 421, 138, 38, 8, WHITE);
 8002ae4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	2308      	movs	r3, #8
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	2326      	movs	r3, #38	@ 0x26
 8002af0:	228a      	movs	r2, #138	@ 0x8a
 8002af2:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002af6:	20e7      	movs	r0, #231	@ 0xe7
 8002af8:	f7ff f946 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
						TFT_Draw_Fill_Round_Rect(421, 421, 138, 38, 8, WHITE);
 8002afc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	2308      	movs	r3, #8
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	2326      	movs	r3, #38	@ 0x26
 8002b08:	228a      	movs	r2, #138	@ 0x8a
 8002b0a:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002b0e:	f240 10a5 	movw	r0, #421	@ 0x1a5
 8002b12:	f7ff f939 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
						TFT_Draw_Fill_Round_Rect(621, 421, 138, 38, 8, WHITE);
 8002b16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	2308      	movs	r3, #8
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	2326      	movs	r3, #38	@ 0x26
 8002b22:	228a      	movs	r2, #138	@ 0x8a
 8002b24:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002b28:	f240 206d 	movw	r0, #621	@ 0x26d
 8002b2c:	f7ff f92c 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>

						TFT_Draw_Fill_Triangle_Simple(285, 427, 30, 18, 1, VIVID_BLUE);
 8002b30:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002b34:	9301      	str	r3, [sp, #4]
 8002b36:	2301      	movs	r3, #1
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	2312      	movs	r3, #18
 8002b3c:	221e      	movs	r2, #30
 8002b3e:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8002b42:	f240 101d 	movw	r0, #285	@ 0x11d
 8002b46:	f7fe fd13 	bl	8001570 <TFT_Draw_Fill_Triangle_Simple>
						TFT_Draw_Fill_Triangle_Inverted_Simple(475, 432, 30, 18, 1, VIVID_BLUE);
 8002b4a:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	2301      	movs	r3, #1
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	2312      	movs	r3, #18
 8002b56:	221e      	movs	r2, #30
 8002b58:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8002b5c:	f240 10db 	movw	r0, #475	@ 0x1db
 8002b60:	f7fe fd44 	bl	80015ec <TFT_Draw_Fill_Triangle_Inverted_Simple>
						LCD_Font(665, 446, "Parar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8002b64:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <header_fotter+0x2d4>)
 8002b70:	4a0b      	ldr	r2, [pc, #44]	@ (8002ba0 <header_fotter+0x2ec>)
 8002b72:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8002b76:	f240 2099 	movw	r0, #665	@ 0x299
 8002b7a:	f7ff fa1f 	bl	8001fbc <LCD_Font>
 8002b7e:	e1c8      	b.n	8002f12 <header_fotter+0x65e>
 8002b80:	20000054 	.word	0x20000054
 8002b84:	20000260 	.word	0x20000260
 8002b88:	0800beb4 	.word	0x0800beb4
 8002b8c:	0800a7e8 	.word	0x0800a7e8
 8002b90:	0800a7f0 	.word	0x0800a7f0
 8002b94:	20000262 	.word	0x20000262
 8002b98:	2000026e 	.word	0x2000026e
 8002b9c:	0800a7f8 	.word	0x0800a7f8
 8002ba0:	0800a80c 	.word	0x0800a80c
 8002ba4:	0800a814 	.word	0x0800a814
 8002ba8:	2000026c 	.word	0x2000026c
 8002bac:	2000026a 	.word	0x2000026a
					}
					else
					{

						TFT_Draw_Fill_Round_Rect(41, 421, 138, 38, 8, WHITE);
 8002bb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bb4:	9301      	str	r3, [sp, #4]
 8002bb6:	2308      	movs	r3, #8
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	2326      	movs	r3, #38	@ 0x26
 8002bbc:	228a      	movs	r2, #138	@ 0x8a
 8002bbe:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002bc2:	2029      	movs	r0, #41	@ 0x29
 8002bc4:	f7ff f8e0 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
						TFT_Draw_Fill_Round_Rect(231, 421, 138, 38, 8, WHITE);
 8002bc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	2308      	movs	r3, #8
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	2326      	movs	r3, #38	@ 0x26
 8002bd4:	228a      	movs	r2, #138	@ 0x8a
 8002bd6:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002bda:	20e7      	movs	r0, #231	@ 0xe7
 8002bdc:	f7ff f8d4 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
						TFT_Draw_Fill_Round_Rect(421, 421, 138, 38, 8, WHITE);
 8002be0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002be4:	9301      	str	r3, [sp, #4]
 8002be6:	2308      	movs	r3, #8
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	2326      	movs	r3, #38	@ 0x26
 8002bec:	228a      	movs	r2, #138	@ 0x8a
 8002bee:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002bf2:	f240 10a5 	movw	r0, #421	@ 0x1a5
 8002bf6:	f7ff f8c7 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
						TFT_Draw_Fill_Round_Rect(621, 421, 138, 38, 8, WHITE);
 8002bfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bfe:	9301      	str	r3, [sp, #4]
 8002c00:	2308      	movs	r3, #8
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	2326      	movs	r3, #38	@ 0x26
 8002c06:	228a      	movs	r2, #138	@ 0x8a
 8002c08:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002c0c:	f240 206d 	movw	r0, #621	@ 0x26d
 8002c10:	f7ff f8ba 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>

						LCD_Font(80, 446, "Voltar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8002c14:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002c18:	9301      	str	r3, [sp, #4]
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	4bc0      	ldr	r3, [pc, #768]	@ (8002f20 <header_fotter+0x66c>)
 8002c20:	4ac0      	ldr	r2, [pc, #768]	@ (8002f24 <header_fotter+0x670>)
 8002c22:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8002c26:	2050      	movs	r0, #80	@ 0x50
 8002c28:	f7ff f9c8 	bl	8001fbc <LCD_Font>
						TFT_Draw_Fill_Triangle_Simple(285, 427, 30, 18, 1, VIVID_BLUE);
 8002c2c:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002c30:	9301      	str	r3, [sp, #4]
 8002c32:	2301      	movs	r3, #1
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	2312      	movs	r3, #18
 8002c38:	221e      	movs	r2, #30
 8002c3a:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8002c3e:	f240 101d 	movw	r0, #285	@ 0x11d
 8002c42:	f7fe fc95 	bl	8001570 <TFT_Draw_Fill_Triangle_Simple>
						TFT_Draw_Fill_Triangle_Inverted_Simple(475, 432, 30, 18, 1, VIVID_BLUE);
 8002c46:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002c4a:	9301      	str	r3, [sp, #4]
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	2312      	movs	r3, #18
 8002c52:	221e      	movs	r2, #30
 8002c54:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8002c58:	f240 10db 	movw	r0, #475	@ 0x1db
 8002c5c:	f7fe fcc6 	bl	80015ec <TFT_Draw_Fill_Triangle_Inverted_Simple>
						LCD_Font(655, 446, "Iniciar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8002c60:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	2301      	movs	r3, #1
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	4bad      	ldr	r3, [pc, #692]	@ (8002f20 <header_fotter+0x66c>)
 8002c6c:	4aae      	ldr	r2, [pc, #696]	@ (8002f28 <header_fotter+0x674>)
 8002c6e:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8002c72:	f240 208f 	movw	r0, #655	@ 0x28f
 8002c76:	f7ff f9a1 	bl	8001fbc <LCD_Font>
 8002c7a:	e14a      	b.n	8002f12 <header_fotter+0x65e>
					}
				}
			}
			else if(item_selected == 1)
 8002c7c:	4bab      	ldr	r3, [pc, #684]	@ (8002f2c <header_fotter+0x678>)
 8002c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d160      	bne.n	8002d48 <header_fotter+0x494>
			{
				TFT_Draw_Fill_Rectangle(30, 0, 600, 35, VIVID_BLUE);
 8002c86:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2323      	movs	r3, #35	@ 0x23
 8002c8e:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8002c92:	2100      	movs	r1, #0
 8002c94:	201e      	movs	r0, #30
 8002c96:	f7fe fc3d 	bl	8001514 <TFT_Draw_Fill_Rectangle>
				LCD_Font(33, 30, "Abastecimento", _Open_Sans_Bold_18, 1, WHITE);
 8002c9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c9e:	9301      	str	r3, [sp, #4]
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	4b9e      	ldr	r3, [pc, #632]	@ (8002f20 <header_fotter+0x66c>)
 8002ca6:	4aa2      	ldr	r2, [pc, #648]	@ (8002f30 <header_fotter+0x67c>)
 8002ca8:	211e      	movs	r1, #30
 8002caa:	2021      	movs	r0, #33	@ 0x21
 8002cac:	f7ff f986 	bl	8001fbc <LCD_Font>

				TFT_Draw_Fill_Round_Rect(41, 421, 138, 38, 8, WHITE);
 8002cb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	2308      	movs	r3, #8
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2326      	movs	r3, #38	@ 0x26
 8002cbc:	228a      	movs	r2, #138	@ 0x8a
 8002cbe:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002cc2:	2029      	movs	r0, #41	@ 0x29
 8002cc4:	f7ff f860 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
				TFT_Draw_Fill_Round_Rect(231, 421, 138, 38, 8, VIVID_BLUE);
 8002cc8:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	2308      	movs	r3, #8
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	2326      	movs	r3, #38	@ 0x26
 8002cd4:	228a      	movs	r2, #138	@ 0x8a
 8002cd6:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002cda:	20e7      	movs	r0, #231	@ 0xe7
 8002cdc:	f7ff f854 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
				TFT_Draw_Fill_Round_Rect(421, 421, 138, 38, 8, VIVID_BLUE);
 8002ce0:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	2308      	movs	r3, #8
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	2326      	movs	r3, #38	@ 0x26
 8002cec:	228a      	movs	r2, #138	@ 0x8a
 8002cee:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002cf2:	f240 10a5 	movw	r0, #421	@ 0x1a5
 8002cf6:	f7ff f847 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
				TFT_Draw_Fill_Round_Rect(621, 421, 138, 38, 8, WHITE);
 8002cfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	2308      	movs	r3, #8
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	2326      	movs	r3, #38	@ 0x26
 8002d06:	228a      	movs	r2, #138	@ 0x8a
 8002d08:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002d0c:	f240 206d 	movw	r0, #621	@ 0x26d
 8002d10:	f7ff f83a 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>

				LCD_Font(80, 446, "Voltar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8002d14:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	4b80      	ldr	r3, [pc, #512]	@ (8002f20 <header_fotter+0x66c>)
 8002d20:	4a80      	ldr	r2, [pc, #512]	@ (8002f24 <header_fotter+0x670>)
 8002d22:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8002d26:	2050      	movs	r0, #80	@ 0x50
 8002d28:	f7ff f948 	bl	8001fbc <LCD_Font>
				LCD_Font(655, 446, "Iniciar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8002d2c:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002d30:	9301      	str	r3, [sp, #4]
 8002d32:	2301      	movs	r3, #1
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	4b7a      	ldr	r3, [pc, #488]	@ (8002f20 <header_fotter+0x66c>)
 8002d38:	4a7b      	ldr	r2, [pc, #492]	@ (8002f28 <header_fotter+0x674>)
 8002d3a:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8002d3e:	f240 208f 	movw	r0, #655	@ 0x28f
 8002d42:	f7ff f93b 	bl	8001fbc <LCD_Font>
 8002d46:	e0e4      	b.n	8002f12 <header_fotter+0x65e>
			}
			else if(item_selected == 2)
 8002d48:	4b78      	ldr	r3, [pc, #480]	@ (8002f2c <header_fotter+0x678>)
 8002d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d160      	bne.n	8002e14 <header_fotter+0x560>
			{
				TFT_Draw_Fill_Rectangle(30, 0, 600, 35, VIVID_BLUE);
 8002d52:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2323      	movs	r3, #35	@ 0x23
 8002d5a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8002d5e:	2100      	movs	r1, #0
 8002d60:	201e      	movs	r0, #30
 8002d62:	f7fe fbd7 	bl	8001514 <TFT_Draw_Fill_Rectangle>
				LCD_Font(33, 30, "Drenagem", _Open_Sans_Bold_18, 1, WHITE);
 8002d66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d6a:	9301      	str	r3, [sp, #4]
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	4b6b      	ldr	r3, [pc, #428]	@ (8002f20 <header_fotter+0x66c>)
 8002d72:	4a70      	ldr	r2, [pc, #448]	@ (8002f34 <header_fotter+0x680>)
 8002d74:	211e      	movs	r1, #30
 8002d76:	2021      	movs	r0, #33	@ 0x21
 8002d78:	f7ff f920 	bl	8001fbc <LCD_Font>

				TFT_Draw_Fill_Round_Rect(41, 421, 138, 38, 8, WHITE);
 8002d7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	2308      	movs	r3, #8
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2326      	movs	r3, #38	@ 0x26
 8002d88:	228a      	movs	r2, #138	@ 0x8a
 8002d8a:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002d8e:	2029      	movs	r0, #41	@ 0x29
 8002d90:	f7fe fffa 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
				TFT_Draw_Fill_Round_Rect(231, 421, 138, 38, 8, VIVID_BLUE);
 8002d94:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002d98:	9301      	str	r3, [sp, #4]
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	2326      	movs	r3, #38	@ 0x26
 8002da0:	228a      	movs	r2, #138	@ 0x8a
 8002da2:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002da6:	20e7      	movs	r0, #231	@ 0xe7
 8002da8:	f7fe ffee 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
				TFT_Draw_Fill_Round_Rect(421, 421, 138, 38, 8, VIVID_BLUE);
 8002dac:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002db0:	9301      	str	r3, [sp, #4]
 8002db2:	2308      	movs	r3, #8
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	2326      	movs	r3, #38	@ 0x26
 8002db8:	228a      	movs	r2, #138	@ 0x8a
 8002dba:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002dbe:	f240 10a5 	movw	r0, #421	@ 0x1a5
 8002dc2:	f7fe ffe1 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
				TFT_Draw_Fill_Round_Rect(621, 421, 138, 38, 8, WHITE);
 8002dc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	2308      	movs	r3, #8
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2326      	movs	r3, #38	@ 0x26
 8002dd2:	228a      	movs	r2, #138	@ 0x8a
 8002dd4:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002dd8:	f240 206d 	movw	r0, #621	@ 0x26d
 8002ddc:	f7fe ffd4 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>

				LCD_Font(80, 446, "Voltar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8002de0:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002de4:	9301      	str	r3, [sp, #4]
 8002de6:	2301      	movs	r3, #1
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	4b4d      	ldr	r3, [pc, #308]	@ (8002f20 <header_fotter+0x66c>)
 8002dec:	4a4d      	ldr	r2, [pc, #308]	@ (8002f24 <header_fotter+0x670>)
 8002dee:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8002df2:	2050      	movs	r0, #80	@ 0x50
 8002df4:	f7ff f8e2 	bl	8001fbc <LCD_Font>
				LCD_Font(655, 446, "Iniciar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8002df8:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002dfc:	9301      	str	r3, [sp, #4]
 8002dfe:	2301      	movs	r3, #1
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	4b47      	ldr	r3, [pc, #284]	@ (8002f20 <header_fotter+0x66c>)
 8002e04:	4a48      	ldr	r2, [pc, #288]	@ (8002f28 <header_fotter+0x674>)
 8002e06:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8002e0a:	f240 208f 	movw	r0, #655	@ 0x28f
 8002e0e:	f7ff f8d5 	bl	8001fbc <LCD_Font>
 8002e12:	e07e      	b.n	8002f12 <header_fotter+0x65e>
			}
			else if(item_selected == 3)
 8002e14:	4b45      	ldr	r3, [pc, #276]	@ (8002f2c <header_fotter+0x678>)
 8002e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d179      	bne.n	8002f12 <header_fotter+0x65e>
			{
				TFT_Draw_Fill_Rectangle(30, 0, 600, 35, VIVID_BLUE);
 8002e1e:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	2323      	movs	r3, #35	@ 0x23
 8002e26:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	201e      	movs	r0, #30
 8002e2e:	f7fe fb71 	bl	8001514 <TFT_Draw_Fill_Rectangle>
				LCD_Font(33, 30, "Configuracao", _Open_Sans_Bold_18, 1, WHITE);
 8002e32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e36:	9301      	str	r3, [sp, #4]
 8002e38:	2301      	movs	r3, #1
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	4b38      	ldr	r3, [pc, #224]	@ (8002f20 <header_fotter+0x66c>)
 8002e3e:	4a3e      	ldr	r2, [pc, #248]	@ (8002f38 <header_fotter+0x684>)
 8002e40:	211e      	movs	r1, #30
 8002e42:	2021      	movs	r0, #33	@ 0x21
 8002e44:	f7ff f8ba 	bl	8001fbc <LCD_Font>

				TFT_Draw_Fill_Round_Rect(41, 421, 138, 38, 8, WHITE);
 8002e48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	2308      	movs	r3, #8
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	2326      	movs	r3, #38	@ 0x26
 8002e54:	228a      	movs	r2, #138	@ 0x8a
 8002e56:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002e5a:	2029      	movs	r0, #41	@ 0x29
 8002e5c:	f7fe ff94 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
				TFT_Draw_Fill_Round_Rect(231, 421, 138, 38, 8, WHITE);
 8002e60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	2308      	movs	r3, #8
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	2326      	movs	r3, #38	@ 0x26
 8002e6c:	228a      	movs	r2, #138	@ 0x8a
 8002e6e:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002e72:	20e7      	movs	r0, #231	@ 0xe7
 8002e74:	f7fe ff88 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
				TFT_Draw_Fill_Round_Rect(421, 421, 138, 38, 8, WHITE);
 8002e78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e7c:	9301      	str	r3, [sp, #4]
 8002e7e:	2308      	movs	r3, #8
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	2326      	movs	r3, #38	@ 0x26
 8002e84:	228a      	movs	r2, #138	@ 0x8a
 8002e86:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002e8a:	f240 10a5 	movw	r0, #421	@ 0x1a5
 8002e8e:	f7fe ff7b 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
				TFT_Draw_Fill_Round_Rect(621, 421, 138, 38, 8, WHITE);
 8002e92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	2308      	movs	r3, #8
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	2326      	movs	r3, #38	@ 0x26
 8002e9e:	228a      	movs	r2, #138	@ 0x8a
 8002ea0:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002ea4:	f240 206d 	movw	r0, #621	@ 0x26d
 8002ea8:	f7fe ff6e 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>

				LCD_Font(80, 446, "Voltar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8002eac:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002eb0:	9301      	str	r3, [sp, #4]
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f20 <header_fotter+0x66c>)
 8002eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f24 <header_fotter+0x670>)
 8002eba:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8002ebe:	2050      	movs	r0, #80	@ 0x50
 8002ec0:	f7ff f87c 	bl	8001fbc <LCD_Font>
				TFT_Draw_Fill_Triangle_Simple(285, 427, 30, 18, 1, VIVID_BLUE);
 8002ec4:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	2301      	movs	r3, #1
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	2312      	movs	r3, #18
 8002ed0:	221e      	movs	r2, #30
 8002ed2:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8002ed6:	f240 101d 	movw	r0, #285	@ 0x11d
 8002eda:	f7fe fb49 	bl	8001570 <TFT_Draw_Fill_Triangle_Simple>
				TFT_Draw_Fill_Triangle_Inverted_Simple(475, 432, 30, 18, 1, VIVID_BLUE);
 8002ede:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002ee2:	9301      	str	r3, [sp, #4]
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2312      	movs	r3, #18
 8002eea:	221e      	movs	r2, #30
 8002eec:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8002ef0:	f240 10db 	movw	r0, #475	@ 0x1db
 8002ef4:	f7fe fb7a 	bl	80015ec <TFT_Draw_Fill_Triangle_Inverted_Simple>
				LCD_Font(660, 446, "Entrar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8002ef8:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	2301      	movs	r3, #1
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	4b07      	ldr	r3, [pc, #28]	@ (8002f20 <header_fotter+0x66c>)
 8002f04:	4a0d      	ldr	r2, [pc, #52]	@ (8002f3c <header_fotter+0x688>)
 8002f06:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8002f0a:	f44f 7025 	mov.w	r0, #660	@ 0x294
 8002f0e:	f7ff f855 	bl	8001fbc <LCD_Font>
			}
		}

		flag_escrita_tela = 0;
 8002f12:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <header_fotter+0x68c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
	}
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	0800beb4 	.word	0x0800beb4
 8002f24:	0800a83c 	.word	0x0800a83c
 8002f28:	0800a844 	.word	0x0800a844
 8002f2c:	20000262 	.word	0x20000262
 8002f30:	0800a84c 	.word	0x0800a84c
 8002f34:	0800a85c 	.word	0x0800a85c
 8002f38:	0800a868 	.word	0x0800a868
 8002f3c:	0800a7f0 	.word	0x0800a7f0
 8002f40:	20000054 	.word	0x20000054

08002f44 <scan_membrana>:
	else if (item_selected == 3)
		cabecalho("Configuracao", 75);
}

int8_t scan_membrana(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0

		for(int col = 0; col < 4; col++ )
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	e041      	b.n	8002fd4 <scan_membrana+0x90>
		{

			uint32_t botao_mask = (GPIOE->IDR & (0x0F << 2)) >> 2;
 8002f50:	4b26      	ldr	r3, [pc, #152]	@ (8002fec <scan_membrana+0xa8>)
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	089b      	lsrs	r3, r3, #2
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	60bb      	str	r3, [r7, #8]
			uint8_t botao = (botao_mask >> col) & 1;
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	71fb      	strb	r3, [r7, #7]


			if(botao == key_pressed[0][col])
 8002f6c:	4a20      	ldr	r2, [pc, #128]	@ (8002ff0 <scan_membrana+0xac>)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4413      	add	r3, r2
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	79fa      	ldrb	r2, [r7, #7]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d105      	bne.n	8002f86 <scan_membrana+0x42>
			{
				debounce_counter[0][col] = 0;
 8002f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ff4 <scan_membrana+0xb0>)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
 8002f84:	e023      	b.n	8002fce <scan_membrana+0x8a>
			}else if(++debounce_counter[0][col] >= DEBOUNCE_THRESHOLD)
 8002f86:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff4 <scan_membrana+0xb0>)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	b2d9      	uxtb	r1, r3
 8002f92:	4a18      	ldr	r2, [pc, #96]	@ (8002ff4 <scan_membrana+0xb0>)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4413      	add	r3, r2
 8002f98:	460a      	mov	r2, r1
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	4a15      	ldr	r2, [pc, #84]	@ (8002ff4 <scan_membrana+0xb0>)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d912      	bls.n	8002fce <scan_membrana+0x8a>
			{
				key_pressed[0][col] = botao;
 8002fa8:	4a11      	ldr	r2, [pc, #68]	@ (8002ff0 <scan_membrana+0xac>)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4413      	add	r3, r2
 8002fae:	79fa      	ldrb	r2, [r7, #7]
 8002fb0:	701a      	strb	r2, [r3, #0]
				debounce_counter[0][col] = 0;
 8002fb2:	4a10      	ldr	r2, [pc, #64]	@ (8002ff4 <scan_membrana+0xb0>)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]

				if(botao)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <scan_membrana+0x8a>
				{
					return mask_keyboard[0][col];
 8002fc2:	4a0d      	ldr	r2, [pc, #52]	@ (8002ff8 <scan_membrana+0xb4>)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f993 3000 	ldrsb.w	r3, [r3]
 8002fcc:	e007      	b.n	8002fde <scan_membrana+0x9a>
		for(int col = 0; col < 4; col++ )
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	ddba      	ble.n	8002f50 <scan_membrana+0xc>
				}
			}
	}

	return -1;
 8002fda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	20000274 	.word	0x20000274
 8002ff4:	20000284 	.word	0x20000284
 8002ff8:	080215e4 	.word	0x080215e4

08002ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003002:	f001 f847 	bl	8004094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003006:	f000 fb69 	bl	80036dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800300a:	f000 fc6b 	bl	80038e4 <MX_GPIO_Init>
  MX_FSMC_Init();
 800300e:	f000 fcb3 	bl	8003978 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8003012:	f000 fc3d 	bl	8003890 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8003016:	f000 fbcb 	bl	80037b0 <MX_TIM7_Init>
  MX_TIM9_Init();
 800301a:	f000 fbff 	bl	800381c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  Init_SSD1963();
 800301e:	f7fe f8a4 	bl	800116a <Init_SSD1963>
  HAL_TIM_Base_Start_IT(&htim7);
 8003022:	48a2      	ldr	r0, [pc, #648]	@ (80032ac <main+0x2b0>)
 8003024:	f002 f86a 	bl	80050fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 8003028:	48a1      	ldr	r0, [pc, #644]	@ (80032b0 <main+0x2b4>)
 800302a:	f002 f867 	bl	80050fc <HAL_TIM_Base_Start_IT>
  TFT_Clear_Screen(WHITE);
 800302e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003032:	f7fe f9f1 	bl	8001418 <TFT_Clear_Screen>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

/************************************   MENU PRINCIPAL  *********************************************/
	  if(current_screen == 0){
 8003036:	4b9f      	ldr	r3, [pc, #636]	@ (80032b4 <main+0x2b8>)
 8003038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d165      	bne.n	800310c <main+0x110>

		if (current_screen != ultimo_estado_menu)
 8003040:	4b9c      	ldr	r3, [pc, #624]	@ (80032b4 <main+0x2b8>)
 8003042:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003046:	4b9c      	ldr	r3, [pc, #624]	@ (80032b8 <main+0x2bc>)
 8003048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800304c:	429a      	cmp	r2, r3
 800304e:	d01a      	beq.n	8003086 <main+0x8a>
		{
			TFT_Draw_Fill_Rectangle(0, 81, 800, 317, VIVID_BLUE);
 8003050:	f240 431f 	movw	r3, #1055	@ 0x41f
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	f240 133d 	movw	r3, #317	@ 0x13d
 800305a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800305e:	2151      	movs	r1, #81	@ 0x51
 8003060:	2000      	movs	r0, #0
 8003062:	f7fe fa57 	bl	8001514 <TFT_Draw_Fill_Rectangle>
			starter_Screen();
 8003066:	f7ff f869 	bl	800213c <starter_Screen>
			home_screen();
 800306a:	f7ff fa11 	bl	8002490 <home_screen>
			flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 800306e:	2200      	movs	r2, #0
 8003070:	4b92      	ldr	r3, [pc, #584]	@ (80032bc <main+0x2c0>)
 8003072:	4611      	mov	r1, r2
 8003074:	7019      	strb	r1, [r3, #0]
 8003076:	4b92      	ldr	r3, [pc, #584]	@ (80032c0 <main+0x2c4>)
 8003078:	4611      	mov	r1, r2
 800307a:	7019      	strb	r1, [r3, #0]
 800307c:	4b91      	ldr	r3, [pc, #580]	@ (80032c4 <main+0x2c8>)
 800307e:	4611      	mov	r1, r2
 8003080:	7019      	strb	r1, [r3, #0]
 8003082:	4b91      	ldr	r3, [pc, #580]	@ (80032c8 <main+0x2cc>)
 8003084:	701a      	strb	r2, [r3, #0]
		}

		if (flag_botao_on){
 8003086:	4b90      	ldr	r3, [pc, #576]	@ (80032c8 <main+0x2cc>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <main+0xa6>
			flag_escrita_tela = 1;
 8003090:	4b8e      	ldr	r3, [pc, #568]	@ (80032cc <main+0x2d0>)
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]
			current_screen = 1;
 8003096:	4b87      	ldr	r3, [pc, #540]	@ (80032b4 <main+0x2b8>)
 8003098:	2201      	movs	r2, #1
 800309a:	801a      	strh	r2, [r3, #0]
			flag_botao_on = 0;
 800309c:	4b8a      	ldr	r3, [pc, #552]	@ (80032c8 <main+0x2cc>)
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
		}


		if (flag_botao_down)
 80030a2:	4b86      	ldr	r3, [pc, #536]	@ (80032bc <main+0x2c0>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d013      	beq.n	80030d4 <main+0xd8>
		{
			flag_botao_down = 0;
 80030ac:	4b83      	ldr	r3, [pc, #524]	@ (80032bc <main+0x2c0>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
			item_selected++;
 80030b2:	4b87      	ldr	r3, [pc, #540]	@ (80032d0 <main+0x2d4>)
 80030b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3301      	adds	r3, #1
 80030bc:	b29b      	uxth	r3, r3
 80030be:	b21a      	sxth	r2, r3
 80030c0:	4b83      	ldr	r3, [pc, #524]	@ (80032d0 <main+0x2d4>)
 80030c2:	801a      	strh	r2, [r3, #0]

			if (item_selected >= NUM_ITEMS)
 80030c4:	4b82      	ldr	r3, [pc, #520]	@ (80032d0 <main+0x2d4>)
 80030c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	dd02      	ble.n	80030d4 <main+0xd8>
				item_selected = 0;
 80030ce:	4b80      	ldr	r3, [pc, #512]	@ (80032d0 <main+0x2d4>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	801a      	strh	r2, [r3, #0]
		}

		if(flag_botao_up)
 80030d4:	4b7a      	ldr	r3, [pc, #488]	@ (80032c0 <main+0x2c4>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d013      	beq.n	8003106 <main+0x10a>
		{
			flag_botao_up = 0;
 80030de:	4b78      	ldr	r3, [pc, #480]	@ (80032c0 <main+0x2c4>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
			item_selected--;
 80030e4:	4b7a      	ldr	r3, [pc, #488]	@ (80032d0 <main+0x2d4>)
 80030e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	b21a      	sxth	r2, r3
 80030f2:	4b77      	ldr	r3, [pc, #476]	@ (80032d0 <main+0x2d4>)
 80030f4:	801a      	strh	r2, [r3, #0]

			if (item_selected < 0)
 80030f6:	4b76      	ldr	r3, [pc, #472]	@ (80032d0 <main+0x2d4>)
 80030f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	da02      	bge.n	8003106 <main+0x10a>
				item_selected = NUM_ITEMS - 1;
 8003100:	4b73      	ldr	r3, [pc, #460]	@ (80032d0 <main+0x2d4>)
 8003102:	2203      	movs	r2, #3
 8003104:	801a      	strh	r2, [r3, #0]
		}

		atualiza_Cursor();
 8003106:	f7ff fa6f 	bl	80025e8 <atualiza_Cursor>
 800310a:	e2d6      	b.n	80036ba <main+0x6be>
	  }

/************************************   TELA ESPECÍFICA  *********************************************/
	  else
	  {
			if (current_screen != ultimo_estado_menu)
 800310c:	4b69      	ldr	r3, [pc, #420]	@ (80032b4 <main+0x2b8>)
 800310e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003112:	4b69      	ldr	r3, [pc, #420]	@ (80032b8 <main+0x2bc>)
 8003114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003118:	429a      	cmp	r2, r3
 800311a:	d01d      	beq.n	8003158 <main+0x15c>
			{
				TFT_Draw_Fill_Rectangle(0, 81, 800, 317, VIVID_BLUE);
 800311c:	f240 431f 	movw	r3, #1055	@ 0x41f
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	f240 133d 	movw	r3, #317	@ 0x13d
 8003126:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800312a:	2151      	movs	r1, #81	@ 0x51
 800312c:	2000      	movs	r0, #0
 800312e:	f7fe f9f1 	bl	8001514 <TFT_Draw_Fill_Rectangle>
				starter_Screen();
 8003132:	f7ff f803 	bl	800213c <starter_Screen>
				ultimo_estado_menu = current_screen;
 8003136:	4b5f      	ldr	r3, [pc, #380]	@ (80032b4 <main+0x2b8>)
 8003138:	f9b3 2000 	ldrsh.w	r2, [r3]
 800313c:	4b5e      	ldr	r3, [pc, #376]	@ (80032b8 <main+0x2bc>)
 800313e:	801a      	strh	r2, [r3, #0]
				flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 8003140:	2200      	movs	r2, #0
 8003142:	4b5e      	ldr	r3, [pc, #376]	@ (80032bc <main+0x2c0>)
 8003144:	4611      	mov	r1, r2
 8003146:	7019      	strb	r1, [r3, #0]
 8003148:	4b5d      	ldr	r3, [pc, #372]	@ (80032c0 <main+0x2c4>)
 800314a:	4611      	mov	r1, r2
 800314c:	7019      	strb	r1, [r3, #0]
 800314e:	4b5d      	ldr	r3, [pc, #372]	@ (80032c4 <main+0x2c8>)
 8003150:	4611      	mov	r1, r2
 8003152:	7019      	strb	r1, [r3, #0]
 8003154:	4b5c      	ldr	r3, [pc, #368]	@ (80032c8 <main+0x2cc>)
 8003156:	701a      	strb	r2, [r3, #0]
			}

			/********************* BANHO *************************/
			if(item_selected == 0)
 8003158:	4b5d      	ldr	r3, [pc, #372]	@ (80032d0 <main+0x2d4>)
 800315a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f040 824c 	bne.w	80035fc <main+0x600>
			{
				if(flag_estado_banho)
 8003164:	4b5b      	ldr	r3, [pc, #364]	@ (80032d4 <main+0x2d8>)
 8003166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 8102 	beq.w	8003374 <main+0x378>
				{
					if(!flag_desligar_banho)
 8003170:	4b59      	ldr	r3, [pc, #356]	@ (80032d8 <main+0x2dc>)
 8003172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003176:	2b00      	cmp	r3, #0
 8003178:	f040 80ca 	bne.w	8003310 <main+0x314>
					{
						if(flag_resistencia_ativa)
 800317c:	4b57      	ldr	r3, [pc, #348]	@ (80032dc <main+0x2e0>)
 800317e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <main+0x196>
						{
							flag_resistencia_ativa = flag_resistencia_ativa;
 8003186:	4b55      	ldr	r3, [pc, #340]	@ (80032dc <main+0x2e0>)
 8003188:	f9b3 2000 	ldrsh.w	r2, [r3]
 800318c:	4b53      	ldr	r3, [pc, #332]	@ (80032dc <main+0x2e0>)
 800318e:	801a      	strh	r2, [r3, #0]
 8003190:	e047      	b.n	8003222 <main+0x226>
						}
						else if(!flag_resistencia_ativa && !flag_iniciar_banho)
 8003192:	4b52      	ldr	r3, [pc, #328]	@ (80032dc <main+0x2e0>)
 8003194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d142      	bne.n	8003222 <main+0x226>
 800319c:	4b50      	ldr	r3, [pc, #320]	@ (80032e0 <main+0x2e4>)
 800319e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d13d      	bne.n	8003222 <main+0x226>
						{
							sprintf(buffer, "%d|25", temp);
 80031a6:	4b4f      	ldr	r3, [pc, #316]	@ (80032e4 <main+0x2e8>)
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	494e      	ldr	r1, [pc, #312]	@ (80032e8 <main+0x2ec>)
 80031ae:	484f      	ldr	r0, [pc, #316]	@ (80032ec <main+0x2f0>)
 80031b0:	f003 fe7e 	bl	8006eb0 <siprintf>
							LCD_Font(540, 310, buffer, _Open_Sans_Bold_24, 1, WHITE);
 80031b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031b8:	9301      	str	r3, [sp, #4]
 80031ba:	2301      	movs	r3, #1
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	4b4c      	ldr	r3, [pc, #304]	@ (80032f0 <main+0x2f4>)
 80031c0:	4a4a      	ldr	r2, [pc, #296]	@ (80032ec <main+0x2f0>)
 80031c2:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80031c6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80031ca:	f7fe fef7 	bl	8001fbc <LCD_Font>
							LCD_Font(620, 307, "c", _Open_Sans_Bold_18, 1, WHITE);
 80031ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	2301      	movs	r3, #1
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	4b46      	ldr	r3, [pc, #280]	@ (80032f4 <main+0x2f8>)
 80031da:	4a47      	ldr	r2, [pc, #284]	@ (80032f8 <main+0x2fc>)
 80031dc:	f240 1133 	movw	r1, #307	@ 0x133
 80031e0:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 80031e4:	f7fe feea 	bl	8001fbc <LCD_Font>
							TFT_Draw_Circle(618, 293, 2, 0, 1, WHITE);
 80031e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	2301      	movs	r3, #1
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	2300      	movs	r3, #0
 80031f4:	2202      	movs	r2, #2
 80031f6:	f240 1125 	movw	r1, #293	@ 0x125
 80031fa:	f240 206a 	movw	r0, #618	@ 0x26a
 80031fe:	f7fe fa35 	bl	800166c <TFT_Draw_Circle>
							LCD_Font(650, 307, "Aquecendo",_Open_Sans_Bold_16, 1, WHITE);
 8003202:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003206:	9301      	str	r3, [sp, #4]
 8003208:	2301      	movs	r3, #1
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	4b3b      	ldr	r3, [pc, #236]	@ (80032fc <main+0x300>)
 800320e:	4a3c      	ldr	r2, [pc, #240]	@ (8003300 <main+0x304>)
 8003210:	f240 1133 	movw	r1, #307	@ 0x133
 8003214:	f240 208a 	movw	r0, #650	@ 0x28a
 8003218:	f7fe fed0 	bl	8001fbc <LCD_Font>
							flag_resistencia_ativa = 1;
 800321c:	4b2f      	ldr	r3, [pc, #188]	@ (80032dc <main+0x2e0>)
 800321e:	2201      	movs	r2, #1
 8003220:	801a      	strh	r2, [r3, #0]
						}

						if(flag_botao_on)
 8003222:	4b29      	ldr	r3, [pc, #164]	@ (80032c8 <main+0x2cc>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80f2 	beq.w	8003412 <main+0x416>
						{
							TFT_Draw_Fill_Rectangle(0, 81, 800, 317, VIVID_BLUE);
 800322e:	f240 431f 	movw	r3, #1055	@ 0x41f
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	f240 133d 	movw	r3, #317	@ 0x13d
 8003238:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800323c:	2151      	movs	r1, #81	@ 0x51
 800323e:	2000      	movs	r0, #0
 8003240:	f7fe f968 	bl	8001514 <TFT_Draw_Fill_Rectangle>
							LCD_Font(150, 185, "Finalizando...", _Free_Serif_12, 1, WHITE);
 8003244:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	2301      	movs	r3, #1
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	4b2d      	ldr	r3, [pc, #180]	@ (8003304 <main+0x308>)
 8003250:	4a2d      	ldr	r2, [pc, #180]	@ (8003308 <main+0x30c>)
 8003252:	21b9      	movs	r1, #185	@ 0xb9
 8003254:	2096      	movs	r0, #150	@ 0x96
 8003256:	f7fe feb1 	bl	8001fbc <LCD_Font>
							TFT_Draw_Fill_Round_Rect(150, 200, 500, 30, 10, GRAYISH_BLUE);
 800325a:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	230a      	movs	r3, #10
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	231e      	movs	r3, #30
 8003266:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800326a:	21c8      	movs	r1, #200	@ 0xc8
 800326c:	2096      	movs	r0, #150	@ 0x96
 800326e:	f7fe fd8b 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
							flag_desligar_banho = 1;
 8003272:	4b19      	ldr	r3, [pc, #100]	@ (80032d8 <main+0x2dc>)
 8003274:	2201      	movs	r2, #1
 8003276:	801a      	strh	r2, [r3, #0]
							flag_resistencia_ativa = 0;
 8003278:	4b18      	ldr	r3, [pc, #96]	@ (80032dc <main+0x2e0>)
 800327a:	2200      	movs	r2, #0
 800327c:	801a      	strh	r2, [r3, #0]
							flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 800327e:	2200      	movs	r2, #0
 8003280:	4b0e      	ldr	r3, [pc, #56]	@ (80032bc <main+0x2c0>)
 8003282:	4611      	mov	r1, r2
 8003284:	7019      	strb	r1, [r3, #0]
 8003286:	4b0e      	ldr	r3, [pc, #56]	@ (80032c0 <main+0x2c4>)
 8003288:	4611      	mov	r1, r2
 800328a:	7019      	strb	r1, [r3, #0]
 800328c:	4b0d      	ldr	r3, [pc, #52]	@ (80032c4 <main+0x2c8>)
 800328e:	4611      	mov	r1, r2
 8003290:	7019      	strb	r1, [r3, #0]
 8003292:	4b0d      	ldr	r3, [pc, #52]	@ (80032c8 <main+0x2cc>)
 8003294:	701a      	strb	r2, [r3, #0]
							flag_iniciar_banho = 0;
 8003296:	4b12      	ldr	r3, [pc, #72]	@ (80032e0 <main+0x2e4>)
 8003298:	2200      	movs	r2, #0
 800329a:	801a      	strh	r2, [r3, #0]
							contador_Iniciar = 0;
 800329c:	4b1b      	ldr	r3, [pc, #108]	@ (800330c <main+0x310>)
 800329e:	2200      	movs	r2, #0
 80032a0:	801a      	strh	r2, [r3, #0]

							flag_escrita_tela = 1;
 80032a2:	4b0a      	ldr	r3, [pc, #40]	@ (80032cc <main+0x2d0>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	e0b3      	b.n	8003412 <main+0x416>
 80032aa:	bf00      	nop
 80032ac:	200002bc 	.word	0x200002bc
 80032b0:	20000304 	.word	0x20000304
 80032b4:	20000260 	.word	0x20000260
 80032b8:	20000050 	.word	0x20000050
 80032bc:	20000296 	.word	0x20000296
 80032c0:	20000295 	.word	0x20000295
 80032c4:	20000294 	.word	0x20000294
 80032c8:	20000297 	.word	0x20000297
 80032cc:	20000054 	.word	0x20000054
 80032d0:	20000262 	.word	0x20000262
 80032d4:	2000026c 	.word	0x2000026c
 80032d8:	2000026e 	.word	0x2000026e
 80032dc:	20000270 	.word	0x20000270
 80032e0:	2000026a 	.word	0x2000026a
 80032e4:	2000005c 	.word	0x2000005c
 80032e8:	0800a7c0 	.word	0x0800a7c0
 80032ec:	20000298 	.word	0x20000298
 80032f0:	0800cad0 	.word	0x0800cad0
 80032f4:	0800beb4 	.word	0x0800beb4
 80032f8:	0800a7c8 	.word	0x0800a7c8
 80032fc:	0800b678 	.word	0x0800b678
 8003300:	0800a7cc 	.word	0x0800a7cc
 8003304:	0801fcd0 	.word	0x0801fcd0
 8003308:	0800a88c 	.word	0x0800a88c
 800330c:	20000268 	.word	0x20000268
						}
					}
					else
					{
						if(ultimo_contador_Desligar != contador_Desligar && (contador_Desligar % 5 == 0))
 8003310:	4ba5      	ldr	r3, [pc, #660]	@ (80035a8 <main+0x5ac>)
 8003312:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003316:	4ba5      	ldr	r3, [pc, #660]	@ (80035ac <main+0x5b0>)
 8003318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800331c:	429a      	cmp	r2, r3
 800331e:	d078      	beq.n	8003412 <main+0x416>
 8003320:	4ba2      	ldr	r3, [pc, #648]	@ (80035ac <main+0x5b0>)
 8003322:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003326:	4ba2      	ldr	r3, [pc, #648]	@ (80035b0 <main+0x5b4>)
 8003328:	fb83 1302 	smull	r1, r3, r3, r2
 800332c:	1059      	asrs	r1, r3, #1
 800332e:	17d3      	asrs	r3, r2, #31
 8003330:	1ac9      	subs	r1, r1, r3
 8003332:	460b      	mov	r3, r1
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	b21b      	sxth	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d168      	bne.n	8003412 <main+0x416>
						{
							ultimo_contador_Desligar = contador_Desligar;
 8003340:	4b9a      	ldr	r3, [pc, #616]	@ (80035ac <main+0x5b0>)
 8003342:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003346:	4b98      	ldr	r3, [pc, #608]	@ (80035a8 <main+0x5ac>)
 8003348:	801a      	strh	r2, [r3, #0]
							uint16_t w = (500 * contador_Desligar) / COUNT_LIM;
 800334a:	4b98      	ldr	r3, [pc, #608]	@ (80035ac <main+0x5b0>)
 800334c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003350:	b29b      	uxth	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	0092      	lsls	r2, r2, #2
 8003356:	4413      	add	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	80fb      	strh	r3, [r7, #6]
							TFT_Draw_Fill_Round_Rect(150, 200, w, 30, 10, WHITE);
 800335c:	88fa      	ldrh	r2, [r7, #6]
 800335e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	230a      	movs	r3, #10
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	231e      	movs	r3, #30
 800336a:	21c8      	movs	r1, #200	@ 0xc8
 800336c:	2096      	movs	r0, #150	@ 0x96
 800336e:	f7fe fd0b 	bl	8001d88 <TFT_Draw_Fill_Round_Rect>
 8003372:	e04e      	b.n	8003412 <main+0x416>
						}
					}
				}
				else
				{
					if (flag_botao_off)
 8003374:	4b8f      	ldr	r3, [pc, #572]	@ (80035b4 <main+0x5b8>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d014      	beq.n	80033a8 <main+0x3ac>
					{
						flag_escrita_tela = 1;
 800337e:	4b8e      	ldr	r3, [pc, #568]	@ (80035b8 <main+0x5bc>)
 8003380:	2201      	movs	r2, #1
 8003382:	701a      	strb	r2, [r3, #0]
						flag_botao_off = 0;
 8003384:	4b8b      	ldr	r3, [pc, #556]	@ (80035b4 <main+0x5b8>)
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]
						flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 800338a:	2200      	movs	r2, #0
 800338c:	4b8b      	ldr	r3, [pc, #556]	@ (80035bc <main+0x5c0>)
 800338e:	4611      	mov	r1, r2
 8003390:	7019      	strb	r1, [r3, #0]
 8003392:	4b8b      	ldr	r3, [pc, #556]	@ (80035c0 <main+0x5c4>)
 8003394:	4611      	mov	r1, r2
 8003396:	7019      	strb	r1, [r3, #0]
 8003398:	4b86      	ldr	r3, [pc, #536]	@ (80035b4 <main+0x5b8>)
 800339a:	4611      	mov	r1, r2
 800339c:	7019      	strb	r1, [r3, #0]
 800339e:	4b89      	ldr	r3, [pc, #548]	@ (80035c4 <main+0x5c8>)
 80033a0:	701a      	strb	r2, [r3, #0]
						current_screen = 0;
 80033a2:	4b89      	ldr	r3, [pc, #548]	@ (80035c8 <main+0x5cc>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	801a      	strh	r2, [r3, #0]
					}

					if(flag_botao_on && !flag_estado_banho && !flag_desligar_banho)
 80033a8:	4b86      	ldr	r3, [pc, #536]	@ (80035c4 <main+0x5c8>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d02f      	beq.n	8003412 <main+0x416>
 80033b2:	4b86      	ldr	r3, [pc, #536]	@ (80035cc <main+0x5d0>)
 80033b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d12a      	bne.n	8003412 <main+0x416>
 80033bc:	4b84      	ldr	r3, [pc, #528]	@ (80035d0 <main+0x5d4>)
 80033be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d125      	bne.n	8003412 <main+0x416>
					{
						flag_botao_on = 0;
 80033c6:	4b7f      	ldr	r3, [pc, #508]	@ (80035c4 <main+0x5c8>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
						flag_escrita_tela = 1;
 80033cc:	4b7a      	ldr	r3, [pc, #488]	@ (80035b8 <main+0x5bc>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
						flag_iniciar_banho = 1;
 80033d2:	4b80      	ldr	r3, [pc, #512]	@ (80035d4 <main+0x5d8>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	801a      	strh	r2, [r3, #0]
						flag_estado_banho = 1;
 80033d8:	4b7c      	ldr	r3, [pc, #496]	@ (80035cc <main+0x5d0>)
 80033da:	2201      	movs	r2, #1
 80033dc:	801a      	strh	r2, [r3, #0]
						TFT_Draw_Bitmap(610, 337, RECIRCULACAO_WIDTH, RECIRCULACAO_HEIGHT, recirculacao_bitmap, WHITE);
 80033de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033e2:	9301      	str	r3, [sp, #4]
 80033e4:	4b7c      	ldr	r3, [pc, #496]	@ (80035d8 <main+0x5dc>)
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	231b      	movs	r3, #27
 80033ea:	2215      	movs	r2, #21
 80033ec:	f240 1151 	movw	r1, #337	@ 0x151
 80033f0:	f240 2062 	movw	r0, #610	@ 0x262
 80033f4:	f7fe fe5c 	bl	80020b0 <TFT_Draw_Bitmap>
						LCD_Font(650, 357, "Recirculando",_Open_Sans_Bold_16, 1, WHITE);
 80033f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033fc:	9301      	str	r3, [sp, #4]
 80033fe:	2301      	movs	r3, #1
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	4b76      	ldr	r3, [pc, #472]	@ (80035dc <main+0x5e0>)
 8003404:	4a76      	ldr	r2, [pc, #472]	@ (80035e0 <main+0x5e4>)
 8003406:	f240 1165 	movw	r1, #357	@ 0x165
 800340a:	f240 208a 	movw	r0, #650	@ 0x28a
 800340e:	f7fe fdd5 	bl	8001fbc <LCD_Font>

					}
				}

				if(flag_botao_up)
 8003412:	4b6b      	ldr	r3, [pc, #428]	@ (80035c0 <main+0x5c4>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d05e      	beq.n	80034da <main+0x4de>
				{
					flag_botao_up = 0;
 800341c:	4b68      	ldr	r3, [pc, #416]	@ (80035c0 <main+0x5c4>)
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
					temp++;
 8003422:	4b70      	ldr	r3, [pc, #448]	@ (80035e4 <main+0x5e8>)
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	3301      	adds	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	4b6e      	ldr	r3, [pc, #440]	@ (80035e4 <main+0x5e8>)
 800342c:	801a      	strh	r2, [r3, #0]

					if(temp > 42) temp = 42;
 800342e:	4b6d      	ldr	r3, [pc, #436]	@ (80035e4 <main+0x5e8>)
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	2b2a      	cmp	r3, #42	@ 0x2a
 8003434:	d903      	bls.n	800343e <main+0x442>
 8003436:	4b6b      	ldr	r3, [pc, #428]	@ (80035e4 <main+0x5e8>)
 8003438:	222a      	movs	r2, #42	@ 0x2a
 800343a:	801a      	strh	r2, [r3, #0]
 800343c:	e04d      	b.n	80034da <main+0x4de>

					else
					{
						TFT_Draw_Fill_Rectangle(160, 185, 150, 100, VIVID_BLUE);
 800343e:	f240 431f 	movw	r3, #1055	@ 0x41f
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	2364      	movs	r3, #100	@ 0x64
 8003446:	2296      	movs	r2, #150	@ 0x96
 8003448:	21b9      	movs	r1, #185	@ 0xb9
 800344a:	20a0      	movs	r0, #160	@ 0xa0
 800344c:	f7fe f862 	bl	8001514 <TFT_Draw_Fill_Rectangle>
						sprintf(buffer, "%d", temp);
 8003450:	4b64      	ldr	r3, [pc, #400]	@ (80035e4 <main+0x5e8>)
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	461a      	mov	r2, r3
 8003456:	4964      	ldr	r1, [pc, #400]	@ (80035e8 <main+0x5ec>)
 8003458:	4864      	ldr	r0, [pc, #400]	@ (80035ec <main+0x5f0>)
 800345a:	f003 fd29 	bl	8006eb0 <siprintf>
						LCD_Font(160, 280, buffer,_Open_Sans_Bold_128, 1, WHITE);
 800345e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	2301      	movs	r3, #1
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	4b61      	ldr	r3, [pc, #388]	@ (80035f0 <main+0x5f4>)
 800346a:	4a60      	ldr	r2, [pc, #384]	@ (80035ec <main+0x5f0>)
 800346c:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8003470:	20a0      	movs	r0, #160	@ 0xa0
 8003472:	f7fe fda3 	bl	8001fbc <LCD_Font>

						TFT_Draw_Fill_Rectangle(535, 290, 35, 30, VIVID_BLUE);
 8003476:	f240 431f 	movw	r3, #1055	@ 0x41f
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	231e      	movs	r3, #30
 800347e:	2223      	movs	r2, #35	@ 0x23
 8003480:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8003484:	f240 2017 	movw	r0, #535	@ 0x217
 8003488:	f7fe f844 	bl	8001514 <TFT_Draw_Fill_Rectangle>
						sprintf(buffer, "%d", temp);
 800348c:	4b55      	ldr	r3, [pc, #340]	@ (80035e4 <main+0x5e8>)
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	4955      	ldr	r1, [pc, #340]	@ (80035e8 <main+0x5ec>)
 8003494:	4855      	ldr	r0, [pc, #340]	@ (80035ec <main+0x5f0>)
 8003496:	f003 fd0b 	bl	8006eb0 <siprintf>

						if(flag_resistencia_ativa) LCD_Font(540, 310, buffer, _Open_Sans_Bold_24, 1, WHITE);
 800349a:	4b56      	ldr	r3, [pc, #344]	@ (80035f4 <main+0x5f8>)
 800349c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00d      	beq.n	80034c0 <main+0x4c4>
 80034a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034a8:	9301      	str	r3, [sp, #4]
 80034aa:	2301      	movs	r3, #1
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	4b52      	ldr	r3, [pc, #328]	@ (80035f8 <main+0x5fc>)
 80034b0:	4a4e      	ldr	r2, [pc, #312]	@ (80035ec <main+0x5f0>)
 80034b2:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80034b6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80034ba:	f7fe fd7f 	bl	8001fbc <LCD_Font>
 80034be:	e00c      	b.n	80034da <main+0x4de>
						else LCD_Font(540, 310, buffer, _Open_Sans_Bold_24, 1, GRAYISH_BLUE);
 80034c0:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	2301      	movs	r3, #1
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	4b4b      	ldr	r3, [pc, #300]	@ (80035f8 <main+0x5fc>)
 80034cc:	4a47      	ldr	r2, [pc, #284]	@ (80035ec <main+0x5f0>)
 80034ce:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80034d2:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80034d6:	f7fe fd71 	bl	8001fbc <LCD_Font>
					}
				}

				if(flag_botao_down)
 80034da:	4b38      	ldr	r3, [pc, #224]	@ (80035bc <main+0x5c0>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80ea 	beq.w	80036ba <main+0x6be>
				{
					flag_botao_down = 0;
 80034e6:	4b35      	ldr	r3, [pc, #212]	@ (80035bc <main+0x5c0>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
					temp--;
 80034ec:	4b3d      	ldr	r3, [pc, #244]	@ (80035e4 <main+0x5e8>)
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	4b3b      	ldr	r3, [pc, #236]	@ (80035e4 <main+0x5e8>)
 80034f6:	801a      	strh	r2, [r3, #0]

					if(temp < 36) temp = 36;
 80034f8:	4b3a      	ldr	r3, [pc, #232]	@ (80035e4 <main+0x5e8>)
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	2b23      	cmp	r3, #35	@ 0x23
 80034fe:	d803      	bhi.n	8003508 <main+0x50c>
 8003500:	4b38      	ldr	r3, [pc, #224]	@ (80035e4 <main+0x5e8>)
 8003502:	2224      	movs	r2, #36	@ 0x24
 8003504:	801a      	strh	r2, [r3, #0]
 8003506:	e0d8      	b.n	80036ba <main+0x6be>

					else
					{
						TFT_Draw_Fill_Rectangle(160, 185, 150, 100, VIVID_BLUE);
 8003508:	f240 431f 	movw	r3, #1055	@ 0x41f
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	2364      	movs	r3, #100	@ 0x64
 8003510:	2296      	movs	r2, #150	@ 0x96
 8003512:	21b9      	movs	r1, #185	@ 0xb9
 8003514:	20a0      	movs	r0, #160	@ 0xa0
 8003516:	f7fd fffd 	bl	8001514 <TFT_Draw_Fill_Rectangle>
						sprintf(buffer, "%d", temp);
 800351a:	4b32      	ldr	r3, [pc, #200]	@ (80035e4 <main+0x5e8>)
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	4931      	ldr	r1, [pc, #196]	@ (80035e8 <main+0x5ec>)
 8003522:	4832      	ldr	r0, [pc, #200]	@ (80035ec <main+0x5f0>)
 8003524:	f003 fcc4 	bl	8006eb0 <siprintf>
						LCD_Font(160, 280, buffer,_Open_Sans_Bold_128, 1, WHITE);
 8003528:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	2301      	movs	r3, #1
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	4b2f      	ldr	r3, [pc, #188]	@ (80035f0 <main+0x5f4>)
 8003534:	4a2d      	ldr	r2, [pc, #180]	@ (80035ec <main+0x5f0>)
 8003536:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800353a:	20a0      	movs	r0, #160	@ 0xa0
 800353c:	f7fe fd3e 	bl	8001fbc <LCD_Font>

						TFT_Draw_Fill_Rectangle(535, 290, 35, 30, VIVID_BLUE);
 8003540:	f240 431f 	movw	r3, #1055	@ 0x41f
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	231e      	movs	r3, #30
 8003548:	2223      	movs	r2, #35	@ 0x23
 800354a:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800354e:	f240 2017 	movw	r0, #535	@ 0x217
 8003552:	f7fd ffdf 	bl	8001514 <TFT_Draw_Fill_Rectangle>
						sprintf(buffer, "%d", temp);
 8003556:	4b23      	ldr	r3, [pc, #140]	@ (80035e4 <main+0x5e8>)
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	4922      	ldr	r1, [pc, #136]	@ (80035e8 <main+0x5ec>)
 800355e:	4823      	ldr	r0, [pc, #140]	@ (80035ec <main+0x5f0>)
 8003560:	f003 fca6 	bl	8006eb0 <siprintf>

						if(flag_resistencia_ativa) LCD_Font(540, 310, buffer, _Open_Sans_Bold_24, 1, WHITE);
 8003564:	4b23      	ldr	r3, [pc, #140]	@ (80035f4 <main+0x5f8>)
 8003566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00d      	beq.n	800358a <main+0x58e>
 800356e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003572:	9301      	str	r3, [sp, #4]
 8003574:	2301      	movs	r3, #1
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	4b1f      	ldr	r3, [pc, #124]	@ (80035f8 <main+0x5fc>)
 800357a:	4a1c      	ldr	r2, [pc, #112]	@ (80035ec <main+0x5f0>)
 800357c:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8003580:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8003584:	f7fe fd1a 	bl	8001fbc <LCD_Font>
 8003588:	e097      	b.n	80036ba <main+0x6be>
						else LCD_Font(540, 310, buffer, _Open_Sans_Bold_24, 1, GRAYISH_BLUE);
 800358a:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 800358e:	9301      	str	r3, [sp, #4]
 8003590:	2301      	movs	r3, #1
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	4b18      	ldr	r3, [pc, #96]	@ (80035f8 <main+0x5fc>)
 8003596:	4a15      	ldr	r2, [pc, #84]	@ (80035ec <main+0x5f0>)
 8003598:	f44f 719b 	mov.w	r1, #310	@ 0x136
 800359c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80035a0:	f7fe fd0c 	bl	8001fbc <LCD_Font>
 80035a4:	e089      	b.n	80036ba <main+0x6be>
 80035a6:	bf00      	nop
 80035a8:	20000266 	.word	0x20000266
 80035ac:	20000264 	.word	0x20000264
 80035b0:	66666667 	.word	0x66666667
 80035b4:	20000294 	.word	0x20000294
 80035b8:	20000054 	.word	0x20000054
 80035bc:	20000296 	.word	0x20000296
 80035c0:	20000295 	.word	0x20000295
 80035c4:	20000297 	.word	0x20000297
 80035c8:	20000260 	.word	0x20000260
 80035cc:	2000026c 	.word	0x2000026c
 80035d0:	2000026e 	.word	0x2000026e
 80035d4:	2000026a 	.word	0x2000026a
 80035d8:	08020c64 	.word	0x08020c64
 80035dc:	0800b678 	.word	0x0800b678
 80035e0:	0800a7d8 	.word	0x0800a7d8
 80035e4:	2000005c 	.word	0x2000005c
 80035e8:	0800a750 	.word	0x0800a750
 80035ec:	20000298 	.word	0x20000298
 80035f0:	0801f29c 	.word	0x0801f29c
 80035f4:	20000270 	.word	0x20000270
 80035f8:	0800cad0 	.word	0x0800cad0
					}
				}
			}

			/********************* ABASTECIMENTO *************************/
			else if(item_selected == 1)
 80035fc:	4b30      	ldr	r3, [pc, #192]	@ (80036c0 <main+0x6c4>)
 80035fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d11a      	bne.n	800363c <main+0x640>
			{
				if (flag_botao_off)
 8003606:	4b2f      	ldr	r3, [pc, #188]	@ (80036c4 <main+0x6c8>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d054      	beq.n	80036ba <main+0x6be>
				{
					flag_escrita_tela = 1;
 8003610:	4b2d      	ldr	r3, [pc, #180]	@ (80036c8 <main+0x6cc>)
 8003612:	2201      	movs	r2, #1
 8003614:	701a      	strb	r2, [r3, #0]
					flag_botao_off = 0;
 8003616:	4b2b      	ldr	r3, [pc, #172]	@ (80036c4 <main+0x6c8>)
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
					flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 800361c:	2200      	movs	r2, #0
 800361e:	4b2b      	ldr	r3, [pc, #172]	@ (80036cc <main+0x6d0>)
 8003620:	4611      	mov	r1, r2
 8003622:	7019      	strb	r1, [r3, #0]
 8003624:	4b2a      	ldr	r3, [pc, #168]	@ (80036d0 <main+0x6d4>)
 8003626:	4611      	mov	r1, r2
 8003628:	7019      	strb	r1, [r3, #0]
 800362a:	4b26      	ldr	r3, [pc, #152]	@ (80036c4 <main+0x6c8>)
 800362c:	4611      	mov	r1, r2
 800362e:	7019      	strb	r1, [r3, #0]
 8003630:	4b28      	ldr	r3, [pc, #160]	@ (80036d4 <main+0x6d8>)
 8003632:	701a      	strb	r2, [r3, #0]
					current_screen = 0;
 8003634:	4b28      	ldr	r3, [pc, #160]	@ (80036d8 <main+0x6dc>)
 8003636:	2200      	movs	r2, #0
 8003638:	801a      	strh	r2, [r3, #0]
 800363a:	e03e      	b.n	80036ba <main+0x6be>
				}
			}

			/********************* DRENAGEM *************************/
			else if(item_selected == 2)
 800363c:	4b20      	ldr	r3, [pc, #128]	@ (80036c0 <main+0x6c4>)
 800363e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d11a      	bne.n	800367c <main+0x680>
			{
				if (flag_botao_off)
 8003646:	4b1f      	ldr	r3, [pc, #124]	@ (80036c4 <main+0x6c8>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d034      	beq.n	80036ba <main+0x6be>
				{
					flag_escrita_tela = 1;
 8003650:	4b1d      	ldr	r3, [pc, #116]	@ (80036c8 <main+0x6cc>)
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]
					flag_botao_off = 0;
 8003656:	4b1b      	ldr	r3, [pc, #108]	@ (80036c4 <main+0x6c8>)
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
					flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 800365c:	2200      	movs	r2, #0
 800365e:	4b1b      	ldr	r3, [pc, #108]	@ (80036cc <main+0x6d0>)
 8003660:	4611      	mov	r1, r2
 8003662:	7019      	strb	r1, [r3, #0]
 8003664:	4b1a      	ldr	r3, [pc, #104]	@ (80036d0 <main+0x6d4>)
 8003666:	4611      	mov	r1, r2
 8003668:	7019      	strb	r1, [r3, #0]
 800366a:	4b16      	ldr	r3, [pc, #88]	@ (80036c4 <main+0x6c8>)
 800366c:	4611      	mov	r1, r2
 800366e:	7019      	strb	r1, [r3, #0]
 8003670:	4b18      	ldr	r3, [pc, #96]	@ (80036d4 <main+0x6d8>)
 8003672:	701a      	strb	r2, [r3, #0]
					current_screen = 0;
 8003674:	4b18      	ldr	r3, [pc, #96]	@ (80036d8 <main+0x6dc>)
 8003676:	2200      	movs	r2, #0
 8003678:	801a      	strh	r2, [r3, #0]
 800367a:	e01e      	b.n	80036ba <main+0x6be>
				}
			}

			/********************* CONFIGURAÇÃO *************************/
			else if(item_selected == 3)
 800367c:	4b10      	ldr	r3, [pc, #64]	@ (80036c0 <main+0x6c4>)
 800367e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003682:	2b03      	cmp	r3, #3
 8003684:	d119      	bne.n	80036ba <main+0x6be>
			{
				if (flag_botao_off)
 8003686:	4b0f      	ldr	r3, [pc, #60]	@ (80036c4 <main+0x6c8>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d014      	beq.n	80036ba <main+0x6be>
				{
					flag_escrita_tela = 1;
 8003690:	4b0d      	ldr	r3, [pc, #52]	@ (80036c8 <main+0x6cc>)
 8003692:	2201      	movs	r2, #1
 8003694:	701a      	strb	r2, [r3, #0]
					flag_botao_off = 0;
 8003696:	4b0b      	ldr	r3, [pc, #44]	@ (80036c4 <main+0x6c8>)
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
					flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 800369c:	2200      	movs	r2, #0
 800369e:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <main+0x6d0>)
 80036a0:	4611      	mov	r1, r2
 80036a2:	7019      	strb	r1, [r3, #0]
 80036a4:	4b0a      	ldr	r3, [pc, #40]	@ (80036d0 <main+0x6d4>)
 80036a6:	4611      	mov	r1, r2
 80036a8:	7019      	strb	r1, [r3, #0]
 80036aa:	4b06      	ldr	r3, [pc, #24]	@ (80036c4 <main+0x6c8>)
 80036ac:	4611      	mov	r1, r2
 80036ae:	7019      	strb	r1, [r3, #0]
 80036b0:	4b08      	ldr	r3, [pc, #32]	@ (80036d4 <main+0x6d8>)
 80036b2:	701a      	strb	r2, [r3, #0]
					current_screen = 0;
 80036b4:	4b08      	ldr	r3, [pc, #32]	@ (80036d8 <main+0x6dc>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	801a      	strh	r2, [r3, #0]
				}
			}

	  }

		header_fotter();
 80036ba:	f7ff f8fb 	bl	80028b4 <header_fotter>
	  if(current_screen == 0){
 80036be:	e4ba      	b.n	8003036 <main+0x3a>
 80036c0:	20000262 	.word	0x20000262
 80036c4:	20000294 	.word	0x20000294
 80036c8:	20000054 	.word	0x20000054
 80036cc:	20000296 	.word	0x20000296
 80036d0:	20000295 	.word	0x20000295
 80036d4:	20000297 	.word	0x20000297
 80036d8:	20000260 	.word	0x20000260

080036dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b094      	sub	sp, #80	@ 0x50
 80036e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036e2:	f107 0320 	add.w	r3, r7, #32
 80036e6:	2230      	movs	r2, #48	@ 0x30
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f003 fc45 	bl	8006f7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036f0:	f107 030c 	add.w	r3, r7, #12
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	60da      	str	r2, [r3, #12]
 80036fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003700:	2300      	movs	r3, #0
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	4b28      	ldr	r3, [pc, #160]	@ (80037a8 <SystemClock_Config+0xcc>)
 8003706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003708:	4a27      	ldr	r2, [pc, #156]	@ (80037a8 <SystemClock_Config+0xcc>)
 800370a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800370e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003710:	4b25      	ldr	r3, [pc, #148]	@ (80037a8 <SystemClock_Config+0xcc>)
 8003712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800371c:	2300      	movs	r3, #0
 800371e:	607b      	str	r3, [r7, #4]
 8003720:	4b22      	ldr	r3, [pc, #136]	@ (80037ac <SystemClock_Config+0xd0>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a21      	ldr	r2, [pc, #132]	@ (80037ac <SystemClock_Config+0xd0>)
 8003726:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	4b1f      	ldr	r3, [pc, #124]	@ (80037ac <SystemClock_Config+0xd0>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003738:	2302      	movs	r3, #2
 800373a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800373c:	2301      	movs	r3, #1
 800373e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003740:	2310      	movs	r3, #16
 8003742:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003744:	2302      	movs	r3, #2
 8003746:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003748:	2300      	movs	r3, #0
 800374a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800374c:	2308      	movs	r3, #8
 800374e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003750:	23a8      	movs	r3, #168	@ 0xa8
 8003752:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003754:	2302      	movs	r3, #2
 8003756:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003758:	2304      	movs	r3, #4
 800375a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800375c:	f107 0320 	add.w	r3, r7, #32
 8003760:	4618      	mov	r0, r3
 8003762:	f000 ffdb 	bl	800471c <HAL_RCC_OscConfig>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800376c:	f000 fa3a 	bl	8003be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003770:	230f      	movs	r3, #15
 8003772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003774:	2302      	movs	r3, #2
 8003776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800377c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003782:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003788:	f107 030c 	add.w	r3, r7, #12
 800378c:	2105      	movs	r1, #5
 800378e:	4618      	mov	r0, r3
 8003790:	f001 fa3c 	bl	8004c0c <HAL_RCC_ClockConfig>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800379a:	f000 fa23 	bl	8003be4 <Error_Handler>
  }
}
 800379e:	bf00      	nop
 80037a0:	3750      	adds	r7, #80	@ 0x50
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40007000 	.word	0x40007000

080037b0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037b6:	463b      	mov	r3, r7
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80037be:	4b15      	ldr	r3, [pc, #84]	@ (8003814 <MX_TIM7_Init+0x64>)
 80037c0:	4a15      	ldr	r2, [pc, #84]	@ (8003818 <MX_TIM7_Init+0x68>)
 80037c2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8399;
 80037c4:	4b13      	ldr	r3, [pc, #76]	@ (8003814 <MX_TIM7_Init+0x64>)
 80037c6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80037ca:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037cc:	4b11      	ldr	r3, [pc, #68]	@ (8003814 <MX_TIM7_Init+0x64>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80037d2:	4b10      	ldr	r3, [pc, #64]	@ (8003814 <MX_TIM7_Init+0x64>)
 80037d4:	2231      	movs	r2, #49	@ 0x31
 80037d6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003814 <MX_TIM7_Init+0x64>)
 80037da:	2200      	movs	r2, #0
 80037dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80037de:	480d      	ldr	r0, [pc, #52]	@ (8003814 <MX_TIM7_Init+0x64>)
 80037e0:	f001 fc3c 	bl	800505c <HAL_TIM_Base_Init>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80037ea:	f000 f9fb 	bl	8003be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037ee:	2300      	movs	r3, #0
 80037f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037f2:	2300      	movs	r3, #0
 80037f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80037f6:	463b      	mov	r3, r7
 80037f8:	4619      	mov	r1, r3
 80037fa:	4806      	ldr	r0, [pc, #24]	@ (8003814 <MX_TIM7_Init+0x64>)
 80037fc:	f002 f80e 	bl	800581c <HAL_TIMEx_MasterConfigSynchronization>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003806:	f000 f9ed 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	200002bc 	.word	0x200002bc
 8003818:	40001400 	.word	0x40001400

0800381c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003822:	463b      	mov	r3, r7
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800382e:	4b16      	ldr	r3, [pc, #88]	@ (8003888 <MX_TIM9_Init+0x6c>)
 8003830:	4a16      	ldr	r2, [pc, #88]	@ (800388c <MX_TIM9_Init+0x70>)
 8003832:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 16799;
 8003834:	4b14      	ldr	r3, [pc, #80]	@ (8003888 <MX_TIM9_Init+0x6c>)
 8003836:	f244 129f 	movw	r2, #16799	@ 0x419f
 800383a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800383c:	4b12      	ldr	r3, [pc, #72]	@ (8003888 <MX_TIM9_Init+0x6c>)
 800383e:	2200      	movs	r2, #0
 8003840:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1999;
 8003842:	4b11      	ldr	r3, [pc, #68]	@ (8003888 <MX_TIM9_Init+0x6c>)
 8003844:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8003848:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800384a:	4b0f      	ldr	r3, [pc, #60]	@ (8003888 <MX_TIM9_Init+0x6c>)
 800384c:	2200      	movs	r2, #0
 800384e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003850:	4b0d      	ldr	r3, [pc, #52]	@ (8003888 <MX_TIM9_Init+0x6c>)
 8003852:	2200      	movs	r2, #0
 8003854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003856:	480c      	ldr	r0, [pc, #48]	@ (8003888 <MX_TIM9_Init+0x6c>)
 8003858:	f001 fc00 	bl	800505c <HAL_TIM_Base_Init>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8003862:	f000 f9bf 	bl	8003be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003866:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800386a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800386c:	463b      	mov	r3, r7
 800386e:	4619      	mov	r1, r3
 8003870:	4805      	ldr	r0, [pc, #20]	@ (8003888 <MX_TIM9_Init+0x6c>)
 8003872:	f001 fda3 	bl	80053bc <HAL_TIM_ConfigClockSource>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 800387c:	f000 f9b2 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003880:	bf00      	nop
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20000304 	.word	0x20000304
 800388c:	40014000 	.word	0x40014000

08003890 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003894:	4b10      	ldr	r3, [pc, #64]	@ (80038d8 <MX_USART1_UART_Init+0x48>)
 8003896:	4a11      	ldr	r2, [pc, #68]	@ (80038dc <MX_USART1_UART_Init+0x4c>)
 8003898:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 800389a:	4b0f      	ldr	r3, [pc, #60]	@ (80038d8 <MX_USART1_UART_Init+0x48>)
 800389c:	4a10      	ldr	r2, [pc, #64]	@ (80038e0 <MX_USART1_UART_Init+0x50>)
 800389e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038a0:	4b0d      	ldr	r3, [pc, #52]	@ (80038d8 <MX_USART1_UART_Init+0x48>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038a6:	4b0c      	ldr	r3, [pc, #48]	@ (80038d8 <MX_USART1_UART_Init+0x48>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038ac:	4b0a      	ldr	r3, [pc, #40]	@ (80038d8 <MX_USART1_UART_Init+0x48>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80038b2:	4b09      	ldr	r3, [pc, #36]	@ (80038d8 <MX_USART1_UART_Init+0x48>)
 80038b4:	220c      	movs	r2, #12
 80038b6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038b8:	4b07      	ldr	r3, [pc, #28]	@ (80038d8 <MX_USART1_UART_Init+0x48>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80038be:	4b06      	ldr	r3, [pc, #24]	@ (80038d8 <MX_USART1_UART_Init+0x48>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80038c4:	4804      	ldr	r0, [pc, #16]	@ (80038d8 <MX_USART1_UART_Init+0x48>)
 80038c6:	f002 f839 	bl	800593c <HAL_UART_Init>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80038d0:	f000 f988 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80038d4:	bf00      	nop
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	2000034c 	.word	0x2000034c
 80038dc:	40011000 	.word	0x40011000
 80038e0:	000f4240 	.word	0x000f4240

080038e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ea:	f107 030c 	add.w	r3, r7, #12
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	605a      	str	r2, [r3, #4]
 80038f4:	609a      	str	r2, [r3, #8]
 80038f6:	60da      	str	r2, [r3, #12]
 80038f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038fa:	2300      	movs	r3, #0
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003970 <MX_GPIO_Init+0x8c>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003902:	4a1b      	ldr	r2, [pc, #108]	@ (8003970 <MX_GPIO_Init+0x8c>)
 8003904:	f043 0310 	orr.w	r3, r3, #16
 8003908:	6313      	str	r3, [r2, #48]	@ 0x30
 800390a:	4b19      	ldr	r3, [pc, #100]	@ (8003970 <MX_GPIO_Init+0x8c>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	60bb      	str	r3, [r7, #8]
 8003914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	607b      	str	r3, [r7, #4]
 800391a:	4b15      	ldr	r3, [pc, #84]	@ (8003970 <MX_GPIO_Init+0x8c>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391e:	4a14      	ldr	r2, [pc, #80]	@ (8003970 <MX_GPIO_Init+0x8c>)
 8003920:	f043 0308 	orr.w	r3, r3, #8
 8003924:	6313      	str	r3, [r2, #48]	@ 0x30
 8003926:	4b12      	ldr	r3, [pc, #72]	@ (8003970 <MX_GPIO_Init+0x8c>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	607b      	str	r3, [r7, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	603b      	str	r3, [r7, #0]
 8003936:	4b0e      	ldr	r3, [pc, #56]	@ (8003970 <MX_GPIO_Init+0x8c>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393a:	4a0d      	ldr	r2, [pc, #52]	@ (8003970 <MX_GPIO_Init+0x8c>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	6313      	str	r3, [r2, #48]	@ 0x30
 8003942:	4b0b      	ldr	r3, [pc, #44]	@ (8003970 <MX_GPIO_Init+0x8c>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800394e:	233c      	movs	r3, #60	@ 0x3c
 8003950:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003952:	2300      	movs	r3, #0
 8003954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003956:	2302      	movs	r3, #2
 8003958:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800395a:	f107 030c 	add.w	r3, r7, #12
 800395e:	4619      	mov	r1, r3
 8003960:	4804      	ldr	r0, [pc, #16]	@ (8003974 <MX_GPIO_Init+0x90>)
 8003962:	f000 fd3f 	bl	80043e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003966:	bf00      	nop
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
 8003974:	40021000 	.word	0x40021000

08003978 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800397e:	1d3b      	adds	r3, r7, #4
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	60da      	str	r2, [r3, #12]
 800398a:	611a      	str	r2, [r3, #16]
 800398c:	615a      	str	r2, [r3, #20]
 800398e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8003990:	4b27      	ldr	r3, [pc, #156]	@ (8003a30 <MX_FSMC_Init+0xb8>)
 8003992:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8003996:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003998:	4b25      	ldr	r3, [pc, #148]	@ (8003a30 <MX_FSMC_Init+0xb8>)
 800399a:	4a26      	ldr	r2, [pc, #152]	@ (8003a34 <MX_FSMC_Init+0xbc>)
 800399c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800399e:	4b24      	ldr	r3, [pc, #144]	@ (8003a30 <MX_FSMC_Init+0xb8>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80039a4:	4b22      	ldr	r3, [pc, #136]	@ (8003a30 <MX_FSMC_Init+0xb8>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80039aa:	4b21      	ldr	r3, [pc, #132]	@ (8003a30 <MX_FSMC_Init+0xb8>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80039b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a30 <MX_FSMC_Init+0xb8>)
 80039b2:	2210      	movs	r2, #16
 80039b4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80039b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a30 <MX_FSMC_Init+0xb8>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80039bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003a30 <MX_FSMC_Init+0xb8>)
 80039be:	2200      	movs	r2, #0
 80039c0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80039c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a30 <MX_FSMC_Init+0xb8>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80039c8:	4b19      	ldr	r3, [pc, #100]	@ (8003a30 <MX_FSMC_Init+0xb8>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80039ce:	4b18      	ldr	r3, [pc, #96]	@ (8003a30 <MX_FSMC_Init+0xb8>)
 80039d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80039d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80039d6:	4b16      	ldr	r3, [pc, #88]	@ (8003a30 <MX_FSMC_Init+0xb8>)
 80039d8:	2200      	movs	r2, #0
 80039da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80039dc:	4b14      	ldr	r3, [pc, #80]	@ (8003a30 <MX_FSMC_Init+0xb8>)
 80039de:	2200      	movs	r2, #0
 80039e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80039e2:	4b13      	ldr	r3, [pc, #76]	@ (8003a30 <MX_FSMC_Init+0xb8>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80039e8:	4b11      	ldr	r3, [pc, #68]	@ (8003a30 <MX_FSMC_Init+0xb8>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80039ee:	4b10      	ldr	r3, [pc, #64]	@ (8003a30 <MX_FSMC_Init+0xb8>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 80039f4:	2301      	movs	r3, #1
 80039f6:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80039f8:	230f      	movs	r3, #15
 80039fa:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 80039fc:	2305      	movs	r3, #5
 80039fe:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8003a00:	230f      	movs	r3, #15
 8003a02:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003a04:	2310      	movs	r3, #16
 8003a06:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003a08:	2311      	movs	r3, #17
 8003a0a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8003a10:	1d3b      	adds	r3, r7, #4
 8003a12:	2200      	movs	r2, #0
 8003a14:	4619      	mov	r1, r3
 8003a16:	4806      	ldr	r0, [pc, #24]	@ (8003a30 <MX_FSMC_Init+0xb8>)
 8003a18:	f001 fad8 	bl	8004fcc <HAL_SRAM_Init>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8003a22:	f000 f8df 	bl	8003be4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8003a26:	bf00      	nop
 8003a28:	3720      	adds	r7, #32
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000394 	.word	0x20000394
 8003a34:	a0000104 	.word	0xa0000104

08003a38 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch) {
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
	USART1->DR = (ch & (uint16_t) 0x01FF);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a09      	ldr	r2, [pc, #36]	@ (8003a68 <__io_putchar+0x30>)
 8003a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a48:	6053      	str	r3, [r2, #4]
	while (!(USART1->SR & USART_SR_TXE))
 8003a4a:	bf00      	nop
 8003a4c:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <__io_putchar+0x30>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f9      	beq.n	8003a4c <__io_putchar+0x14>
		; //espera pelo fim da transmissão do caractere para evitar a segunda transmissão antes da primeira ser concluída
	return ch;
 8003a58:	687b      	ldr	r3, [r7, #4]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40011000 	.word	0x40011000

08003a6c <__io_getchar>:

int __io_getchar(void) {
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
	return (uint16_t) (USART1->DR & (uint16_t) 0x01FF);
 8003a70:	4b04      	ldr	r3, [pc, #16]	@ (8003a84 <__io_getchar+0x18>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	40011000 	.word	0x40011000

08003a88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM7)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a46      	ldr	r2, [pc, #280]	@ (8003bb0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d134      	bne.n	8003b04 <HAL_TIM_PeriodElapsedCallback+0x7c>
	{
		int8_t botao_selecionado = scan_membrana();
 8003a9a:	f7ff fa53 	bl	8002f44 <scan_membrana>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	73fb      	strb	r3, [r7, #15]
		if(botao_selecionado != -1){
 8003aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aaa:	d02b      	beq.n	8003b04 <HAL_TIM_PeriodElapsedCallback+0x7c>

			switch(botao_selecionado){
 8003aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	2b09      	cmp	r3, #9
 8003ab4:	d826      	bhi.n	8003b04 <HAL_TIM_PeriodElapsedCallback+0x7c>
 8003ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8003abc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003aed 	.word	0x08003aed
 8003ac0:	08003af5 	.word	0x08003af5
 8003ac4:	08003afd 	.word	0x08003afd
 8003ac8:	08003b05 	.word	0x08003b05
 8003acc:	08003b05 	.word	0x08003b05
 8003ad0:	08003b05 	.word	0x08003b05
 8003ad4:	08003b05 	.word	0x08003b05
 8003ad8:	08003b05 	.word	0x08003b05
 8003adc:	08003b05 	.word	0x08003b05
 8003ae0:	08003ae5 	.word	0x08003ae5

			case 10:
				flag_botao_on = 1;
 8003ae4:	4b33      	ldr	r3, [pc, #204]	@ (8003bb4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	701a      	strb	r2, [r3, #0]
				break;
 8003aea:	e00b      	b.n	8003b04 <HAL_TIM_PeriodElapsedCallback+0x7c>

			case 1:
				flag_botao_off = 1;
 8003aec:	4b32      	ldr	r3, [pc, #200]	@ (8003bb8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	701a      	strb	r2, [r3, #0]
				break;
 8003af2:	e007      	b.n	8003b04 <HAL_TIM_PeriodElapsedCallback+0x7c>

			case 2:
				flag_botao_up = 1;
 8003af4:	4b31      	ldr	r3, [pc, #196]	@ (8003bbc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]
				break;
 8003afa:	e003      	b.n	8003b04 <HAL_TIM_PeriodElapsedCallback+0x7c>

			case 3:
				flag_botao_down = 1;
 8003afc:	4b30      	ldr	r3, [pc, #192]	@ (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	701a      	strb	r2, [r3, #0]
				break;
 8003b02:	bf00      	nop
			}
		}
	}
	if(htim->Instance == TIM9)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d14c      	bne.n	8003ba8 <HAL_TIM_PeriodElapsedCallback+0x120>
	{
		if(flag_iniciar_banho)
 8003b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003b10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d017      	beq.n	8003b48 <HAL_TIM_PeriodElapsedCallback+0xc0>
		{
			if(contador_Iniciar >= COUNT_LIM)
 8003b18:	4b2c      	ldr	r3, [pc, #176]	@ (8003bcc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b1e:	2b31      	cmp	r3, #49	@ 0x31
 8003b20:	dd09      	ble.n	8003b36 <HAL_TIM_PeriodElapsedCallback+0xae>
			{
				contador_Iniciar = 0;
 8003b22:	4b2a      	ldr	r3, [pc, #168]	@ (8003bcc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	801a      	strh	r2, [r3, #0]
				flag_iniciar_banho = 0;
 8003b28:	4b27      	ldr	r3, [pc, #156]	@ (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	801a      	strh	r2, [r3, #0]
				flag_escrita_tela = 1;
 8003b2e:	4b28      	ldr	r3, [pc, #160]	@ (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	701a      	strb	r2, [r3, #0]
 8003b34:	e008      	b.n	8003b48 <HAL_TIM_PeriodElapsedCallback+0xc0>
			}
			else
			{
				contador_Iniciar++;
 8003b36:	4b25      	ldr	r3, [pc, #148]	@ (8003bcc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	b21a      	sxth	r2, r3
 8003b44:	4b21      	ldr	r3, [pc, #132]	@ (8003bcc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003b46:	801a      	strh	r2, [r3, #0]
			}

		}

		if(flag_desligar_banho)
 8003b48:	4b22      	ldr	r3, [pc, #136]	@ (8003bd4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d02a      	beq.n	8003ba8 <HAL_TIM_PeriodElapsedCallback+0x120>
		{
			if(contador_Desligar >= COUNT_LIM)
 8003b52:	4b21      	ldr	r3, [pc, #132]	@ (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b58:	2b31      	cmp	r3, #49	@ 0x31
 8003b5a:	dd1c      	ble.n	8003b96 <HAL_TIM_PeriodElapsedCallback+0x10e>
			{
				flag_estado_banho = 0;
 8003b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bdc <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	801a      	strh	r2, [r3, #0]
				contador_Desligar = 0;
 8003b62:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	801a      	strh	r2, [r3, #0]
				ultimo_contador_Desligar = 0;
 8003b68:	4b1d      	ldr	r3, [pc, #116]	@ (8003be0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	801a      	strh	r2, [r3, #0]
				flag_desligar_banho = 0;
 8003b6e:	4b19      	ldr	r3, [pc, #100]	@ (8003bd4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	801a      	strh	r2, [r3, #0]
				TFT_Draw_Fill_Rectangle(0, 81, 800, 317, VIVID_BLUE);
 8003b74:	f240 431f 	movw	r3, #1055	@ 0x41f
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	f240 133d 	movw	r3, #317	@ 0x13d
 8003b7e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003b82:	2151      	movs	r1, #81	@ 0x51
 8003b84:	2000      	movs	r0, #0
 8003b86:	f7fd fcc5 	bl	8001514 <TFT_Draw_Fill_Rectangle>
				starter_Screen();
 8003b8a:	f7fe fad7 	bl	800213c <starter_Screen>
				flag_escrita_tela = 1;
 8003b8e:	4b10      	ldr	r3, [pc, #64]	@ (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	701a      	strb	r2, [r3, #0]
			}
			else contador_Desligar++;
		}
	}
}
 8003b94:	e008      	b.n	8003ba8 <HAL_TIM_PeriodElapsedCallback+0x120>
			else contador_Desligar++;
 8003b96:	4b10      	ldr	r3, [pc, #64]	@ (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	b21a      	sxth	r2, r3
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003ba6:	801a      	strh	r2, [r3, #0]
}
 8003ba8:	bf00      	nop
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40001400 	.word	0x40001400
 8003bb4:	20000297 	.word	0x20000297
 8003bb8:	20000294 	.word	0x20000294
 8003bbc:	20000295 	.word	0x20000295
 8003bc0:	20000296 	.word	0x20000296
 8003bc4:	40014000 	.word	0x40014000
 8003bc8:	2000026a 	.word	0x2000026a
 8003bcc:	20000268 	.word	0x20000268
 8003bd0:	20000054 	.word	0x20000054
 8003bd4:	2000026e 	.word	0x2000026e
 8003bd8:	20000264 	.word	0x20000264
 8003bdc:	2000026c 	.word	0x2000026c
 8003be0:	20000266 	.word	0x20000266

08003be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003be8:	b672      	cpsid	i
}
 8003bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bec:	bf00      	nop
 8003bee:	e7fd      	b.n	8003bec <Error_Handler+0x8>

08003bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	607b      	str	r3, [r7, #4]
 8003bfa:	4b10      	ldr	r3, [pc, #64]	@ (8003c3c <HAL_MspInit+0x4c>)
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8003c3c <HAL_MspInit+0x4c>)
 8003c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c06:	4b0d      	ldr	r3, [pc, #52]	@ (8003c3c <HAL_MspInit+0x4c>)
 8003c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	603b      	str	r3, [r7, #0]
 8003c16:	4b09      	ldr	r3, [pc, #36]	@ (8003c3c <HAL_MspInit+0x4c>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	4a08      	ldr	r2, [pc, #32]	@ (8003c3c <HAL_MspInit+0x4c>)
 8003c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c22:	4b06      	ldr	r3, [pc, #24]	@ (8003c3c <HAL_MspInit+0x4c>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40023800 	.word	0x40023800

08003c40 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1c      	ldr	r2, [pc, #112]	@ (8003cc0 <HAL_TIM_Base_MspInit+0x80>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d116      	bne.n	8003c80 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc4 <HAL_TIM_Base_MspInit+0x84>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	4a1a      	ldr	r2, [pc, #104]	@ (8003cc4 <HAL_TIM_Base_MspInit+0x84>)
 8003c5c:	f043 0320 	orr.w	r3, r3, #32
 8003c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c62:	4b18      	ldr	r3, [pc, #96]	@ (8003cc4 <HAL_TIM_Base_MspInit+0x84>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2100      	movs	r1, #0
 8003c72:	2037      	movs	r0, #55	@ 0x37
 8003c74:	f000 fb7f 	bl	8004376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003c78:	2037      	movs	r0, #55	@ 0x37
 8003c7a:	f000 fb98 	bl	80043ae <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM9_MspInit 1 */

    /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003c7e:	e01a      	b.n	8003cb6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM9)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a10      	ldr	r2, [pc, #64]	@ (8003cc8 <HAL_TIM_Base_MspInit+0x88>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d115      	bne.n	8003cb6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc4 <HAL_TIM_Base_MspInit+0x84>)
 8003c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c92:	4a0c      	ldr	r2, [pc, #48]	@ (8003cc4 <HAL_TIM_Base_MspInit+0x84>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c98:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc4 <HAL_TIM_Base_MspInit+0x84>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2100      	movs	r1, #0
 8003caa:	2018      	movs	r0, #24
 8003cac:	f000 fb63 	bl	8004376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003cb0:	2018      	movs	r0, #24
 8003cb2:	f000 fb7c 	bl	80043ae <HAL_NVIC_EnableIRQ>
}
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40001400 	.word	0x40001400
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	40014000 	.word	0x40014000

08003ccc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	@ 0x28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd4:	f107 0314 	add.w	r3, r7, #20
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a19      	ldr	r2, [pc, #100]	@ (8003d50 <HAL_UART_MspInit+0x84>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d12c      	bne.n	8003d48 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	4b18      	ldr	r3, [pc, #96]	@ (8003d54 <HAL_UART_MspInit+0x88>)
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	4a17      	ldr	r2, [pc, #92]	@ (8003d54 <HAL_UART_MspInit+0x88>)
 8003cf8:	f043 0310 	orr.w	r3, r3, #16
 8003cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cfe:	4b15      	ldr	r3, [pc, #84]	@ (8003d54 <HAL_UART_MspInit+0x88>)
 8003d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d02:	f003 0310 	and.w	r3, r3, #16
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	4b11      	ldr	r3, [pc, #68]	@ (8003d54 <HAL_UART_MspInit+0x88>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d12:	4a10      	ldr	r2, [pc, #64]	@ (8003d54 <HAL_UART_MspInit+0x88>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003d54 <HAL_UART_MspInit+0x88>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003d26:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d34:	2303      	movs	r3, #3
 8003d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d38:	2307      	movs	r3, #7
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d3c:	f107 0314 	add.w	r3, r7, #20
 8003d40:	4619      	mov	r1, r3
 8003d42:	4805      	ldr	r0, [pc, #20]	@ (8003d58 <HAL_UART_MspInit+0x8c>)
 8003d44:	f000 fb4e 	bl	80043e4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003d48:	bf00      	nop
 8003d4a:	3728      	adds	r7, #40	@ 0x28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40011000 	.word	0x40011000
 8003d54:	40023800 	.word	0x40023800
 8003d58:	40020000 	.word	0x40020000

08003d5c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003d62:	1d3b      	adds	r3, r7, #4
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	605a      	str	r2, [r3, #4]
 8003d6a:	609a      	str	r2, [r3, #8]
 8003d6c:	60da      	str	r2, [r3, #12]
 8003d6e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003d70:	4b1c      	ldr	r3, [pc, #112]	@ (8003de4 <HAL_FSMC_MspInit+0x88>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d131      	bne.n	8003ddc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8003d78:	4b1a      	ldr	r3, [pc, #104]	@ (8003de4 <HAL_FSMC_MspInit+0x88>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	603b      	str	r3, [r7, #0]
 8003d82:	4b19      	ldr	r3, [pc, #100]	@ (8003de8 <HAL_FSMC_MspInit+0x8c>)
 8003d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d86:	4a18      	ldr	r2, [pc, #96]	@ (8003de8 <HAL_FSMC_MspInit+0x8c>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	6393      	str	r3, [r2, #56]	@ 0x38
 8003d8e:	4b16      	ldr	r3, [pc, #88]	@ (8003de8 <HAL_FSMC_MspInit+0x8c>)
 8003d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003d9a:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8003d9e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da0:	2302      	movs	r3, #2
 8003da2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003da8:	2303      	movs	r3, #3
 8003daa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003dac:	230c      	movs	r3, #12
 8003dae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003db0:	1d3b      	adds	r3, r7, #4
 8003db2:	4619      	mov	r1, r3
 8003db4:	480d      	ldr	r0, [pc, #52]	@ (8003dec <HAL_FSMC_MspInit+0x90>)
 8003db6:	f000 fb15 	bl	80043e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003dba:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 8003dbe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003dcc:	230c      	movs	r3, #12
 8003dce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dd0:	1d3b      	adds	r3, r7, #4
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4806      	ldr	r0, [pc, #24]	@ (8003df0 <HAL_FSMC_MspInit+0x94>)
 8003dd6:	f000 fb05 	bl	80043e4 <HAL_GPIO_Init>
 8003dda:	e000      	b.n	8003dde <HAL_FSMC_MspInit+0x82>
    return;
 8003ddc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	200003e4 	.word	0x200003e4
 8003de8:	40023800 	.word	0x40023800
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40020c00 	.word	0x40020c00

08003df4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8003dfc:	f7ff ffae 	bl	8003d5c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e0c:	bf00      	nop
 8003e0e:	e7fd      	b.n	8003e0c <NMI_Handler+0x4>

08003e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e14:	bf00      	nop
 8003e16:	e7fd      	b.n	8003e14 <HardFault_Handler+0x4>

08003e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e1c:	bf00      	nop
 8003e1e:	e7fd      	b.n	8003e1c <MemManage_Handler+0x4>

08003e20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e24:	bf00      	nop
 8003e26:	e7fd      	b.n	8003e24 <BusFault_Handler+0x4>

08003e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e2c:	bf00      	nop
 8003e2e:	e7fd      	b.n	8003e2c <UsageFault_Handler+0x4>

08003e30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e34:	bf00      	nop
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e42:	bf00      	nop
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e50:	bf00      	nop
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e5e:	f000 f96b 	bl	8004138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8003e6c:	4802      	ldr	r0, [pc, #8]	@ (8003e78 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003e6e:	f001 f9b5 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000304 	.word	0x20000304

08003e7c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003e80:	4802      	ldr	r0, [pc, #8]	@ (8003e8c <TIM7_IRQHandler+0x10>)
 8003e82:	f001 f9ab 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200002bc 	.word	0x200002bc

08003e90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return 1;
 8003e94:	2301      	movs	r3, #1
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <_kill>:

int _kill(int pid, int sig)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003eaa:	f003 f8b9 	bl	8007020 <__errno>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2216      	movs	r2, #22
 8003eb2:	601a      	str	r2, [r3, #0]
  return -1;
 8003eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <_exit>:

void _exit (int status)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff ffe7 	bl	8003ea0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ed2:	bf00      	nop
 8003ed4:	e7fd      	b.n	8003ed2 <_exit+0x12>

08003ed6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b086      	sub	sp, #24
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	e00a      	b.n	8003efe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ee8:	f7ff fdc0 	bl	8003a6c <__io_getchar>
 8003eec:	4601      	mov	r1, r0
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	60ba      	str	r2, [r7, #8]
 8003ef4:	b2ca      	uxtb	r2, r1
 8003ef6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	3301      	adds	r3, #1
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	dbf0      	blt.n	8003ee8 <_read+0x12>
  }

  return len;
 8003f06:	687b      	ldr	r3, [r7, #4]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	e009      	b.n	8003f36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	60ba      	str	r2, [r7, #8]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff fd84 	bl	8003a38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	3301      	adds	r3, #1
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	dbf1      	blt.n	8003f22 <_write+0x12>
  }
  return len;
 8003f3e:	687b      	ldr	r3, [r7, #4]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <_close>:

int _close(int file)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f70:	605a      	str	r2, [r3, #4]
  return 0;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <_isatty>:

int _isatty(int file)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f88:	2301      	movs	r3, #1
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b085      	sub	sp, #20
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fb8:	4a14      	ldr	r2, [pc, #80]	@ (800400c <_sbrk+0x5c>)
 8003fba:	4b15      	ldr	r3, [pc, #84]	@ (8004010 <_sbrk+0x60>)
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fc4:	4b13      	ldr	r3, [pc, #76]	@ (8004014 <_sbrk+0x64>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d102      	bne.n	8003fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fcc:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <_sbrk+0x64>)
 8003fce:	4a12      	ldr	r2, [pc, #72]	@ (8004018 <_sbrk+0x68>)
 8003fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fd2:	4b10      	ldr	r3, [pc, #64]	@ (8004014 <_sbrk+0x64>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4413      	add	r3, r2
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d207      	bcs.n	8003ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fe0:	f003 f81e 	bl	8007020 <__errno>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	220c      	movs	r2, #12
 8003fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fea:	f04f 33ff 	mov.w	r3, #4294967295
 8003fee:	e009      	b.n	8004004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ff0:	4b08      	ldr	r3, [pc, #32]	@ (8004014 <_sbrk+0x64>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ff6:	4b07      	ldr	r3, [pc, #28]	@ (8004014 <_sbrk+0x64>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	4a05      	ldr	r2, [pc, #20]	@ (8004014 <_sbrk+0x64>)
 8004000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004002:	68fb      	ldr	r3, [r7, #12]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	20020000 	.word	0x20020000
 8004010:	00000400 	.word	0x00000400
 8004014:	200003e8 	.word	0x200003e8
 8004018:	20000540 	.word	0x20000540

0800401c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004020:	4b06      	ldr	r3, [pc, #24]	@ (800403c <SystemInit+0x20>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004026:	4a05      	ldr	r2, [pc, #20]	@ (800403c <SystemInit+0x20>)
 8004028:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800402c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004030:	bf00      	nop
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	e000ed00 	.word	0xe000ed00

08004040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004040:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004078 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004044:	f7ff ffea 	bl	800401c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004048:	480c      	ldr	r0, [pc, #48]	@ (800407c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800404a:	490d      	ldr	r1, [pc, #52]	@ (8004080 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800404c:	4a0d      	ldr	r2, [pc, #52]	@ (8004084 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800404e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004050:	e002      	b.n	8004058 <LoopCopyDataInit>

08004052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004056:	3304      	adds	r3, #4

08004058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800405a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800405c:	d3f9      	bcc.n	8004052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800405e:	4a0a      	ldr	r2, [pc, #40]	@ (8004088 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004060:	4c0a      	ldr	r4, [pc, #40]	@ (800408c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004064:	e001      	b.n	800406a <LoopFillZerobss>

08004066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004068:	3204      	adds	r2, #4

0800406a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800406a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800406c:	d3fb      	bcc.n	8004066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800406e:	f002 ffdd 	bl	800702c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004072:	f7fe ffc3 	bl	8002ffc <main>
  bx  lr    
 8004076:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004078:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800407c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004080:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8004084:	08021a54 	.word	0x08021a54
  ldr r2, =_sbss
 8004088:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 800408c:	2000053c 	.word	0x2000053c

08004090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004090:	e7fe      	b.n	8004090 <ADC_IRQHandler>
	...

08004094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004098:	4b0e      	ldr	r3, [pc, #56]	@ (80040d4 <HAL_Init+0x40>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a0d      	ldr	r2, [pc, #52]	@ (80040d4 <HAL_Init+0x40>)
 800409e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040a4:	4b0b      	ldr	r3, [pc, #44]	@ (80040d4 <HAL_Init+0x40>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a0a      	ldr	r2, [pc, #40]	@ (80040d4 <HAL_Init+0x40>)
 80040aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040b0:	4b08      	ldr	r3, [pc, #32]	@ (80040d4 <HAL_Init+0x40>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a07      	ldr	r2, [pc, #28]	@ (80040d4 <HAL_Init+0x40>)
 80040b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040bc:	2003      	movs	r0, #3
 80040be:	f000 f94f 	bl	8004360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040c2:	200f      	movs	r0, #15
 80040c4:	f000 f808 	bl	80040d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040c8:	f7ff fd92 	bl	8003bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40023c00 	.word	0x40023c00

080040d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040e0:	4b12      	ldr	r3, [pc, #72]	@ (800412c <HAL_InitTick+0x54>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b12      	ldr	r3, [pc, #72]	@ (8004130 <HAL_InitTick+0x58>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	4619      	mov	r1, r3
 80040ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80040f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 f967 	bl	80043ca <HAL_SYSTICK_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e00e      	b.n	8004124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b0f      	cmp	r3, #15
 800410a:	d80a      	bhi.n	8004122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800410c:	2200      	movs	r2, #0
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	f04f 30ff 	mov.w	r0, #4294967295
 8004114:	f000 f92f 	bl	8004376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004118:	4a06      	ldr	r2, [pc, #24]	@ (8004134 <HAL_InitTick+0x5c>)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	e000      	b.n	8004124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
}
 8004124:	4618      	mov	r0, r3
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20000070 	.word	0x20000070
 8004130:	20000078 	.word	0x20000078
 8004134:	20000074 	.word	0x20000074

08004138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800413c:	4b06      	ldr	r3, [pc, #24]	@ (8004158 <HAL_IncTick+0x20>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	4b06      	ldr	r3, [pc, #24]	@ (800415c <HAL_IncTick+0x24>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4413      	add	r3, r2
 8004148:	4a04      	ldr	r2, [pc, #16]	@ (800415c <HAL_IncTick+0x24>)
 800414a:	6013      	str	r3, [r2, #0]
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20000078 	.word	0x20000078
 800415c:	200003ec 	.word	0x200003ec

08004160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  return uwTick;
 8004164:	4b03      	ldr	r3, [pc, #12]	@ (8004174 <HAL_GetTick+0x14>)
 8004166:	681b      	ldr	r3, [r3, #0]
}
 8004168:	4618      	mov	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	200003ec 	.word	0x200003ec

08004178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004180:	f7ff ffee 	bl	8004160 <HAL_GetTick>
 8004184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004190:	d005      	beq.n	800419e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004192:	4b0a      	ldr	r3, [pc, #40]	@ (80041bc <HAL_Delay+0x44>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4413      	add	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800419e:	bf00      	nop
 80041a0:	f7ff ffde 	bl	8004160 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d8f7      	bhi.n	80041a0 <HAL_Delay+0x28>
  {
  }
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000078 	.word	0x20000078

080041c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004204 <__NVIC_SetPriorityGrouping+0x44>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041dc:	4013      	ands	r3, r2
 80041de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041f2:	4a04      	ldr	r2, [pc, #16]	@ (8004204 <__NVIC_SetPriorityGrouping+0x44>)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	60d3      	str	r3, [r2, #12]
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	e000ed00 	.word	0xe000ed00

08004208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800420c:	4b04      	ldr	r3, [pc, #16]	@ (8004220 <__NVIC_GetPriorityGrouping+0x18>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	0a1b      	lsrs	r3, r3, #8
 8004212:	f003 0307 	and.w	r3, r3, #7
}
 8004216:	4618      	mov	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800422e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004232:	2b00      	cmp	r3, #0
 8004234:	db0b      	blt.n	800424e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	f003 021f 	and.w	r2, r3, #31
 800423c:	4907      	ldr	r1, [pc, #28]	@ (800425c <__NVIC_EnableIRQ+0x38>)
 800423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	2001      	movs	r0, #1
 8004246:	fa00 f202 	lsl.w	r2, r0, r2
 800424a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	e000e100 	.word	0xe000e100

08004260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	6039      	str	r1, [r7, #0]
 800426a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800426c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004270:	2b00      	cmp	r3, #0
 8004272:	db0a      	blt.n	800428a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	b2da      	uxtb	r2, r3
 8004278:	490c      	ldr	r1, [pc, #48]	@ (80042ac <__NVIC_SetPriority+0x4c>)
 800427a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427e:	0112      	lsls	r2, r2, #4
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	440b      	add	r3, r1
 8004284:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004288:	e00a      	b.n	80042a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	4908      	ldr	r1, [pc, #32]	@ (80042b0 <__NVIC_SetPriority+0x50>)
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	3b04      	subs	r3, #4
 8004298:	0112      	lsls	r2, r2, #4
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	440b      	add	r3, r1
 800429e:	761a      	strb	r2, [r3, #24]
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	e000e100 	.word	0xe000e100
 80042b0:	e000ed00 	.word	0xe000ed00

080042b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b089      	sub	sp, #36	@ 0x24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f1c3 0307 	rsb	r3, r3, #7
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	bf28      	it	cs
 80042d2:	2304      	movcs	r3, #4
 80042d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	3304      	adds	r3, #4
 80042da:	2b06      	cmp	r3, #6
 80042dc:	d902      	bls.n	80042e4 <NVIC_EncodePriority+0x30>
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	3b03      	subs	r3, #3
 80042e2:	e000      	b.n	80042e6 <NVIC_EncodePriority+0x32>
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042e8:	f04f 32ff 	mov.w	r2, #4294967295
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	43da      	mvns	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	401a      	ands	r2, r3
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	fa01 f303 	lsl.w	r3, r1, r3
 8004306:	43d9      	mvns	r1, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800430c:	4313      	orrs	r3, r2
         );
}
 800430e:	4618      	mov	r0, r3
 8004310:	3724      	adds	r7, #36	@ 0x24
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
	...

0800431c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3b01      	subs	r3, #1
 8004328:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800432c:	d301      	bcc.n	8004332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800432e:	2301      	movs	r3, #1
 8004330:	e00f      	b.n	8004352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004332:	4a0a      	ldr	r2, [pc, #40]	@ (800435c <SysTick_Config+0x40>)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3b01      	subs	r3, #1
 8004338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800433a:	210f      	movs	r1, #15
 800433c:	f04f 30ff 	mov.w	r0, #4294967295
 8004340:	f7ff ff8e 	bl	8004260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004344:	4b05      	ldr	r3, [pc, #20]	@ (800435c <SysTick_Config+0x40>)
 8004346:	2200      	movs	r2, #0
 8004348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800434a:	4b04      	ldr	r3, [pc, #16]	@ (800435c <SysTick_Config+0x40>)
 800434c:	2207      	movs	r2, #7
 800434e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	e000e010 	.word	0xe000e010

08004360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff ff29 	bl	80041c0 <__NVIC_SetPriorityGrouping>
}
 800436e:	bf00      	nop
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004376:	b580      	push	{r7, lr}
 8004378:	b086      	sub	sp, #24
 800437a:	af00      	add	r7, sp, #0
 800437c:	4603      	mov	r3, r0
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	607a      	str	r2, [r7, #4]
 8004382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004384:	2300      	movs	r3, #0
 8004386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004388:	f7ff ff3e 	bl	8004208 <__NVIC_GetPriorityGrouping>
 800438c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	6978      	ldr	r0, [r7, #20]
 8004394:	f7ff ff8e 	bl	80042b4 <NVIC_EncodePriority>
 8004398:	4602      	mov	r2, r0
 800439a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800439e:	4611      	mov	r1, r2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff ff5d 	bl	8004260 <__NVIC_SetPriority>
}
 80043a6:	bf00      	nop
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	4603      	mov	r3, r0
 80043b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff ff31 	bl	8004224 <__NVIC_EnableIRQ>
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b082      	sub	sp, #8
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff ffa2 	bl	800431c <SysTick_Config>
 80043d8:	4603      	mov	r3, r0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b089      	sub	sp, #36	@ 0x24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
 80043fe:	e16b      	b.n	80046d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004400:	2201      	movs	r2, #1
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4013      	ands	r3, r2
 8004412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	429a      	cmp	r2, r3
 800441a:	f040 815a 	bne.w	80046d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	2b01      	cmp	r3, #1
 8004428:	d005      	beq.n	8004436 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004432:	2b02      	cmp	r3, #2
 8004434:	d130      	bne.n	8004498 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	2203      	movs	r2, #3
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	43db      	mvns	r3, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4013      	ands	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4313      	orrs	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800446c:	2201      	movs	r2, #1
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4013      	ands	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	f003 0201 	and.w	r2, r3, #1
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4313      	orrs	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d017      	beq.n	80044d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	2203      	movs	r2, #3
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	43db      	mvns	r3, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4013      	ands	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d123      	bne.n	8004528 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	08da      	lsrs	r2, r3, #3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3208      	adds	r2, #8
 80044e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	220f      	movs	r2, #15
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4013      	ands	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4313      	orrs	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	08da      	lsrs	r2, r3, #3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3208      	adds	r2, #8
 8004522:	69b9      	ldr	r1, [r7, #24]
 8004524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	2203      	movs	r2, #3
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	43db      	mvns	r3, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4013      	ands	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f003 0203 	and.w	r2, r3, #3
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4313      	orrs	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80b4 	beq.w	80046d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	4b60      	ldr	r3, [pc, #384]	@ (80046f0 <HAL_GPIO_Init+0x30c>)
 8004570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004572:	4a5f      	ldr	r2, [pc, #380]	@ (80046f0 <HAL_GPIO_Init+0x30c>)
 8004574:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004578:	6453      	str	r3, [r2, #68]	@ 0x44
 800457a:	4b5d      	ldr	r3, [pc, #372]	@ (80046f0 <HAL_GPIO_Init+0x30c>)
 800457c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004586:	4a5b      	ldr	r2, [pc, #364]	@ (80046f4 <HAL_GPIO_Init+0x310>)
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	089b      	lsrs	r3, r3, #2
 800458c:	3302      	adds	r3, #2
 800458e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	220f      	movs	r2, #15
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4013      	ands	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a52      	ldr	r2, [pc, #328]	@ (80046f8 <HAL_GPIO_Init+0x314>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d02b      	beq.n	800460a <HAL_GPIO_Init+0x226>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a51      	ldr	r2, [pc, #324]	@ (80046fc <HAL_GPIO_Init+0x318>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d025      	beq.n	8004606 <HAL_GPIO_Init+0x222>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a50      	ldr	r2, [pc, #320]	@ (8004700 <HAL_GPIO_Init+0x31c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d01f      	beq.n	8004602 <HAL_GPIO_Init+0x21e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a4f      	ldr	r2, [pc, #316]	@ (8004704 <HAL_GPIO_Init+0x320>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d019      	beq.n	80045fe <HAL_GPIO_Init+0x21a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a4e      	ldr	r2, [pc, #312]	@ (8004708 <HAL_GPIO_Init+0x324>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d013      	beq.n	80045fa <HAL_GPIO_Init+0x216>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a4d      	ldr	r2, [pc, #308]	@ (800470c <HAL_GPIO_Init+0x328>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00d      	beq.n	80045f6 <HAL_GPIO_Init+0x212>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a4c      	ldr	r2, [pc, #304]	@ (8004710 <HAL_GPIO_Init+0x32c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d007      	beq.n	80045f2 <HAL_GPIO_Init+0x20e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004714 <HAL_GPIO_Init+0x330>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d101      	bne.n	80045ee <HAL_GPIO_Init+0x20a>
 80045ea:	2307      	movs	r3, #7
 80045ec:	e00e      	b.n	800460c <HAL_GPIO_Init+0x228>
 80045ee:	2308      	movs	r3, #8
 80045f0:	e00c      	b.n	800460c <HAL_GPIO_Init+0x228>
 80045f2:	2306      	movs	r3, #6
 80045f4:	e00a      	b.n	800460c <HAL_GPIO_Init+0x228>
 80045f6:	2305      	movs	r3, #5
 80045f8:	e008      	b.n	800460c <HAL_GPIO_Init+0x228>
 80045fa:	2304      	movs	r3, #4
 80045fc:	e006      	b.n	800460c <HAL_GPIO_Init+0x228>
 80045fe:	2303      	movs	r3, #3
 8004600:	e004      	b.n	800460c <HAL_GPIO_Init+0x228>
 8004602:	2302      	movs	r3, #2
 8004604:	e002      	b.n	800460c <HAL_GPIO_Init+0x228>
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <HAL_GPIO_Init+0x228>
 800460a:	2300      	movs	r3, #0
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	f002 0203 	and.w	r2, r2, #3
 8004612:	0092      	lsls	r2, r2, #2
 8004614:	4093      	lsls	r3, r2
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4313      	orrs	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800461c:	4935      	ldr	r1, [pc, #212]	@ (80046f4 <HAL_GPIO_Init+0x310>)
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	089b      	lsrs	r3, r3, #2
 8004622:	3302      	adds	r3, #2
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800462a:	4b3b      	ldr	r3, [pc, #236]	@ (8004718 <HAL_GPIO_Init+0x334>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	43db      	mvns	r3, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4013      	ands	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800464e:	4a32      	ldr	r2, [pc, #200]	@ (8004718 <HAL_GPIO_Init+0x334>)
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004654:	4b30      	ldr	r3, [pc, #192]	@ (8004718 <HAL_GPIO_Init+0x334>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	43db      	mvns	r3, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4013      	ands	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004678:	4a27      	ldr	r2, [pc, #156]	@ (8004718 <HAL_GPIO_Init+0x334>)
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800467e:	4b26      	ldr	r3, [pc, #152]	@ (8004718 <HAL_GPIO_Init+0x334>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004718 <HAL_GPIO_Init+0x334>)
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004718 <HAL_GPIO_Init+0x334>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046cc:	4a12      	ldr	r2, [pc, #72]	@ (8004718 <HAL_GPIO_Init+0x334>)
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	3301      	adds	r3, #1
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	2b0f      	cmp	r3, #15
 80046dc:	f67f ae90 	bls.w	8004400 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	3724      	adds	r7, #36	@ 0x24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40023800 	.word	0x40023800
 80046f4:	40013800 	.word	0x40013800
 80046f8:	40020000 	.word	0x40020000
 80046fc:	40020400 	.word	0x40020400
 8004700:	40020800 	.word	0x40020800
 8004704:	40020c00 	.word	0x40020c00
 8004708:	40021000 	.word	0x40021000
 800470c:	40021400 	.word	0x40021400
 8004710:	40021800 	.word	0x40021800
 8004714:	40021c00 	.word	0x40021c00
 8004718:	40013c00 	.word	0x40013c00

0800471c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e267      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d075      	beq.n	8004826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800473a:	4b88      	ldr	r3, [pc, #544]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b04      	cmp	r3, #4
 8004744:	d00c      	beq.n	8004760 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004746:	4b85      	ldr	r3, [pc, #532]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800474e:	2b08      	cmp	r3, #8
 8004750:	d112      	bne.n	8004778 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004752:	4b82      	ldr	r3, [pc, #520]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800475a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800475e:	d10b      	bne.n	8004778 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004760:	4b7e      	ldr	r3, [pc, #504]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d05b      	beq.n	8004824 <HAL_RCC_OscConfig+0x108>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d157      	bne.n	8004824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e242      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004780:	d106      	bne.n	8004790 <HAL_RCC_OscConfig+0x74>
 8004782:	4b76      	ldr	r3, [pc, #472]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a75      	ldr	r2, [pc, #468]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e01d      	b.n	80047cc <HAL_RCC_OscConfig+0xb0>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004798:	d10c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x98>
 800479a:	4b70      	ldr	r3, [pc, #448]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a6f      	ldr	r2, [pc, #444]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80047a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	4b6d      	ldr	r3, [pc, #436]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a6c      	ldr	r2, [pc, #432]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80047ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	e00b      	b.n	80047cc <HAL_RCC_OscConfig+0xb0>
 80047b4:	4b69      	ldr	r3, [pc, #420]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a68      	ldr	r2, [pc, #416]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80047ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	4b66      	ldr	r3, [pc, #408]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a65      	ldr	r2, [pc, #404]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80047c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d013      	beq.n	80047fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7ff fcc4 	bl	8004160 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047dc:	f7ff fcc0 	bl	8004160 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	@ 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e207      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ee:	4b5b      	ldr	r3, [pc, #364]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCC_OscConfig+0xc0>
 80047fa:	e014      	b.n	8004826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fc:	f7ff fcb0 	bl	8004160 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004804:	f7ff fcac 	bl	8004160 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b64      	cmp	r3, #100	@ 0x64
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e1f3      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004816:	4b51      	ldr	r3, [pc, #324]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0xe8>
 8004822:	e000      	b.n	8004826 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d063      	beq.n	80048fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004832:	4b4a      	ldr	r3, [pc, #296]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 030c 	and.w	r3, r3, #12
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800483e:	4b47      	ldr	r3, [pc, #284]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004846:	2b08      	cmp	r3, #8
 8004848:	d11c      	bne.n	8004884 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800484a:	4b44      	ldr	r3, [pc, #272]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d116      	bne.n	8004884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004856:	4b41      	ldr	r3, [pc, #260]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <HAL_RCC_OscConfig+0x152>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d001      	beq.n	800486e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e1c7      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486e:	4b3b      	ldr	r3, [pc, #236]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4937      	ldr	r1, [pc, #220]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 800487e:	4313      	orrs	r3, r2
 8004880:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004882:	e03a      	b.n	80048fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d020      	beq.n	80048ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800488c:	4b34      	ldr	r3, [pc, #208]	@ (8004960 <HAL_RCC_OscConfig+0x244>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004892:	f7ff fc65 	bl	8004160 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800489a:	f7ff fc61 	bl	8004160 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e1a8      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ac:	4b2b      	ldr	r3, [pc, #172]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b8:	4b28      	ldr	r3, [pc, #160]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4925      	ldr	r1, [pc, #148]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]
 80048cc:	e015      	b.n	80048fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ce:	4b24      	ldr	r3, [pc, #144]	@ (8004960 <HAL_RCC_OscConfig+0x244>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7ff fc44 	bl	8004160 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048dc:	f7ff fc40 	bl	8004160 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e187      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ee:	4b1b      	ldr	r3, [pc, #108]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d036      	beq.n	8004974 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d016      	beq.n	800493c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800490e:	4b15      	ldr	r3, [pc, #84]	@ (8004964 <HAL_RCC_OscConfig+0x248>)
 8004910:	2201      	movs	r2, #1
 8004912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004914:	f7ff fc24 	bl	8004160 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800491c:	f7ff fc20 	bl	8004160 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e167      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492e:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0x200>
 800493a:	e01b      	b.n	8004974 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800493c:	4b09      	ldr	r3, [pc, #36]	@ (8004964 <HAL_RCC_OscConfig+0x248>)
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004942:	f7ff fc0d 	bl	8004160 <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004948:	e00e      	b.n	8004968 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800494a:	f7ff fc09 	bl	8004160 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d907      	bls.n	8004968 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e150      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
 800495c:	40023800 	.word	0x40023800
 8004960:	42470000 	.word	0x42470000
 8004964:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004968:	4b88      	ldr	r3, [pc, #544]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 800496a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1ea      	bne.n	800494a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8097 	beq.w	8004ab0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004982:	2300      	movs	r3, #0
 8004984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004986:	4b81      	ldr	r3, [pc, #516]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10f      	bne.n	80049b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004992:	2300      	movs	r3, #0
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	4b7d      	ldr	r3, [pc, #500]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	4a7c      	ldr	r2, [pc, #496]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 800499c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80049a2:	4b7a      	ldr	r3, [pc, #488]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ae:	2301      	movs	r3, #1
 80049b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b2:	4b77      	ldr	r3, [pc, #476]	@ (8004b90 <HAL_RCC_OscConfig+0x474>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d118      	bne.n	80049f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049be:	4b74      	ldr	r3, [pc, #464]	@ (8004b90 <HAL_RCC_OscConfig+0x474>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a73      	ldr	r2, [pc, #460]	@ (8004b90 <HAL_RCC_OscConfig+0x474>)
 80049c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ca:	f7ff fbc9 	bl	8004160 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d2:	f7ff fbc5 	bl	8004160 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e10c      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004b90 <HAL_RCC_OscConfig+0x474>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0f0      	beq.n	80049d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d106      	bne.n	8004a06 <HAL_RCC_OscConfig+0x2ea>
 80049f8:	4b64      	ldr	r3, [pc, #400]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 80049fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049fc:	4a63      	ldr	r2, [pc, #396]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a04:	e01c      	b.n	8004a40 <HAL_RCC_OscConfig+0x324>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b05      	cmp	r3, #5
 8004a0c:	d10c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x30c>
 8004a0e:	4b5f      	ldr	r3, [pc, #380]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a12:	4a5e      	ldr	r2, [pc, #376]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a14:	f043 0304 	orr.w	r3, r3, #4
 8004a18:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a1a:	4b5c      	ldr	r3, [pc, #368]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1e:	4a5b      	ldr	r2, [pc, #364]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a20:	f043 0301 	orr.w	r3, r3, #1
 8004a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a26:	e00b      	b.n	8004a40 <HAL_RCC_OscConfig+0x324>
 8004a28:	4b58      	ldr	r3, [pc, #352]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a2c:	4a57      	ldr	r2, [pc, #348]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a2e:	f023 0301 	bic.w	r3, r3, #1
 8004a32:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a34:	4b55      	ldr	r3, [pc, #340]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a38:	4a54      	ldr	r2, [pc, #336]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a3a:	f023 0304 	bic.w	r3, r3, #4
 8004a3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d015      	beq.n	8004a74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a48:	f7ff fb8a 	bl	8004160 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4e:	e00a      	b.n	8004a66 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a50:	f7ff fb86 	bl	8004160 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e0cb      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a66:	4b49      	ldr	r3, [pc, #292]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0ee      	beq.n	8004a50 <HAL_RCC_OscConfig+0x334>
 8004a72:	e014      	b.n	8004a9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a74:	f7ff fb74 	bl	8004160 <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a7a:	e00a      	b.n	8004a92 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7c:	f7ff fb70 	bl	8004160 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e0b5      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a92:	4b3e      	ldr	r3, [pc, #248]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1ee      	bne.n	8004a7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a9e:	7dfb      	ldrb	r3, [r7, #23]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa4:	4b39      	ldr	r3, [pc, #228]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa8:	4a38      	ldr	r2, [pc, #224]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 80a1 	beq.w	8004bfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aba:	4b34      	ldr	r3, [pc, #208]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 030c 	and.w	r3, r3, #12
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d05c      	beq.n	8004b80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d141      	bne.n	8004b52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ace:	4b31      	ldr	r3, [pc, #196]	@ (8004b94 <HAL_RCC_OscConfig+0x478>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad4:	f7ff fb44 	bl	8004160 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004adc:	f7ff fb40 	bl	8004160 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e087      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aee:	4b27      	ldr	r3, [pc, #156]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69da      	ldr	r2, [r3, #28]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b08:	019b      	lsls	r3, r3, #6
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b10:	085b      	lsrs	r3, r3, #1
 8004b12:	3b01      	subs	r3, #1
 8004b14:	041b      	lsls	r3, r3, #16
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1c:	061b      	lsls	r3, r3, #24
 8004b1e:	491b      	ldr	r1, [pc, #108]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b24:	4b1b      	ldr	r3, [pc, #108]	@ (8004b94 <HAL_RCC_OscConfig+0x478>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2a:	f7ff fb19 	bl	8004160 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b32:	f7ff fb15 	bl	8004160 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e05c      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b44:	4b11      	ldr	r3, [pc, #68]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x416>
 8004b50:	e054      	b.n	8004bfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b52:	4b10      	ldr	r3, [pc, #64]	@ (8004b94 <HAL_RCC_OscConfig+0x478>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b58:	f7ff fb02 	bl	8004160 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b60:	f7ff fafe 	bl	8004160 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e045      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b72:	4b06      	ldr	r3, [pc, #24]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x444>
 8004b7e:	e03d      	b.n	8004bfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d107      	bne.n	8004b98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e038      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	40007000 	.word	0x40007000
 8004b94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b98:	4b1b      	ldr	r3, [pc, #108]	@ (8004c08 <HAL_RCC_OscConfig+0x4ec>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d028      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d121      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d11a      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bc8:	4013      	ands	r3, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d111      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bde:	085b      	lsrs	r3, r3, #1
 8004be0:	3b01      	subs	r3, #1
 8004be2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d107      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40023800 	.word	0x40023800

08004c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0cc      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c20:	4b68      	ldr	r3, [pc, #416]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d90c      	bls.n	8004c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2e:	4b65      	ldr	r3, [pc, #404]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c36:	4b63      	ldr	r3, [pc, #396]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d001      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e0b8      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d020      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c60:	4b59      	ldr	r3, [pc, #356]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4a58      	ldr	r2, [pc, #352]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c78:	4b53      	ldr	r3, [pc, #332]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4a52      	ldr	r2, [pc, #328]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c84:	4b50      	ldr	r3, [pc, #320]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	494d      	ldr	r1, [pc, #308]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d044      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d107      	bne.n	8004cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004caa:	4b47      	ldr	r3, [pc, #284]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d119      	bne.n	8004cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e07f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d003      	beq.n	8004cca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cca:	4b3f      	ldr	r3, [pc, #252]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d109      	bne.n	8004cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e06f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cda:	4b3b      	ldr	r3, [pc, #236]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e067      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cea:	4b37      	ldr	r3, [pc, #220]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f023 0203 	bic.w	r2, r3, #3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	4934      	ldr	r1, [pc, #208]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cfc:	f7ff fa30 	bl	8004160 <HAL_GetTick>
 8004d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d02:	e00a      	b.n	8004d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d04:	f7ff fa2c 	bl	8004160 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e04f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 020c 	and.w	r2, r3, #12
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d1eb      	bne.n	8004d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d2c:	4b25      	ldr	r3, [pc, #148]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d20c      	bcs.n	8004d54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3a:	4b22      	ldr	r3, [pc, #136]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d42:	4b20      	ldr	r3, [pc, #128]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d001      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e032      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d60:	4b19      	ldr	r3, [pc, #100]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4916      	ldr	r1, [pc, #88]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d7e:	4b12      	ldr	r3, [pc, #72]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	490e      	ldr	r1, [pc, #56]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d92:	f000 f821 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 8004d96:	4602      	mov	r2, r0
 8004d98:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	490a      	ldr	r1, [pc, #40]	@ (8004dcc <HAL_RCC_ClockConfig+0x1c0>)
 8004da4:	5ccb      	ldrb	r3, [r1, r3]
 8004da6:	fa22 f303 	lsr.w	r3, r2, r3
 8004daa:	4a09      	ldr	r2, [pc, #36]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004dae:	4b09      	ldr	r3, [pc, #36]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff f990 	bl	80040d8 <HAL_InitTick>

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40023c00 	.word	0x40023c00
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	08021604 	.word	0x08021604
 8004dd0:	20000070 	.word	0x20000070
 8004dd4:	20000074 	.word	0x20000074

08004dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ddc:	b090      	sub	sp, #64	@ 0x40
 8004dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004df0:	4b59      	ldr	r3, [pc, #356]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 030c 	and.w	r3, r3, #12
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d00d      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x40>
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	f200 80a1 	bhi.w	8004f44 <HAL_RCC_GetSysClockFreq+0x16c>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_RCC_GetSysClockFreq+0x34>
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d003      	beq.n	8004e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e0a:	e09b      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e0c:	4b53      	ldr	r3, [pc, #332]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x184>)
 8004e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e10:	e09b      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e12:	4b53      	ldr	r3, [pc, #332]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e16:	e098      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e18:	4b4f      	ldr	r3, [pc, #316]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e22:	4b4d      	ldr	r3, [pc, #308]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d028      	beq.n	8004e80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	099b      	lsrs	r3, r3, #6
 8004e34:	2200      	movs	r2, #0
 8004e36:	623b      	str	r3, [r7, #32]
 8004e38:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e40:	2100      	movs	r1, #0
 8004e42:	4b47      	ldr	r3, [pc, #284]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e44:	fb03 f201 	mul.w	r2, r3, r1
 8004e48:	2300      	movs	r3, #0
 8004e4a:	fb00 f303 	mul.w	r3, r0, r3
 8004e4e:	4413      	add	r3, r2
 8004e50:	4a43      	ldr	r2, [pc, #268]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e52:	fba0 1202 	umull	r1, r2, r0, r2
 8004e56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e58:	460a      	mov	r2, r1
 8004e5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004e5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e5e:	4413      	add	r3, r2
 8004e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e64:	2200      	movs	r2, #0
 8004e66:	61bb      	str	r3, [r7, #24]
 8004e68:	61fa      	str	r2, [r7, #28]
 8004e6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004e72:	f7fb ff09 	bl	8000c88 <__aeabi_uldivmod>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e7e:	e053      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e80:	4b35      	ldr	r3, [pc, #212]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	099b      	lsrs	r3, r3, #6
 8004e86:	2200      	movs	r2, #0
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	617a      	str	r2, [r7, #20]
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004e92:	f04f 0b00 	mov.w	fp, #0
 8004e96:	4652      	mov	r2, sl
 8004e98:	465b      	mov	r3, fp
 8004e9a:	f04f 0000 	mov.w	r0, #0
 8004e9e:	f04f 0100 	mov.w	r1, #0
 8004ea2:	0159      	lsls	r1, r3, #5
 8004ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ea8:	0150      	lsls	r0, r2, #5
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	ebb2 080a 	subs.w	r8, r2, sl
 8004eb2:	eb63 090b 	sbc.w	r9, r3, fp
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ec2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ec6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004eca:	ebb2 0408 	subs.w	r4, r2, r8
 8004ece:	eb63 0509 	sbc.w	r5, r3, r9
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	f04f 0300 	mov.w	r3, #0
 8004eda:	00eb      	lsls	r3, r5, #3
 8004edc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ee0:	00e2      	lsls	r2, r4, #3
 8004ee2:	4614      	mov	r4, r2
 8004ee4:	461d      	mov	r5, r3
 8004ee6:	eb14 030a 	adds.w	r3, r4, sl
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	eb45 030b 	adc.w	r3, r5, fp
 8004ef0:	607b      	str	r3, [r7, #4]
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	f04f 0300 	mov.w	r3, #0
 8004efa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004efe:	4629      	mov	r1, r5
 8004f00:	028b      	lsls	r3, r1, #10
 8004f02:	4621      	mov	r1, r4
 8004f04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f08:	4621      	mov	r1, r4
 8004f0a:	028a      	lsls	r2, r1, #10
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f12:	2200      	movs	r2, #0
 8004f14:	60bb      	str	r3, [r7, #8]
 8004f16:	60fa      	str	r2, [r7, #12]
 8004f18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f1c:	f7fb feb4 	bl	8000c88 <__aeabi_uldivmod>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4613      	mov	r3, r2
 8004f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f28:	4b0b      	ldr	r3, [pc, #44]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	0c1b      	lsrs	r3, r3, #16
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	3301      	adds	r3, #1
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004f38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f42:	e002      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f44:	4b05      	ldr	r3, [pc, #20]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x184>)
 8004f46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3740      	adds	r7, #64	@ 0x40
 8004f50:	46bd      	mov	sp, r7
 8004f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f56:	bf00      	nop
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	00f42400 	.word	0x00f42400
 8004f60:	017d7840 	.word	0x017d7840

08004f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f68:	4b03      	ldr	r3, [pc, #12]	@ (8004f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	20000070 	.word	0x20000070

08004f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f80:	f7ff fff0 	bl	8004f64 <HAL_RCC_GetHCLKFreq>
 8004f84:	4602      	mov	r2, r0
 8004f86:	4b05      	ldr	r3, [pc, #20]	@ (8004f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	0a9b      	lsrs	r3, r3, #10
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	4903      	ldr	r1, [pc, #12]	@ (8004fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f92:	5ccb      	ldrb	r3, [r1, r3]
 8004f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	08021614 	.word	0x08021614

08004fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fa8:	f7ff ffdc 	bl	8004f64 <HAL_RCC_GetHCLKFreq>
 8004fac:	4602      	mov	r2, r0
 8004fae:	4b05      	ldr	r3, [pc, #20]	@ (8004fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	0b5b      	lsrs	r3, r3, #13
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	4903      	ldr	r1, [pc, #12]	@ (8004fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fba:	5ccb      	ldrb	r3, [r1, r3]
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	08021614 	.word	0x08021614

08004fcc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e038      	b.n	8005054 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f7fe fefc 	bl	8003df4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3308      	adds	r3, #8
 8005004:	4619      	mov	r1, r3
 8005006:	4610      	mov	r0, r2
 8005008:	f000 ff5c 	bl	8005ec4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	461a      	mov	r2, r3
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	f000 ffbe 	bl	8005f98 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6858      	ldr	r0, [r3, #4]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	f000 ffe3 	bl	8005ff4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	6892      	ldr	r2, [r2, #8]
 8005036:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	6892      	ldr	r2, [r2, #8]
 8005042:	f041 0101 	orr.w	r1, r1, #1
 8005046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e041      	b.n	80050f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fe fddc 	bl	8003c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3304      	adds	r3, #4
 8005098:	4619      	mov	r1, r3
 800509a:	4610      	mov	r0, r2
 800509c:	f000 fa7e 	bl	800559c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	d001      	beq.n	8005114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e04e      	b.n	80051b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a23      	ldr	r2, [pc, #140]	@ (80051c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d022      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800513e:	d01d      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1f      	ldr	r2, [pc, #124]	@ (80051c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d018      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1e      	ldr	r2, [pc, #120]	@ (80051c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d013      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a1c      	ldr	r2, [pc, #112]	@ (80051cc <HAL_TIM_Base_Start_IT+0xd0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00e      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1b      	ldr	r2, [pc, #108]	@ (80051d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d009      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a19      	ldr	r2, [pc, #100]	@ (80051d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d004      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a18      	ldr	r2, [pc, #96]	@ (80051d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d111      	bne.n	80051a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b06      	cmp	r3, #6
 800518c:	d010      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0201 	orr.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519e:	e007      	b.n	80051b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40010000 	.word	0x40010000
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40000800 	.word	0x40000800
 80051cc:	40000c00 	.word	0x40000c00
 80051d0:	40010400 	.word	0x40010400
 80051d4:	40014000 	.word	0x40014000
 80051d8:	40001800 	.word	0x40001800

080051dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d020      	beq.n	8005240 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01b      	beq.n	8005240 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0202 	mvn.w	r2, #2
 8005210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f999 	bl	800555e <HAL_TIM_IC_CaptureCallback>
 800522c:	e005      	b.n	800523a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f98b 	bl	800554a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f99c 	bl	8005572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d020      	beq.n	800528c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01b      	beq.n	800528c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0204 	mvn.w	r2, #4
 800525c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2202      	movs	r2, #2
 8005262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f973 	bl	800555e <HAL_TIM_IC_CaptureCallback>
 8005278:	e005      	b.n	8005286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f965 	bl	800554a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f976 	bl	8005572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d020      	beq.n	80052d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01b      	beq.n	80052d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0208 	mvn.w	r2, #8
 80052a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2204      	movs	r2, #4
 80052ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f94d 	bl	800555e <HAL_TIM_IC_CaptureCallback>
 80052c4:	e005      	b.n	80052d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f93f 	bl	800554a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f950 	bl	8005572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d020      	beq.n	8005324 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01b      	beq.n	8005324 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0210 	mvn.w	r2, #16
 80052f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2208      	movs	r2, #8
 80052fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f927 	bl	800555e <HAL_TIM_IC_CaptureCallback>
 8005310:	e005      	b.n	800531e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f919 	bl	800554a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f92a 	bl	8005572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00c      	beq.n	8005348 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d007      	beq.n	8005348 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0201 	mvn.w	r2, #1
 8005340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fe fba0 	bl	8003a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00c      	beq.n	800536c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fade 	bl	8005928 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00c      	beq.n	8005390 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f8fb 	bl	8005586 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00c      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0220 	mvn.w	r2, #32
 80053ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fab0 	bl	8005914 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053b4:	bf00      	nop
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_TIM_ConfigClockSource+0x1c>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e0b4      	b.n	8005542 <HAL_TIM_ConfigClockSource+0x186>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80053f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005410:	d03e      	beq.n	8005490 <HAL_TIM_ConfigClockSource+0xd4>
 8005412:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005416:	f200 8087 	bhi.w	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 800541a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800541e:	f000 8086 	beq.w	800552e <HAL_TIM_ConfigClockSource+0x172>
 8005422:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005426:	d87f      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005428:	2b70      	cmp	r3, #112	@ 0x70
 800542a:	d01a      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0xa6>
 800542c:	2b70      	cmp	r3, #112	@ 0x70
 800542e:	d87b      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005430:	2b60      	cmp	r3, #96	@ 0x60
 8005432:	d050      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x11a>
 8005434:	2b60      	cmp	r3, #96	@ 0x60
 8005436:	d877      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005438:	2b50      	cmp	r3, #80	@ 0x50
 800543a:	d03c      	beq.n	80054b6 <HAL_TIM_ConfigClockSource+0xfa>
 800543c:	2b50      	cmp	r3, #80	@ 0x50
 800543e:	d873      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005440:	2b40      	cmp	r3, #64	@ 0x40
 8005442:	d058      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0x13a>
 8005444:	2b40      	cmp	r3, #64	@ 0x40
 8005446:	d86f      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005448:	2b30      	cmp	r3, #48	@ 0x30
 800544a:	d064      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x15a>
 800544c:	2b30      	cmp	r3, #48	@ 0x30
 800544e:	d86b      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005450:	2b20      	cmp	r3, #32
 8005452:	d060      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x15a>
 8005454:	2b20      	cmp	r3, #32
 8005456:	d867      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005458:	2b00      	cmp	r3, #0
 800545a:	d05c      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x15a>
 800545c:	2b10      	cmp	r3, #16
 800545e:	d05a      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x15a>
 8005460:	e062      	b.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005472:	f000 f9b3 	bl	80057dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	609a      	str	r2, [r3, #8]
      break;
 800548e:	e04f      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054a0:	f000 f99c 	bl	80057dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054b2:	609a      	str	r2, [r3, #8]
      break;
 80054b4:	e03c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c2:	461a      	mov	r2, r3
 80054c4:	f000 f910 	bl	80056e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2150      	movs	r1, #80	@ 0x50
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 f969 	bl	80057a6 <TIM_ITRx_SetConfig>
      break;
 80054d4:	e02c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054e2:	461a      	mov	r2, r3
 80054e4:	f000 f92f 	bl	8005746 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2160      	movs	r1, #96	@ 0x60
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 f959 	bl	80057a6 <TIM_ITRx_SetConfig>
      break;
 80054f4:	e01c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005502:	461a      	mov	r2, r3
 8005504:	f000 f8f0 	bl	80056e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2140      	movs	r1, #64	@ 0x40
 800550e:	4618      	mov	r0, r3
 8005510:	f000 f949 	bl	80057a6 <TIM_ITRx_SetConfig>
      break;
 8005514:	e00c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4619      	mov	r1, r3
 8005520:	4610      	mov	r0, r2
 8005522:	f000 f940 	bl	80057a6 <TIM_ITRx_SetConfig>
      break;
 8005526:	e003      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
      break;
 800552c:	e000      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800552e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005540:	7bfb      	ldrb	r3, [r7, #15]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
	...

0800559c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a43      	ldr	r2, [pc, #268]	@ (80056bc <TIM_Base_SetConfig+0x120>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d013      	beq.n	80055dc <TIM_Base_SetConfig+0x40>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ba:	d00f      	beq.n	80055dc <TIM_Base_SetConfig+0x40>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a40      	ldr	r2, [pc, #256]	@ (80056c0 <TIM_Base_SetConfig+0x124>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00b      	beq.n	80055dc <TIM_Base_SetConfig+0x40>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a3f      	ldr	r2, [pc, #252]	@ (80056c4 <TIM_Base_SetConfig+0x128>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d007      	beq.n	80055dc <TIM_Base_SetConfig+0x40>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a3e      	ldr	r2, [pc, #248]	@ (80056c8 <TIM_Base_SetConfig+0x12c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d003      	beq.n	80055dc <TIM_Base_SetConfig+0x40>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a3d      	ldr	r2, [pc, #244]	@ (80056cc <TIM_Base_SetConfig+0x130>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d108      	bne.n	80055ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a32      	ldr	r2, [pc, #200]	@ (80056bc <TIM_Base_SetConfig+0x120>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d02b      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055fc:	d027      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a2f      	ldr	r2, [pc, #188]	@ (80056c0 <TIM_Base_SetConfig+0x124>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d023      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a2e      	ldr	r2, [pc, #184]	@ (80056c4 <TIM_Base_SetConfig+0x128>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d01f      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a2d      	ldr	r2, [pc, #180]	@ (80056c8 <TIM_Base_SetConfig+0x12c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d01b      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a2c      	ldr	r2, [pc, #176]	@ (80056cc <TIM_Base_SetConfig+0x130>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d017      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a2b      	ldr	r2, [pc, #172]	@ (80056d0 <TIM_Base_SetConfig+0x134>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d013      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a2a      	ldr	r2, [pc, #168]	@ (80056d4 <TIM_Base_SetConfig+0x138>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00f      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a29      	ldr	r2, [pc, #164]	@ (80056d8 <TIM_Base_SetConfig+0x13c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00b      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a28      	ldr	r2, [pc, #160]	@ (80056dc <TIM_Base_SetConfig+0x140>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d007      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a27      	ldr	r2, [pc, #156]	@ (80056e0 <TIM_Base_SetConfig+0x144>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d003      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a26      	ldr	r2, [pc, #152]	@ (80056e4 <TIM_Base_SetConfig+0x148>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d108      	bne.n	8005660 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a0e      	ldr	r2, [pc, #56]	@ (80056bc <TIM_Base_SetConfig+0x120>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d003      	beq.n	800568e <TIM_Base_SetConfig+0xf2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a10      	ldr	r2, [pc, #64]	@ (80056cc <TIM_Base_SetConfig+0x130>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d103      	bne.n	8005696 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f043 0204 	orr.w	r2, r3, #4
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	601a      	str	r2, [r3, #0]
}
 80056ae:	bf00      	nop
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	40010000 	.word	0x40010000
 80056c0:	40000400 	.word	0x40000400
 80056c4:	40000800 	.word	0x40000800
 80056c8:	40000c00 	.word	0x40000c00
 80056cc:	40010400 	.word	0x40010400
 80056d0:	40014000 	.word	0x40014000
 80056d4:	40014400 	.word	0x40014400
 80056d8:	40014800 	.word	0x40014800
 80056dc:	40001800 	.word	0x40001800
 80056e0:	40001c00 	.word	0x40001c00
 80056e4:	40002000 	.word	0x40002000

080056e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f023 0201 	bic.w	r2, r3, #1
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f023 030a 	bic.w	r3, r3, #10
 8005724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	621a      	str	r2, [r3, #32]
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005746:	b480      	push	{r7}
 8005748:	b087      	sub	sp, #28
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f023 0210 	bic.w	r2, r3, #16
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005770:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	031b      	lsls	r3, r3, #12
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005782:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	621a      	str	r2, [r3, #32]
}
 800579a:	bf00      	nop
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b085      	sub	sp, #20
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f043 0307 	orr.w	r3, r3, #7
 80057c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	609a      	str	r2, [r3, #8]
}
 80057d0:	bf00      	nop
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	021a      	lsls	r2, r3, #8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	431a      	orrs	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4313      	orrs	r3, r2
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	609a      	str	r2, [r3, #8]
}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005830:	2302      	movs	r3, #2
 8005832:	e05a      	b.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800585a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a21      	ldr	r2, [pc, #132]	@ (80058f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d022      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005880:	d01d      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a1d      	ldr	r2, [pc, #116]	@ (80058fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d018      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a1b      	ldr	r2, [pc, #108]	@ (8005900 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d013      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a1a      	ldr	r2, [pc, #104]	@ (8005904 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00e      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a18      	ldr	r2, [pc, #96]	@ (8005908 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d009      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a17      	ldr	r2, [pc, #92]	@ (800590c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d004      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a15      	ldr	r2, [pc, #84]	@ (8005910 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d10c      	bne.n	80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40010000 	.word	0x40010000
 80058fc:	40000400 	.word	0x40000400
 8005900:	40000800 	.word	0x40000800
 8005904:	40000c00 	.word	0x40000c00
 8005908:	40010400 	.word	0x40010400
 800590c:	40014000 	.word	0x40014000
 8005910:	40001800 	.word	0x40001800

08005914 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e042      	b.n	80059d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d106      	bne.n	8005968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7fe f9b2 	bl	8003ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2224      	movs	r2, #36	@ 0x24
 800596c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800597e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f82b 	bl	80059dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695a      	ldr	r2, [r3, #20]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059e0:	b0c0      	sub	sp, #256	@ 0x100
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80059f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f8:	68d9      	ldr	r1, [r3, #12]
 80059fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	ea40 0301 	orr.w	r3, r0, r1
 8005a04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a34:	f021 010c 	bic.w	r1, r1, #12
 8005a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a42:	430b      	orrs	r3, r1
 8005a44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a56:	6999      	ldr	r1, [r3, #24]
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	ea40 0301 	orr.w	r3, r0, r1
 8005a62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4b8f      	ldr	r3, [pc, #572]	@ (8005ca8 <UART_SetConfig+0x2cc>)
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d005      	beq.n	8005a7c <UART_SetConfig+0xa0>
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4b8d      	ldr	r3, [pc, #564]	@ (8005cac <UART_SetConfig+0x2d0>)
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d104      	bne.n	8005a86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a7c:	f7ff fa92 	bl	8004fa4 <HAL_RCC_GetPCLK2Freq>
 8005a80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a84:	e003      	b.n	8005a8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a86:	f7ff fa79 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8005a8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a98:	f040 810c 	bne.w	8005cb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005aa6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005aaa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005aae:	4622      	mov	r2, r4
 8005ab0:	462b      	mov	r3, r5
 8005ab2:	1891      	adds	r1, r2, r2
 8005ab4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005ab6:	415b      	adcs	r3, r3
 8005ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005aba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005abe:	4621      	mov	r1, r4
 8005ac0:	eb12 0801 	adds.w	r8, r2, r1
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	eb43 0901 	adc.w	r9, r3, r1
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ade:	4690      	mov	r8, r2
 8005ae0:	4699      	mov	r9, r3
 8005ae2:	4623      	mov	r3, r4
 8005ae4:	eb18 0303 	adds.w	r3, r8, r3
 8005ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005aec:	462b      	mov	r3, r5
 8005aee:	eb49 0303 	adc.w	r3, r9, r3
 8005af2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b02:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	18db      	adds	r3, r3, r3
 8005b0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b10:	4613      	mov	r3, r2
 8005b12:	eb42 0303 	adc.w	r3, r2, r3
 8005b16:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b20:	f7fb f8b2 	bl	8000c88 <__aeabi_uldivmod>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4b61      	ldr	r3, [pc, #388]	@ (8005cb0 <UART_SetConfig+0x2d4>)
 8005b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b2e:	095b      	lsrs	r3, r3, #5
 8005b30:	011c      	lsls	r4, r3, #4
 8005b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b3c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b44:	4642      	mov	r2, r8
 8005b46:	464b      	mov	r3, r9
 8005b48:	1891      	adds	r1, r2, r2
 8005b4a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b4c:	415b      	adcs	r3, r3
 8005b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b54:	4641      	mov	r1, r8
 8005b56:	eb12 0a01 	adds.w	sl, r2, r1
 8005b5a:	4649      	mov	r1, r9
 8005b5c:	eb43 0b01 	adc.w	fp, r3, r1
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	f04f 0300 	mov.w	r3, #0
 8005b68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b74:	4692      	mov	sl, r2
 8005b76:	469b      	mov	fp, r3
 8005b78:	4643      	mov	r3, r8
 8005b7a:	eb1a 0303 	adds.w	r3, sl, r3
 8005b7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b82:	464b      	mov	r3, r9
 8005b84:	eb4b 0303 	adc.w	r3, fp, r3
 8005b88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b98:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	18db      	adds	r3, r3, r3
 8005ba4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	eb42 0303 	adc.w	r3, r2, r3
 8005bac:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005bb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005bb6:	f7fb f867 	bl	8000c88 <__aeabi_uldivmod>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8005cb0 <UART_SetConfig+0x2d4>)
 8005bc2:	fba3 2301 	umull	r2, r3, r3, r1
 8005bc6:	095b      	lsrs	r3, r3, #5
 8005bc8:	2264      	movs	r2, #100	@ 0x64
 8005bca:	fb02 f303 	mul.w	r3, r2, r3
 8005bce:	1acb      	subs	r3, r1, r3
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005bd6:	4b36      	ldr	r3, [pc, #216]	@ (8005cb0 <UART_SetConfig+0x2d4>)
 8005bd8:	fba3 2302 	umull	r2, r3, r3, r2
 8005bdc:	095b      	lsrs	r3, r3, #5
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005be4:	441c      	add	r4, r3
 8005be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bea:	2200      	movs	r2, #0
 8005bec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bf0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005bf4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005bf8:	4642      	mov	r2, r8
 8005bfa:	464b      	mov	r3, r9
 8005bfc:	1891      	adds	r1, r2, r2
 8005bfe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c00:	415b      	adcs	r3, r3
 8005c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c08:	4641      	mov	r1, r8
 8005c0a:	1851      	adds	r1, r2, r1
 8005c0c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c0e:	4649      	mov	r1, r9
 8005c10:	414b      	adcs	r3, r1
 8005c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c20:	4659      	mov	r1, fp
 8005c22:	00cb      	lsls	r3, r1, #3
 8005c24:	4651      	mov	r1, sl
 8005c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c2a:	4651      	mov	r1, sl
 8005c2c:	00ca      	lsls	r2, r1, #3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	4619      	mov	r1, r3
 8005c32:	4603      	mov	r3, r0
 8005c34:	4642      	mov	r2, r8
 8005c36:	189b      	adds	r3, r3, r2
 8005c38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c3c:	464b      	mov	r3, r9
 8005c3e:	460a      	mov	r2, r1
 8005c40:	eb42 0303 	adc.w	r3, r2, r3
 8005c44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	18db      	adds	r3, r3, r3
 8005c60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c62:	4613      	mov	r3, r2
 8005c64:	eb42 0303 	adc.w	r3, r2, r3
 8005c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c72:	f7fb f809 	bl	8000c88 <__aeabi_uldivmod>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005cb0 <UART_SetConfig+0x2d4>)
 8005c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	2164      	movs	r1, #100	@ 0x64
 8005c84:	fb01 f303 	mul.w	r3, r1, r3
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	3332      	adds	r3, #50	@ 0x32
 8005c8e:	4a08      	ldr	r2, [pc, #32]	@ (8005cb0 <UART_SetConfig+0x2d4>)
 8005c90:	fba2 2303 	umull	r2, r3, r2, r3
 8005c94:	095b      	lsrs	r3, r3, #5
 8005c96:	f003 0207 	and.w	r2, r3, #7
 8005c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4422      	add	r2, r4
 8005ca2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ca4:	e106      	b.n	8005eb4 <UART_SetConfig+0x4d8>
 8005ca6:	bf00      	nop
 8005ca8:	40011000 	.word	0x40011000
 8005cac:	40011400 	.word	0x40011400
 8005cb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005cbe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005cc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005cc6:	4642      	mov	r2, r8
 8005cc8:	464b      	mov	r3, r9
 8005cca:	1891      	adds	r1, r2, r2
 8005ccc:	6239      	str	r1, [r7, #32]
 8005cce:	415b      	adcs	r3, r3
 8005cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cd6:	4641      	mov	r1, r8
 8005cd8:	1854      	adds	r4, r2, r1
 8005cda:	4649      	mov	r1, r9
 8005cdc:	eb43 0501 	adc.w	r5, r3, r1
 8005ce0:	f04f 0200 	mov.w	r2, #0
 8005ce4:	f04f 0300 	mov.w	r3, #0
 8005ce8:	00eb      	lsls	r3, r5, #3
 8005cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cee:	00e2      	lsls	r2, r4, #3
 8005cf0:	4614      	mov	r4, r2
 8005cf2:	461d      	mov	r5, r3
 8005cf4:	4643      	mov	r3, r8
 8005cf6:	18e3      	adds	r3, r4, r3
 8005cf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005cfc:	464b      	mov	r3, r9
 8005cfe:	eb45 0303 	adc.w	r3, r5, r3
 8005d02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d16:	f04f 0200 	mov.w	r2, #0
 8005d1a:	f04f 0300 	mov.w	r3, #0
 8005d1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d22:	4629      	mov	r1, r5
 8005d24:	008b      	lsls	r3, r1, #2
 8005d26:	4621      	mov	r1, r4
 8005d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	008a      	lsls	r2, r1, #2
 8005d30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d34:	f7fa ffa8 	bl	8000c88 <__aeabi_uldivmod>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4b60      	ldr	r3, [pc, #384]	@ (8005ec0 <UART_SetConfig+0x4e4>)
 8005d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d42:	095b      	lsrs	r3, r3, #5
 8005d44:	011c      	lsls	r4, r3, #4
 8005d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d58:	4642      	mov	r2, r8
 8005d5a:	464b      	mov	r3, r9
 8005d5c:	1891      	adds	r1, r2, r2
 8005d5e:	61b9      	str	r1, [r7, #24]
 8005d60:	415b      	adcs	r3, r3
 8005d62:	61fb      	str	r3, [r7, #28]
 8005d64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d68:	4641      	mov	r1, r8
 8005d6a:	1851      	adds	r1, r2, r1
 8005d6c:	6139      	str	r1, [r7, #16]
 8005d6e:	4649      	mov	r1, r9
 8005d70:	414b      	adcs	r3, r1
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d80:	4659      	mov	r1, fp
 8005d82:	00cb      	lsls	r3, r1, #3
 8005d84:	4651      	mov	r1, sl
 8005d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d8a:	4651      	mov	r1, sl
 8005d8c:	00ca      	lsls	r2, r1, #3
 8005d8e:	4610      	mov	r0, r2
 8005d90:	4619      	mov	r1, r3
 8005d92:	4603      	mov	r3, r0
 8005d94:	4642      	mov	r2, r8
 8005d96:	189b      	adds	r3, r3, r2
 8005d98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d9c:	464b      	mov	r3, r9
 8005d9e:	460a      	mov	r2, r1
 8005da0:	eb42 0303 	adc.w	r3, r2, r3
 8005da4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005db2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005db4:	f04f 0200 	mov.w	r2, #0
 8005db8:	f04f 0300 	mov.w	r3, #0
 8005dbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005dc0:	4649      	mov	r1, r9
 8005dc2:	008b      	lsls	r3, r1, #2
 8005dc4:	4641      	mov	r1, r8
 8005dc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dca:	4641      	mov	r1, r8
 8005dcc:	008a      	lsls	r2, r1, #2
 8005dce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005dd2:	f7fa ff59 	bl	8000c88 <__aeabi_uldivmod>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4611      	mov	r1, r2
 8005ddc:	4b38      	ldr	r3, [pc, #224]	@ (8005ec0 <UART_SetConfig+0x4e4>)
 8005dde:	fba3 2301 	umull	r2, r3, r3, r1
 8005de2:	095b      	lsrs	r3, r3, #5
 8005de4:	2264      	movs	r2, #100	@ 0x64
 8005de6:	fb02 f303 	mul.w	r3, r2, r3
 8005dea:	1acb      	subs	r3, r1, r3
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	3332      	adds	r3, #50	@ 0x32
 8005df0:	4a33      	ldr	r2, [pc, #204]	@ (8005ec0 <UART_SetConfig+0x4e4>)
 8005df2:	fba2 2303 	umull	r2, r3, r2, r3
 8005df6:	095b      	lsrs	r3, r3, #5
 8005df8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dfc:	441c      	add	r4, r3
 8005dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e02:	2200      	movs	r2, #0
 8005e04:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e06:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	464b      	mov	r3, r9
 8005e10:	1891      	adds	r1, r2, r2
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	415b      	adcs	r3, r3
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e1c:	4641      	mov	r1, r8
 8005e1e:	1851      	adds	r1, r2, r1
 8005e20:	6039      	str	r1, [r7, #0]
 8005e22:	4649      	mov	r1, r9
 8005e24:	414b      	adcs	r3, r1
 8005e26:	607b      	str	r3, [r7, #4]
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e34:	4659      	mov	r1, fp
 8005e36:	00cb      	lsls	r3, r1, #3
 8005e38:	4651      	mov	r1, sl
 8005e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e3e:	4651      	mov	r1, sl
 8005e40:	00ca      	lsls	r2, r1, #3
 8005e42:	4610      	mov	r0, r2
 8005e44:	4619      	mov	r1, r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	4642      	mov	r2, r8
 8005e4a:	189b      	adds	r3, r3, r2
 8005e4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e4e:	464b      	mov	r3, r9
 8005e50:	460a      	mov	r2, r1
 8005e52:	eb42 0303 	adc.w	r3, r2, r3
 8005e56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e62:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e70:	4649      	mov	r1, r9
 8005e72:	008b      	lsls	r3, r1, #2
 8005e74:	4641      	mov	r1, r8
 8005e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e7a:	4641      	mov	r1, r8
 8005e7c:	008a      	lsls	r2, r1, #2
 8005e7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e82:	f7fa ff01 	bl	8000c88 <__aeabi_uldivmod>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ec0 <UART_SetConfig+0x4e4>)
 8005e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e90:	095b      	lsrs	r3, r3, #5
 8005e92:	2164      	movs	r1, #100	@ 0x64
 8005e94:	fb01 f303 	mul.w	r3, r1, r3
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	3332      	adds	r3, #50	@ 0x32
 8005e9e:	4a08      	ldr	r2, [pc, #32]	@ (8005ec0 <UART_SetConfig+0x4e4>)
 8005ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	f003 020f 	and.w	r2, r3, #15
 8005eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4422      	add	r2, r4
 8005eb2:	609a      	str	r2, [r3, #8]
}
 8005eb4:	bf00      	nop
 8005eb6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ec0:	51eb851f 	.word	0x51eb851f

08005ec4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	6812      	ldr	r2, [r2, #0]
 8005edc:	f023 0101 	bic.w	r1, r3, #1
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	2b08      	cmp	r3, #8
 8005eec:	d102      	bne.n	8005ef4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005eee:	2340      	movs	r3, #64	@ 0x40
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	e001      	b.n	8005ef8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005f04:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005f0a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005f10:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005f16:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005f1c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8005f22:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8005f28:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8005f2e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8005f34:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8005f52:	4b10      	ldr	r3, [pc, #64]	@ (8005f94 <FSMC_NORSRAM_Init+0xd0>)
 8005f54:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f5c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8005f64:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	43db      	mvns	r3, r3
 8005f74:	ea02 0103 	and.w	r1, r2, r3
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	4319      	orrs	r1, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	371c      	adds	r7, #28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	0008fb7f 	.word	0x0008fb7f

08005f98 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8005fae:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8005fb6:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8005fbe:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8005fc8:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	3b02      	subs	r3, #2
 8005fd0:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8005fd2:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8005fde:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006008:	d11d      	bne.n	8006046 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006012:	4b13      	ldr	r3, [pc, #76]	@ (8006060 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006014:	4013      	ands	r3, r2
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	6811      	ldr	r1, [r2, #0]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	6852      	ldr	r2, [r2, #4]
 800601e:	0112      	lsls	r2, r2, #4
 8006020:	4311      	orrs	r1, r2
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	6892      	ldr	r2, [r2, #8]
 8006026:	0212      	lsls	r2, r2, #8
 8006028:	4311      	orrs	r1, r2
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	6992      	ldr	r2, [r2, #24]
 800602e:	4311      	orrs	r1, r2
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	68d2      	ldr	r2, [r2, #12]
 8006034:	0412      	lsls	r2, r2, #16
 8006036:	430a      	orrs	r2, r1
 8006038:	ea43 0102 	orr.w	r1, r3, r2
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006044:	e005      	b.n	8006052 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800604e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	cff00000 	.word	0xcff00000

08006064 <__cvt>:
 8006064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006068:	ec57 6b10 	vmov	r6, r7, d0
 800606c:	2f00      	cmp	r7, #0
 800606e:	460c      	mov	r4, r1
 8006070:	4619      	mov	r1, r3
 8006072:	463b      	mov	r3, r7
 8006074:	bfbb      	ittet	lt
 8006076:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800607a:	461f      	movlt	r7, r3
 800607c:	2300      	movge	r3, #0
 800607e:	232d      	movlt	r3, #45	@ 0x2d
 8006080:	700b      	strb	r3, [r1, #0]
 8006082:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006084:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006088:	4691      	mov	r9, r2
 800608a:	f023 0820 	bic.w	r8, r3, #32
 800608e:	bfbc      	itt	lt
 8006090:	4632      	movlt	r2, r6
 8006092:	4616      	movlt	r6, r2
 8006094:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006098:	d005      	beq.n	80060a6 <__cvt+0x42>
 800609a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800609e:	d100      	bne.n	80060a2 <__cvt+0x3e>
 80060a0:	3401      	adds	r4, #1
 80060a2:	2102      	movs	r1, #2
 80060a4:	e000      	b.n	80060a8 <__cvt+0x44>
 80060a6:	2103      	movs	r1, #3
 80060a8:	ab03      	add	r3, sp, #12
 80060aa:	9301      	str	r3, [sp, #4]
 80060ac:	ab02      	add	r3, sp, #8
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	ec47 6b10 	vmov	d0, r6, r7
 80060b4:	4653      	mov	r3, sl
 80060b6:	4622      	mov	r2, r4
 80060b8:	f001 f87e 	bl	80071b8 <_dtoa_r>
 80060bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80060c0:	4605      	mov	r5, r0
 80060c2:	d119      	bne.n	80060f8 <__cvt+0x94>
 80060c4:	f019 0f01 	tst.w	r9, #1
 80060c8:	d00e      	beq.n	80060e8 <__cvt+0x84>
 80060ca:	eb00 0904 	add.w	r9, r0, r4
 80060ce:	2200      	movs	r2, #0
 80060d0:	2300      	movs	r3, #0
 80060d2:	4630      	mov	r0, r6
 80060d4:	4639      	mov	r1, r7
 80060d6:	f7fa fcf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80060da:	b108      	cbz	r0, 80060e0 <__cvt+0x7c>
 80060dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80060e0:	2230      	movs	r2, #48	@ 0x30
 80060e2:	9b03      	ldr	r3, [sp, #12]
 80060e4:	454b      	cmp	r3, r9
 80060e6:	d31e      	bcc.n	8006126 <__cvt+0xc2>
 80060e8:	9b03      	ldr	r3, [sp, #12]
 80060ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060ec:	1b5b      	subs	r3, r3, r5
 80060ee:	4628      	mov	r0, r5
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	b004      	add	sp, #16
 80060f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80060fc:	eb00 0904 	add.w	r9, r0, r4
 8006100:	d1e5      	bne.n	80060ce <__cvt+0x6a>
 8006102:	7803      	ldrb	r3, [r0, #0]
 8006104:	2b30      	cmp	r3, #48	@ 0x30
 8006106:	d10a      	bne.n	800611e <__cvt+0xba>
 8006108:	2200      	movs	r2, #0
 800610a:	2300      	movs	r3, #0
 800610c:	4630      	mov	r0, r6
 800610e:	4639      	mov	r1, r7
 8006110:	f7fa fcda 	bl	8000ac8 <__aeabi_dcmpeq>
 8006114:	b918      	cbnz	r0, 800611e <__cvt+0xba>
 8006116:	f1c4 0401 	rsb	r4, r4, #1
 800611a:	f8ca 4000 	str.w	r4, [sl]
 800611e:	f8da 3000 	ldr.w	r3, [sl]
 8006122:	4499      	add	r9, r3
 8006124:	e7d3      	b.n	80060ce <__cvt+0x6a>
 8006126:	1c59      	adds	r1, r3, #1
 8006128:	9103      	str	r1, [sp, #12]
 800612a:	701a      	strb	r2, [r3, #0]
 800612c:	e7d9      	b.n	80060e2 <__cvt+0x7e>

0800612e <__exponent>:
 800612e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006130:	2900      	cmp	r1, #0
 8006132:	bfba      	itte	lt
 8006134:	4249      	neglt	r1, r1
 8006136:	232d      	movlt	r3, #45	@ 0x2d
 8006138:	232b      	movge	r3, #43	@ 0x2b
 800613a:	2909      	cmp	r1, #9
 800613c:	7002      	strb	r2, [r0, #0]
 800613e:	7043      	strb	r3, [r0, #1]
 8006140:	dd29      	ble.n	8006196 <__exponent+0x68>
 8006142:	f10d 0307 	add.w	r3, sp, #7
 8006146:	461d      	mov	r5, r3
 8006148:	270a      	movs	r7, #10
 800614a:	461a      	mov	r2, r3
 800614c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006150:	fb07 1416 	mls	r4, r7, r6, r1
 8006154:	3430      	adds	r4, #48	@ 0x30
 8006156:	f802 4c01 	strb.w	r4, [r2, #-1]
 800615a:	460c      	mov	r4, r1
 800615c:	2c63      	cmp	r4, #99	@ 0x63
 800615e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006162:	4631      	mov	r1, r6
 8006164:	dcf1      	bgt.n	800614a <__exponent+0x1c>
 8006166:	3130      	adds	r1, #48	@ 0x30
 8006168:	1e94      	subs	r4, r2, #2
 800616a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800616e:	1c41      	adds	r1, r0, #1
 8006170:	4623      	mov	r3, r4
 8006172:	42ab      	cmp	r3, r5
 8006174:	d30a      	bcc.n	800618c <__exponent+0x5e>
 8006176:	f10d 0309 	add.w	r3, sp, #9
 800617a:	1a9b      	subs	r3, r3, r2
 800617c:	42ac      	cmp	r4, r5
 800617e:	bf88      	it	hi
 8006180:	2300      	movhi	r3, #0
 8006182:	3302      	adds	r3, #2
 8006184:	4403      	add	r3, r0
 8006186:	1a18      	subs	r0, r3, r0
 8006188:	b003      	add	sp, #12
 800618a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800618c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006190:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006194:	e7ed      	b.n	8006172 <__exponent+0x44>
 8006196:	2330      	movs	r3, #48	@ 0x30
 8006198:	3130      	adds	r1, #48	@ 0x30
 800619a:	7083      	strb	r3, [r0, #2]
 800619c:	70c1      	strb	r1, [r0, #3]
 800619e:	1d03      	adds	r3, r0, #4
 80061a0:	e7f1      	b.n	8006186 <__exponent+0x58>
	...

080061a4 <_printf_float>:
 80061a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a8:	b08d      	sub	sp, #52	@ 0x34
 80061aa:	460c      	mov	r4, r1
 80061ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80061b0:	4616      	mov	r6, r2
 80061b2:	461f      	mov	r7, r3
 80061b4:	4605      	mov	r5, r0
 80061b6:	f000 fee9 	bl	8006f8c <_localeconv_r>
 80061ba:	6803      	ldr	r3, [r0, #0]
 80061bc:	9304      	str	r3, [sp, #16]
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fa f856 	bl	8000270 <strlen>
 80061c4:	2300      	movs	r3, #0
 80061c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80061c8:	f8d8 3000 	ldr.w	r3, [r8]
 80061cc:	9005      	str	r0, [sp, #20]
 80061ce:	3307      	adds	r3, #7
 80061d0:	f023 0307 	bic.w	r3, r3, #7
 80061d4:	f103 0208 	add.w	r2, r3, #8
 80061d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80061dc:	f8d4 b000 	ldr.w	fp, [r4]
 80061e0:	f8c8 2000 	str.w	r2, [r8]
 80061e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80061ec:	9307      	str	r3, [sp, #28]
 80061ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80061f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80061f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061fa:	4b9c      	ldr	r3, [pc, #624]	@ (800646c <_printf_float+0x2c8>)
 80061fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006200:	f7fa fc94 	bl	8000b2c <__aeabi_dcmpun>
 8006204:	bb70      	cbnz	r0, 8006264 <_printf_float+0xc0>
 8006206:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800620a:	4b98      	ldr	r3, [pc, #608]	@ (800646c <_printf_float+0x2c8>)
 800620c:	f04f 32ff 	mov.w	r2, #4294967295
 8006210:	f7fa fc6e 	bl	8000af0 <__aeabi_dcmple>
 8006214:	bb30      	cbnz	r0, 8006264 <_printf_float+0xc0>
 8006216:	2200      	movs	r2, #0
 8006218:	2300      	movs	r3, #0
 800621a:	4640      	mov	r0, r8
 800621c:	4649      	mov	r1, r9
 800621e:	f7fa fc5d 	bl	8000adc <__aeabi_dcmplt>
 8006222:	b110      	cbz	r0, 800622a <_printf_float+0x86>
 8006224:	232d      	movs	r3, #45	@ 0x2d
 8006226:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800622a:	4a91      	ldr	r2, [pc, #580]	@ (8006470 <_printf_float+0x2cc>)
 800622c:	4b91      	ldr	r3, [pc, #580]	@ (8006474 <_printf_float+0x2d0>)
 800622e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006232:	bf8c      	ite	hi
 8006234:	4690      	movhi	r8, r2
 8006236:	4698      	movls	r8, r3
 8006238:	2303      	movs	r3, #3
 800623a:	6123      	str	r3, [r4, #16]
 800623c:	f02b 0304 	bic.w	r3, fp, #4
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	f04f 0900 	mov.w	r9, #0
 8006246:	9700      	str	r7, [sp, #0]
 8006248:	4633      	mov	r3, r6
 800624a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800624c:	4621      	mov	r1, r4
 800624e:	4628      	mov	r0, r5
 8006250:	f000 f9d2 	bl	80065f8 <_printf_common>
 8006254:	3001      	adds	r0, #1
 8006256:	f040 808d 	bne.w	8006374 <_printf_float+0x1d0>
 800625a:	f04f 30ff 	mov.w	r0, #4294967295
 800625e:	b00d      	add	sp, #52	@ 0x34
 8006260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006264:	4642      	mov	r2, r8
 8006266:	464b      	mov	r3, r9
 8006268:	4640      	mov	r0, r8
 800626a:	4649      	mov	r1, r9
 800626c:	f7fa fc5e 	bl	8000b2c <__aeabi_dcmpun>
 8006270:	b140      	cbz	r0, 8006284 <_printf_float+0xe0>
 8006272:	464b      	mov	r3, r9
 8006274:	2b00      	cmp	r3, #0
 8006276:	bfbc      	itt	lt
 8006278:	232d      	movlt	r3, #45	@ 0x2d
 800627a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800627e:	4a7e      	ldr	r2, [pc, #504]	@ (8006478 <_printf_float+0x2d4>)
 8006280:	4b7e      	ldr	r3, [pc, #504]	@ (800647c <_printf_float+0x2d8>)
 8006282:	e7d4      	b.n	800622e <_printf_float+0x8a>
 8006284:	6863      	ldr	r3, [r4, #4]
 8006286:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800628a:	9206      	str	r2, [sp, #24]
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	d13b      	bne.n	8006308 <_printf_float+0x164>
 8006290:	2306      	movs	r3, #6
 8006292:	6063      	str	r3, [r4, #4]
 8006294:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006298:	2300      	movs	r3, #0
 800629a:	6022      	str	r2, [r4, #0]
 800629c:	9303      	str	r3, [sp, #12]
 800629e:	ab0a      	add	r3, sp, #40	@ 0x28
 80062a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80062a4:	ab09      	add	r3, sp, #36	@ 0x24
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	6861      	ldr	r1, [r4, #4]
 80062aa:	ec49 8b10 	vmov	d0, r8, r9
 80062ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80062b2:	4628      	mov	r0, r5
 80062b4:	f7ff fed6 	bl	8006064 <__cvt>
 80062b8:	9b06      	ldr	r3, [sp, #24]
 80062ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80062bc:	2b47      	cmp	r3, #71	@ 0x47
 80062be:	4680      	mov	r8, r0
 80062c0:	d129      	bne.n	8006316 <_printf_float+0x172>
 80062c2:	1cc8      	adds	r0, r1, #3
 80062c4:	db02      	blt.n	80062cc <_printf_float+0x128>
 80062c6:	6863      	ldr	r3, [r4, #4]
 80062c8:	4299      	cmp	r1, r3
 80062ca:	dd41      	ble.n	8006350 <_printf_float+0x1ac>
 80062cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80062d0:	fa5f fa8a 	uxtb.w	sl, sl
 80062d4:	3901      	subs	r1, #1
 80062d6:	4652      	mov	r2, sl
 80062d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80062dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80062de:	f7ff ff26 	bl	800612e <__exponent>
 80062e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062e4:	1813      	adds	r3, r2, r0
 80062e6:	2a01      	cmp	r2, #1
 80062e8:	4681      	mov	r9, r0
 80062ea:	6123      	str	r3, [r4, #16]
 80062ec:	dc02      	bgt.n	80062f4 <_printf_float+0x150>
 80062ee:	6822      	ldr	r2, [r4, #0]
 80062f0:	07d2      	lsls	r2, r2, #31
 80062f2:	d501      	bpl.n	80062f8 <_printf_float+0x154>
 80062f4:	3301      	adds	r3, #1
 80062f6:	6123      	str	r3, [r4, #16]
 80062f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0a2      	beq.n	8006246 <_printf_float+0xa2>
 8006300:	232d      	movs	r3, #45	@ 0x2d
 8006302:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006306:	e79e      	b.n	8006246 <_printf_float+0xa2>
 8006308:	9a06      	ldr	r2, [sp, #24]
 800630a:	2a47      	cmp	r2, #71	@ 0x47
 800630c:	d1c2      	bne.n	8006294 <_printf_float+0xf0>
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1c0      	bne.n	8006294 <_printf_float+0xf0>
 8006312:	2301      	movs	r3, #1
 8006314:	e7bd      	b.n	8006292 <_printf_float+0xee>
 8006316:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800631a:	d9db      	bls.n	80062d4 <_printf_float+0x130>
 800631c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006320:	d118      	bne.n	8006354 <_printf_float+0x1b0>
 8006322:	2900      	cmp	r1, #0
 8006324:	6863      	ldr	r3, [r4, #4]
 8006326:	dd0b      	ble.n	8006340 <_printf_float+0x19c>
 8006328:	6121      	str	r1, [r4, #16]
 800632a:	b913      	cbnz	r3, 8006332 <_printf_float+0x18e>
 800632c:	6822      	ldr	r2, [r4, #0]
 800632e:	07d0      	lsls	r0, r2, #31
 8006330:	d502      	bpl.n	8006338 <_printf_float+0x194>
 8006332:	3301      	adds	r3, #1
 8006334:	440b      	add	r3, r1
 8006336:	6123      	str	r3, [r4, #16]
 8006338:	65a1      	str	r1, [r4, #88]	@ 0x58
 800633a:	f04f 0900 	mov.w	r9, #0
 800633e:	e7db      	b.n	80062f8 <_printf_float+0x154>
 8006340:	b913      	cbnz	r3, 8006348 <_printf_float+0x1a4>
 8006342:	6822      	ldr	r2, [r4, #0]
 8006344:	07d2      	lsls	r2, r2, #31
 8006346:	d501      	bpl.n	800634c <_printf_float+0x1a8>
 8006348:	3302      	adds	r3, #2
 800634a:	e7f4      	b.n	8006336 <_printf_float+0x192>
 800634c:	2301      	movs	r3, #1
 800634e:	e7f2      	b.n	8006336 <_printf_float+0x192>
 8006350:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006356:	4299      	cmp	r1, r3
 8006358:	db05      	blt.n	8006366 <_printf_float+0x1c2>
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	6121      	str	r1, [r4, #16]
 800635e:	07d8      	lsls	r0, r3, #31
 8006360:	d5ea      	bpl.n	8006338 <_printf_float+0x194>
 8006362:	1c4b      	adds	r3, r1, #1
 8006364:	e7e7      	b.n	8006336 <_printf_float+0x192>
 8006366:	2900      	cmp	r1, #0
 8006368:	bfd4      	ite	le
 800636a:	f1c1 0202 	rsble	r2, r1, #2
 800636e:	2201      	movgt	r2, #1
 8006370:	4413      	add	r3, r2
 8006372:	e7e0      	b.n	8006336 <_printf_float+0x192>
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	055a      	lsls	r2, r3, #21
 8006378:	d407      	bmi.n	800638a <_printf_float+0x1e6>
 800637a:	6923      	ldr	r3, [r4, #16]
 800637c:	4642      	mov	r2, r8
 800637e:	4631      	mov	r1, r6
 8006380:	4628      	mov	r0, r5
 8006382:	47b8      	blx	r7
 8006384:	3001      	adds	r0, #1
 8006386:	d12b      	bne.n	80063e0 <_printf_float+0x23c>
 8006388:	e767      	b.n	800625a <_printf_float+0xb6>
 800638a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800638e:	f240 80dd 	bls.w	800654c <_printf_float+0x3a8>
 8006392:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006396:	2200      	movs	r2, #0
 8006398:	2300      	movs	r3, #0
 800639a:	f7fa fb95 	bl	8000ac8 <__aeabi_dcmpeq>
 800639e:	2800      	cmp	r0, #0
 80063a0:	d033      	beq.n	800640a <_printf_float+0x266>
 80063a2:	4a37      	ldr	r2, [pc, #220]	@ (8006480 <_printf_float+0x2dc>)
 80063a4:	2301      	movs	r3, #1
 80063a6:	4631      	mov	r1, r6
 80063a8:	4628      	mov	r0, r5
 80063aa:	47b8      	blx	r7
 80063ac:	3001      	adds	r0, #1
 80063ae:	f43f af54 	beq.w	800625a <_printf_float+0xb6>
 80063b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80063b6:	4543      	cmp	r3, r8
 80063b8:	db02      	blt.n	80063c0 <_printf_float+0x21c>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	07d8      	lsls	r0, r3, #31
 80063be:	d50f      	bpl.n	80063e0 <_printf_float+0x23c>
 80063c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063c4:	4631      	mov	r1, r6
 80063c6:	4628      	mov	r0, r5
 80063c8:	47b8      	blx	r7
 80063ca:	3001      	adds	r0, #1
 80063cc:	f43f af45 	beq.w	800625a <_printf_float+0xb6>
 80063d0:	f04f 0900 	mov.w	r9, #0
 80063d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80063d8:	f104 0a1a 	add.w	sl, r4, #26
 80063dc:	45c8      	cmp	r8, r9
 80063de:	dc09      	bgt.n	80063f4 <_printf_float+0x250>
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	079b      	lsls	r3, r3, #30
 80063e4:	f100 8103 	bmi.w	80065ee <_printf_float+0x44a>
 80063e8:	68e0      	ldr	r0, [r4, #12]
 80063ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063ec:	4298      	cmp	r0, r3
 80063ee:	bfb8      	it	lt
 80063f0:	4618      	movlt	r0, r3
 80063f2:	e734      	b.n	800625e <_printf_float+0xba>
 80063f4:	2301      	movs	r3, #1
 80063f6:	4652      	mov	r2, sl
 80063f8:	4631      	mov	r1, r6
 80063fa:	4628      	mov	r0, r5
 80063fc:	47b8      	blx	r7
 80063fe:	3001      	adds	r0, #1
 8006400:	f43f af2b 	beq.w	800625a <_printf_float+0xb6>
 8006404:	f109 0901 	add.w	r9, r9, #1
 8006408:	e7e8      	b.n	80063dc <_printf_float+0x238>
 800640a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800640c:	2b00      	cmp	r3, #0
 800640e:	dc39      	bgt.n	8006484 <_printf_float+0x2e0>
 8006410:	4a1b      	ldr	r2, [pc, #108]	@ (8006480 <_printf_float+0x2dc>)
 8006412:	2301      	movs	r3, #1
 8006414:	4631      	mov	r1, r6
 8006416:	4628      	mov	r0, r5
 8006418:	47b8      	blx	r7
 800641a:	3001      	adds	r0, #1
 800641c:	f43f af1d 	beq.w	800625a <_printf_float+0xb6>
 8006420:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006424:	ea59 0303 	orrs.w	r3, r9, r3
 8006428:	d102      	bne.n	8006430 <_printf_float+0x28c>
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	07d9      	lsls	r1, r3, #31
 800642e:	d5d7      	bpl.n	80063e0 <_printf_float+0x23c>
 8006430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006434:	4631      	mov	r1, r6
 8006436:	4628      	mov	r0, r5
 8006438:	47b8      	blx	r7
 800643a:	3001      	adds	r0, #1
 800643c:	f43f af0d 	beq.w	800625a <_printf_float+0xb6>
 8006440:	f04f 0a00 	mov.w	sl, #0
 8006444:	f104 0b1a 	add.w	fp, r4, #26
 8006448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800644a:	425b      	negs	r3, r3
 800644c:	4553      	cmp	r3, sl
 800644e:	dc01      	bgt.n	8006454 <_printf_float+0x2b0>
 8006450:	464b      	mov	r3, r9
 8006452:	e793      	b.n	800637c <_printf_float+0x1d8>
 8006454:	2301      	movs	r3, #1
 8006456:	465a      	mov	r2, fp
 8006458:	4631      	mov	r1, r6
 800645a:	4628      	mov	r0, r5
 800645c:	47b8      	blx	r7
 800645e:	3001      	adds	r0, #1
 8006460:	f43f aefb 	beq.w	800625a <_printf_float+0xb6>
 8006464:	f10a 0a01 	add.w	sl, sl, #1
 8006468:	e7ee      	b.n	8006448 <_printf_float+0x2a4>
 800646a:	bf00      	nop
 800646c:	7fefffff 	.word	0x7fefffff
 8006470:	08021620 	.word	0x08021620
 8006474:	0802161c 	.word	0x0802161c
 8006478:	08021628 	.word	0x08021628
 800647c:	08021624 	.word	0x08021624
 8006480:	0802162c 	.word	0x0802162c
 8006484:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006486:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800648a:	4553      	cmp	r3, sl
 800648c:	bfa8      	it	ge
 800648e:	4653      	movge	r3, sl
 8006490:	2b00      	cmp	r3, #0
 8006492:	4699      	mov	r9, r3
 8006494:	dc36      	bgt.n	8006504 <_printf_float+0x360>
 8006496:	f04f 0b00 	mov.w	fp, #0
 800649a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800649e:	f104 021a 	add.w	r2, r4, #26
 80064a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80064a4:	9306      	str	r3, [sp, #24]
 80064a6:	eba3 0309 	sub.w	r3, r3, r9
 80064aa:	455b      	cmp	r3, fp
 80064ac:	dc31      	bgt.n	8006512 <_printf_float+0x36e>
 80064ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064b0:	459a      	cmp	sl, r3
 80064b2:	dc3a      	bgt.n	800652a <_printf_float+0x386>
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	07da      	lsls	r2, r3, #31
 80064b8:	d437      	bmi.n	800652a <_printf_float+0x386>
 80064ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064bc:	ebaa 0903 	sub.w	r9, sl, r3
 80064c0:	9b06      	ldr	r3, [sp, #24]
 80064c2:	ebaa 0303 	sub.w	r3, sl, r3
 80064c6:	4599      	cmp	r9, r3
 80064c8:	bfa8      	it	ge
 80064ca:	4699      	movge	r9, r3
 80064cc:	f1b9 0f00 	cmp.w	r9, #0
 80064d0:	dc33      	bgt.n	800653a <_printf_float+0x396>
 80064d2:	f04f 0800 	mov.w	r8, #0
 80064d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064da:	f104 0b1a 	add.w	fp, r4, #26
 80064de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064e0:	ebaa 0303 	sub.w	r3, sl, r3
 80064e4:	eba3 0309 	sub.w	r3, r3, r9
 80064e8:	4543      	cmp	r3, r8
 80064ea:	f77f af79 	ble.w	80063e0 <_printf_float+0x23c>
 80064ee:	2301      	movs	r3, #1
 80064f0:	465a      	mov	r2, fp
 80064f2:	4631      	mov	r1, r6
 80064f4:	4628      	mov	r0, r5
 80064f6:	47b8      	blx	r7
 80064f8:	3001      	adds	r0, #1
 80064fa:	f43f aeae 	beq.w	800625a <_printf_float+0xb6>
 80064fe:	f108 0801 	add.w	r8, r8, #1
 8006502:	e7ec      	b.n	80064de <_printf_float+0x33a>
 8006504:	4642      	mov	r2, r8
 8006506:	4631      	mov	r1, r6
 8006508:	4628      	mov	r0, r5
 800650a:	47b8      	blx	r7
 800650c:	3001      	adds	r0, #1
 800650e:	d1c2      	bne.n	8006496 <_printf_float+0x2f2>
 8006510:	e6a3      	b.n	800625a <_printf_float+0xb6>
 8006512:	2301      	movs	r3, #1
 8006514:	4631      	mov	r1, r6
 8006516:	4628      	mov	r0, r5
 8006518:	9206      	str	r2, [sp, #24]
 800651a:	47b8      	blx	r7
 800651c:	3001      	adds	r0, #1
 800651e:	f43f ae9c 	beq.w	800625a <_printf_float+0xb6>
 8006522:	9a06      	ldr	r2, [sp, #24]
 8006524:	f10b 0b01 	add.w	fp, fp, #1
 8006528:	e7bb      	b.n	80064a2 <_printf_float+0x2fe>
 800652a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800652e:	4631      	mov	r1, r6
 8006530:	4628      	mov	r0, r5
 8006532:	47b8      	blx	r7
 8006534:	3001      	adds	r0, #1
 8006536:	d1c0      	bne.n	80064ba <_printf_float+0x316>
 8006538:	e68f      	b.n	800625a <_printf_float+0xb6>
 800653a:	9a06      	ldr	r2, [sp, #24]
 800653c:	464b      	mov	r3, r9
 800653e:	4442      	add	r2, r8
 8006540:	4631      	mov	r1, r6
 8006542:	4628      	mov	r0, r5
 8006544:	47b8      	blx	r7
 8006546:	3001      	adds	r0, #1
 8006548:	d1c3      	bne.n	80064d2 <_printf_float+0x32e>
 800654a:	e686      	b.n	800625a <_printf_float+0xb6>
 800654c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006550:	f1ba 0f01 	cmp.w	sl, #1
 8006554:	dc01      	bgt.n	800655a <_printf_float+0x3b6>
 8006556:	07db      	lsls	r3, r3, #31
 8006558:	d536      	bpl.n	80065c8 <_printf_float+0x424>
 800655a:	2301      	movs	r3, #1
 800655c:	4642      	mov	r2, r8
 800655e:	4631      	mov	r1, r6
 8006560:	4628      	mov	r0, r5
 8006562:	47b8      	blx	r7
 8006564:	3001      	adds	r0, #1
 8006566:	f43f ae78 	beq.w	800625a <_printf_float+0xb6>
 800656a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800656e:	4631      	mov	r1, r6
 8006570:	4628      	mov	r0, r5
 8006572:	47b8      	blx	r7
 8006574:	3001      	adds	r0, #1
 8006576:	f43f ae70 	beq.w	800625a <_printf_float+0xb6>
 800657a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800657e:	2200      	movs	r2, #0
 8006580:	2300      	movs	r3, #0
 8006582:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006586:	f7fa fa9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800658a:	b9c0      	cbnz	r0, 80065be <_printf_float+0x41a>
 800658c:	4653      	mov	r3, sl
 800658e:	f108 0201 	add.w	r2, r8, #1
 8006592:	4631      	mov	r1, r6
 8006594:	4628      	mov	r0, r5
 8006596:	47b8      	blx	r7
 8006598:	3001      	adds	r0, #1
 800659a:	d10c      	bne.n	80065b6 <_printf_float+0x412>
 800659c:	e65d      	b.n	800625a <_printf_float+0xb6>
 800659e:	2301      	movs	r3, #1
 80065a0:	465a      	mov	r2, fp
 80065a2:	4631      	mov	r1, r6
 80065a4:	4628      	mov	r0, r5
 80065a6:	47b8      	blx	r7
 80065a8:	3001      	adds	r0, #1
 80065aa:	f43f ae56 	beq.w	800625a <_printf_float+0xb6>
 80065ae:	f108 0801 	add.w	r8, r8, #1
 80065b2:	45d0      	cmp	r8, sl
 80065b4:	dbf3      	blt.n	800659e <_printf_float+0x3fa>
 80065b6:	464b      	mov	r3, r9
 80065b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80065bc:	e6df      	b.n	800637e <_printf_float+0x1da>
 80065be:	f04f 0800 	mov.w	r8, #0
 80065c2:	f104 0b1a 	add.w	fp, r4, #26
 80065c6:	e7f4      	b.n	80065b2 <_printf_float+0x40e>
 80065c8:	2301      	movs	r3, #1
 80065ca:	4642      	mov	r2, r8
 80065cc:	e7e1      	b.n	8006592 <_printf_float+0x3ee>
 80065ce:	2301      	movs	r3, #1
 80065d0:	464a      	mov	r2, r9
 80065d2:	4631      	mov	r1, r6
 80065d4:	4628      	mov	r0, r5
 80065d6:	47b8      	blx	r7
 80065d8:	3001      	adds	r0, #1
 80065da:	f43f ae3e 	beq.w	800625a <_printf_float+0xb6>
 80065de:	f108 0801 	add.w	r8, r8, #1
 80065e2:	68e3      	ldr	r3, [r4, #12]
 80065e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065e6:	1a5b      	subs	r3, r3, r1
 80065e8:	4543      	cmp	r3, r8
 80065ea:	dcf0      	bgt.n	80065ce <_printf_float+0x42a>
 80065ec:	e6fc      	b.n	80063e8 <_printf_float+0x244>
 80065ee:	f04f 0800 	mov.w	r8, #0
 80065f2:	f104 0919 	add.w	r9, r4, #25
 80065f6:	e7f4      	b.n	80065e2 <_printf_float+0x43e>

080065f8 <_printf_common>:
 80065f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065fc:	4616      	mov	r6, r2
 80065fe:	4698      	mov	r8, r3
 8006600:	688a      	ldr	r2, [r1, #8]
 8006602:	690b      	ldr	r3, [r1, #16]
 8006604:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006608:	4293      	cmp	r3, r2
 800660a:	bfb8      	it	lt
 800660c:	4613      	movlt	r3, r2
 800660e:	6033      	str	r3, [r6, #0]
 8006610:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006614:	4607      	mov	r7, r0
 8006616:	460c      	mov	r4, r1
 8006618:	b10a      	cbz	r2, 800661e <_printf_common+0x26>
 800661a:	3301      	adds	r3, #1
 800661c:	6033      	str	r3, [r6, #0]
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	0699      	lsls	r1, r3, #26
 8006622:	bf42      	ittt	mi
 8006624:	6833      	ldrmi	r3, [r6, #0]
 8006626:	3302      	addmi	r3, #2
 8006628:	6033      	strmi	r3, [r6, #0]
 800662a:	6825      	ldr	r5, [r4, #0]
 800662c:	f015 0506 	ands.w	r5, r5, #6
 8006630:	d106      	bne.n	8006640 <_printf_common+0x48>
 8006632:	f104 0a19 	add.w	sl, r4, #25
 8006636:	68e3      	ldr	r3, [r4, #12]
 8006638:	6832      	ldr	r2, [r6, #0]
 800663a:	1a9b      	subs	r3, r3, r2
 800663c:	42ab      	cmp	r3, r5
 800663e:	dc26      	bgt.n	800668e <_printf_common+0x96>
 8006640:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006644:	6822      	ldr	r2, [r4, #0]
 8006646:	3b00      	subs	r3, #0
 8006648:	bf18      	it	ne
 800664a:	2301      	movne	r3, #1
 800664c:	0692      	lsls	r2, r2, #26
 800664e:	d42b      	bmi.n	80066a8 <_printf_common+0xb0>
 8006650:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006654:	4641      	mov	r1, r8
 8006656:	4638      	mov	r0, r7
 8006658:	47c8      	blx	r9
 800665a:	3001      	adds	r0, #1
 800665c:	d01e      	beq.n	800669c <_printf_common+0xa4>
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	6922      	ldr	r2, [r4, #16]
 8006662:	f003 0306 	and.w	r3, r3, #6
 8006666:	2b04      	cmp	r3, #4
 8006668:	bf02      	ittt	eq
 800666a:	68e5      	ldreq	r5, [r4, #12]
 800666c:	6833      	ldreq	r3, [r6, #0]
 800666e:	1aed      	subeq	r5, r5, r3
 8006670:	68a3      	ldr	r3, [r4, #8]
 8006672:	bf0c      	ite	eq
 8006674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006678:	2500      	movne	r5, #0
 800667a:	4293      	cmp	r3, r2
 800667c:	bfc4      	itt	gt
 800667e:	1a9b      	subgt	r3, r3, r2
 8006680:	18ed      	addgt	r5, r5, r3
 8006682:	2600      	movs	r6, #0
 8006684:	341a      	adds	r4, #26
 8006686:	42b5      	cmp	r5, r6
 8006688:	d11a      	bne.n	80066c0 <_printf_common+0xc8>
 800668a:	2000      	movs	r0, #0
 800668c:	e008      	b.n	80066a0 <_printf_common+0xa8>
 800668e:	2301      	movs	r3, #1
 8006690:	4652      	mov	r2, sl
 8006692:	4641      	mov	r1, r8
 8006694:	4638      	mov	r0, r7
 8006696:	47c8      	blx	r9
 8006698:	3001      	adds	r0, #1
 800669a:	d103      	bne.n	80066a4 <_printf_common+0xac>
 800669c:	f04f 30ff 	mov.w	r0, #4294967295
 80066a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066a4:	3501      	adds	r5, #1
 80066a6:	e7c6      	b.n	8006636 <_printf_common+0x3e>
 80066a8:	18e1      	adds	r1, r4, r3
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	2030      	movs	r0, #48	@ 0x30
 80066ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066b2:	4422      	add	r2, r4
 80066b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066bc:	3302      	adds	r3, #2
 80066be:	e7c7      	b.n	8006650 <_printf_common+0x58>
 80066c0:	2301      	movs	r3, #1
 80066c2:	4622      	mov	r2, r4
 80066c4:	4641      	mov	r1, r8
 80066c6:	4638      	mov	r0, r7
 80066c8:	47c8      	blx	r9
 80066ca:	3001      	adds	r0, #1
 80066cc:	d0e6      	beq.n	800669c <_printf_common+0xa4>
 80066ce:	3601      	adds	r6, #1
 80066d0:	e7d9      	b.n	8006686 <_printf_common+0x8e>
	...

080066d4 <_printf_i>:
 80066d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066d8:	7e0f      	ldrb	r7, [r1, #24]
 80066da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066dc:	2f78      	cmp	r7, #120	@ 0x78
 80066de:	4691      	mov	r9, r2
 80066e0:	4680      	mov	r8, r0
 80066e2:	460c      	mov	r4, r1
 80066e4:	469a      	mov	sl, r3
 80066e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066ea:	d807      	bhi.n	80066fc <_printf_i+0x28>
 80066ec:	2f62      	cmp	r7, #98	@ 0x62
 80066ee:	d80a      	bhi.n	8006706 <_printf_i+0x32>
 80066f0:	2f00      	cmp	r7, #0
 80066f2:	f000 80d1 	beq.w	8006898 <_printf_i+0x1c4>
 80066f6:	2f58      	cmp	r7, #88	@ 0x58
 80066f8:	f000 80b8 	beq.w	800686c <_printf_i+0x198>
 80066fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006700:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006704:	e03a      	b.n	800677c <_printf_i+0xa8>
 8006706:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800670a:	2b15      	cmp	r3, #21
 800670c:	d8f6      	bhi.n	80066fc <_printf_i+0x28>
 800670e:	a101      	add	r1, pc, #4	@ (adr r1, 8006714 <_printf_i+0x40>)
 8006710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006714:	0800676d 	.word	0x0800676d
 8006718:	08006781 	.word	0x08006781
 800671c:	080066fd 	.word	0x080066fd
 8006720:	080066fd 	.word	0x080066fd
 8006724:	080066fd 	.word	0x080066fd
 8006728:	080066fd 	.word	0x080066fd
 800672c:	08006781 	.word	0x08006781
 8006730:	080066fd 	.word	0x080066fd
 8006734:	080066fd 	.word	0x080066fd
 8006738:	080066fd 	.word	0x080066fd
 800673c:	080066fd 	.word	0x080066fd
 8006740:	0800687f 	.word	0x0800687f
 8006744:	080067ab 	.word	0x080067ab
 8006748:	08006839 	.word	0x08006839
 800674c:	080066fd 	.word	0x080066fd
 8006750:	080066fd 	.word	0x080066fd
 8006754:	080068a1 	.word	0x080068a1
 8006758:	080066fd 	.word	0x080066fd
 800675c:	080067ab 	.word	0x080067ab
 8006760:	080066fd 	.word	0x080066fd
 8006764:	080066fd 	.word	0x080066fd
 8006768:	08006841 	.word	0x08006841
 800676c:	6833      	ldr	r3, [r6, #0]
 800676e:	1d1a      	adds	r2, r3, #4
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6032      	str	r2, [r6, #0]
 8006774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006778:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800677c:	2301      	movs	r3, #1
 800677e:	e09c      	b.n	80068ba <_printf_i+0x1e6>
 8006780:	6833      	ldr	r3, [r6, #0]
 8006782:	6820      	ldr	r0, [r4, #0]
 8006784:	1d19      	adds	r1, r3, #4
 8006786:	6031      	str	r1, [r6, #0]
 8006788:	0606      	lsls	r6, r0, #24
 800678a:	d501      	bpl.n	8006790 <_printf_i+0xbc>
 800678c:	681d      	ldr	r5, [r3, #0]
 800678e:	e003      	b.n	8006798 <_printf_i+0xc4>
 8006790:	0645      	lsls	r5, r0, #25
 8006792:	d5fb      	bpl.n	800678c <_printf_i+0xb8>
 8006794:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006798:	2d00      	cmp	r5, #0
 800679a:	da03      	bge.n	80067a4 <_printf_i+0xd0>
 800679c:	232d      	movs	r3, #45	@ 0x2d
 800679e:	426d      	negs	r5, r5
 80067a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067a4:	4858      	ldr	r0, [pc, #352]	@ (8006908 <_printf_i+0x234>)
 80067a6:	230a      	movs	r3, #10
 80067a8:	e011      	b.n	80067ce <_printf_i+0xfa>
 80067aa:	6821      	ldr	r1, [r4, #0]
 80067ac:	6833      	ldr	r3, [r6, #0]
 80067ae:	0608      	lsls	r0, r1, #24
 80067b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80067b4:	d402      	bmi.n	80067bc <_printf_i+0xe8>
 80067b6:	0649      	lsls	r1, r1, #25
 80067b8:	bf48      	it	mi
 80067ba:	b2ad      	uxthmi	r5, r5
 80067bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80067be:	4852      	ldr	r0, [pc, #328]	@ (8006908 <_printf_i+0x234>)
 80067c0:	6033      	str	r3, [r6, #0]
 80067c2:	bf14      	ite	ne
 80067c4:	230a      	movne	r3, #10
 80067c6:	2308      	moveq	r3, #8
 80067c8:	2100      	movs	r1, #0
 80067ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067ce:	6866      	ldr	r6, [r4, #4]
 80067d0:	60a6      	str	r6, [r4, #8]
 80067d2:	2e00      	cmp	r6, #0
 80067d4:	db05      	blt.n	80067e2 <_printf_i+0x10e>
 80067d6:	6821      	ldr	r1, [r4, #0]
 80067d8:	432e      	orrs	r6, r5
 80067da:	f021 0104 	bic.w	r1, r1, #4
 80067de:	6021      	str	r1, [r4, #0]
 80067e0:	d04b      	beq.n	800687a <_printf_i+0x1a6>
 80067e2:	4616      	mov	r6, r2
 80067e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80067e8:	fb03 5711 	mls	r7, r3, r1, r5
 80067ec:	5dc7      	ldrb	r7, [r0, r7]
 80067ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067f2:	462f      	mov	r7, r5
 80067f4:	42bb      	cmp	r3, r7
 80067f6:	460d      	mov	r5, r1
 80067f8:	d9f4      	bls.n	80067e4 <_printf_i+0x110>
 80067fa:	2b08      	cmp	r3, #8
 80067fc:	d10b      	bne.n	8006816 <_printf_i+0x142>
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	07df      	lsls	r7, r3, #31
 8006802:	d508      	bpl.n	8006816 <_printf_i+0x142>
 8006804:	6923      	ldr	r3, [r4, #16]
 8006806:	6861      	ldr	r1, [r4, #4]
 8006808:	4299      	cmp	r1, r3
 800680a:	bfde      	ittt	le
 800680c:	2330      	movle	r3, #48	@ 0x30
 800680e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006812:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006816:	1b92      	subs	r2, r2, r6
 8006818:	6122      	str	r2, [r4, #16]
 800681a:	f8cd a000 	str.w	sl, [sp]
 800681e:	464b      	mov	r3, r9
 8006820:	aa03      	add	r2, sp, #12
 8006822:	4621      	mov	r1, r4
 8006824:	4640      	mov	r0, r8
 8006826:	f7ff fee7 	bl	80065f8 <_printf_common>
 800682a:	3001      	adds	r0, #1
 800682c:	d14a      	bne.n	80068c4 <_printf_i+0x1f0>
 800682e:	f04f 30ff 	mov.w	r0, #4294967295
 8006832:	b004      	add	sp, #16
 8006834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	f043 0320 	orr.w	r3, r3, #32
 800683e:	6023      	str	r3, [r4, #0]
 8006840:	4832      	ldr	r0, [pc, #200]	@ (800690c <_printf_i+0x238>)
 8006842:	2778      	movs	r7, #120	@ 0x78
 8006844:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	6831      	ldr	r1, [r6, #0]
 800684c:	061f      	lsls	r7, r3, #24
 800684e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006852:	d402      	bmi.n	800685a <_printf_i+0x186>
 8006854:	065f      	lsls	r7, r3, #25
 8006856:	bf48      	it	mi
 8006858:	b2ad      	uxthmi	r5, r5
 800685a:	6031      	str	r1, [r6, #0]
 800685c:	07d9      	lsls	r1, r3, #31
 800685e:	bf44      	itt	mi
 8006860:	f043 0320 	orrmi.w	r3, r3, #32
 8006864:	6023      	strmi	r3, [r4, #0]
 8006866:	b11d      	cbz	r5, 8006870 <_printf_i+0x19c>
 8006868:	2310      	movs	r3, #16
 800686a:	e7ad      	b.n	80067c8 <_printf_i+0xf4>
 800686c:	4826      	ldr	r0, [pc, #152]	@ (8006908 <_printf_i+0x234>)
 800686e:	e7e9      	b.n	8006844 <_printf_i+0x170>
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	f023 0320 	bic.w	r3, r3, #32
 8006876:	6023      	str	r3, [r4, #0]
 8006878:	e7f6      	b.n	8006868 <_printf_i+0x194>
 800687a:	4616      	mov	r6, r2
 800687c:	e7bd      	b.n	80067fa <_printf_i+0x126>
 800687e:	6833      	ldr	r3, [r6, #0]
 8006880:	6825      	ldr	r5, [r4, #0]
 8006882:	6961      	ldr	r1, [r4, #20]
 8006884:	1d18      	adds	r0, r3, #4
 8006886:	6030      	str	r0, [r6, #0]
 8006888:	062e      	lsls	r6, r5, #24
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	d501      	bpl.n	8006892 <_printf_i+0x1be>
 800688e:	6019      	str	r1, [r3, #0]
 8006890:	e002      	b.n	8006898 <_printf_i+0x1c4>
 8006892:	0668      	lsls	r0, r5, #25
 8006894:	d5fb      	bpl.n	800688e <_printf_i+0x1ba>
 8006896:	8019      	strh	r1, [r3, #0]
 8006898:	2300      	movs	r3, #0
 800689a:	6123      	str	r3, [r4, #16]
 800689c:	4616      	mov	r6, r2
 800689e:	e7bc      	b.n	800681a <_printf_i+0x146>
 80068a0:	6833      	ldr	r3, [r6, #0]
 80068a2:	1d1a      	adds	r2, r3, #4
 80068a4:	6032      	str	r2, [r6, #0]
 80068a6:	681e      	ldr	r6, [r3, #0]
 80068a8:	6862      	ldr	r2, [r4, #4]
 80068aa:	2100      	movs	r1, #0
 80068ac:	4630      	mov	r0, r6
 80068ae:	f7f9 fc8f 	bl	80001d0 <memchr>
 80068b2:	b108      	cbz	r0, 80068b8 <_printf_i+0x1e4>
 80068b4:	1b80      	subs	r0, r0, r6
 80068b6:	6060      	str	r0, [r4, #4]
 80068b8:	6863      	ldr	r3, [r4, #4]
 80068ba:	6123      	str	r3, [r4, #16]
 80068bc:	2300      	movs	r3, #0
 80068be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068c2:	e7aa      	b.n	800681a <_printf_i+0x146>
 80068c4:	6923      	ldr	r3, [r4, #16]
 80068c6:	4632      	mov	r2, r6
 80068c8:	4649      	mov	r1, r9
 80068ca:	4640      	mov	r0, r8
 80068cc:	47d0      	blx	sl
 80068ce:	3001      	adds	r0, #1
 80068d0:	d0ad      	beq.n	800682e <_printf_i+0x15a>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	079b      	lsls	r3, r3, #30
 80068d6:	d413      	bmi.n	8006900 <_printf_i+0x22c>
 80068d8:	68e0      	ldr	r0, [r4, #12]
 80068da:	9b03      	ldr	r3, [sp, #12]
 80068dc:	4298      	cmp	r0, r3
 80068de:	bfb8      	it	lt
 80068e0:	4618      	movlt	r0, r3
 80068e2:	e7a6      	b.n	8006832 <_printf_i+0x15e>
 80068e4:	2301      	movs	r3, #1
 80068e6:	4632      	mov	r2, r6
 80068e8:	4649      	mov	r1, r9
 80068ea:	4640      	mov	r0, r8
 80068ec:	47d0      	blx	sl
 80068ee:	3001      	adds	r0, #1
 80068f0:	d09d      	beq.n	800682e <_printf_i+0x15a>
 80068f2:	3501      	adds	r5, #1
 80068f4:	68e3      	ldr	r3, [r4, #12]
 80068f6:	9903      	ldr	r1, [sp, #12]
 80068f8:	1a5b      	subs	r3, r3, r1
 80068fa:	42ab      	cmp	r3, r5
 80068fc:	dcf2      	bgt.n	80068e4 <_printf_i+0x210>
 80068fe:	e7eb      	b.n	80068d8 <_printf_i+0x204>
 8006900:	2500      	movs	r5, #0
 8006902:	f104 0619 	add.w	r6, r4, #25
 8006906:	e7f5      	b.n	80068f4 <_printf_i+0x220>
 8006908:	0802162e 	.word	0x0802162e
 800690c:	0802163f 	.word	0x0802163f

08006910 <_scanf_float>:
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	b087      	sub	sp, #28
 8006916:	4691      	mov	r9, r2
 8006918:	9303      	str	r3, [sp, #12]
 800691a:	688b      	ldr	r3, [r1, #8]
 800691c:	1e5a      	subs	r2, r3, #1
 800691e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006922:	bf81      	itttt	hi
 8006924:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006928:	eb03 0b05 	addhi.w	fp, r3, r5
 800692c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006930:	608b      	strhi	r3, [r1, #8]
 8006932:	680b      	ldr	r3, [r1, #0]
 8006934:	460a      	mov	r2, r1
 8006936:	f04f 0500 	mov.w	r5, #0
 800693a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800693e:	f842 3b1c 	str.w	r3, [r2], #28
 8006942:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006946:	4680      	mov	r8, r0
 8006948:	460c      	mov	r4, r1
 800694a:	bf98      	it	ls
 800694c:	f04f 0b00 	movls.w	fp, #0
 8006950:	9201      	str	r2, [sp, #4]
 8006952:	4616      	mov	r6, r2
 8006954:	46aa      	mov	sl, r5
 8006956:	462f      	mov	r7, r5
 8006958:	9502      	str	r5, [sp, #8]
 800695a:	68a2      	ldr	r2, [r4, #8]
 800695c:	b15a      	cbz	r2, 8006976 <_scanf_float+0x66>
 800695e:	f8d9 3000 	ldr.w	r3, [r9]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	2b4e      	cmp	r3, #78	@ 0x4e
 8006966:	d863      	bhi.n	8006a30 <_scanf_float+0x120>
 8006968:	2b40      	cmp	r3, #64	@ 0x40
 800696a:	d83b      	bhi.n	80069e4 <_scanf_float+0xd4>
 800696c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006970:	b2c8      	uxtb	r0, r1
 8006972:	280e      	cmp	r0, #14
 8006974:	d939      	bls.n	80069ea <_scanf_float+0xda>
 8006976:	b11f      	cbz	r7, 8006980 <_scanf_float+0x70>
 8006978:	6823      	ldr	r3, [r4, #0]
 800697a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800697e:	6023      	str	r3, [r4, #0]
 8006980:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006984:	f1ba 0f01 	cmp.w	sl, #1
 8006988:	f200 8114 	bhi.w	8006bb4 <_scanf_float+0x2a4>
 800698c:	9b01      	ldr	r3, [sp, #4]
 800698e:	429e      	cmp	r6, r3
 8006990:	f200 8105 	bhi.w	8006b9e <_scanf_float+0x28e>
 8006994:	2001      	movs	r0, #1
 8006996:	b007      	add	sp, #28
 8006998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800699c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80069a0:	2a0d      	cmp	r2, #13
 80069a2:	d8e8      	bhi.n	8006976 <_scanf_float+0x66>
 80069a4:	a101      	add	r1, pc, #4	@ (adr r1, 80069ac <_scanf_float+0x9c>)
 80069a6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80069aa:	bf00      	nop
 80069ac:	08006af5 	.word	0x08006af5
 80069b0:	08006977 	.word	0x08006977
 80069b4:	08006977 	.word	0x08006977
 80069b8:	08006977 	.word	0x08006977
 80069bc:	08006b51 	.word	0x08006b51
 80069c0:	08006b2b 	.word	0x08006b2b
 80069c4:	08006977 	.word	0x08006977
 80069c8:	08006977 	.word	0x08006977
 80069cc:	08006b03 	.word	0x08006b03
 80069d0:	08006977 	.word	0x08006977
 80069d4:	08006977 	.word	0x08006977
 80069d8:	08006977 	.word	0x08006977
 80069dc:	08006977 	.word	0x08006977
 80069e0:	08006abf 	.word	0x08006abf
 80069e4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80069e8:	e7da      	b.n	80069a0 <_scanf_float+0x90>
 80069ea:	290e      	cmp	r1, #14
 80069ec:	d8c3      	bhi.n	8006976 <_scanf_float+0x66>
 80069ee:	a001      	add	r0, pc, #4	@ (adr r0, 80069f4 <_scanf_float+0xe4>)
 80069f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80069f4:	08006aaf 	.word	0x08006aaf
 80069f8:	08006977 	.word	0x08006977
 80069fc:	08006aaf 	.word	0x08006aaf
 8006a00:	08006b3f 	.word	0x08006b3f
 8006a04:	08006977 	.word	0x08006977
 8006a08:	08006a51 	.word	0x08006a51
 8006a0c:	08006a95 	.word	0x08006a95
 8006a10:	08006a95 	.word	0x08006a95
 8006a14:	08006a95 	.word	0x08006a95
 8006a18:	08006a95 	.word	0x08006a95
 8006a1c:	08006a95 	.word	0x08006a95
 8006a20:	08006a95 	.word	0x08006a95
 8006a24:	08006a95 	.word	0x08006a95
 8006a28:	08006a95 	.word	0x08006a95
 8006a2c:	08006a95 	.word	0x08006a95
 8006a30:	2b6e      	cmp	r3, #110	@ 0x6e
 8006a32:	d809      	bhi.n	8006a48 <_scanf_float+0x138>
 8006a34:	2b60      	cmp	r3, #96	@ 0x60
 8006a36:	d8b1      	bhi.n	800699c <_scanf_float+0x8c>
 8006a38:	2b54      	cmp	r3, #84	@ 0x54
 8006a3a:	d07b      	beq.n	8006b34 <_scanf_float+0x224>
 8006a3c:	2b59      	cmp	r3, #89	@ 0x59
 8006a3e:	d19a      	bne.n	8006976 <_scanf_float+0x66>
 8006a40:	2d07      	cmp	r5, #7
 8006a42:	d198      	bne.n	8006976 <_scanf_float+0x66>
 8006a44:	2508      	movs	r5, #8
 8006a46:	e02f      	b.n	8006aa8 <_scanf_float+0x198>
 8006a48:	2b74      	cmp	r3, #116	@ 0x74
 8006a4a:	d073      	beq.n	8006b34 <_scanf_float+0x224>
 8006a4c:	2b79      	cmp	r3, #121	@ 0x79
 8006a4e:	e7f6      	b.n	8006a3e <_scanf_float+0x12e>
 8006a50:	6821      	ldr	r1, [r4, #0]
 8006a52:	05c8      	lsls	r0, r1, #23
 8006a54:	d51e      	bpl.n	8006a94 <_scanf_float+0x184>
 8006a56:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006a5a:	6021      	str	r1, [r4, #0]
 8006a5c:	3701      	adds	r7, #1
 8006a5e:	f1bb 0f00 	cmp.w	fp, #0
 8006a62:	d003      	beq.n	8006a6c <_scanf_float+0x15c>
 8006a64:	3201      	adds	r2, #1
 8006a66:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a6a:	60a2      	str	r2, [r4, #8]
 8006a6c:	68a3      	ldr	r3, [r4, #8]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	60a3      	str	r3, [r4, #8]
 8006a72:	6923      	ldr	r3, [r4, #16]
 8006a74:	3301      	adds	r3, #1
 8006a76:	6123      	str	r3, [r4, #16]
 8006a78:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f8c9 3004 	str.w	r3, [r9, #4]
 8006a84:	f340 8082 	ble.w	8006b8c <_scanf_float+0x27c>
 8006a88:	f8d9 3000 	ldr.w	r3, [r9]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	f8c9 3000 	str.w	r3, [r9]
 8006a92:	e762      	b.n	800695a <_scanf_float+0x4a>
 8006a94:	eb1a 0105 	adds.w	r1, sl, r5
 8006a98:	f47f af6d 	bne.w	8006976 <_scanf_float+0x66>
 8006a9c:	6822      	ldr	r2, [r4, #0]
 8006a9e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006aa2:	6022      	str	r2, [r4, #0]
 8006aa4:	460d      	mov	r5, r1
 8006aa6:	468a      	mov	sl, r1
 8006aa8:	f806 3b01 	strb.w	r3, [r6], #1
 8006aac:	e7de      	b.n	8006a6c <_scanf_float+0x15c>
 8006aae:	6822      	ldr	r2, [r4, #0]
 8006ab0:	0610      	lsls	r0, r2, #24
 8006ab2:	f57f af60 	bpl.w	8006976 <_scanf_float+0x66>
 8006ab6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006aba:	6022      	str	r2, [r4, #0]
 8006abc:	e7f4      	b.n	8006aa8 <_scanf_float+0x198>
 8006abe:	f1ba 0f00 	cmp.w	sl, #0
 8006ac2:	d10c      	bne.n	8006ade <_scanf_float+0x1ce>
 8006ac4:	b977      	cbnz	r7, 8006ae4 <_scanf_float+0x1d4>
 8006ac6:	6822      	ldr	r2, [r4, #0]
 8006ac8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006acc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006ad0:	d108      	bne.n	8006ae4 <_scanf_float+0x1d4>
 8006ad2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006ad6:	6022      	str	r2, [r4, #0]
 8006ad8:	f04f 0a01 	mov.w	sl, #1
 8006adc:	e7e4      	b.n	8006aa8 <_scanf_float+0x198>
 8006ade:	f1ba 0f02 	cmp.w	sl, #2
 8006ae2:	d050      	beq.n	8006b86 <_scanf_float+0x276>
 8006ae4:	2d01      	cmp	r5, #1
 8006ae6:	d002      	beq.n	8006aee <_scanf_float+0x1de>
 8006ae8:	2d04      	cmp	r5, #4
 8006aea:	f47f af44 	bne.w	8006976 <_scanf_float+0x66>
 8006aee:	3501      	adds	r5, #1
 8006af0:	b2ed      	uxtb	r5, r5
 8006af2:	e7d9      	b.n	8006aa8 <_scanf_float+0x198>
 8006af4:	f1ba 0f01 	cmp.w	sl, #1
 8006af8:	f47f af3d 	bne.w	8006976 <_scanf_float+0x66>
 8006afc:	f04f 0a02 	mov.w	sl, #2
 8006b00:	e7d2      	b.n	8006aa8 <_scanf_float+0x198>
 8006b02:	b975      	cbnz	r5, 8006b22 <_scanf_float+0x212>
 8006b04:	2f00      	cmp	r7, #0
 8006b06:	f47f af37 	bne.w	8006978 <_scanf_float+0x68>
 8006b0a:	6822      	ldr	r2, [r4, #0]
 8006b0c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006b10:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006b14:	f040 8103 	bne.w	8006d1e <_scanf_float+0x40e>
 8006b18:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006b1c:	6022      	str	r2, [r4, #0]
 8006b1e:	2501      	movs	r5, #1
 8006b20:	e7c2      	b.n	8006aa8 <_scanf_float+0x198>
 8006b22:	2d03      	cmp	r5, #3
 8006b24:	d0e3      	beq.n	8006aee <_scanf_float+0x1de>
 8006b26:	2d05      	cmp	r5, #5
 8006b28:	e7df      	b.n	8006aea <_scanf_float+0x1da>
 8006b2a:	2d02      	cmp	r5, #2
 8006b2c:	f47f af23 	bne.w	8006976 <_scanf_float+0x66>
 8006b30:	2503      	movs	r5, #3
 8006b32:	e7b9      	b.n	8006aa8 <_scanf_float+0x198>
 8006b34:	2d06      	cmp	r5, #6
 8006b36:	f47f af1e 	bne.w	8006976 <_scanf_float+0x66>
 8006b3a:	2507      	movs	r5, #7
 8006b3c:	e7b4      	b.n	8006aa8 <_scanf_float+0x198>
 8006b3e:	6822      	ldr	r2, [r4, #0]
 8006b40:	0591      	lsls	r1, r2, #22
 8006b42:	f57f af18 	bpl.w	8006976 <_scanf_float+0x66>
 8006b46:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006b4a:	6022      	str	r2, [r4, #0]
 8006b4c:	9702      	str	r7, [sp, #8]
 8006b4e:	e7ab      	b.n	8006aa8 <_scanf_float+0x198>
 8006b50:	6822      	ldr	r2, [r4, #0]
 8006b52:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006b56:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006b5a:	d005      	beq.n	8006b68 <_scanf_float+0x258>
 8006b5c:	0550      	lsls	r0, r2, #21
 8006b5e:	f57f af0a 	bpl.w	8006976 <_scanf_float+0x66>
 8006b62:	2f00      	cmp	r7, #0
 8006b64:	f000 80db 	beq.w	8006d1e <_scanf_float+0x40e>
 8006b68:	0591      	lsls	r1, r2, #22
 8006b6a:	bf58      	it	pl
 8006b6c:	9902      	ldrpl	r1, [sp, #8]
 8006b6e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006b72:	bf58      	it	pl
 8006b74:	1a79      	subpl	r1, r7, r1
 8006b76:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006b7a:	bf58      	it	pl
 8006b7c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006b80:	6022      	str	r2, [r4, #0]
 8006b82:	2700      	movs	r7, #0
 8006b84:	e790      	b.n	8006aa8 <_scanf_float+0x198>
 8006b86:	f04f 0a03 	mov.w	sl, #3
 8006b8a:	e78d      	b.n	8006aa8 <_scanf_float+0x198>
 8006b8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006b90:	4649      	mov	r1, r9
 8006b92:	4640      	mov	r0, r8
 8006b94:	4798      	blx	r3
 8006b96:	2800      	cmp	r0, #0
 8006b98:	f43f aedf 	beq.w	800695a <_scanf_float+0x4a>
 8006b9c:	e6eb      	b.n	8006976 <_scanf_float+0x66>
 8006b9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ba2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ba6:	464a      	mov	r2, r9
 8006ba8:	4640      	mov	r0, r8
 8006baa:	4798      	blx	r3
 8006bac:	6923      	ldr	r3, [r4, #16]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	6123      	str	r3, [r4, #16]
 8006bb2:	e6eb      	b.n	800698c <_scanf_float+0x7c>
 8006bb4:	1e6b      	subs	r3, r5, #1
 8006bb6:	2b06      	cmp	r3, #6
 8006bb8:	d824      	bhi.n	8006c04 <_scanf_float+0x2f4>
 8006bba:	2d02      	cmp	r5, #2
 8006bbc:	d836      	bhi.n	8006c2c <_scanf_float+0x31c>
 8006bbe:	9b01      	ldr	r3, [sp, #4]
 8006bc0:	429e      	cmp	r6, r3
 8006bc2:	f67f aee7 	bls.w	8006994 <_scanf_float+0x84>
 8006bc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006bca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bce:	464a      	mov	r2, r9
 8006bd0:	4640      	mov	r0, r8
 8006bd2:	4798      	blx	r3
 8006bd4:	6923      	ldr	r3, [r4, #16]
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	6123      	str	r3, [r4, #16]
 8006bda:	e7f0      	b.n	8006bbe <_scanf_float+0x2ae>
 8006bdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006be0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006be4:	464a      	mov	r2, r9
 8006be6:	4640      	mov	r0, r8
 8006be8:	4798      	blx	r3
 8006bea:	6923      	ldr	r3, [r4, #16]
 8006bec:	3b01      	subs	r3, #1
 8006bee:	6123      	str	r3, [r4, #16]
 8006bf0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bf4:	fa5f fa8a 	uxtb.w	sl, sl
 8006bf8:	f1ba 0f02 	cmp.w	sl, #2
 8006bfc:	d1ee      	bne.n	8006bdc <_scanf_float+0x2cc>
 8006bfe:	3d03      	subs	r5, #3
 8006c00:	b2ed      	uxtb	r5, r5
 8006c02:	1b76      	subs	r6, r6, r5
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	05da      	lsls	r2, r3, #23
 8006c08:	d530      	bpl.n	8006c6c <_scanf_float+0x35c>
 8006c0a:	055b      	lsls	r3, r3, #21
 8006c0c:	d511      	bpl.n	8006c32 <_scanf_float+0x322>
 8006c0e:	9b01      	ldr	r3, [sp, #4]
 8006c10:	429e      	cmp	r6, r3
 8006c12:	f67f aebf 	bls.w	8006994 <_scanf_float+0x84>
 8006c16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c1e:	464a      	mov	r2, r9
 8006c20:	4640      	mov	r0, r8
 8006c22:	4798      	blx	r3
 8006c24:	6923      	ldr	r3, [r4, #16]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	6123      	str	r3, [r4, #16]
 8006c2a:	e7f0      	b.n	8006c0e <_scanf_float+0x2fe>
 8006c2c:	46aa      	mov	sl, r5
 8006c2e:	46b3      	mov	fp, r6
 8006c30:	e7de      	b.n	8006bf0 <_scanf_float+0x2e0>
 8006c32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006c36:	6923      	ldr	r3, [r4, #16]
 8006c38:	2965      	cmp	r1, #101	@ 0x65
 8006c3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c3e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006c42:	6123      	str	r3, [r4, #16]
 8006c44:	d00c      	beq.n	8006c60 <_scanf_float+0x350>
 8006c46:	2945      	cmp	r1, #69	@ 0x45
 8006c48:	d00a      	beq.n	8006c60 <_scanf_float+0x350>
 8006c4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c4e:	464a      	mov	r2, r9
 8006c50:	4640      	mov	r0, r8
 8006c52:	4798      	blx	r3
 8006c54:	6923      	ldr	r3, [r4, #16]
 8006c56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	1eb5      	subs	r5, r6, #2
 8006c5e:	6123      	str	r3, [r4, #16]
 8006c60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c64:	464a      	mov	r2, r9
 8006c66:	4640      	mov	r0, r8
 8006c68:	4798      	blx	r3
 8006c6a:	462e      	mov	r6, r5
 8006c6c:	6822      	ldr	r2, [r4, #0]
 8006c6e:	f012 0210 	ands.w	r2, r2, #16
 8006c72:	d001      	beq.n	8006c78 <_scanf_float+0x368>
 8006c74:	2000      	movs	r0, #0
 8006c76:	e68e      	b.n	8006996 <_scanf_float+0x86>
 8006c78:	7032      	strb	r2, [r6, #0]
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006c80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c84:	d125      	bne.n	8006cd2 <_scanf_float+0x3c2>
 8006c86:	9b02      	ldr	r3, [sp, #8]
 8006c88:	429f      	cmp	r7, r3
 8006c8a:	d00a      	beq.n	8006ca2 <_scanf_float+0x392>
 8006c8c:	1bda      	subs	r2, r3, r7
 8006c8e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006c92:	429e      	cmp	r6, r3
 8006c94:	bf28      	it	cs
 8006c96:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006c9a:	4922      	ldr	r1, [pc, #136]	@ (8006d24 <_scanf_float+0x414>)
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	f000 f907 	bl	8006eb0 <siprintf>
 8006ca2:	9901      	ldr	r1, [sp, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	4640      	mov	r0, r8
 8006ca8:	f002 fc02 	bl	80094b0 <_strtod_r>
 8006cac:	9b03      	ldr	r3, [sp, #12]
 8006cae:	6821      	ldr	r1, [r4, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f011 0f02 	tst.w	r1, #2
 8006cb6:	ec57 6b10 	vmov	r6, r7, d0
 8006cba:	f103 0204 	add.w	r2, r3, #4
 8006cbe:	d015      	beq.n	8006cec <_scanf_float+0x3dc>
 8006cc0:	9903      	ldr	r1, [sp, #12]
 8006cc2:	600a      	str	r2, [r1, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	e9c3 6700 	strd	r6, r7, [r3]
 8006cca:	68e3      	ldr	r3, [r4, #12]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	60e3      	str	r3, [r4, #12]
 8006cd0:	e7d0      	b.n	8006c74 <_scanf_float+0x364>
 8006cd2:	9b04      	ldr	r3, [sp, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d0e4      	beq.n	8006ca2 <_scanf_float+0x392>
 8006cd8:	9905      	ldr	r1, [sp, #20]
 8006cda:	230a      	movs	r3, #10
 8006cdc:	3101      	adds	r1, #1
 8006cde:	4640      	mov	r0, r8
 8006ce0:	f002 fc66 	bl	80095b0 <_strtol_r>
 8006ce4:	9b04      	ldr	r3, [sp, #16]
 8006ce6:	9e05      	ldr	r6, [sp, #20]
 8006ce8:	1ac2      	subs	r2, r0, r3
 8006cea:	e7d0      	b.n	8006c8e <_scanf_float+0x37e>
 8006cec:	f011 0f04 	tst.w	r1, #4
 8006cf0:	9903      	ldr	r1, [sp, #12]
 8006cf2:	600a      	str	r2, [r1, #0]
 8006cf4:	d1e6      	bne.n	8006cc4 <_scanf_float+0x3b4>
 8006cf6:	681d      	ldr	r5, [r3, #0]
 8006cf8:	4632      	mov	r2, r6
 8006cfa:	463b      	mov	r3, r7
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	4639      	mov	r1, r7
 8006d00:	f7f9 ff14 	bl	8000b2c <__aeabi_dcmpun>
 8006d04:	b128      	cbz	r0, 8006d12 <_scanf_float+0x402>
 8006d06:	4808      	ldr	r0, [pc, #32]	@ (8006d28 <_scanf_float+0x418>)
 8006d08:	f000 f9c6 	bl	8007098 <nanf>
 8006d0c:	ed85 0a00 	vstr	s0, [r5]
 8006d10:	e7db      	b.n	8006cca <_scanf_float+0x3ba>
 8006d12:	4630      	mov	r0, r6
 8006d14:	4639      	mov	r1, r7
 8006d16:	f7f9 ff67 	bl	8000be8 <__aeabi_d2f>
 8006d1a:	6028      	str	r0, [r5, #0]
 8006d1c:	e7d5      	b.n	8006cca <_scanf_float+0x3ba>
 8006d1e:	2700      	movs	r7, #0
 8006d20:	e62e      	b.n	8006980 <_scanf_float+0x70>
 8006d22:	bf00      	nop
 8006d24:	08021650 	.word	0x08021650
 8006d28:	08021791 	.word	0x08021791

08006d2c <std>:
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	b510      	push	{r4, lr}
 8006d30:	4604      	mov	r4, r0
 8006d32:	e9c0 3300 	strd	r3, r3, [r0]
 8006d36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d3a:	6083      	str	r3, [r0, #8]
 8006d3c:	8181      	strh	r1, [r0, #12]
 8006d3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d40:	81c2      	strh	r2, [r0, #14]
 8006d42:	6183      	str	r3, [r0, #24]
 8006d44:	4619      	mov	r1, r3
 8006d46:	2208      	movs	r2, #8
 8006d48:	305c      	adds	r0, #92	@ 0x5c
 8006d4a:	f000 f916 	bl	8006f7a <memset>
 8006d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d84 <std+0x58>)
 8006d50:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d52:	4b0d      	ldr	r3, [pc, #52]	@ (8006d88 <std+0x5c>)
 8006d54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d56:	4b0d      	ldr	r3, [pc, #52]	@ (8006d8c <std+0x60>)
 8006d58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d90 <std+0x64>)
 8006d5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d94 <std+0x68>)
 8006d60:	6224      	str	r4, [r4, #32]
 8006d62:	429c      	cmp	r4, r3
 8006d64:	d006      	beq.n	8006d74 <std+0x48>
 8006d66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d6a:	4294      	cmp	r4, r2
 8006d6c:	d002      	beq.n	8006d74 <std+0x48>
 8006d6e:	33d0      	adds	r3, #208	@ 0xd0
 8006d70:	429c      	cmp	r4, r3
 8006d72:	d105      	bne.n	8006d80 <std+0x54>
 8006d74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d7c:	f000 b97a 	b.w	8007074 <__retarget_lock_init_recursive>
 8006d80:	bd10      	pop	{r4, pc}
 8006d82:	bf00      	nop
 8006d84:	08006ef5 	.word	0x08006ef5
 8006d88:	08006f17 	.word	0x08006f17
 8006d8c:	08006f4f 	.word	0x08006f4f
 8006d90:	08006f73 	.word	0x08006f73
 8006d94:	200003f0 	.word	0x200003f0

08006d98 <stdio_exit_handler>:
 8006d98:	4a02      	ldr	r2, [pc, #8]	@ (8006da4 <stdio_exit_handler+0xc>)
 8006d9a:	4903      	ldr	r1, [pc, #12]	@ (8006da8 <stdio_exit_handler+0x10>)
 8006d9c:	4803      	ldr	r0, [pc, #12]	@ (8006dac <stdio_exit_handler+0x14>)
 8006d9e:	f000 b869 	b.w	8006e74 <_fwalk_sglue>
 8006da2:	bf00      	nop
 8006da4:	2000007c 	.word	0x2000007c
 8006da8:	0800996d 	.word	0x0800996d
 8006dac:	2000008c 	.word	0x2000008c

08006db0 <cleanup_stdio>:
 8006db0:	6841      	ldr	r1, [r0, #4]
 8006db2:	4b0c      	ldr	r3, [pc, #48]	@ (8006de4 <cleanup_stdio+0x34>)
 8006db4:	4299      	cmp	r1, r3
 8006db6:	b510      	push	{r4, lr}
 8006db8:	4604      	mov	r4, r0
 8006dba:	d001      	beq.n	8006dc0 <cleanup_stdio+0x10>
 8006dbc:	f002 fdd6 	bl	800996c <_fflush_r>
 8006dc0:	68a1      	ldr	r1, [r4, #8]
 8006dc2:	4b09      	ldr	r3, [pc, #36]	@ (8006de8 <cleanup_stdio+0x38>)
 8006dc4:	4299      	cmp	r1, r3
 8006dc6:	d002      	beq.n	8006dce <cleanup_stdio+0x1e>
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f002 fdcf 	bl	800996c <_fflush_r>
 8006dce:	68e1      	ldr	r1, [r4, #12]
 8006dd0:	4b06      	ldr	r3, [pc, #24]	@ (8006dec <cleanup_stdio+0x3c>)
 8006dd2:	4299      	cmp	r1, r3
 8006dd4:	d004      	beq.n	8006de0 <cleanup_stdio+0x30>
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ddc:	f002 bdc6 	b.w	800996c <_fflush_r>
 8006de0:	bd10      	pop	{r4, pc}
 8006de2:	bf00      	nop
 8006de4:	200003f0 	.word	0x200003f0
 8006de8:	20000458 	.word	0x20000458
 8006dec:	200004c0 	.word	0x200004c0

08006df0 <global_stdio_init.part.0>:
 8006df0:	b510      	push	{r4, lr}
 8006df2:	4b0b      	ldr	r3, [pc, #44]	@ (8006e20 <global_stdio_init.part.0+0x30>)
 8006df4:	4c0b      	ldr	r4, [pc, #44]	@ (8006e24 <global_stdio_init.part.0+0x34>)
 8006df6:	4a0c      	ldr	r2, [pc, #48]	@ (8006e28 <global_stdio_init.part.0+0x38>)
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2104      	movs	r1, #4
 8006e00:	f7ff ff94 	bl	8006d2c <std>
 8006e04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e08:	2201      	movs	r2, #1
 8006e0a:	2109      	movs	r1, #9
 8006e0c:	f7ff ff8e 	bl	8006d2c <std>
 8006e10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e14:	2202      	movs	r2, #2
 8006e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e1a:	2112      	movs	r1, #18
 8006e1c:	f7ff bf86 	b.w	8006d2c <std>
 8006e20:	20000528 	.word	0x20000528
 8006e24:	200003f0 	.word	0x200003f0
 8006e28:	08006d99 	.word	0x08006d99

08006e2c <__sfp_lock_acquire>:
 8006e2c:	4801      	ldr	r0, [pc, #4]	@ (8006e34 <__sfp_lock_acquire+0x8>)
 8006e2e:	f000 b922 	b.w	8007076 <__retarget_lock_acquire_recursive>
 8006e32:	bf00      	nop
 8006e34:	20000531 	.word	0x20000531

08006e38 <__sfp_lock_release>:
 8006e38:	4801      	ldr	r0, [pc, #4]	@ (8006e40 <__sfp_lock_release+0x8>)
 8006e3a:	f000 b91d 	b.w	8007078 <__retarget_lock_release_recursive>
 8006e3e:	bf00      	nop
 8006e40:	20000531 	.word	0x20000531

08006e44 <__sinit>:
 8006e44:	b510      	push	{r4, lr}
 8006e46:	4604      	mov	r4, r0
 8006e48:	f7ff fff0 	bl	8006e2c <__sfp_lock_acquire>
 8006e4c:	6a23      	ldr	r3, [r4, #32]
 8006e4e:	b11b      	cbz	r3, 8006e58 <__sinit+0x14>
 8006e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e54:	f7ff bff0 	b.w	8006e38 <__sfp_lock_release>
 8006e58:	4b04      	ldr	r3, [pc, #16]	@ (8006e6c <__sinit+0x28>)
 8006e5a:	6223      	str	r3, [r4, #32]
 8006e5c:	4b04      	ldr	r3, [pc, #16]	@ (8006e70 <__sinit+0x2c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1f5      	bne.n	8006e50 <__sinit+0xc>
 8006e64:	f7ff ffc4 	bl	8006df0 <global_stdio_init.part.0>
 8006e68:	e7f2      	b.n	8006e50 <__sinit+0xc>
 8006e6a:	bf00      	nop
 8006e6c:	08006db1 	.word	0x08006db1
 8006e70:	20000528 	.word	0x20000528

08006e74 <_fwalk_sglue>:
 8006e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e78:	4607      	mov	r7, r0
 8006e7a:	4688      	mov	r8, r1
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	2600      	movs	r6, #0
 8006e80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e84:	f1b9 0901 	subs.w	r9, r9, #1
 8006e88:	d505      	bpl.n	8006e96 <_fwalk_sglue+0x22>
 8006e8a:	6824      	ldr	r4, [r4, #0]
 8006e8c:	2c00      	cmp	r4, #0
 8006e8e:	d1f7      	bne.n	8006e80 <_fwalk_sglue+0xc>
 8006e90:	4630      	mov	r0, r6
 8006e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e96:	89ab      	ldrh	r3, [r5, #12]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d907      	bls.n	8006eac <_fwalk_sglue+0x38>
 8006e9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	d003      	beq.n	8006eac <_fwalk_sglue+0x38>
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	47c0      	blx	r8
 8006eaa:	4306      	orrs	r6, r0
 8006eac:	3568      	adds	r5, #104	@ 0x68
 8006eae:	e7e9      	b.n	8006e84 <_fwalk_sglue+0x10>

08006eb0 <siprintf>:
 8006eb0:	b40e      	push	{r1, r2, r3}
 8006eb2:	b510      	push	{r4, lr}
 8006eb4:	b09d      	sub	sp, #116	@ 0x74
 8006eb6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006eb8:	9002      	str	r0, [sp, #8]
 8006eba:	9006      	str	r0, [sp, #24]
 8006ebc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006ec0:	480a      	ldr	r0, [pc, #40]	@ (8006eec <siprintf+0x3c>)
 8006ec2:	9107      	str	r1, [sp, #28]
 8006ec4:	9104      	str	r1, [sp, #16]
 8006ec6:	490a      	ldr	r1, [pc, #40]	@ (8006ef0 <siprintf+0x40>)
 8006ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ecc:	9105      	str	r1, [sp, #20]
 8006ece:	2400      	movs	r4, #0
 8006ed0:	a902      	add	r1, sp, #8
 8006ed2:	6800      	ldr	r0, [r0, #0]
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006ed8:	f002 fbc8 	bl	800966c <_svfiprintf_r>
 8006edc:	9b02      	ldr	r3, [sp, #8]
 8006ede:	701c      	strb	r4, [r3, #0]
 8006ee0:	b01d      	add	sp, #116	@ 0x74
 8006ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee6:	b003      	add	sp, #12
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	20000088 	.word	0x20000088
 8006ef0:	ffff0208 	.word	0xffff0208

08006ef4 <__sread>:
 8006ef4:	b510      	push	{r4, lr}
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006efc:	f000 f86c 	bl	8006fd8 <_read_r>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	bfab      	itete	ge
 8006f04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f06:	89a3      	ldrhlt	r3, [r4, #12]
 8006f08:	181b      	addge	r3, r3, r0
 8006f0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f0e:	bfac      	ite	ge
 8006f10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f12:	81a3      	strhlt	r3, [r4, #12]
 8006f14:	bd10      	pop	{r4, pc}

08006f16 <__swrite>:
 8006f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f1a:	461f      	mov	r7, r3
 8006f1c:	898b      	ldrh	r3, [r1, #12]
 8006f1e:	05db      	lsls	r3, r3, #23
 8006f20:	4605      	mov	r5, r0
 8006f22:	460c      	mov	r4, r1
 8006f24:	4616      	mov	r6, r2
 8006f26:	d505      	bpl.n	8006f34 <__swrite+0x1e>
 8006f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f000 f840 	bl	8006fb4 <_lseek_r>
 8006f34:	89a3      	ldrh	r3, [r4, #12]
 8006f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f3e:	81a3      	strh	r3, [r4, #12]
 8006f40:	4632      	mov	r2, r6
 8006f42:	463b      	mov	r3, r7
 8006f44:	4628      	mov	r0, r5
 8006f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f4a:	f000 b857 	b.w	8006ffc <_write_r>

08006f4e <__sseek>:
 8006f4e:	b510      	push	{r4, lr}
 8006f50:	460c      	mov	r4, r1
 8006f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f56:	f000 f82d 	bl	8006fb4 <_lseek_r>
 8006f5a:	1c43      	adds	r3, r0, #1
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	bf15      	itete	ne
 8006f60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f6a:	81a3      	strheq	r3, [r4, #12]
 8006f6c:	bf18      	it	ne
 8006f6e:	81a3      	strhne	r3, [r4, #12]
 8006f70:	bd10      	pop	{r4, pc}

08006f72 <__sclose>:
 8006f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f76:	f000 b80d 	b.w	8006f94 <_close_r>

08006f7a <memset>:
 8006f7a:	4402      	add	r2, r0
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d100      	bne.n	8006f84 <memset+0xa>
 8006f82:	4770      	bx	lr
 8006f84:	f803 1b01 	strb.w	r1, [r3], #1
 8006f88:	e7f9      	b.n	8006f7e <memset+0x4>
	...

08006f8c <_localeconv_r>:
 8006f8c:	4800      	ldr	r0, [pc, #0]	@ (8006f90 <_localeconv_r+0x4>)
 8006f8e:	4770      	bx	lr
 8006f90:	200001c8 	.word	0x200001c8

08006f94 <_close_r>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	4d06      	ldr	r5, [pc, #24]	@ (8006fb0 <_close_r+0x1c>)
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	602b      	str	r3, [r5, #0]
 8006fa0:	f7fc ffd2 	bl	8003f48 <_close>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d102      	bne.n	8006fae <_close_r+0x1a>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	b103      	cbz	r3, 8006fae <_close_r+0x1a>
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	2000052c 	.word	0x2000052c

08006fb4 <_lseek_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	4d07      	ldr	r5, [pc, #28]	@ (8006fd4 <_lseek_r+0x20>)
 8006fb8:	4604      	mov	r4, r0
 8006fba:	4608      	mov	r0, r1
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	602a      	str	r2, [r5, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f7fc ffe7 	bl	8003f96 <_lseek>
 8006fc8:	1c43      	adds	r3, r0, #1
 8006fca:	d102      	bne.n	8006fd2 <_lseek_r+0x1e>
 8006fcc:	682b      	ldr	r3, [r5, #0]
 8006fce:	b103      	cbz	r3, 8006fd2 <_lseek_r+0x1e>
 8006fd0:	6023      	str	r3, [r4, #0]
 8006fd2:	bd38      	pop	{r3, r4, r5, pc}
 8006fd4:	2000052c 	.word	0x2000052c

08006fd8 <_read_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4d07      	ldr	r5, [pc, #28]	@ (8006ff8 <_read_r+0x20>)
 8006fdc:	4604      	mov	r4, r0
 8006fde:	4608      	mov	r0, r1
 8006fe0:	4611      	mov	r1, r2
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	602a      	str	r2, [r5, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f7fc ff75 	bl	8003ed6 <_read>
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	d102      	bne.n	8006ff6 <_read_r+0x1e>
 8006ff0:	682b      	ldr	r3, [r5, #0]
 8006ff2:	b103      	cbz	r3, 8006ff6 <_read_r+0x1e>
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	bd38      	pop	{r3, r4, r5, pc}
 8006ff8:	2000052c 	.word	0x2000052c

08006ffc <_write_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	4d07      	ldr	r5, [pc, #28]	@ (800701c <_write_r+0x20>)
 8007000:	4604      	mov	r4, r0
 8007002:	4608      	mov	r0, r1
 8007004:	4611      	mov	r1, r2
 8007006:	2200      	movs	r2, #0
 8007008:	602a      	str	r2, [r5, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	f7fc ff80 	bl	8003f10 <_write>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_write_r+0x1e>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	b103      	cbz	r3, 800701a <_write_r+0x1e>
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	2000052c 	.word	0x2000052c

08007020 <__errno>:
 8007020:	4b01      	ldr	r3, [pc, #4]	@ (8007028 <__errno+0x8>)
 8007022:	6818      	ldr	r0, [r3, #0]
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	20000088 	.word	0x20000088

0800702c <__libc_init_array>:
 800702c:	b570      	push	{r4, r5, r6, lr}
 800702e:	4d0d      	ldr	r5, [pc, #52]	@ (8007064 <__libc_init_array+0x38>)
 8007030:	4c0d      	ldr	r4, [pc, #52]	@ (8007068 <__libc_init_array+0x3c>)
 8007032:	1b64      	subs	r4, r4, r5
 8007034:	10a4      	asrs	r4, r4, #2
 8007036:	2600      	movs	r6, #0
 8007038:	42a6      	cmp	r6, r4
 800703a:	d109      	bne.n	8007050 <__libc_init_array+0x24>
 800703c:	4d0b      	ldr	r5, [pc, #44]	@ (800706c <__libc_init_array+0x40>)
 800703e:	4c0c      	ldr	r4, [pc, #48]	@ (8007070 <__libc_init_array+0x44>)
 8007040:	f003 fb78 	bl	800a734 <_init>
 8007044:	1b64      	subs	r4, r4, r5
 8007046:	10a4      	asrs	r4, r4, #2
 8007048:	2600      	movs	r6, #0
 800704a:	42a6      	cmp	r6, r4
 800704c:	d105      	bne.n	800705a <__libc_init_array+0x2e>
 800704e:	bd70      	pop	{r4, r5, r6, pc}
 8007050:	f855 3b04 	ldr.w	r3, [r5], #4
 8007054:	4798      	blx	r3
 8007056:	3601      	adds	r6, #1
 8007058:	e7ee      	b.n	8007038 <__libc_init_array+0xc>
 800705a:	f855 3b04 	ldr.w	r3, [r5], #4
 800705e:	4798      	blx	r3
 8007060:	3601      	adds	r6, #1
 8007062:	e7f2      	b.n	800704a <__libc_init_array+0x1e>
 8007064:	08021a4c 	.word	0x08021a4c
 8007068:	08021a4c 	.word	0x08021a4c
 800706c:	08021a4c 	.word	0x08021a4c
 8007070:	08021a50 	.word	0x08021a50

08007074 <__retarget_lock_init_recursive>:
 8007074:	4770      	bx	lr

08007076 <__retarget_lock_acquire_recursive>:
 8007076:	4770      	bx	lr

08007078 <__retarget_lock_release_recursive>:
 8007078:	4770      	bx	lr

0800707a <memcpy>:
 800707a:	440a      	add	r2, r1
 800707c:	4291      	cmp	r1, r2
 800707e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007082:	d100      	bne.n	8007086 <memcpy+0xc>
 8007084:	4770      	bx	lr
 8007086:	b510      	push	{r4, lr}
 8007088:	f811 4b01 	ldrb.w	r4, [r1], #1
 800708c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007090:	4291      	cmp	r1, r2
 8007092:	d1f9      	bne.n	8007088 <memcpy+0xe>
 8007094:	bd10      	pop	{r4, pc}
	...

08007098 <nanf>:
 8007098:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80070a0 <nanf+0x8>
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	7fc00000 	.word	0x7fc00000

080070a4 <quorem>:
 80070a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a8:	6903      	ldr	r3, [r0, #16]
 80070aa:	690c      	ldr	r4, [r1, #16]
 80070ac:	42a3      	cmp	r3, r4
 80070ae:	4607      	mov	r7, r0
 80070b0:	db7e      	blt.n	80071b0 <quorem+0x10c>
 80070b2:	3c01      	subs	r4, #1
 80070b4:	f101 0814 	add.w	r8, r1, #20
 80070b8:	00a3      	lsls	r3, r4, #2
 80070ba:	f100 0514 	add.w	r5, r0, #20
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070c4:	9301      	str	r3, [sp, #4]
 80070c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070ce:	3301      	adds	r3, #1
 80070d0:	429a      	cmp	r2, r3
 80070d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80070da:	d32e      	bcc.n	800713a <quorem+0x96>
 80070dc:	f04f 0a00 	mov.w	sl, #0
 80070e0:	46c4      	mov	ip, r8
 80070e2:	46ae      	mov	lr, r5
 80070e4:	46d3      	mov	fp, sl
 80070e6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80070ea:	b298      	uxth	r0, r3
 80070ec:	fb06 a000 	mla	r0, r6, r0, sl
 80070f0:	0c02      	lsrs	r2, r0, #16
 80070f2:	0c1b      	lsrs	r3, r3, #16
 80070f4:	fb06 2303 	mla	r3, r6, r3, r2
 80070f8:	f8de 2000 	ldr.w	r2, [lr]
 80070fc:	b280      	uxth	r0, r0
 80070fe:	b292      	uxth	r2, r2
 8007100:	1a12      	subs	r2, r2, r0
 8007102:	445a      	add	r2, fp
 8007104:	f8de 0000 	ldr.w	r0, [lr]
 8007108:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800710c:	b29b      	uxth	r3, r3
 800710e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007112:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007116:	b292      	uxth	r2, r2
 8007118:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800711c:	45e1      	cmp	r9, ip
 800711e:	f84e 2b04 	str.w	r2, [lr], #4
 8007122:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007126:	d2de      	bcs.n	80070e6 <quorem+0x42>
 8007128:	9b00      	ldr	r3, [sp, #0]
 800712a:	58eb      	ldr	r3, [r5, r3]
 800712c:	b92b      	cbnz	r3, 800713a <quorem+0x96>
 800712e:	9b01      	ldr	r3, [sp, #4]
 8007130:	3b04      	subs	r3, #4
 8007132:	429d      	cmp	r5, r3
 8007134:	461a      	mov	r2, r3
 8007136:	d32f      	bcc.n	8007198 <quorem+0xf4>
 8007138:	613c      	str	r4, [r7, #16]
 800713a:	4638      	mov	r0, r7
 800713c:	f001 f9c8 	bl	80084d0 <__mcmp>
 8007140:	2800      	cmp	r0, #0
 8007142:	db25      	blt.n	8007190 <quorem+0xec>
 8007144:	4629      	mov	r1, r5
 8007146:	2000      	movs	r0, #0
 8007148:	f858 2b04 	ldr.w	r2, [r8], #4
 800714c:	f8d1 c000 	ldr.w	ip, [r1]
 8007150:	fa1f fe82 	uxth.w	lr, r2
 8007154:	fa1f f38c 	uxth.w	r3, ip
 8007158:	eba3 030e 	sub.w	r3, r3, lr
 800715c:	4403      	add	r3, r0
 800715e:	0c12      	lsrs	r2, r2, #16
 8007160:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007164:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007168:	b29b      	uxth	r3, r3
 800716a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800716e:	45c1      	cmp	r9, r8
 8007170:	f841 3b04 	str.w	r3, [r1], #4
 8007174:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007178:	d2e6      	bcs.n	8007148 <quorem+0xa4>
 800717a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800717e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007182:	b922      	cbnz	r2, 800718e <quorem+0xea>
 8007184:	3b04      	subs	r3, #4
 8007186:	429d      	cmp	r5, r3
 8007188:	461a      	mov	r2, r3
 800718a:	d30b      	bcc.n	80071a4 <quorem+0x100>
 800718c:	613c      	str	r4, [r7, #16]
 800718e:	3601      	adds	r6, #1
 8007190:	4630      	mov	r0, r6
 8007192:	b003      	add	sp, #12
 8007194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007198:	6812      	ldr	r2, [r2, #0]
 800719a:	3b04      	subs	r3, #4
 800719c:	2a00      	cmp	r2, #0
 800719e:	d1cb      	bne.n	8007138 <quorem+0x94>
 80071a0:	3c01      	subs	r4, #1
 80071a2:	e7c6      	b.n	8007132 <quorem+0x8e>
 80071a4:	6812      	ldr	r2, [r2, #0]
 80071a6:	3b04      	subs	r3, #4
 80071a8:	2a00      	cmp	r2, #0
 80071aa:	d1ef      	bne.n	800718c <quorem+0xe8>
 80071ac:	3c01      	subs	r4, #1
 80071ae:	e7ea      	b.n	8007186 <quorem+0xe2>
 80071b0:	2000      	movs	r0, #0
 80071b2:	e7ee      	b.n	8007192 <quorem+0xee>
 80071b4:	0000      	movs	r0, r0
	...

080071b8 <_dtoa_r>:
 80071b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071bc:	69c7      	ldr	r7, [r0, #28]
 80071be:	b097      	sub	sp, #92	@ 0x5c
 80071c0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80071c4:	ec55 4b10 	vmov	r4, r5, d0
 80071c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80071ca:	9107      	str	r1, [sp, #28]
 80071cc:	4681      	mov	r9, r0
 80071ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80071d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80071d2:	b97f      	cbnz	r7, 80071f4 <_dtoa_r+0x3c>
 80071d4:	2010      	movs	r0, #16
 80071d6:	f000 fe09 	bl	8007dec <malloc>
 80071da:	4602      	mov	r2, r0
 80071dc:	f8c9 001c 	str.w	r0, [r9, #28]
 80071e0:	b920      	cbnz	r0, 80071ec <_dtoa_r+0x34>
 80071e2:	4ba9      	ldr	r3, [pc, #676]	@ (8007488 <_dtoa_r+0x2d0>)
 80071e4:	21ef      	movs	r1, #239	@ 0xef
 80071e6:	48a9      	ldr	r0, [pc, #676]	@ (800748c <_dtoa_r+0x2d4>)
 80071e8:	f002 fc2e 	bl	8009a48 <__assert_func>
 80071ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80071f0:	6007      	str	r7, [r0, #0]
 80071f2:	60c7      	str	r7, [r0, #12]
 80071f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80071f8:	6819      	ldr	r1, [r3, #0]
 80071fa:	b159      	cbz	r1, 8007214 <_dtoa_r+0x5c>
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	604a      	str	r2, [r1, #4]
 8007200:	2301      	movs	r3, #1
 8007202:	4093      	lsls	r3, r2
 8007204:	608b      	str	r3, [r1, #8]
 8007206:	4648      	mov	r0, r9
 8007208:	f000 fee6 	bl	8007fd8 <_Bfree>
 800720c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007210:	2200      	movs	r2, #0
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	1e2b      	subs	r3, r5, #0
 8007216:	bfb9      	ittee	lt
 8007218:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800721c:	9305      	strlt	r3, [sp, #20]
 800721e:	2300      	movge	r3, #0
 8007220:	6033      	strge	r3, [r6, #0]
 8007222:	9f05      	ldr	r7, [sp, #20]
 8007224:	4b9a      	ldr	r3, [pc, #616]	@ (8007490 <_dtoa_r+0x2d8>)
 8007226:	bfbc      	itt	lt
 8007228:	2201      	movlt	r2, #1
 800722a:	6032      	strlt	r2, [r6, #0]
 800722c:	43bb      	bics	r3, r7
 800722e:	d112      	bne.n	8007256 <_dtoa_r+0x9e>
 8007230:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007232:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800723c:	4323      	orrs	r3, r4
 800723e:	f000 855a 	beq.w	8007cf6 <_dtoa_r+0xb3e>
 8007242:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007244:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80074a4 <_dtoa_r+0x2ec>
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 855c 	beq.w	8007d06 <_dtoa_r+0xb4e>
 800724e:	f10a 0303 	add.w	r3, sl, #3
 8007252:	f000 bd56 	b.w	8007d02 <_dtoa_r+0xb4a>
 8007256:	ed9d 7b04 	vldr	d7, [sp, #16]
 800725a:	2200      	movs	r2, #0
 800725c:	ec51 0b17 	vmov	r0, r1, d7
 8007260:	2300      	movs	r3, #0
 8007262:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007266:	f7f9 fc2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800726a:	4680      	mov	r8, r0
 800726c:	b158      	cbz	r0, 8007286 <_dtoa_r+0xce>
 800726e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007270:	2301      	movs	r3, #1
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007276:	b113      	cbz	r3, 800727e <_dtoa_r+0xc6>
 8007278:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800727a:	4b86      	ldr	r3, [pc, #536]	@ (8007494 <_dtoa_r+0x2dc>)
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80074a8 <_dtoa_r+0x2f0>
 8007282:	f000 bd40 	b.w	8007d06 <_dtoa_r+0xb4e>
 8007286:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800728a:	aa14      	add	r2, sp, #80	@ 0x50
 800728c:	a915      	add	r1, sp, #84	@ 0x54
 800728e:	4648      	mov	r0, r9
 8007290:	f001 fa3e 	bl	8008710 <__d2b>
 8007294:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007298:	9002      	str	r0, [sp, #8]
 800729a:	2e00      	cmp	r6, #0
 800729c:	d078      	beq.n	8007390 <_dtoa_r+0x1d8>
 800729e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072a0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80072a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80072ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80072b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80072b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80072b8:	4619      	mov	r1, r3
 80072ba:	2200      	movs	r2, #0
 80072bc:	4b76      	ldr	r3, [pc, #472]	@ (8007498 <_dtoa_r+0x2e0>)
 80072be:	f7f8 ffe3 	bl	8000288 <__aeabi_dsub>
 80072c2:	a36b      	add	r3, pc, #428	@ (adr r3, 8007470 <_dtoa_r+0x2b8>)
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	f7f9 f996 	bl	80005f8 <__aeabi_dmul>
 80072cc:	a36a      	add	r3, pc, #424	@ (adr r3, 8007478 <_dtoa_r+0x2c0>)
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	f7f8 ffdb 	bl	800028c <__adddf3>
 80072d6:	4604      	mov	r4, r0
 80072d8:	4630      	mov	r0, r6
 80072da:	460d      	mov	r5, r1
 80072dc:	f7f9 f922 	bl	8000524 <__aeabi_i2d>
 80072e0:	a367      	add	r3, pc, #412	@ (adr r3, 8007480 <_dtoa_r+0x2c8>)
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	f7f9 f987 	bl	80005f8 <__aeabi_dmul>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4620      	mov	r0, r4
 80072f0:	4629      	mov	r1, r5
 80072f2:	f7f8 ffcb 	bl	800028c <__adddf3>
 80072f6:	4604      	mov	r4, r0
 80072f8:	460d      	mov	r5, r1
 80072fa:	f7f9 fc2d 	bl	8000b58 <__aeabi_d2iz>
 80072fe:	2200      	movs	r2, #0
 8007300:	4607      	mov	r7, r0
 8007302:	2300      	movs	r3, #0
 8007304:	4620      	mov	r0, r4
 8007306:	4629      	mov	r1, r5
 8007308:	f7f9 fbe8 	bl	8000adc <__aeabi_dcmplt>
 800730c:	b140      	cbz	r0, 8007320 <_dtoa_r+0x168>
 800730e:	4638      	mov	r0, r7
 8007310:	f7f9 f908 	bl	8000524 <__aeabi_i2d>
 8007314:	4622      	mov	r2, r4
 8007316:	462b      	mov	r3, r5
 8007318:	f7f9 fbd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800731c:	b900      	cbnz	r0, 8007320 <_dtoa_r+0x168>
 800731e:	3f01      	subs	r7, #1
 8007320:	2f16      	cmp	r7, #22
 8007322:	d852      	bhi.n	80073ca <_dtoa_r+0x212>
 8007324:	4b5d      	ldr	r3, [pc, #372]	@ (800749c <_dtoa_r+0x2e4>)
 8007326:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007332:	f7f9 fbd3 	bl	8000adc <__aeabi_dcmplt>
 8007336:	2800      	cmp	r0, #0
 8007338:	d049      	beq.n	80073ce <_dtoa_r+0x216>
 800733a:	3f01      	subs	r7, #1
 800733c:	2300      	movs	r3, #0
 800733e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007340:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007342:	1b9b      	subs	r3, r3, r6
 8007344:	1e5a      	subs	r2, r3, #1
 8007346:	bf45      	ittet	mi
 8007348:	f1c3 0301 	rsbmi	r3, r3, #1
 800734c:	9300      	strmi	r3, [sp, #0]
 800734e:	2300      	movpl	r3, #0
 8007350:	2300      	movmi	r3, #0
 8007352:	9206      	str	r2, [sp, #24]
 8007354:	bf54      	ite	pl
 8007356:	9300      	strpl	r3, [sp, #0]
 8007358:	9306      	strmi	r3, [sp, #24]
 800735a:	2f00      	cmp	r7, #0
 800735c:	db39      	blt.n	80073d2 <_dtoa_r+0x21a>
 800735e:	9b06      	ldr	r3, [sp, #24]
 8007360:	970d      	str	r7, [sp, #52]	@ 0x34
 8007362:	443b      	add	r3, r7
 8007364:	9306      	str	r3, [sp, #24]
 8007366:	2300      	movs	r3, #0
 8007368:	9308      	str	r3, [sp, #32]
 800736a:	9b07      	ldr	r3, [sp, #28]
 800736c:	2b09      	cmp	r3, #9
 800736e:	d863      	bhi.n	8007438 <_dtoa_r+0x280>
 8007370:	2b05      	cmp	r3, #5
 8007372:	bfc4      	itt	gt
 8007374:	3b04      	subgt	r3, #4
 8007376:	9307      	strgt	r3, [sp, #28]
 8007378:	9b07      	ldr	r3, [sp, #28]
 800737a:	f1a3 0302 	sub.w	r3, r3, #2
 800737e:	bfcc      	ite	gt
 8007380:	2400      	movgt	r4, #0
 8007382:	2401      	movle	r4, #1
 8007384:	2b03      	cmp	r3, #3
 8007386:	d863      	bhi.n	8007450 <_dtoa_r+0x298>
 8007388:	e8df f003 	tbb	[pc, r3]
 800738c:	2b375452 	.word	0x2b375452
 8007390:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007394:	441e      	add	r6, r3
 8007396:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800739a:	2b20      	cmp	r3, #32
 800739c:	bfc1      	itttt	gt
 800739e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80073a2:	409f      	lslgt	r7, r3
 80073a4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80073a8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80073ac:	bfd6      	itet	le
 80073ae:	f1c3 0320 	rsble	r3, r3, #32
 80073b2:	ea47 0003 	orrgt.w	r0, r7, r3
 80073b6:	fa04 f003 	lslle.w	r0, r4, r3
 80073ba:	f7f9 f8a3 	bl	8000504 <__aeabi_ui2d>
 80073be:	2201      	movs	r2, #1
 80073c0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80073c4:	3e01      	subs	r6, #1
 80073c6:	9212      	str	r2, [sp, #72]	@ 0x48
 80073c8:	e776      	b.n	80072b8 <_dtoa_r+0x100>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e7b7      	b.n	800733e <_dtoa_r+0x186>
 80073ce:	9010      	str	r0, [sp, #64]	@ 0x40
 80073d0:	e7b6      	b.n	8007340 <_dtoa_r+0x188>
 80073d2:	9b00      	ldr	r3, [sp, #0]
 80073d4:	1bdb      	subs	r3, r3, r7
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	427b      	negs	r3, r7
 80073da:	9308      	str	r3, [sp, #32]
 80073dc:	2300      	movs	r3, #0
 80073de:	930d      	str	r3, [sp, #52]	@ 0x34
 80073e0:	e7c3      	b.n	800736a <_dtoa_r+0x1b2>
 80073e2:	2301      	movs	r3, #1
 80073e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80073e8:	eb07 0b03 	add.w	fp, r7, r3
 80073ec:	f10b 0301 	add.w	r3, fp, #1
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	9303      	str	r3, [sp, #12]
 80073f4:	bfb8      	it	lt
 80073f6:	2301      	movlt	r3, #1
 80073f8:	e006      	b.n	8007408 <_dtoa_r+0x250>
 80073fa:	2301      	movs	r3, #1
 80073fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80073fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007400:	2b00      	cmp	r3, #0
 8007402:	dd28      	ble.n	8007456 <_dtoa_r+0x29e>
 8007404:	469b      	mov	fp, r3
 8007406:	9303      	str	r3, [sp, #12]
 8007408:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800740c:	2100      	movs	r1, #0
 800740e:	2204      	movs	r2, #4
 8007410:	f102 0514 	add.w	r5, r2, #20
 8007414:	429d      	cmp	r5, r3
 8007416:	d926      	bls.n	8007466 <_dtoa_r+0x2ae>
 8007418:	6041      	str	r1, [r0, #4]
 800741a:	4648      	mov	r0, r9
 800741c:	f000 fd9c 	bl	8007f58 <_Balloc>
 8007420:	4682      	mov	sl, r0
 8007422:	2800      	cmp	r0, #0
 8007424:	d142      	bne.n	80074ac <_dtoa_r+0x2f4>
 8007426:	4b1e      	ldr	r3, [pc, #120]	@ (80074a0 <_dtoa_r+0x2e8>)
 8007428:	4602      	mov	r2, r0
 800742a:	f240 11af 	movw	r1, #431	@ 0x1af
 800742e:	e6da      	b.n	80071e6 <_dtoa_r+0x2e>
 8007430:	2300      	movs	r3, #0
 8007432:	e7e3      	b.n	80073fc <_dtoa_r+0x244>
 8007434:	2300      	movs	r3, #0
 8007436:	e7d5      	b.n	80073e4 <_dtoa_r+0x22c>
 8007438:	2401      	movs	r4, #1
 800743a:	2300      	movs	r3, #0
 800743c:	9307      	str	r3, [sp, #28]
 800743e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007440:	f04f 3bff 	mov.w	fp, #4294967295
 8007444:	2200      	movs	r2, #0
 8007446:	f8cd b00c 	str.w	fp, [sp, #12]
 800744a:	2312      	movs	r3, #18
 800744c:	920c      	str	r2, [sp, #48]	@ 0x30
 800744e:	e7db      	b.n	8007408 <_dtoa_r+0x250>
 8007450:	2301      	movs	r3, #1
 8007452:	9309      	str	r3, [sp, #36]	@ 0x24
 8007454:	e7f4      	b.n	8007440 <_dtoa_r+0x288>
 8007456:	f04f 0b01 	mov.w	fp, #1
 800745a:	f8cd b00c 	str.w	fp, [sp, #12]
 800745e:	465b      	mov	r3, fp
 8007460:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007464:	e7d0      	b.n	8007408 <_dtoa_r+0x250>
 8007466:	3101      	adds	r1, #1
 8007468:	0052      	lsls	r2, r2, #1
 800746a:	e7d1      	b.n	8007410 <_dtoa_r+0x258>
 800746c:	f3af 8000 	nop.w
 8007470:	636f4361 	.word	0x636f4361
 8007474:	3fd287a7 	.word	0x3fd287a7
 8007478:	8b60c8b3 	.word	0x8b60c8b3
 800747c:	3fc68a28 	.word	0x3fc68a28
 8007480:	509f79fb 	.word	0x509f79fb
 8007484:	3fd34413 	.word	0x3fd34413
 8007488:	08021662 	.word	0x08021662
 800748c:	08021679 	.word	0x08021679
 8007490:	7ff00000 	.word	0x7ff00000
 8007494:	0802162d 	.word	0x0802162d
 8007498:	3ff80000 	.word	0x3ff80000
 800749c:	08021828 	.word	0x08021828
 80074a0:	080216d1 	.word	0x080216d1
 80074a4:	0802165e 	.word	0x0802165e
 80074a8:	0802162c 	.word	0x0802162c
 80074ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80074b0:	6018      	str	r0, [r3, #0]
 80074b2:	9b03      	ldr	r3, [sp, #12]
 80074b4:	2b0e      	cmp	r3, #14
 80074b6:	f200 80a1 	bhi.w	80075fc <_dtoa_r+0x444>
 80074ba:	2c00      	cmp	r4, #0
 80074bc:	f000 809e 	beq.w	80075fc <_dtoa_r+0x444>
 80074c0:	2f00      	cmp	r7, #0
 80074c2:	dd33      	ble.n	800752c <_dtoa_r+0x374>
 80074c4:	4b9c      	ldr	r3, [pc, #624]	@ (8007738 <_dtoa_r+0x580>)
 80074c6:	f007 020f 	and.w	r2, r7, #15
 80074ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074ce:	ed93 7b00 	vldr	d7, [r3]
 80074d2:	05f8      	lsls	r0, r7, #23
 80074d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80074d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80074dc:	d516      	bpl.n	800750c <_dtoa_r+0x354>
 80074de:	4b97      	ldr	r3, [pc, #604]	@ (800773c <_dtoa_r+0x584>)
 80074e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80074e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074e8:	f7f9 f9b0 	bl	800084c <__aeabi_ddiv>
 80074ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074f0:	f004 040f 	and.w	r4, r4, #15
 80074f4:	2603      	movs	r6, #3
 80074f6:	4d91      	ldr	r5, [pc, #580]	@ (800773c <_dtoa_r+0x584>)
 80074f8:	b954      	cbnz	r4, 8007510 <_dtoa_r+0x358>
 80074fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80074fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007502:	f7f9 f9a3 	bl	800084c <__aeabi_ddiv>
 8007506:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800750a:	e028      	b.n	800755e <_dtoa_r+0x3a6>
 800750c:	2602      	movs	r6, #2
 800750e:	e7f2      	b.n	80074f6 <_dtoa_r+0x33e>
 8007510:	07e1      	lsls	r1, r4, #31
 8007512:	d508      	bpl.n	8007526 <_dtoa_r+0x36e>
 8007514:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007518:	e9d5 2300 	ldrd	r2, r3, [r5]
 800751c:	f7f9 f86c 	bl	80005f8 <__aeabi_dmul>
 8007520:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007524:	3601      	adds	r6, #1
 8007526:	1064      	asrs	r4, r4, #1
 8007528:	3508      	adds	r5, #8
 800752a:	e7e5      	b.n	80074f8 <_dtoa_r+0x340>
 800752c:	f000 80af 	beq.w	800768e <_dtoa_r+0x4d6>
 8007530:	427c      	negs	r4, r7
 8007532:	4b81      	ldr	r3, [pc, #516]	@ (8007738 <_dtoa_r+0x580>)
 8007534:	4d81      	ldr	r5, [pc, #516]	@ (800773c <_dtoa_r+0x584>)
 8007536:	f004 020f 	and.w	r2, r4, #15
 800753a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800753e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007542:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007546:	f7f9 f857 	bl	80005f8 <__aeabi_dmul>
 800754a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800754e:	1124      	asrs	r4, r4, #4
 8007550:	2300      	movs	r3, #0
 8007552:	2602      	movs	r6, #2
 8007554:	2c00      	cmp	r4, #0
 8007556:	f040 808f 	bne.w	8007678 <_dtoa_r+0x4c0>
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1d3      	bne.n	8007506 <_dtoa_r+0x34e>
 800755e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007560:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 8094 	beq.w	8007692 <_dtoa_r+0x4da>
 800756a:	4b75      	ldr	r3, [pc, #468]	@ (8007740 <_dtoa_r+0x588>)
 800756c:	2200      	movs	r2, #0
 800756e:	4620      	mov	r0, r4
 8007570:	4629      	mov	r1, r5
 8007572:	f7f9 fab3 	bl	8000adc <__aeabi_dcmplt>
 8007576:	2800      	cmp	r0, #0
 8007578:	f000 808b 	beq.w	8007692 <_dtoa_r+0x4da>
 800757c:	9b03      	ldr	r3, [sp, #12]
 800757e:	2b00      	cmp	r3, #0
 8007580:	f000 8087 	beq.w	8007692 <_dtoa_r+0x4da>
 8007584:	f1bb 0f00 	cmp.w	fp, #0
 8007588:	dd34      	ble.n	80075f4 <_dtoa_r+0x43c>
 800758a:	4620      	mov	r0, r4
 800758c:	4b6d      	ldr	r3, [pc, #436]	@ (8007744 <_dtoa_r+0x58c>)
 800758e:	2200      	movs	r2, #0
 8007590:	4629      	mov	r1, r5
 8007592:	f7f9 f831 	bl	80005f8 <__aeabi_dmul>
 8007596:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800759a:	f107 38ff 	add.w	r8, r7, #4294967295
 800759e:	3601      	adds	r6, #1
 80075a0:	465c      	mov	r4, fp
 80075a2:	4630      	mov	r0, r6
 80075a4:	f7f8 ffbe 	bl	8000524 <__aeabi_i2d>
 80075a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075ac:	f7f9 f824 	bl	80005f8 <__aeabi_dmul>
 80075b0:	4b65      	ldr	r3, [pc, #404]	@ (8007748 <_dtoa_r+0x590>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	f7f8 fe6a 	bl	800028c <__adddf3>
 80075b8:	4605      	mov	r5, r0
 80075ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80075be:	2c00      	cmp	r4, #0
 80075c0:	d16a      	bne.n	8007698 <_dtoa_r+0x4e0>
 80075c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075c6:	4b61      	ldr	r3, [pc, #388]	@ (800774c <_dtoa_r+0x594>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	f7f8 fe5d 	bl	8000288 <__aeabi_dsub>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075d6:	462a      	mov	r2, r5
 80075d8:	4633      	mov	r3, r6
 80075da:	f7f9 fa9d 	bl	8000b18 <__aeabi_dcmpgt>
 80075de:	2800      	cmp	r0, #0
 80075e0:	f040 8298 	bne.w	8007b14 <_dtoa_r+0x95c>
 80075e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075e8:	462a      	mov	r2, r5
 80075ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80075ee:	f7f9 fa75 	bl	8000adc <__aeabi_dcmplt>
 80075f2:	bb38      	cbnz	r0, 8007644 <_dtoa_r+0x48c>
 80075f4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80075f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80075fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f2c0 8157 	blt.w	80078b2 <_dtoa_r+0x6fa>
 8007604:	2f0e      	cmp	r7, #14
 8007606:	f300 8154 	bgt.w	80078b2 <_dtoa_r+0x6fa>
 800760a:	4b4b      	ldr	r3, [pc, #300]	@ (8007738 <_dtoa_r+0x580>)
 800760c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007610:	ed93 7b00 	vldr	d7, [r3]
 8007614:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007616:	2b00      	cmp	r3, #0
 8007618:	ed8d 7b00 	vstr	d7, [sp]
 800761c:	f280 80e5 	bge.w	80077ea <_dtoa_r+0x632>
 8007620:	9b03      	ldr	r3, [sp, #12]
 8007622:	2b00      	cmp	r3, #0
 8007624:	f300 80e1 	bgt.w	80077ea <_dtoa_r+0x632>
 8007628:	d10c      	bne.n	8007644 <_dtoa_r+0x48c>
 800762a:	4b48      	ldr	r3, [pc, #288]	@ (800774c <_dtoa_r+0x594>)
 800762c:	2200      	movs	r2, #0
 800762e:	ec51 0b17 	vmov	r0, r1, d7
 8007632:	f7f8 ffe1 	bl	80005f8 <__aeabi_dmul>
 8007636:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800763a:	f7f9 fa63 	bl	8000b04 <__aeabi_dcmpge>
 800763e:	2800      	cmp	r0, #0
 8007640:	f000 8266 	beq.w	8007b10 <_dtoa_r+0x958>
 8007644:	2400      	movs	r4, #0
 8007646:	4625      	mov	r5, r4
 8007648:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800764a:	4656      	mov	r6, sl
 800764c:	ea6f 0803 	mvn.w	r8, r3
 8007650:	2700      	movs	r7, #0
 8007652:	4621      	mov	r1, r4
 8007654:	4648      	mov	r0, r9
 8007656:	f000 fcbf 	bl	8007fd8 <_Bfree>
 800765a:	2d00      	cmp	r5, #0
 800765c:	f000 80bd 	beq.w	80077da <_dtoa_r+0x622>
 8007660:	b12f      	cbz	r7, 800766e <_dtoa_r+0x4b6>
 8007662:	42af      	cmp	r7, r5
 8007664:	d003      	beq.n	800766e <_dtoa_r+0x4b6>
 8007666:	4639      	mov	r1, r7
 8007668:	4648      	mov	r0, r9
 800766a:	f000 fcb5 	bl	8007fd8 <_Bfree>
 800766e:	4629      	mov	r1, r5
 8007670:	4648      	mov	r0, r9
 8007672:	f000 fcb1 	bl	8007fd8 <_Bfree>
 8007676:	e0b0      	b.n	80077da <_dtoa_r+0x622>
 8007678:	07e2      	lsls	r2, r4, #31
 800767a:	d505      	bpl.n	8007688 <_dtoa_r+0x4d0>
 800767c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007680:	f7f8 ffba 	bl	80005f8 <__aeabi_dmul>
 8007684:	3601      	adds	r6, #1
 8007686:	2301      	movs	r3, #1
 8007688:	1064      	asrs	r4, r4, #1
 800768a:	3508      	adds	r5, #8
 800768c:	e762      	b.n	8007554 <_dtoa_r+0x39c>
 800768e:	2602      	movs	r6, #2
 8007690:	e765      	b.n	800755e <_dtoa_r+0x3a6>
 8007692:	9c03      	ldr	r4, [sp, #12]
 8007694:	46b8      	mov	r8, r7
 8007696:	e784      	b.n	80075a2 <_dtoa_r+0x3ea>
 8007698:	4b27      	ldr	r3, [pc, #156]	@ (8007738 <_dtoa_r+0x580>)
 800769a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800769c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076a4:	4454      	add	r4, sl
 80076a6:	2900      	cmp	r1, #0
 80076a8:	d054      	beq.n	8007754 <_dtoa_r+0x59c>
 80076aa:	4929      	ldr	r1, [pc, #164]	@ (8007750 <_dtoa_r+0x598>)
 80076ac:	2000      	movs	r0, #0
 80076ae:	f7f9 f8cd 	bl	800084c <__aeabi_ddiv>
 80076b2:	4633      	mov	r3, r6
 80076b4:	462a      	mov	r2, r5
 80076b6:	f7f8 fde7 	bl	8000288 <__aeabi_dsub>
 80076ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80076be:	4656      	mov	r6, sl
 80076c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076c4:	f7f9 fa48 	bl	8000b58 <__aeabi_d2iz>
 80076c8:	4605      	mov	r5, r0
 80076ca:	f7f8 ff2b 	bl	8000524 <__aeabi_i2d>
 80076ce:	4602      	mov	r2, r0
 80076d0:	460b      	mov	r3, r1
 80076d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076d6:	f7f8 fdd7 	bl	8000288 <__aeabi_dsub>
 80076da:	3530      	adds	r5, #48	@ 0x30
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076e4:	f806 5b01 	strb.w	r5, [r6], #1
 80076e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80076ec:	f7f9 f9f6 	bl	8000adc <__aeabi_dcmplt>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d172      	bne.n	80077da <_dtoa_r+0x622>
 80076f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076f8:	4911      	ldr	r1, [pc, #68]	@ (8007740 <_dtoa_r+0x588>)
 80076fa:	2000      	movs	r0, #0
 80076fc:	f7f8 fdc4 	bl	8000288 <__aeabi_dsub>
 8007700:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007704:	f7f9 f9ea 	bl	8000adc <__aeabi_dcmplt>
 8007708:	2800      	cmp	r0, #0
 800770a:	f040 80b4 	bne.w	8007876 <_dtoa_r+0x6be>
 800770e:	42a6      	cmp	r6, r4
 8007710:	f43f af70 	beq.w	80075f4 <_dtoa_r+0x43c>
 8007714:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007718:	4b0a      	ldr	r3, [pc, #40]	@ (8007744 <_dtoa_r+0x58c>)
 800771a:	2200      	movs	r2, #0
 800771c:	f7f8 ff6c 	bl	80005f8 <__aeabi_dmul>
 8007720:	4b08      	ldr	r3, [pc, #32]	@ (8007744 <_dtoa_r+0x58c>)
 8007722:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007726:	2200      	movs	r2, #0
 8007728:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800772c:	f7f8 ff64 	bl	80005f8 <__aeabi_dmul>
 8007730:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007734:	e7c4      	b.n	80076c0 <_dtoa_r+0x508>
 8007736:	bf00      	nop
 8007738:	08021828 	.word	0x08021828
 800773c:	08021800 	.word	0x08021800
 8007740:	3ff00000 	.word	0x3ff00000
 8007744:	40240000 	.word	0x40240000
 8007748:	401c0000 	.word	0x401c0000
 800774c:	40140000 	.word	0x40140000
 8007750:	3fe00000 	.word	0x3fe00000
 8007754:	4631      	mov	r1, r6
 8007756:	4628      	mov	r0, r5
 8007758:	f7f8 ff4e 	bl	80005f8 <__aeabi_dmul>
 800775c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007760:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007762:	4656      	mov	r6, sl
 8007764:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007768:	f7f9 f9f6 	bl	8000b58 <__aeabi_d2iz>
 800776c:	4605      	mov	r5, r0
 800776e:	f7f8 fed9 	bl	8000524 <__aeabi_i2d>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800777a:	f7f8 fd85 	bl	8000288 <__aeabi_dsub>
 800777e:	3530      	adds	r5, #48	@ 0x30
 8007780:	f806 5b01 	strb.w	r5, [r6], #1
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	42a6      	cmp	r6, r4
 800778a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800778e:	f04f 0200 	mov.w	r2, #0
 8007792:	d124      	bne.n	80077de <_dtoa_r+0x626>
 8007794:	4baf      	ldr	r3, [pc, #700]	@ (8007a54 <_dtoa_r+0x89c>)
 8007796:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800779a:	f7f8 fd77 	bl	800028c <__adddf3>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077a6:	f7f9 f9b7 	bl	8000b18 <__aeabi_dcmpgt>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d163      	bne.n	8007876 <_dtoa_r+0x6be>
 80077ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80077b2:	49a8      	ldr	r1, [pc, #672]	@ (8007a54 <_dtoa_r+0x89c>)
 80077b4:	2000      	movs	r0, #0
 80077b6:	f7f8 fd67 	bl	8000288 <__aeabi_dsub>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077c2:	f7f9 f98b 	bl	8000adc <__aeabi_dcmplt>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	f43f af14 	beq.w	80075f4 <_dtoa_r+0x43c>
 80077cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80077ce:	1e73      	subs	r3, r6, #1
 80077d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80077d6:	2b30      	cmp	r3, #48	@ 0x30
 80077d8:	d0f8      	beq.n	80077cc <_dtoa_r+0x614>
 80077da:	4647      	mov	r7, r8
 80077dc:	e03b      	b.n	8007856 <_dtoa_r+0x69e>
 80077de:	4b9e      	ldr	r3, [pc, #632]	@ (8007a58 <_dtoa_r+0x8a0>)
 80077e0:	f7f8 ff0a 	bl	80005f8 <__aeabi_dmul>
 80077e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077e8:	e7bc      	b.n	8007764 <_dtoa_r+0x5ac>
 80077ea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80077ee:	4656      	mov	r6, sl
 80077f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077f4:	4620      	mov	r0, r4
 80077f6:	4629      	mov	r1, r5
 80077f8:	f7f9 f828 	bl	800084c <__aeabi_ddiv>
 80077fc:	f7f9 f9ac 	bl	8000b58 <__aeabi_d2iz>
 8007800:	4680      	mov	r8, r0
 8007802:	f7f8 fe8f 	bl	8000524 <__aeabi_i2d>
 8007806:	e9dd 2300 	ldrd	r2, r3, [sp]
 800780a:	f7f8 fef5 	bl	80005f8 <__aeabi_dmul>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	4620      	mov	r0, r4
 8007814:	4629      	mov	r1, r5
 8007816:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800781a:	f7f8 fd35 	bl	8000288 <__aeabi_dsub>
 800781e:	f806 4b01 	strb.w	r4, [r6], #1
 8007822:	9d03      	ldr	r5, [sp, #12]
 8007824:	eba6 040a 	sub.w	r4, r6, sl
 8007828:	42a5      	cmp	r5, r4
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	d133      	bne.n	8007898 <_dtoa_r+0x6e0>
 8007830:	f7f8 fd2c 	bl	800028c <__adddf3>
 8007834:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007838:	4604      	mov	r4, r0
 800783a:	460d      	mov	r5, r1
 800783c:	f7f9 f96c 	bl	8000b18 <__aeabi_dcmpgt>
 8007840:	b9c0      	cbnz	r0, 8007874 <_dtoa_r+0x6bc>
 8007842:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007846:	4620      	mov	r0, r4
 8007848:	4629      	mov	r1, r5
 800784a:	f7f9 f93d 	bl	8000ac8 <__aeabi_dcmpeq>
 800784e:	b110      	cbz	r0, 8007856 <_dtoa_r+0x69e>
 8007850:	f018 0f01 	tst.w	r8, #1
 8007854:	d10e      	bne.n	8007874 <_dtoa_r+0x6bc>
 8007856:	9902      	ldr	r1, [sp, #8]
 8007858:	4648      	mov	r0, r9
 800785a:	f000 fbbd 	bl	8007fd8 <_Bfree>
 800785e:	2300      	movs	r3, #0
 8007860:	7033      	strb	r3, [r6, #0]
 8007862:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007864:	3701      	adds	r7, #1
 8007866:	601f      	str	r7, [r3, #0]
 8007868:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 824b 	beq.w	8007d06 <_dtoa_r+0xb4e>
 8007870:	601e      	str	r6, [r3, #0]
 8007872:	e248      	b.n	8007d06 <_dtoa_r+0xb4e>
 8007874:	46b8      	mov	r8, r7
 8007876:	4633      	mov	r3, r6
 8007878:	461e      	mov	r6, r3
 800787a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800787e:	2a39      	cmp	r2, #57	@ 0x39
 8007880:	d106      	bne.n	8007890 <_dtoa_r+0x6d8>
 8007882:	459a      	cmp	sl, r3
 8007884:	d1f8      	bne.n	8007878 <_dtoa_r+0x6c0>
 8007886:	2230      	movs	r2, #48	@ 0x30
 8007888:	f108 0801 	add.w	r8, r8, #1
 800788c:	f88a 2000 	strb.w	r2, [sl]
 8007890:	781a      	ldrb	r2, [r3, #0]
 8007892:	3201      	adds	r2, #1
 8007894:	701a      	strb	r2, [r3, #0]
 8007896:	e7a0      	b.n	80077da <_dtoa_r+0x622>
 8007898:	4b6f      	ldr	r3, [pc, #444]	@ (8007a58 <_dtoa_r+0x8a0>)
 800789a:	2200      	movs	r2, #0
 800789c:	f7f8 feac 	bl	80005f8 <__aeabi_dmul>
 80078a0:	2200      	movs	r2, #0
 80078a2:	2300      	movs	r3, #0
 80078a4:	4604      	mov	r4, r0
 80078a6:	460d      	mov	r5, r1
 80078a8:	f7f9 f90e 	bl	8000ac8 <__aeabi_dcmpeq>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	d09f      	beq.n	80077f0 <_dtoa_r+0x638>
 80078b0:	e7d1      	b.n	8007856 <_dtoa_r+0x69e>
 80078b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078b4:	2a00      	cmp	r2, #0
 80078b6:	f000 80ea 	beq.w	8007a8e <_dtoa_r+0x8d6>
 80078ba:	9a07      	ldr	r2, [sp, #28]
 80078bc:	2a01      	cmp	r2, #1
 80078be:	f300 80cd 	bgt.w	8007a5c <_dtoa_r+0x8a4>
 80078c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80078c4:	2a00      	cmp	r2, #0
 80078c6:	f000 80c1 	beq.w	8007a4c <_dtoa_r+0x894>
 80078ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80078ce:	9c08      	ldr	r4, [sp, #32]
 80078d0:	9e00      	ldr	r6, [sp, #0]
 80078d2:	9a00      	ldr	r2, [sp, #0]
 80078d4:	441a      	add	r2, r3
 80078d6:	9200      	str	r2, [sp, #0]
 80078d8:	9a06      	ldr	r2, [sp, #24]
 80078da:	2101      	movs	r1, #1
 80078dc:	441a      	add	r2, r3
 80078de:	4648      	mov	r0, r9
 80078e0:	9206      	str	r2, [sp, #24]
 80078e2:	f000 fc77 	bl	80081d4 <__i2b>
 80078e6:	4605      	mov	r5, r0
 80078e8:	b166      	cbz	r6, 8007904 <_dtoa_r+0x74c>
 80078ea:	9b06      	ldr	r3, [sp, #24]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	dd09      	ble.n	8007904 <_dtoa_r+0x74c>
 80078f0:	42b3      	cmp	r3, r6
 80078f2:	9a00      	ldr	r2, [sp, #0]
 80078f4:	bfa8      	it	ge
 80078f6:	4633      	movge	r3, r6
 80078f8:	1ad2      	subs	r2, r2, r3
 80078fa:	9200      	str	r2, [sp, #0]
 80078fc:	9a06      	ldr	r2, [sp, #24]
 80078fe:	1af6      	subs	r6, r6, r3
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	9306      	str	r3, [sp, #24]
 8007904:	9b08      	ldr	r3, [sp, #32]
 8007906:	b30b      	cbz	r3, 800794c <_dtoa_r+0x794>
 8007908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 80c6 	beq.w	8007a9c <_dtoa_r+0x8e4>
 8007910:	2c00      	cmp	r4, #0
 8007912:	f000 80c0 	beq.w	8007a96 <_dtoa_r+0x8de>
 8007916:	4629      	mov	r1, r5
 8007918:	4622      	mov	r2, r4
 800791a:	4648      	mov	r0, r9
 800791c:	f000 fd12 	bl	8008344 <__pow5mult>
 8007920:	9a02      	ldr	r2, [sp, #8]
 8007922:	4601      	mov	r1, r0
 8007924:	4605      	mov	r5, r0
 8007926:	4648      	mov	r0, r9
 8007928:	f000 fc6a 	bl	8008200 <__multiply>
 800792c:	9902      	ldr	r1, [sp, #8]
 800792e:	4680      	mov	r8, r0
 8007930:	4648      	mov	r0, r9
 8007932:	f000 fb51 	bl	8007fd8 <_Bfree>
 8007936:	9b08      	ldr	r3, [sp, #32]
 8007938:	1b1b      	subs	r3, r3, r4
 800793a:	9308      	str	r3, [sp, #32]
 800793c:	f000 80b1 	beq.w	8007aa2 <_dtoa_r+0x8ea>
 8007940:	9a08      	ldr	r2, [sp, #32]
 8007942:	4641      	mov	r1, r8
 8007944:	4648      	mov	r0, r9
 8007946:	f000 fcfd 	bl	8008344 <__pow5mult>
 800794a:	9002      	str	r0, [sp, #8]
 800794c:	2101      	movs	r1, #1
 800794e:	4648      	mov	r0, r9
 8007950:	f000 fc40 	bl	80081d4 <__i2b>
 8007954:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007956:	4604      	mov	r4, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 81d8 	beq.w	8007d0e <_dtoa_r+0xb56>
 800795e:	461a      	mov	r2, r3
 8007960:	4601      	mov	r1, r0
 8007962:	4648      	mov	r0, r9
 8007964:	f000 fcee 	bl	8008344 <__pow5mult>
 8007968:	9b07      	ldr	r3, [sp, #28]
 800796a:	2b01      	cmp	r3, #1
 800796c:	4604      	mov	r4, r0
 800796e:	f300 809f 	bgt.w	8007ab0 <_dtoa_r+0x8f8>
 8007972:	9b04      	ldr	r3, [sp, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	f040 8097 	bne.w	8007aa8 <_dtoa_r+0x8f0>
 800797a:	9b05      	ldr	r3, [sp, #20]
 800797c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007980:	2b00      	cmp	r3, #0
 8007982:	f040 8093 	bne.w	8007aac <_dtoa_r+0x8f4>
 8007986:	9b05      	ldr	r3, [sp, #20]
 8007988:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800798c:	0d1b      	lsrs	r3, r3, #20
 800798e:	051b      	lsls	r3, r3, #20
 8007990:	b133      	cbz	r3, 80079a0 <_dtoa_r+0x7e8>
 8007992:	9b00      	ldr	r3, [sp, #0]
 8007994:	3301      	adds	r3, #1
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	9b06      	ldr	r3, [sp, #24]
 800799a:	3301      	adds	r3, #1
 800799c:	9306      	str	r3, [sp, #24]
 800799e:	2301      	movs	r3, #1
 80079a0:	9308      	str	r3, [sp, #32]
 80079a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 81b8 	beq.w	8007d1a <_dtoa_r+0xb62>
 80079aa:	6923      	ldr	r3, [r4, #16]
 80079ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079b0:	6918      	ldr	r0, [r3, #16]
 80079b2:	f000 fbc3 	bl	800813c <__hi0bits>
 80079b6:	f1c0 0020 	rsb	r0, r0, #32
 80079ba:	9b06      	ldr	r3, [sp, #24]
 80079bc:	4418      	add	r0, r3
 80079be:	f010 001f 	ands.w	r0, r0, #31
 80079c2:	f000 8082 	beq.w	8007aca <_dtoa_r+0x912>
 80079c6:	f1c0 0320 	rsb	r3, r0, #32
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	dd73      	ble.n	8007ab6 <_dtoa_r+0x8fe>
 80079ce:	9b00      	ldr	r3, [sp, #0]
 80079d0:	f1c0 001c 	rsb	r0, r0, #28
 80079d4:	4403      	add	r3, r0
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	9b06      	ldr	r3, [sp, #24]
 80079da:	4403      	add	r3, r0
 80079dc:	4406      	add	r6, r0
 80079de:	9306      	str	r3, [sp, #24]
 80079e0:	9b00      	ldr	r3, [sp, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	dd05      	ble.n	80079f2 <_dtoa_r+0x83a>
 80079e6:	9902      	ldr	r1, [sp, #8]
 80079e8:	461a      	mov	r2, r3
 80079ea:	4648      	mov	r0, r9
 80079ec:	f000 fd04 	bl	80083f8 <__lshift>
 80079f0:	9002      	str	r0, [sp, #8]
 80079f2:	9b06      	ldr	r3, [sp, #24]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	dd05      	ble.n	8007a04 <_dtoa_r+0x84c>
 80079f8:	4621      	mov	r1, r4
 80079fa:	461a      	mov	r2, r3
 80079fc:	4648      	mov	r0, r9
 80079fe:	f000 fcfb 	bl	80083f8 <__lshift>
 8007a02:	4604      	mov	r4, r0
 8007a04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d061      	beq.n	8007ace <_dtoa_r+0x916>
 8007a0a:	9802      	ldr	r0, [sp, #8]
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	f000 fd5f 	bl	80084d0 <__mcmp>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	da5b      	bge.n	8007ace <_dtoa_r+0x916>
 8007a16:	2300      	movs	r3, #0
 8007a18:	9902      	ldr	r1, [sp, #8]
 8007a1a:	220a      	movs	r2, #10
 8007a1c:	4648      	mov	r0, r9
 8007a1e:	f000 fafd 	bl	800801c <__multadd>
 8007a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a24:	9002      	str	r0, [sp, #8]
 8007a26:	f107 38ff 	add.w	r8, r7, #4294967295
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 8177 	beq.w	8007d1e <_dtoa_r+0xb66>
 8007a30:	4629      	mov	r1, r5
 8007a32:	2300      	movs	r3, #0
 8007a34:	220a      	movs	r2, #10
 8007a36:	4648      	mov	r0, r9
 8007a38:	f000 faf0 	bl	800801c <__multadd>
 8007a3c:	f1bb 0f00 	cmp.w	fp, #0
 8007a40:	4605      	mov	r5, r0
 8007a42:	dc6f      	bgt.n	8007b24 <_dtoa_r+0x96c>
 8007a44:	9b07      	ldr	r3, [sp, #28]
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	dc49      	bgt.n	8007ade <_dtoa_r+0x926>
 8007a4a:	e06b      	b.n	8007b24 <_dtoa_r+0x96c>
 8007a4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007a52:	e73c      	b.n	80078ce <_dtoa_r+0x716>
 8007a54:	3fe00000 	.word	0x3fe00000
 8007a58:	40240000 	.word	0x40240000
 8007a5c:	9b03      	ldr	r3, [sp, #12]
 8007a5e:	1e5c      	subs	r4, r3, #1
 8007a60:	9b08      	ldr	r3, [sp, #32]
 8007a62:	42a3      	cmp	r3, r4
 8007a64:	db09      	blt.n	8007a7a <_dtoa_r+0x8c2>
 8007a66:	1b1c      	subs	r4, r3, r4
 8007a68:	9b03      	ldr	r3, [sp, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f6bf af30 	bge.w	80078d0 <_dtoa_r+0x718>
 8007a70:	9b00      	ldr	r3, [sp, #0]
 8007a72:	9a03      	ldr	r2, [sp, #12]
 8007a74:	1a9e      	subs	r6, r3, r2
 8007a76:	2300      	movs	r3, #0
 8007a78:	e72b      	b.n	80078d2 <_dtoa_r+0x71a>
 8007a7a:	9b08      	ldr	r3, [sp, #32]
 8007a7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a7e:	9408      	str	r4, [sp, #32]
 8007a80:	1ae3      	subs	r3, r4, r3
 8007a82:	441a      	add	r2, r3
 8007a84:	9e00      	ldr	r6, [sp, #0]
 8007a86:	9b03      	ldr	r3, [sp, #12]
 8007a88:	920d      	str	r2, [sp, #52]	@ 0x34
 8007a8a:	2400      	movs	r4, #0
 8007a8c:	e721      	b.n	80078d2 <_dtoa_r+0x71a>
 8007a8e:	9c08      	ldr	r4, [sp, #32]
 8007a90:	9e00      	ldr	r6, [sp, #0]
 8007a92:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007a94:	e728      	b.n	80078e8 <_dtoa_r+0x730>
 8007a96:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007a9a:	e751      	b.n	8007940 <_dtoa_r+0x788>
 8007a9c:	9a08      	ldr	r2, [sp, #32]
 8007a9e:	9902      	ldr	r1, [sp, #8]
 8007aa0:	e750      	b.n	8007944 <_dtoa_r+0x78c>
 8007aa2:	f8cd 8008 	str.w	r8, [sp, #8]
 8007aa6:	e751      	b.n	800794c <_dtoa_r+0x794>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	e779      	b.n	80079a0 <_dtoa_r+0x7e8>
 8007aac:	9b04      	ldr	r3, [sp, #16]
 8007aae:	e777      	b.n	80079a0 <_dtoa_r+0x7e8>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	9308      	str	r3, [sp, #32]
 8007ab4:	e779      	b.n	80079aa <_dtoa_r+0x7f2>
 8007ab6:	d093      	beq.n	80079e0 <_dtoa_r+0x828>
 8007ab8:	9a00      	ldr	r2, [sp, #0]
 8007aba:	331c      	adds	r3, #28
 8007abc:	441a      	add	r2, r3
 8007abe:	9200      	str	r2, [sp, #0]
 8007ac0:	9a06      	ldr	r2, [sp, #24]
 8007ac2:	441a      	add	r2, r3
 8007ac4:	441e      	add	r6, r3
 8007ac6:	9206      	str	r2, [sp, #24]
 8007ac8:	e78a      	b.n	80079e0 <_dtoa_r+0x828>
 8007aca:	4603      	mov	r3, r0
 8007acc:	e7f4      	b.n	8007ab8 <_dtoa_r+0x900>
 8007ace:	9b03      	ldr	r3, [sp, #12]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	46b8      	mov	r8, r7
 8007ad4:	dc20      	bgt.n	8007b18 <_dtoa_r+0x960>
 8007ad6:	469b      	mov	fp, r3
 8007ad8:	9b07      	ldr	r3, [sp, #28]
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	dd1e      	ble.n	8007b1c <_dtoa_r+0x964>
 8007ade:	f1bb 0f00 	cmp.w	fp, #0
 8007ae2:	f47f adb1 	bne.w	8007648 <_dtoa_r+0x490>
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	465b      	mov	r3, fp
 8007aea:	2205      	movs	r2, #5
 8007aec:	4648      	mov	r0, r9
 8007aee:	f000 fa95 	bl	800801c <__multadd>
 8007af2:	4601      	mov	r1, r0
 8007af4:	4604      	mov	r4, r0
 8007af6:	9802      	ldr	r0, [sp, #8]
 8007af8:	f000 fcea 	bl	80084d0 <__mcmp>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	f77f ada3 	ble.w	8007648 <_dtoa_r+0x490>
 8007b02:	4656      	mov	r6, sl
 8007b04:	2331      	movs	r3, #49	@ 0x31
 8007b06:	f806 3b01 	strb.w	r3, [r6], #1
 8007b0a:	f108 0801 	add.w	r8, r8, #1
 8007b0e:	e59f      	b.n	8007650 <_dtoa_r+0x498>
 8007b10:	9c03      	ldr	r4, [sp, #12]
 8007b12:	46b8      	mov	r8, r7
 8007b14:	4625      	mov	r5, r4
 8007b16:	e7f4      	b.n	8007b02 <_dtoa_r+0x94a>
 8007b18:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 8101 	beq.w	8007d26 <_dtoa_r+0xb6e>
 8007b24:	2e00      	cmp	r6, #0
 8007b26:	dd05      	ble.n	8007b34 <_dtoa_r+0x97c>
 8007b28:	4629      	mov	r1, r5
 8007b2a:	4632      	mov	r2, r6
 8007b2c:	4648      	mov	r0, r9
 8007b2e:	f000 fc63 	bl	80083f8 <__lshift>
 8007b32:	4605      	mov	r5, r0
 8007b34:	9b08      	ldr	r3, [sp, #32]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d05c      	beq.n	8007bf4 <_dtoa_r+0xa3c>
 8007b3a:	6869      	ldr	r1, [r5, #4]
 8007b3c:	4648      	mov	r0, r9
 8007b3e:	f000 fa0b 	bl	8007f58 <_Balloc>
 8007b42:	4606      	mov	r6, r0
 8007b44:	b928      	cbnz	r0, 8007b52 <_dtoa_r+0x99a>
 8007b46:	4b82      	ldr	r3, [pc, #520]	@ (8007d50 <_dtoa_r+0xb98>)
 8007b48:	4602      	mov	r2, r0
 8007b4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b4e:	f7ff bb4a 	b.w	80071e6 <_dtoa_r+0x2e>
 8007b52:	692a      	ldr	r2, [r5, #16]
 8007b54:	3202      	adds	r2, #2
 8007b56:	0092      	lsls	r2, r2, #2
 8007b58:	f105 010c 	add.w	r1, r5, #12
 8007b5c:	300c      	adds	r0, #12
 8007b5e:	f7ff fa8c 	bl	800707a <memcpy>
 8007b62:	2201      	movs	r2, #1
 8007b64:	4631      	mov	r1, r6
 8007b66:	4648      	mov	r0, r9
 8007b68:	f000 fc46 	bl	80083f8 <__lshift>
 8007b6c:	f10a 0301 	add.w	r3, sl, #1
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	eb0a 030b 	add.w	r3, sl, fp
 8007b76:	9308      	str	r3, [sp, #32]
 8007b78:	9b04      	ldr	r3, [sp, #16]
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	462f      	mov	r7, r5
 8007b80:	9306      	str	r3, [sp, #24]
 8007b82:	4605      	mov	r5, r0
 8007b84:	9b00      	ldr	r3, [sp, #0]
 8007b86:	9802      	ldr	r0, [sp, #8]
 8007b88:	4621      	mov	r1, r4
 8007b8a:	f103 3bff 	add.w	fp, r3, #4294967295
 8007b8e:	f7ff fa89 	bl	80070a4 <quorem>
 8007b92:	4603      	mov	r3, r0
 8007b94:	3330      	adds	r3, #48	@ 0x30
 8007b96:	9003      	str	r0, [sp, #12]
 8007b98:	4639      	mov	r1, r7
 8007b9a:	9802      	ldr	r0, [sp, #8]
 8007b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b9e:	f000 fc97 	bl	80084d0 <__mcmp>
 8007ba2:	462a      	mov	r2, r5
 8007ba4:	9004      	str	r0, [sp, #16]
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	4648      	mov	r0, r9
 8007baa:	f000 fcad 	bl	8008508 <__mdiff>
 8007bae:	68c2      	ldr	r2, [r0, #12]
 8007bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	bb02      	cbnz	r2, 8007bf8 <_dtoa_r+0xa40>
 8007bb6:	4601      	mov	r1, r0
 8007bb8:	9802      	ldr	r0, [sp, #8]
 8007bba:	f000 fc89 	bl	80084d0 <__mcmp>
 8007bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	4631      	mov	r1, r6
 8007bc4:	4648      	mov	r0, r9
 8007bc6:	920c      	str	r2, [sp, #48]	@ 0x30
 8007bc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bca:	f000 fa05 	bl	8007fd8 <_Bfree>
 8007bce:	9b07      	ldr	r3, [sp, #28]
 8007bd0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007bd2:	9e00      	ldr	r6, [sp, #0]
 8007bd4:	ea42 0103 	orr.w	r1, r2, r3
 8007bd8:	9b06      	ldr	r3, [sp, #24]
 8007bda:	4319      	orrs	r1, r3
 8007bdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bde:	d10d      	bne.n	8007bfc <_dtoa_r+0xa44>
 8007be0:	2b39      	cmp	r3, #57	@ 0x39
 8007be2:	d027      	beq.n	8007c34 <_dtoa_r+0xa7c>
 8007be4:	9a04      	ldr	r2, [sp, #16]
 8007be6:	2a00      	cmp	r2, #0
 8007be8:	dd01      	ble.n	8007bee <_dtoa_r+0xa36>
 8007bea:	9b03      	ldr	r3, [sp, #12]
 8007bec:	3331      	adds	r3, #49	@ 0x31
 8007bee:	f88b 3000 	strb.w	r3, [fp]
 8007bf2:	e52e      	b.n	8007652 <_dtoa_r+0x49a>
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	e7b9      	b.n	8007b6c <_dtoa_r+0x9b4>
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	e7e2      	b.n	8007bc2 <_dtoa_r+0xa0a>
 8007bfc:	9904      	ldr	r1, [sp, #16]
 8007bfe:	2900      	cmp	r1, #0
 8007c00:	db04      	blt.n	8007c0c <_dtoa_r+0xa54>
 8007c02:	9807      	ldr	r0, [sp, #28]
 8007c04:	4301      	orrs	r1, r0
 8007c06:	9806      	ldr	r0, [sp, #24]
 8007c08:	4301      	orrs	r1, r0
 8007c0a:	d120      	bne.n	8007c4e <_dtoa_r+0xa96>
 8007c0c:	2a00      	cmp	r2, #0
 8007c0e:	ddee      	ble.n	8007bee <_dtoa_r+0xa36>
 8007c10:	9902      	ldr	r1, [sp, #8]
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	2201      	movs	r2, #1
 8007c16:	4648      	mov	r0, r9
 8007c18:	f000 fbee 	bl	80083f8 <__lshift>
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	9002      	str	r0, [sp, #8]
 8007c20:	f000 fc56 	bl	80084d0 <__mcmp>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	9b00      	ldr	r3, [sp, #0]
 8007c28:	dc02      	bgt.n	8007c30 <_dtoa_r+0xa78>
 8007c2a:	d1e0      	bne.n	8007bee <_dtoa_r+0xa36>
 8007c2c:	07da      	lsls	r2, r3, #31
 8007c2e:	d5de      	bpl.n	8007bee <_dtoa_r+0xa36>
 8007c30:	2b39      	cmp	r3, #57	@ 0x39
 8007c32:	d1da      	bne.n	8007bea <_dtoa_r+0xa32>
 8007c34:	2339      	movs	r3, #57	@ 0x39
 8007c36:	f88b 3000 	strb.w	r3, [fp]
 8007c3a:	4633      	mov	r3, r6
 8007c3c:	461e      	mov	r6, r3
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c44:	2a39      	cmp	r2, #57	@ 0x39
 8007c46:	d04e      	beq.n	8007ce6 <_dtoa_r+0xb2e>
 8007c48:	3201      	adds	r2, #1
 8007c4a:	701a      	strb	r2, [r3, #0]
 8007c4c:	e501      	b.n	8007652 <_dtoa_r+0x49a>
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	dd03      	ble.n	8007c5a <_dtoa_r+0xaa2>
 8007c52:	2b39      	cmp	r3, #57	@ 0x39
 8007c54:	d0ee      	beq.n	8007c34 <_dtoa_r+0xa7c>
 8007c56:	3301      	adds	r3, #1
 8007c58:	e7c9      	b.n	8007bee <_dtoa_r+0xa36>
 8007c5a:	9a00      	ldr	r2, [sp, #0]
 8007c5c:	9908      	ldr	r1, [sp, #32]
 8007c5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c62:	428a      	cmp	r2, r1
 8007c64:	d028      	beq.n	8007cb8 <_dtoa_r+0xb00>
 8007c66:	9902      	ldr	r1, [sp, #8]
 8007c68:	2300      	movs	r3, #0
 8007c6a:	220a      	movs	r2, #10
 8007c6c:	4648      	mov	r0, r9
 8007c6e:	f000 f9d5 	bl	800801c <__multadd>
 8007c72:	42af      	cmp	r7, r5
 8007c74:	9002      	str	r0, [sp, #8]
 8007c76:	f04f 0300 	mov.w	r3, #0
 8007c7a:	f04f 020a 	mov.w	r2, #10
 8007c7e:	4639      	mov	r1, r7
 8007c80:	4648      	mov	r0, r9
 8007c82:	d107      	bne.n	8007c94 <_dtoa_r+0xadc>
 8007c84:	f000 f9ca 	bl	800801c <__multadd>
 8007c88:	4607      	mov	r7, r0
 8007c8a:	4605      	mov	r5, r0
 8007c8c:	9b00      	ldr	r3, [sp, #0]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	e777      	b.n	8007b84 <_dtoa_r+0x9cc>
 8007c94:	f000 f9c2 	bl	800801c <__multadd>
 8007c98:	4629      	mov	r1, r5
 8007c9a:	4607      	mov	r7, r0
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	220a      	movs	r2, #10
 8007ca0:	4648      	mov	r0, r9
 8007ca2:	f000 f9bb 	bl	800801c <__multadd>
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	e7f0      	b.n	8007c8c <_dtoa_r+0xad4>
 8007caa:	f1bb 0f00 	cmp.w	fp, #0
 8007cae:	bfcc      	ite	gt
 8007cb0:	465e      	movgt	r6, fp
 8007cb2:	2601      	movle	r6, #1
 8007cb4:	4456      	add	r6, sl
 8007cb6:	2700      	movs	r7, #0
 8007cb8:	9902      	ldr	r1, [sp, #8]
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	4648      	mov	r0, r9
 8007cc0:	f000 fb9a 	bl	80083f8 <__lshift>
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	9002      	str	r0, [sp, #8]
 8007cc8:	f000 fc02 	bl	80084d0 <__mcmp>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	dcb4      	bgt.n	8007c3a <_dtoa_r+0xa82>
 8007cd0:	d102      	bne.n	8007cd8 <_dtoa_r+0xb20>
 8007cd2:	9b00      	ldr	r3, [sp, #0]
 8007cd4:	07db      	lsls	r3, r3, #31
 8007cd6:	d4b0      	bmi.n	8007c3a <_dtoa_r+0xa82>
 8007cd8:	4633      	mov	r3, r6
 8007cda:	461e      	mov	r6, r3
 8007cdc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ce0:	2a30      	cmp	r2, #48	@ 0x30
 8007ce2:	d0fa      	beq.n	8007cda <_dtoa_r+0xb22>
 8007ce4:	e4b5      	b.n	8007652 <_dtoa_r+0x49a>
 8007ce6:	459a      	cmp	sl, r3
 8007ce8:	d1a8      	bne.n	8007c3c <_dtoa_r+0xa84>
 8007cea:	2331      	movs	r3, #49	@ 0x31
 8007cec:	f108 0801 	add.w	r8, r8, #1
 8007cf0:	f88a 3000 	strb.w	r3, [sl]
 8007cf4:	e4ad      	b.n	8007652 <_dtoa_r+0x49a>
 8007cf6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cf8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007d54 <_dtoa_r+0xb9c>
 8007cfc:	b11b      	cbz	r3, 8007d06 <_dtoa_r+0xb4e>
 8007cfe:	f10a 0308 	add.w	r3, sl, #8
 8007d02:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	4650      	mov	r0, sl
 8007d08:	b017      	add	sp, #92	@ 0x5c
 8007d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0e:	9b07      	ldr	r3, [sp, #28]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	f77f ae2e 	ble.w	8007972 <_dtoa_r+0x7ba>
 8007d16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d18:	9308      	str	r3, [sp, #32]
 8007d1a:	2001      	movs	r0, #1
 8007d1c:	e64d      	b.n	80079ba <_dtoa_r+0x802>
 8007d1e:	f1bb 0f00 	cmp.w	fp, #0
 8007d22:	f77f aed9 	ble.w	8007ad8 <_dtoa_r+0x920>
 8007d26:	4656      	mov	r6, sl
 8007d28:	9802      	ldr	r0, [sp, #8]
 8007d2a:	4621      	mov	r1, r4
 8007d2c:	f7ff f9ba 	bl	80070a4 <quorem>
 8007d30:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007d34:	f806 3b01 	strb.w	r3, [r6], #1
 8007d38:	eba6 020a 	sub.w	r2, r6, sl
 8007d3c:	4593      	cmp	fp, r2
 8007d3e:	ddb4      	ble.n	8007caa <_dtoa_r+0xaf2>
 8007d40:	9902      	ldr	r1, [sp, #8]
 8007d42:	2300      	movs	r3, #0
 8007d44:	220a      	movs	r2, #10
 8007d46:	4648      	mov	r0, r9
 8007d48:	f000 f968 	bl	800801c <__multadd>
 8007d4c:	9002      	str	r0, [sp, #8]
 8007d4e:	e7eb      	b.n	8007d28 <_dtoa_r+0xb70>
 8007d50:	080216d1 	.word	0x080216d1
 8007d54:	08021655 	.word	0x08021655

08007d58 <_free_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	2900      	cmp	r1, #0
 8007d5e:	d041      	beq.n	8007de4 <_free_r+0x8c>
 8007d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d64:	1f0c      	subs	r4, r1, #4
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	bfb8      	it	lt
 8007d6a:	18e4      	addlt	r4, r4, r3
 8007d6c:	f000 f8e8 	bl	8007f40 <__malloc_lock>
 8007d70:	4a1d      	ldr	r2, [pc, #116]	@ (8007de8 <_free_r+0x90>)
 8007d72:	6813      	ldr	r3, [r2, #0]
 8007d74:	b933      	cbnz	r3, 8007d84 <_free_r+0x2c>
 8007d76:	6063      	str	r3, [r4, #4]
 8007d78:	6014      	str	r4, [r2, #0]
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d80:	f000 b8e4 	b.w	8007f4c <__malloc_unlock>
 8007d84:	42a3      	cmp	r3, r4
 8007d86:	d908      	bls.n	8007d9a <_free_r+0x42>
 8007d88:	6820      	ldr	r0, [r4, #0]
 8007d8a:	1821      	adds	r1, r4, r0
 8007d8c:	428b      	cmp	r3, r1
 8007d8e:	bf01      	itttt	eq
 8007d90:	6819      	ldreq	r1, [r3, #0]
 8007d92:	685b      	ldreq	r3, [r3, #4]
 8007d94:	1809      	addeq	r1, r1, r0
 8007d96:	6021      	streq	r1, [r4, #0]
 8007d98:	e7ed      	b.n	8007d76 <_free_r+0x1e>
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	b10b      	cbz	r3, 8007da4 <_free_r+0x4c>
 8007da0:	42a3      	cmp	r3, r4
 8007da2:	d9fa      	bls.n	8007d9a <_free_r+0x42>
 8007da4:	6811      	ldr	r1, [r2, #0]
 8007da6:	1850      	adds	r0, r2, r1
 8007da8:	42a0      	cmp	r0, r4
 8007daa:	d10b      	bne.n	8007dc4 <_free_r+0x6c>
 8007dac:	6820      	ldr	r0, [r4, #0]
 8007dae:	4401      	add	r1, r0
 8007db0:	1850      	adds	r0, r2, r1
 8007db2:	4283      	cmp	r3, r0
 8007db4:	6011      	str	r1, [r2, #0]
 8007db6:	d1e0      	bne.n	8007d7a <_free_r+0x22>
 8007db8:	6818      	ldr	r0, [r3, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	6053      	str	r3, [r2, #4]
 8007dbe:	4408      	add	r0, r1
 8007dc0:	6010      	str	r0, [r2, #0]
 8007dc2:	e7da      	b.n	8007d7a <_free_r+0x22>
 8007dc4:	d902      	bls.n	8007dcc <_free_r+0x74>
 8007dc6:	230c      	movs	r3, #12
 8007dc8:	602b      	str	r3, [r5, #0]
 8007dca:	e7d6      	b.n	8007d7a <_free_r+0x22>
 8007dcc:	6820      	ldr	r0, [r4, #0]
 8007dce:	1821      	adds	r1, r4, r0
 8007dd0:	428b      	cmp	r3, r1
 8007dd2:	bf04      	itt	eq
 8007dd4:	6819      	ldreq	r1, [r3, #0]
 8007dd6:	685b      	ldreq	r3, [r3, #4]
 8007dd8:	6063      	str	r3, [r4, #4]
 8007dda:	bf04      	itt	eq
 8007ddc:	1809      	addeq	r1, r1, r0
 8007dde:	6021      	streq	r1, [r4, #0]
 8007de0:	6054      	str	r4, [r2, #4]
 8007de2:	e7ca      	b.n	8007d7a <_free_r+0x22>
 8007de4:	bd38      	pop	{r3, r4, r5, pc}
 8007de6:	bf00      	nop
 8007de8:	20000538 	.word	0x20000538

08007dec <malloc>:
 8007dec:	4b02      	ldr	r3, [pc, #8]	@ (8007df8 <malloc+0xc>)
 8007dee:	4601      	mov	r1, r0
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	f000 b825 	b.w	8007e40 <_malloc_r>
 8007df6:	bf00      	nop
 8007df8:	20000088 	.word	0x20000088

08007dfc <sbrk_aligned>:
 8007dfc:	b570      	push	{r4, r5, r6, lr}
 8007dfe:	4e0f      	ldr	r6, [pc, #60]	@ (8007e3c <sbrk_aligned+0x40>)
 8007e00:	460c      	mov	r4, r1
 8007e02:	6831      	ldr	r1, [r6, #0]
 8007e04:	4605      	mov	r5, r0
 8007e06:	b911      	cbnz	r1, 8007e0e <sbrk_aligned+0x12>
 8007e08:	f001 fe04 	bl	8009a14 <_sbrk_r>
 8007e0c:	6030      	str	r0, [r6, #0]
 8007e0e:	4621      	mov	r1, r4
 8007e10:	4628      	mov	r0, r5
 8007e12:	f001 fdff 	bl	8009a14 <_sbrk_r>
 8007e16:	1c43      	adds	r3, r0, #1
 8007e18:	d103      	bne.n	8007e22 <sbrk_aligned+0x26>
 8007e1a:	f04f 34ff 	mov.w	r4, #4294967295
 8007e1e:	4620      	mov	r0, r4
 8007e20:	bd70      	pop	{r4, r5, r6, pc}
 8007e22:	1cc4      	adds	r4, r0, #3
 8007e24:	f024 0403 	bic.w	r4, r4, #3
 8007e28:	42a0      	cmp	r0, r4
 8007e2a:	d0f8      	beq.n	8007e1e <sbrk_aligned+0x22>
 8007e2c:	1a21      	subs	r1, r4, r0
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f001 fdf0 	bl	8009a14 <_sbrk_r>
 8007e34:	3001      	adds	r0, #1
 8007e36:	d1f2      	bne.n	8007e1e <sbrk_aligned+0x22>
 8007e38:	e7ef      	b.n	8007e1a <sbrk_aligned+0x1e>
 8007e3a:	bf00      	nop
 8007e3c:	20000534 	.word	0x20000534

08007e40 <_malloc_r>:
 8007e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e44:	1ccd      	adds	r5, r1, #3
 8007e46:	f025 0503 	bic.w	r5, r5, #3
 8007e4a:	3508      	adds	r5, #8
 8007e4c:	2d0c      	cmp	r5, #12
 8007e4e:	bf38      	it	cc
 8007e50:	250c      	movcc	r5, #12
 8007e52:	2d00      	cmp	r5, #0
 8007e54:	4606      	mov	r6, r0
 8007e56:	db01      	blt.n	8007e5c <_malloc_r+0x1c>
 8007e58:	42a9      	cmp	r1, r5
 8007e5a:	d904      	bls.n	8007e66 <_malloc_r+0x26>
 8007e5c:	230c      	movs	r3, #12
 8007e5e:	6033      	str	r3, [r6, #0]
 8007e60:	2000      	movs	r0, #0
 8007e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f3c <_malloc_r+0xfc>
 8007e6a:	f000 f869 	bl	8007f40 <__malloc_lock>
 8007e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e72:	461c      	mov	r4, r3
 8007e74:	bb44      	cbnz	r4, 8007ec8 <_malloc_r+0x88>
 8007e76:	4629      	mov	r1, r5
 8007e78:	4630      	mov	r0, r6
 8007e7a:	f7ff ffbf 	bl	8007dfc <sbrk_aligned>
 8007e7e:	1c43      	adds	r3, r0, #1
 8007e80:	4604      	mov	r4, r0
 8007e82:	d158      	bne.n	8007f36 <_malloc_r+0xf6>
 8007e84:	f8d8 4000 	ldr.w	r4, [r8]
 8007e88:	4627      	mov	r7, r4
 8007e8a:	2f00      	cmp	r7, #0
 8007e8c:	d143      	bne.n	8007f16 <_malloc_r+0xd6>
 8007e8e:	2c00      	cmp	r4, #0
 8007e90:	d04b      	beq.n	8007f2a <_malloc_r+0xea>
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	4639      	mov	r1, r7
 8007e96:	4630      	mov	r0, r6
 8007e98:	eb04 0903 	add.w	r9, r4, r3
 8007e9c:	f001 fdba 	bl	8009a14 <_sbrk_r>
 8007ea0:	4581      	cmp	r9, r0
 8007ea2:	d142      	bne.n	8007f2a <_malloc_r+0xea>
 8007ea4:	6821      	ldr	r1, [r4, #0]
 8007ea6:	1a6d      	subs	r5, r5, r1
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	4630      	mov	r0, r6
 8007eac:	f7ff ffa6 	bl	8007dfc <sbrk_aligned>
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	d03a      	beq.n	8007f2a <_malloc_r+0xea>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	442b      	add	r3, r5
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	f8d8 3000 	ldr.w	r3, [r8]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	bb62      	cbnz	r2, 8007f1c <_malloc_r+0xdc>
 8007ec2:	f8c8 7000 	str.w	r7, [r8]
 8007ec6:	e00f      	b.n	8007ee8 <_malloc_r+0xa8>
 8007ec8:	6822      	ldr	r2, [r4, #0]
 8007eca:	1b52      	subs	r2, r2, r5
 8007ecc:	d420      	bmi.n	8007f10 <_malloc_r+0xd0>
 8007ece:	2a0b      	cmp	r2, #11
 8007ed0:	d917      	bls.n	8007f02 <_malloc_r+0xc2>
 8007ed2:	1961      	adds	r1, r4, r5
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	6025      	str	r5, [r4, #0]
 8007ed8:	bf18      	it	ne
 8007eda:	6059      	strne	r1, [r3, #4]
 8007edc:	6863      	ldr	r3, [r4, #4]
 8007ede:	bf08      	it	eq
 8007ee0:	f8c8 1000 	streq.w	r1, [r8]
 8007ee4:	5162      	str	r2, [r4, r5]
 8007ee6:	604b      	str	r3, [r1, #4]
 8007ee8:	4630      	mov	r0, r6
 8007eea:	f000 f82f 	bl	8007f4c <__malloc_unlock>
 8007eee:	f104 000b 	add.w	r0, r4, #11
 8007ef2:	1d23      	adds	r3, r4, #4
 8007ef4:	f020 0007 	bic.w	r0, r0, #7
 8007ef8:	1ac2      	subs	r2, r0, r3
 8007efa:	bf1c      	itt	ne
 8007efc:	1a1b      	subne	r3, r3, r0
 8007efe:	50a3      	strne	r3, [r4, r2]
 8007f00:	e7af      	b.n	8007e62 <_malloc_r+0x22>
 8007f02:	6862      	ldr	r2, [r4, #4]
 8007f04:	42a3      	cmp	r3, r4
 8007f06:	bf0c      	ite	eq
 8007f08:	f8c8 2000 	streq.w	r2, [r8]
 8007f0c:	605a      	strne	r2, [r3, #4]
 8007f0e:	e7eb      	b.n	8007ee8 <_malloc_r+0xa8>
 8007f10:	4623      	mov	r3, r4
 8007f12:	6864      	ldr	r4, [r4, #4]
 8007f14:	e7ae      	b.n	8007e74 <_malloc_r+0x34>
 8007f16:	463c      	mov	r4, r7
 8007f18:	687f      	ldr	r7, [r7, #4]
 8007f1a:	e7b6      	b.n	8007e8a <_malloc_r+0x4a>
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	42a3      	cmp	r3, r4
 8007f22:	d1fb      	bne.n	8007f1c <_malloc_r+0xdc>
 8007f24:	2300      	movs	r3, #0
 8007f26:	6053      	str	r3, [r2, #4]
 8007f28:	e7de      	b.n	8007ee8 <_malloc_r+0xa8>
 8007f2a:	230c      	movs	r3, #12
 8007f2c:	6033      	str	r3, [r6, #0]
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f000 f80c 	bl	8007f4c <__malloc_unlock>
 8007f34:	e794      	b.n	8007e60 <_malloc_r+0x20>
 8007f36:	6005      	str	r5, [r0, #0]
 8007f38:	e7d6      	b.n	8007ee8 <_malloc_r+0xa8>
 8007f3a:	bf00      	nop
 8007f3c:	20000538 	.word	0x20000538

08007f40 <__malloc_lock>:
 8007f40:	4801      	ldr	r0, [pc, #4]	@ (8007f48 <__malloc_lock+0x8>)
 8007f42:	f7ff b898 	b.w	8007076 <__retarget_lock_acquire_recursive>
 8007f46:	bf00      	nop
 8007f48:	20000530 	.word	0x20000530

08007f4c <__malloc_unlock>:
 8007f4c:	4801      	ldr	r0, [pc, #4]	@ (8007f54 <__malloc_unlock+0x8>)
 8007f4e:	f7ff b893 	b.w	8007078 <__retarget_lock_release_recursive>
 8007f52:	bf00      	nop
 8007f54:	20000530 	.word	0x20000530

08007f58 <_Balloc>:
 8007f58:	b570      	push	{r4, r5, r6, lr}
 8007f5a:	69c6      	ldr	r6, [r0, #28]
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	460d      	mov	r5, r1
 8007f60:	b976      	cbnz	r6, 8007f80 <_Balloc+0x28>
 8007f62:	2010      	movs	r0, #16
 8007f64:	f7ff ff42 	bl	8007dec <malloc>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	61e0      	str	r0, [r4, #28]
 8007f6c:	b920      	cbnz	r0, 8007f78 <_Balloc+0x20>
 8007f6e:	4b18      	ldr	r3, [pc, #96]	@ (8007fd0 <_Balloc+0x78>)
 8007f70:	4818      	ldr	r0, [pc, #96]	@ (8007fd4 <_Balloc+0x7c>)
 8007f72:	216b      	movs	r1, #107	@ 0x6b
 8007f74:	f001 fd68 	bl	8009a48 <__assert_func>
 8007f78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f7c:	6006      	str	r6, [r0, #0]
 8007f7e:	60c6      	str	r6, [r0, #12]
 8007f80:	69e6      	ldr	r6, [r4, #28]
 8007f82:	68f3      	ldr	r3, [r6, #12]
 8007f84:	b183      	cbz	r3, 8007fa8 <_Balloc+0x50>
 8007f86:	69e3      	ldr	r3, [r4, #28]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f8e:	b9b8      	cbnz	r0, 8007fc0 <_Balloc+0x68>
 8007f90:	2101      	movs	r1, #1
 8007f92:	fa01 f605 	lsl.w	r6, r1, r5
 8007f96:	1d72      	adds	r2, r6, #5
 8007f98:	0092      	lsls	r2, r2, #2
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f001 fd72 	bl	8009a84 <_calloc_r>
 8007fa0:	b160      	cbz	r0, 8007fbc <_Balloc+0x64>
 8007fa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fa6:	e00e      	b.n	8007fc6 <_Balloc+0x6e>
 8007fa8:	2221      	movs	r2, #33	@ 0x21
 8007faa:	2104      	movs	r1, #4
 8007fac:	4620      	mov	r0, r4
 8007fae:	f001 fd69 	bl	8009a84 <_calloc_r>
 8007fb2:	69e3      	ldr	r3, [r4, #28]
 8007fb4:	60f0      	str	r0, [r6, #12]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e4      	bne.n	8007f86 <_Balloc+0x2e>
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	bd70      	pop	{r4, r5, r6, pc}
 8007fc0:	6802      	ldr	r2, [r0, #0]
 8007fc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fcc:	e7f7      	b.n	8007fbe <_Balloc+0x66>
 8007fce:	bf00      	nop
 8007fd0:	08021662 	.word	0x08021662
 8007fd4:	080216e2 	.word	0x080216e2

08007fd8 <_Bfree>:
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	69c6      	ldr	r6, [r0, #28]
 8007fdc:	4605      	mov	r5, r0
 8007fde:	460c      	mov	r4, r1
 8007fe0:	b976      	cbnz	r6, 8008000 <_Bfree+0x28>
 8007fe2:	2010      	movs	r0, #16
 8007fe4:	f7ff ff02 	bl	8007dec <malloc>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	61e8      	str	r0, [r5, #28]
 8007fec:	b920      	cbnz	r0, 8007ff8 <_Bfree+0x20>
 8007fee:	4b09      	ldr	r3, [pc, #36]	@ (8008014 <_Bfree+0x3c>)
 8007ff0:	4809      	ldr	r0, [pc, #36]	@ (8008018 <_Bfree+0x40>)
 8007ff2:	218f      	movs	r1, #143	@ 0x8f
 8007ff4:	f001 fd28 	bl	8009a48 <__assert_func>
 8007ff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ffc:	6006      	str	r6, [r0, #0]
 8007ffe:	60c6      	str	r6, [r0, #12]
 8008000:	b13c      	cbz	r4, 8008012 <_Bfree+0x3a>
 8008002:	69eb      	ldr	r3, [r5, #28]
 8008004:	6862      	ldr	r2, [r4, #4]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800800c:	6021      	str	r1, [r4, #0]
 800800e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008012:	bd70      	pop	{r4, r5, r6, pc}
 8008014:	08021662 	.word	0x08021662
 8008018:	080216e2 	.word	0x080216e2

0800801c <__multadd>:
 800801c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008020:	690d      	ldr	r5, [r1, #16]
 8008022:	4607      	mov	r7, r0
 8008024:	460c      	mov	r4, r1
 8008026:	461e      	mov	r6, r3
 8008028:	f101 0c14 	add.w	ip, r1, #20
 800802c:	2000      	movs	r0, #0
 800802e:	f8dc 3000 	ldr.w	r3, [ip]
 8008032:	b299      	uxth	r1, r3
 8008034:	fb02 6101 	mla	r1, r2, r1, r6
 8008038:	0c1e      	lsrs	r6, r3, #16
 800803a:	0c0b      	lsrs	r3, r1, #16
 800803c:	fb02 3306 	mla	r3, r2, r6, r3
 8008040:	b289      	uxth	r1, r1
 8008042:	3001      	adds	r0, #1
 8008044:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008048:	4285      	cmp	r5, r0
 800804a:	f84c 1b04 	str.w	r1, [ip], #4
 800804e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008052:	dcec      	bgt.n	800802e <__multadd+0x12>
 8008054:	b30e      	cbz	r6, 800809a <__multadd+0x7e>
 8008056:	68a3      	ldr	r3, [r4, #8]
 8008058:	42ab      	cmp	r3, r5
 800805a:	dc19      	bgt.n	8008090 <__multadd+0x74>
 800805c:	6861      	ldr	r1, [r4, #4]
 800805e:	4638      	mov	r0, r7
 8008060:	3101      	adds	r1, #1
 8008062:	f7ff ff79 	bl	8007f58 <_Balloc>
 8008066:	4680      	mov	r8, r0
 8008068:	b928      	cbnz	r0, 8008076 <__multadd+0x5a>
 800806a:	4602      	mov	r2, r0
 800806c:	4b0c      	ldr	r3, [pc, #48]	@ (80080a0 <__multadd+0x84>)
 800806e:	480d      	ldr	r0, [pc, #52]	@ (80080a4 <__multadd+0x88>)
 8008070:	21ba      	movs	r1, #186	@ 0xba
 8008072:	f001 fce9 	bl	8009a48 <__assert_func>
 8008076:	6922      	ldr	r2, [r4, #16]
 8008078:	3202      	adds	r2, #2
 800807a:	f104 010c 	add.w	r1, r4, #12
 800807e:	0092      	lsls	r2, r2, #2
 8008080:	300c      	adds	r0, #12
 8008082:	f7fe fffa 	bl	800707a <memcpy>
 8008086:	4621      	mov	r1, r4
 8008088:	4638      	mov	r0, r7
 800808a:	f7ff ffa5 	bl	8007fd8 <_Bfree>
 800808e:	4644      	mov	r4, r8
 8008090:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008094:	3501      	adds	r5, #1
 8008096:	615e      	str	r6, [r3, #20]
 8008098:	6125      	str	r5, [r4, #16]
 800809a:	4620      	mov	r0, r4
 800809c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080a0:	080216d1 	.word	0x080216d1
 80080a4:	080216e2 	.word	0x080216e2

080080a8 <__s2b>:
 80080a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080ac:	460c      	mov	r4, r1
 80080ae:	4615      	mov	r5, r2
 80080b0:	461f      	mov	r7, r3
 80080b2:	2209      	movs	r2, #9
 80080b4:	3308      	adds	r3, #8
 80080b6:	4606      	mov	r6, r0
 80080b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80080bc:	2100      	movs	r1, #0
 80080be:	2201      	movs	r2, #1
 80080c0:	429a      	cmp	r2, r3
 80080c2:	db09      	blt.n	80080d8 <__s2b+0x30>
 80080c4:	4630      	mov	r0, r6
 80080c6:	f7ff ff47 	bl	8007f58 <_Balloc>
 80080ca:	b940      	cbnz	r0, 80080de <__s2b+0x36>
 80080cc:	4602      	mov	r2, r0
 80080ce:	4b19      	ldr	r3, [pc, #100]	@ (8008134 <__s2b+0x8c>)
 80080d0:	4819      	ldr	r0, [pc, #100]	@ (8008138 <__s2b+0x90>)
 80080d2:	21d3      	movs	r1, #211	@ 0xd3
 80080d4:	f001 fcb8 	bl	8009a48 <__assert_func>
 80080d8:	0052      	lsls	r2, r2, #1
 80080da:	3101      	adds	r1, #1
 80080dc:	e7f0      	b.n	80080c0 <__s2b+0x18>
 80080de:	9b08      	ldr	r3, [sp, #32]
 80080e0:	6143      	str	r3, [r0, #20]
 80080e2:	2d09      	cmp	r5, #9
 80080e4:	f04f 0301 	mov.w	r3, #1
 80080e8:	6103      	str	r3, [r0, #16]
 80080ea:	dd16      	ble.n	800811a <__s2b+0x72>
 80080ec:	f104 0909 	add.w	r9, r4, #9
 80080f0:	46c8      	mov	r8, r9
 80080f2:	442c      	add	r4, r5
 80080f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80080f8:	4601      	mov	r1, r0
 80080fa:	3b30      	subs	r3, #48	@ 0x30
 80080fc:	220a      	movs	r2, #10
 80080fe:	4630      	mov	r0, r6
 8008100:	f7ff ff8c 	bl	800801c <__multadd>
 8008104:	45a0      	cmp	r8, r4
 8008106:	d1f5      	bne.n	80080f4 <__s2b+0x4c>
 8008108:	f1a5 0408 	sub.w	r4, r5, #8
 800810c:	444c      	add	r4, r9
 800810e:	1b2d      	subs	r5, r5, r4
 8008110:	1963      	adds	r3, r4, r5
 8008112:	42bb      	cmp	r3, r7
 8008114:	db04      	blt.n	8008120 <__s2b+0x78>
 8008116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800811a:	340a      	adds	r4, #10
 800811c:	2509      	movs	r5, #9
 800811e:	e7f6      	b.n	800810e <__s2b+0x66>
 8008120:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008124:	4601      	mov	r1, r0
 8008126:	3b30      	subs	r3, #48	@ 0x30
 8008128:	220a      	movs	r2, #10
 800812a:	4630      	mov	r0, r6
 800812c:	f7ff ff76 	bl	800801c <__multadd>
 8008130:	e7ee      	b.n	8008110 <__s2b+0x68>
 8008132:	bf00      	nop
 8008134:	080216d1 	.word	0x080216d1
 8008138:	080216e2 	.word	0x080216e2

0800813c <__hi0bits>:
 800813c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008140:	4603      	mov	r3, r0
 8008142:	bf36      	itet	cc
 8008144:	0403      	lslcc	r3, r0, #16
 8008146:	2000      	movcs	r0, #0
 8008148:	2010      	movcc	r0, #16
 800814a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800814e:	bf3c      	itt	cc
 8008150:	021b      	lslcc	r3, r3, #8
 8008152:	3008      	addcc	r0, #8
 8008154:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008158:	bf3c      	itt	cc
 800815a:	011b      	lslcc	r3, r3, #4
 800815c:	3004      	addcc	r0, #4
 800815e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008162:	bf3c      	itt	cc
 8008164:	009b      	lslcc	r3, r3, #2
 8008166:	3002      	addcc	r0, #2
 8008168:	2b00      	cmp	r3, #0
 800816a:	db05      	blt.n	8008178 <__hi0bits+0x3c>
 800816c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008170:	f100 0001 	add.w	r0, r0, #1
 8008174:	bf08      	it	eq
 8008176:	2020      	moveq	r0, #32
 8008178:	4770      	bx	lr

0800817a <__lo0bits>:
 800817a:	6803      	ldr	r3, [r0, #0]
 800817c:	4602      	mov	r2, r0
 800817e:	f013 0007 	ands.w	r0, r3, #7
 8008182:	d00b      	beq.n	800819c <__lo0bits+0x22>
 8008184:	07d9      	lsls	r1, r3, #31
 8008186:	d421      	bmi.n	80081cc <__lo0bits+0x52>
 8008188:	0798      	lsls	r0, r3, #30
 800818a:	bf49      	itett	mi
 800818c:	085b      	lsrmi	r3, r3, #1
 800818e:	089b      	lsrpl	r3, r3, #2
 8008190:	2001      	movmi	r0, #1
 8008192:	6013      	strmi	r3, [r2, #0]
 8008194:	bf5c      	itt	pl
 8008196:	6013      	strpl	r3, [r2, #0]
 8008198:	2002      	movpl	r0, #2
 800819a:	4770      	bx	lr
 800819c:	b299      	uxth	r1, r3
 800819e:	b909      	cbnz	r1, 80081a4 <__lo0bits+0x2a>
 80081a0:	0c1b      	lsrs	r3, r3, #16
 80081a2:	2010      	movs	r0, #16
 80081a4:	b2d9      	uxtb	r1, r3
 80081a6:	b909      	cbnz	r1, 80081ac <__lo0bits+0x32>
 80081a8:	3008      	adds	r0, #8
 80081aa:	0a1b      	lsrs	r3, r3, #8
 80081ac:	0719      	lsls	r1, r3, #28
 80081ae:	bf04      	itt	eq
 80081b0:	091b      	lsreq	r3, r3, #4
 80081b2:	3004      	addeq	r0, #4
 80081b4:	0799      	lsls	r1, r3, #30
 80081b6:	bf04      	itt	eq
 80081b8:	089b      	lsreq	r3, r3, #2
 80081ba:	3002      	addeq	r0, #2
 80081bc:	07d9      	lsls	r1, r3, #31
 80081be:	d403      	bmi.n	80081c8 <__lo0bits+0x4e>
 80081c0:	085b      	lsrs	r3, r3, #1
 80081c2:	f100 0001 	add.w	r0, r0, #1
 80081c6:	d003      	beq.n	80081d0 <__lo0bits+0x56>
 80081c8:	6013      	str	r3, [r2, #0]
 80081ca:	4770      	bx	lr
 80081cc:	2000      	movs	r0, #0
 80081ce:	4770      	bx	lr
 80081d0:	2020      	movs	r0, #32
 80081d2:	4770      	bx	lr

080081d4 <__i2b>:
 80081d4:	b510      	push	{r4, lr}
 80081d6:	460c      	mov	r4, r1
 80081d8:	2101      	movs	r1, #1
 80081da:	f7ff febd 	bl	8007f58 <_Balloc>
 80081de:	4602      	mov	r2, r0
 80081e0:	b928      	cbnz	r0, 80081ee <__i2b+0x1a>
 80081e2:	4b05      	ldr	r3, [pc, #20]	@ (80081f8 <__i2b+0x24>)
 80081e4:	4805      	ldr	r0, [pc, #20]	@ (80081fc <__i2b+0x28>)
 80081e6:	f240 1145 	movw	r1, #325	@ 0x145
 80081ea:	f001 fc2d 	bl	8009a48 <__assert_func>
 80081ee:	2301      	movs	r3, #1
 80081f0:	6144      	str	r4, [r0, #20]
 80081f2:	6103      	str	r3, [r0, #16]
 80081f4:	bd10      	pop	{r4, pc}
 80081f6:	bf00      	nop
 80081f8:	080216d1 	.word	0x080216d1
 80081fc:	080216e2 	.word	0x080216e2

08008200 <__multiply>:
 8008200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008204:	4617      	mov	r7, r2
 8008206:	690a      	ldr	r2, [r1, #16]
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	429a      	cmp	r2, r3
 800820c:	bfa8      	it	ge
 800820e:	463b      	movge	r3, r7
 8008210:	4689      	mov	r9, r1
 8008212:	bfa4      	itt	ge
 8008214:	460f      	movge	r7, r1
 8008216:	4699      	movge	r9, r3
 8008218:	693d      	ldr	r5, [r7, #16]
 800821a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	6879      	ldr	r1, [r7, #4]
 8008222:	eb05 060a 	add.w	r6, r5, sl
 8008226:	42b3      	cmp	r3, r6
 8008228:	b085      	sub	sp, #20
 800822a:	bfb8      	it	lt
 800822c:	3101      	addlt	r1, #1
 800822e:	f7ff fe93 	bl	8007f58 <_Balloc>
 8008232:	b930      	cbnz	r0, 8008242 <__multiply+0x42>
 8008234:	4602      	mov	r2, r0
 8008236:	4b41      	ldr	r3, [pc, #260]	@ (800833c <__multiply+0x13c>)
 8008238:	4841      	ldr	r0, [pc, #260]	@ (8008340 <__multiply+0x140>)
 800823a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800823e:	f001 fc03 	bl	8009a48 <__assert_func>
 8008242:	f100 0414 	add.w	r4, r0, #20
 8008246:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800824a:	4623      	mov	r3, r4
 800824c:	2200      	movs	r2, #0
 800824e:	4573      	cmp	r3, lr
 8008250:	d320      	bcc.n	8008294 <__multiply+0x94>
 8008252:	f107 0814 	add.w	r8, r7, #20
 8008256:	f109 0114 	add.w	r1, r9, #20
 800825a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800825e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008262:	9302      	str	r3, [sp, #8]
 8008264:	1beb      	subs	r3, r5, r7
 8008266:	3b15      	subs	r3, #21
 8008268:	f023 0303 	bic.w	r3, r3, #3
 800826c:	3304      	adds	r3, #4
 800826e:	3715      	adds	r7, #21
 8008270:	42bd      	cmp	r5, r7
 8008272:	bf38      	it	cc
 8008274:	2304      	movcc	r3, #4
 8008276:	9301      	str	r3, [sp, #4]
 8008278:	9b02      	ldr	r3, [sp, #8]
 800827a:	9103      	str	r1, [sp, #12]
 800827c:	428b      	cmp	r3, r1
 800827e:	d80c      	bhi.n	800829a <__multiply+0x9a>
 8008280:	2e00      	cmp	r6, #0
 8008282:	dd03      	ble.n	800828c <__multiply+0x8c>
 8008284:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008288:	2b00      	cmp	r3, #0
 800828a:	d055      	beq.n	8008338 <__multiply+0x138>
 800828c:	6106      	str	r6, [r0, #16]
 800828e:	b005      	add	sp, #20
 8008290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008294:	f843 2b04 	str.w	r2, [r3], #4
 8008298:	e7d9      	b.n	800824e <__multiply+0x4e>
 800829a:	f8b1 a000 	ldrh.w	sl, [r1]
 800829e:	f1ba 0f00 	cmp.w	sl, #0
 80082a2:	d01f      	beq.n	80082e4 <__multiply+0xe4>
 80082a4:	46c4      	mov	ip, r8
 80082a6:	46a1      	mov	r9, r4
 80082a8:	2700      	movs	r7, #0
 80082aa:	f85c 2b04 	ldr.w	r2, [ip], #4
 80082ae:	f8d9 3000 	ldr.w	r3, [r9]
 80082b2:	fa1f fb82 	uxth.w	fp, r2
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	fb0a 330b 	mla	r3, sl, fp, r3
 80082bc:	443b      	add	r3, r7
 80082be:	f8d9 7000 	ldr.w	r7, [r9]
 80082c2:	0c12      	lsrs	r2, r2, #16
 80082c4:	0c3f      	lsrs	r7, r7, #16
 80082c6:	fb0a 7202 	mla	r2, sl, r2, r7
 80082ca:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082d4:	4565      	cmp	r5, ip
 80082d6:	f849 3b04 	str.w	r3, [r9], #4
 80082da:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80082de:	d8e4      	bhi.n	80082aa <__multiply+0xaa>
 80082e0:	9b01      	ldr	r3, [sp, #4]
 80082e2:	50e7      	str	r7, [r4, r3]
 80082e4:	9b03      	ldr	r3, [sp, #12]
 80082e6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80082ea:	3104      	adds	r1, #4
 80082ec:	f1b9 0f00 	cmp.w	r9, #0
 80082f0:	d020      	beq.n	8008334 <__multiply+0x134>
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	4647      	mov	r7, r8
 80082f6:	46a4      	mov	ip, r4
 80082f8:	f04f 0a00 	mov.w	sl, #0
 80082fc:	f8b7 b000 	ldrh.w	fp, [r7]
 8008300:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008304:	fb09 220b 	mla	r2, r9, fp, r2
 8008308:	4452      	add	r2, sl
 800830a:	b29b      	uxth	r3, r3
 800830c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008310:	f84c 3b04 	str.w	r3, [ip], #4
 8008314:	f857 3b04 	ldr.w	r3, [r7], #4
 8008318:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800831c:	f8bc 3000 	ldrh.w	r3, [ip]
 8008320:	fb09 330a 	mla	r3, r9, sl, r3
 8008324:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008328:	42bd      	cmp	r5, r7
 800832a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800832e:	d8e5      	bhi.n	80082fc <__multiply+0xfc>
 8008330:	9a01      	ldr	r2, [sp, #4]
 8008332:	50a3      	str	r3, [r4, r2]
 8008334:	3404      	adds	r4, #4
 8008336:	e79f      	b.n	8008278 <__multiply+0x78>
 8008338:	3e01      	subs	r6, #1
 800833a:	e7a1      	b.n	8008280 <__multiply+0x80>
 800833c:	080216d1 	.word	0x080216d1
 8008340:	080216e2 	.word	0x080216e2

08008344 <__pow5mult>:
 8008344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008348:	4615      	mov	r5, r2
 800834a:	f012 0203 	ands.w	r2, r2, #3
 800834e:	4607      	mov	r7, r0
 8008350:	460e      	mov	r6, r1
 8008352:	d007      	beq.n	8008364 <__pow5mult+0x20>
 8008354:	4c25      	ldr	r4, [pc, #148]	@ (80083ec <__pow5mult+0xa8>)
 8008356:	3a01      	subs	r2, #1
 8008358:	2300      	movs	r3, #0
 800835a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800835e:	f7ff fe5d 	bl	800801c <__multadd>
 8008362:	4606      	mov	r6, r0
 8008364:	10ad      	asrs	r5, r5, #2
 8008366:	d03d      	beq.n	80083e4 <__pow5mult+0xa0>
 8008368:	69fc      	ldr	r4, [r7, #28]
 800836a:	b97c      	cbnz	r4, 800838c <__pow5mult+0x48>
 800836c:	2010      	movs	r0, #16
 800836e:	f7ff fd3d 	bl	8007dec <malloc>
 8008372:	4602      	mov	r2, r0
 8008374:	61f8      	str	r0, [r7, #28]
 8008376:	b928      	cbnz	r0, 8008384 <__pow5mult+0x40>
 8008378:	4b1d      	ldr	r3, [pc, #116]	@ (80083f0 <__pow5mult+0xac>)
 800837a:	481e      	ldr	r0, [pc, #120]	@ (80083f4 <__pow5mult+0xb0>)
 800837c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008380:	f001 fb62 	bl	8009a48 <__assert_func>
 8008384:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008388:	6004      	str	r4, [r0, #0]
 800838a:	60c4      	str	r4, [r0, #12]
 800838c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008390:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008394:	b94c      	cbnz	r4, 80083aa <__pow5mult+0x66>
 8008396:	f240 2171 	movw	r1, #625	@ 0x271
 800839a:	4638      	mov	r0, r7
 800839c:	f7ff ff1a 	bl	80081d4 <__i2b>
 80083a0:	2300      	movs	r3, #0
 80083a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80083a6:	4604      	mov	r4, r0
 80083a8:	6003      	str	r3, [r0, #0]
 80083aa:	f04f 0900 	mov.w	r9, #0
 80083ae:	07eb      	lsls	r3, r5, #31
 80083b0:	d50a      	bpl.n	80083c8 <__pow5mult+0x84>
 80083b2:	4631      	mov	r1, r6
 80083b4:	4622      	mov	r2, r4
 80083b6:	4638      	mov	r0, r7
 80083b8:	f7ff ff22 	bl	8008200 <__multiply>
 80083bc:	4631      	mov	r1, r6
 80083be:	4680      	mov	r8, r0
 80083c0:	4638      	mov	r0, r7
 80083c2:	f7ff fe09 	bl	8007fd8 <_Bfree>
 80083c6:	4646      	mov	r6, r8
 80083c8:	106d      	asrs	r5, r5, #1
 80083ca:	d00b      	beq.n	80083e4 <__pow5mult+0xa0>
 80083cc:	6820      	ldr	r0, [r4, #0]
 80083ce:	b938      	cbnz	r0, 80083e0 <__pow5mult+0x9c>
 80083d0:	4622      	mov	r2, r4
 80083d2:	4621      	mov	r1, r4
 80083d4:	4638      	mov	r0, r7
 80083d6:	f7ff ff13 	bl	8008200 <__multiply>
 80083da:	6020      	str	r0, [r4, #0]
 80083dc:	f8c0 9000 	str.w	r9, [r0]
 80083e0:	4604      	mov	r4, r0
 80083e2:	e7e4      	b.n	80083ae <__pow5mult+0x6a>
 80083e4:	4630      	mov	r0, r6
 80083e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ea:	bf00      	nop
 80083ec:	080217f4 	.word	0x080217f4
 80083f0:	08021662 	.word	0x08021662
 80083f4:	080216e2 	.word	0x080216e2

080083f8 <__lshift>:
 80083f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083fc:	460c      	mov	r4, r1
 80083fe:	6849      	ldr	r1, [r1, #4]
 8008400:	6923      	ldr	r3, [r4, #16]
 8008402:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008406:	68a3      	ldr	r3, [r4, #8]
 8008408:	4607      	mov	r7, r0
 800840a:	4691      	mov	r9, r2
 800840c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008410:	f108 0601 	add.w	r6, r8, #1
 8008414:	42b3      	cmp	r3, r6
 8008416:	db0b      	blt.n	8008430 <__lshift+0x38>
 8008418:	4638      	mov	r0, r7
 800841a:	f7ff fd9d 	bl	8007f58 <_Balloc>
 800841e:	4605      	mov	r5, r0
 8008420:	b948      	cbnz	r0, 8008436 <__lshift+0x3e>
 8008422:	4602      	mov	r2, r0
 8008424:	4b28      	ldr	r3, [pc, #160]	@ (80084c8 <__lshift+0xd0>)
 8008426:	4829      	ldr	r0, [pc, #164]	@ (80084cc <__lshift+0xd4>)
 8008428:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800842c:	f001 fb0c 	bl	8009a48 <__assert_func>
 8008430:	3101      	adds	r1, #1
 8008432:	005b      	lsls	r3, r3, #1
 8008434:	e7ee      	b.n	8008414 <__lshift+0x1c>
 8008436:	2300      	movs	r3, #0
 8008438:	f100 0114 	add.w	r1, r0, #20
 800843c:	f100 0210 	add.w	r2, r0, #16
 8008440:	4618      	mov	r0, r3
 8008442:	4553      	cmp	r3, sl
 8008444:	db33      	blt.n	80084ae <__lshift+0xb6>
 8008446:	6920      	ldr	r0, [r4, #16]
 8008448:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800844c:	f104 0314 	add.w	r3, r4, #20
 8008450:	f019 091f 	ands.w	r9, r9, #31
 8008454:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008458:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800845c:	d02b      	beq.n	80084b6 <__lshift+0xbe>
 800845e:	f1c9 0e20 	rsb	lr, r9, #32
 8008462:	468a      	mov	sl, r1
 8008464:	2200      	movs	r2, #0
 8008466:	6818      	ldr	r0, [r3, #0]
 8008468:	fa00 f009 	lsl.w	r0, r0, r9
 800846c:	4310      	orrs	r0, r2
 800846e:	f84a 0b04 	str.w	r0, [sl], #4
 8008472:	f853 2b04 	ldr.w	r2, [r3], #4
 8008476:	459c      	cmp	ip, r3
 8008478:	fa22 f20e 	lsr.w	r2, r2, lr
 800847c:	d8f3      	bhi.n	8008466 <__lshift+0x6e>
 800847e:	ebac 0304 	sub.w	r3, ip, r4
 8008482:	3b15      	subs	r3, #21
 8008484:	f023 0303 	bic.w	r3, r3, #3
 8008488:	3304      	adds	r3, #4
 800848a:	f104 0015 	add.w	r0, r4, #21
 800848e:	4560      	cmp	r0, ip
 8008490:	bf88      	it	hi
 8008492:	2304      	movhi	r3, #4
 8008494:	50ca      	str	r2, [r1, r3]
 8008496:	b10a      	cbz	r2, 800849c <__lshift+0xa4>
 8008498:	f108 0602 	add.w	r6, r8, #2
 800849c:	3e01      	subs	r6, #1
 800849e:	4638      	mov	r0, r7
 80084a0:	612e      	str	r6, [r5, #16]
 80084a2:	4621      	mov	r1, r4
 80084a4:	f7ff fd98 	bl	8007fd8 <_Bfree>
 80084a8:	4628      	mov	r0, r5
 80084aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80084b2:	3301      	adds	r3, #1
 80084b4:	e7c5      	b.n	8008442 <__lshift+0x4a>
 80084b6:	3904      	subs	r1, #4
 80084b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80084bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80084c0:	459c      	cmp	ip, r3
 80084c2:	d8f9      	bhi.n	80084b8 <__lshift+0xc0>
 80084c4:	e7ea      	b.n	800849c <__lshift+0xa4>
 80084c6:	bf00      	nop
 80084c8:	080216d1 	.word	0x080216d1
 80084cc:	080216e2 	.word	0x080216e2

080084d0 <__mcmp>:
 80084d0:	690a      	ldr	r2, [r1, #16]
 80084d2:	4603      	mov	r3, r0
 80084d4:	6900      	ldr	r0, [r0, #16]
 80084d6:	1a80      	subs	r0, r0, r2
 80084d8:	b530      	push	{r4, r5, lr}
 80084da:	d10e      	bne.n	80084fa <__mcmp+0x2a>
 80084dc:	3314      	adds	r3, #20
 80084de:	3114      	adds	r1, #20
 80084e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084f0:	4295      	cmp	r5, r2
 80084f2:	d003      	beq.n	80084fc <__mcmp+0x2c>
 80084f4:	d205      	bcs.n	8008502 <__mcmp+0x32>
 80084f6:	f04f 30ff 	mov.w	r0, #4294967295
 80084fa:	bd30      	pop	{r4, r5, pc}
 80084fc:	42a3      	cmp	r3, r4
 80084fe:	d3f3      	bcc.n	80084e8 <__mcmp+0x18>
 8008500:	e7fb      	b.n	80084fa <__mcmp+0x2a>
 8008502:	2001      	movs	r0, #1
 8008504:	e7f9      	b.n	80084fa <__mcmp+0x2a>
	...

08008508 <__mdiff>:
 8008508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850c:	4689      	mov	r9, r1
 800850e:	4606      	mov	r6, r0
 8008510:	4611      	mov	r1, r2
 8008512:	4648      	mov	r0, r9
 8008514:	4614      	mov	r4, r2
 8008516:	f7ff ffdb 	bl	80084d0 <__mcmp>
 800851a:	1e05      	subs	r5, r0, #0
 800851c:	d112      	bne.n	8008544 <__mdiff+0x3c>
 800851e:	4629      	mov	r1, r5
 8008520:	4630      	mov	r0, r6
 8008522:	f7ff fd19 	bl	8007f58 <_Balloc>
 8008526:	4602      	mov	r2, r0
 8008528:	b928      	cbnz	r0, 8008536 <__mdiff+0x2e>
 800852a:	4b3f      	ldr	r3, [pc, #252]	@ (8008628 <__mdiff+0x120>)
 800852c:	f240 2137 	movw	r1, #567	@ 0x237
 8008530:	483e      	ldr	r0, [pc, #248]	@ (800862c <__mdiff+0x124>)
 8008532:	f001 fa89 	bl	8009a48 <__assert_func>
 8008536:	2301      	movs	r3, #1
 8008538:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800853c:	4610      	mov	r0, r2
 800853e:	b003      	add	sp, #12
 8008540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008544:	bfbc      	itt	lt
 8008546:	464b      	movlt	r3, r9
 8008548:	46a1      	movlt	r9, r4
 800854a:	4630      	mov	r0, r6
 800854c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008550:	bfba      	itte	lt
 8008552:	461c      	movlt	r4, r3
 8008554:	2501      	movlt	r5, #1
 8008556:	2500      	movge	r5, #0
 8008558:	f7ff fcfe 	bl	8007f58 <_Balloc>
 800855c:	4602      	mov	r2, r0
 800855e:	b918      	cbnz	r0, 8008568 <__mdiff+0x60>
 8008560:	4b31      	ldr	r3, [pc, #196]	@ (8008628 <__mdiff+0x120>)
 8008562:	f240 2145 	movw	r1, #581	@ 0x245
 8008566:	e7e3      	b.n	8008530 <__mdiff+0x28>
 8008568:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800856c:	6926      	ldr	r6, [r4, #16]
 800856e:	60c5      	str	r5, [r0, #12]
 8008570:	f109 0310 	add.w	r3, r9, #16
 8008574:	f109 0514 	add.w	r5, r9, #20
 8008578:	f104 0e14 	add.w	lr, r4, #20
 800857c:	f100 0b14 	add.w	fp, r0, #20
 8008580:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008584:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	46d9      	mov	r9, fp
 800858c:	f04f 0c00 	mov.w	ip, #0
 8008590:	9b01      	ldr	r3, [sp, #4]
 8008592:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008596:	f853 af04 	ldr.w	sl, [r3, #4]!
 800859a:	9301      	str	r3, [sp, #4]
 800859c:	fa1f f38a 	uxth.w	r3, sl
 80085a0:	4619      	mov	r1, r3
 80085a2:	b283      	uxth	r3, r0
 80085a4:	1acb      	subs	r3, r1, r3
 80085a6:	0c00      	lsrs	r0, r0, #16
 80085a8:	4463      	add	r3, ip
 80085aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80085ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80085b8:	4576      	cmp	r6, lr
 80085ba:	f849 3b04 	str.w	r3, [r9], #4
 80085be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085c2:	d8e5      	bhi.n	8008590 <__mdiff+0x88>
 80085c4:	1b33      	subs	r3, r6, r4
 80085c6:	3b15      	subs	r3, #21
 80085c8:	f023 0303 	bic.w	r3, r3, #3
 80085cc:	3415      	adds	r4, #21
 80085ce:	3304      	adds	r3, #4
 80085d0:	42a6      	cmp	r6, r4
 80085d2:	bf38      	it	cc
 80085d4:	2304      	movcc	r3, #4
 80085d6:	441d      	add	r5, r3
 80085d8:	445b      	add	r3, fp
 80085da:	461e      	mov	r6, r3
 80085dc:	462c      	mov	r4, r5
 80085de:	4544      	cmp	r4, r8
 80085e0:	d30e      	bcc.n	8008600 <__mdiff+0xf8>
 80085e2:	f108 0103 	add.w	r1, r8, #3
 80085e6:	1b49      	subs	r1, r1, r5
 80085e8:	f021 0103 	bic.w	r1, r1, #3
 80085ec:	3d03      	subs	r5, #3
 80085ee:	45a8      	cmp	r8, r5
 80085f0:	bf38      	it	cc
 80085f2:	2100      	movcc	r1, #0
 80085f4:	440b      	add	r3, r1
 80085f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085fa:	b191      	cbz	r1, 8008622 <__mdiff+0x11a>
 80085fc:	6117      	str	r7, [r2, #16]
 80085fe:	e79d      	b.n	800853c <__mdiff+0x34>
 8008600:	f854 1b04 	ldr.w	r1, [r4], #4
 8008604:	46e6      	mov	lr, ip
 8008606:	0c08      	lsrs	r0, r1, #16
 8008608:	fa1c fc81 	uxtah	ip, ip, r1
 800860c:	4471      	add	r1, lr
 800860e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008612:	b289      	uxth	r1, r1
 8008614:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008618:	f846 1b04 	str.w	r1, [r6], #4
 800861c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008620:	e7dd      	b.n	80085de <__mdiff+0xd6>
 8008622:	3f01      	subs	r7, #1
 8008624:	e7e7      	b.n	80085f6 <__mdiff+0xee>
 8008626:	bf00      	nop
 8008628:	080216d1 	.word	0x080216d1
 800862c:	080216e2 	.word	0x080216e2

08008630 <__ulp>:
 8008630:	b082      	sub	sp, #8
 8008632:	ed8d 0b00 	vstr	d0, [sp]
 8008636:	9a01      	ldr	r2, [sp, #4]
 8008638:	4b0f      	ldr	r3, [pc, #60]	@ (8008678 <__ulp+0x48>)
 800863a:	4013      	ands	r3, r2
 800863c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008640:	2b00      	cmp	r3, #0
 8008642:	dc08      	bgt.n	8008656 <__ulp+0x26>
 8008644:	425b      	negs	r3, r3
 8008646:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800864a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800864e:	da04      	bge.n	800865a <__ulp+0x2a>
 8008650:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008654:	4113      	asrs	r3, r2
 8008656:	2200      	movs	r2, #0
 8008658:	e008      	b.n	800866c <__ulp+0x3c>
 800865a:	f1a2 0314 	sub.w	r3, r2, #20
 800865e:	2b1e      	cmp	r3, #30
 8008660:	bfda      	itte	le
 8008662:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008666:	40da      	lsrle	r2, r3
 8008668:	2201      	movgt	r2, #1
 800866a:	2300      	movs	r3, #0
 800866c:	4619      	mov	r1, r3
 800866e:	4610      	mov	r0, r2
 8008670:	ec41 0b10 	vmov	d0, r0, r1
 8008674:	b002      	add	sp, #8
 8008676:	4770      	bx	lr
 8008678:	7ff00000 	.word	0x7ff00000

0800867c <__b2d>:
 800867c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008680:	6906      	ldr	r6, [r0, #16]
 8008682:	f100 0814 	add.w	r8, r0, #20
 8008686:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800868a:	1f37      	subs	r7, r6, #4
 800868c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008690:	4610      	mov	r0, r2
 8008692:	f7ff fd53 	bl	800813c <__hi0bits>
 8008696:	f1c0 0320 	rsb	r3, r0, #32
 800869a:	280a      	cmp	r0, #10
 800869c:	600b      	str	r3, [r1, #0]
 800869e:	491b      	ldr	r1, [pc, #108]	@ (800870c <__b2d+0x90>)
 80086a0:	dc15      	bgt.n	80086ce <__b2d+0x52>
 80086a2:	f1c0 0c0b 	rsb	ip, r0, #11
 80086a6:	fa22 f30c 	lsr.w	r3, r2, ip
 80086aa:	45b8      	cmp	r8, r7
 80086ac:	ea43 0501 	orr.w	r5, r3, r1
 80086b0:	bf34      	ite	cc
 80086b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80086b6:	2300      	movcs	r3, #0
 80086b8:	3015      	adds	r0, #21
 80086ba:	fa02 f000 	lsl.w	r0, r2, r0
 80086be:	fa23 f30c 	lsr.w	r3, r3, ip
 80086c2:	4303      	orrs	r3, r0
 80086c4:	461c      	mov	r4, r3
 80086c6:	ec45 4b10 	vmov	d0, r4, r5
 80086ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ce:	45b8      	cmp	r8, r7
 80086d0:	bf3a      	itte	cc
 80086d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80086d6:	f1a6 0708 	subcc.w	r7, r6, #8
 80086da:	2300      	movcs	r3, #0
 80086dc:	380b      	subs	r0, #11
 80086de:	d012      	beq.n	8008706 <__b2d+0x8a>
 80086e0:	f1c0 0120 	rsb	r1, r0, #32
 80086e4:	fa23 f401 	lsr.w	r4, r3, r1
 80086e8:	4082      	lsls	r2, r0
 80086ea:	4322      	orrs	r2, r4
 80086ec:	4547      	cmp	r7, r8
 80086ee:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80086f2:	bf8c      	ite	hi
 80086f4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80086f8:	2200      	movls	r2, #0
 80086fa:	4083      	lsls	r3, r0
 80086fc:	40ca      	lsrs	r2, r1
 80086fe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008702:	4313      	orrs	r3, r2
 8008704:	e7de      	b.n	80086c4 <__b2d+0x48>
 8008706:	ea42 0501 	orr.w	r5, r2, r1
 800870a:	e7db      	b.n	80086c4 <__b2d+0x48>
 800870c:	3ff00000 	.word	0x3ff00000

08008710 <__d2b>:
 8008710:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008714:	460f      	mov	r7, r1
 8008716:	2101      	movs	r1, #1
 8008718:	ec59 8b10 	vmov	r8, r9, d0
 800871c:	4616      	mov	r6, r2
 800871e:	f7ff fc1b 	bl	8007f58 <_Balloc>
 8008722:	4604      	mov	r4, r0
 8008724:	b930      	cbnz	r0, 8008734 <__d2b+0x24>
 8008726:	4602      	mov	r2, r0
 8008728:	4b23      	ldr	r3, [pc, #140]	@ (80087b8 <__d2b+0xa8>)
 800872a:	4824      	ldr	r0, [pc, #144]	@ (80087bc <__d2b+0xac>)
 800872c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008730:	f001 f98a 	bl	8009a48 <__assert_func>
 8008734:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008738:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800873c:	b10d      	cbz	r5, 8008742 <__d2b+0x32>
 800873e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008742:	9301      	str	r3, [sp, #4]
 8008744:	f1b8 0300 	subs.w	r3, r8, #0
 8008748:	d023      	beq.n	8008792 <__d2b+0x82>
 800874a:	4668      	mov	r0, sp
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	f7ff fd14 	bl	800817a <__lo0bits>
 8008752:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008756:	b1d0      	cbz	r0, 800878e <__d2b+0x7e>
 8008758:	f1c0 0320 	rsb	r3, r0, #32
 800875c:	fa02 f303 	lsl.w	r3, r2, r3
 8008760:	430b      	orrs	r3, r1
 8008762:	40c2      	lsrs	r2, r0
 8008764:	6163      	str	r3, [r4, #20]
 8008766:	9201      	str	r2, [sp, #4]
 8008768:	9b01      	ldr	r3, [sp, #4]
 800876a:	61a3      	str	r3, [r4, #24]
 800876c:	2b00      	cmp	r3, #0
 800876e:	bf0c      	ite	eq
 8008770:	2201      	moveq	r2, #1
 8008772:	2202      	movne	r2, #2
 8008774:	6122      	str	r2, [r4, #16]
 8008776:	b1a5      	cbz	r5, 80087a2 <__d2b+0x92>
 8008778:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800877c:	4405      	add	r5, r0
 800877e:	603d      	str	r5, [r7, #0]
 8008780:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008784:	6030      	str	r0, [r6, #0]
 8008786:	4620      	mov	r0, r4
 8008788:	b003      	add	sp, #12
 800878a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800878e:	6161      	str	r1, [r4, #20]
 8008790:	e7ea      	b.n	8008768 <__d2b+0x58>
 8008792:	a801      	add	r0, sp, #4
 8008794:	f7ff fcf1 	bl	800817a <__lo0bits>
 8008798:	9b01      	ldr	r3, [sp, #4]
 800879a:	6163      	str	r3, [r4, #20]
 800879c:	3020      	adds	r0, #32
 800879e:	2201      	movs	r2, #1
 80087a0:	e7e8      	b.n	8008774 <__d2b+0x64>
 80087a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80087aa:	6038      	str	r0, [r7, #0]
 80087ac:	6918      	ldr	r0, [r3, #16]
 80087ae:	f7ff fcc5 	bl	800813c <__hi0bits>
 80087b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087b6:	e7e5      	b.n	8008784 <__d2b+0x74>
 80087b8:	080216d1 	.word	0x080216d1
 80087bc:	080216e2 	.word	0x080216e2

080087c0 <__ratio>:
 80087c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c4:	b085      	sub	sp, #20
 80087c6:	e9cd 1000 	strd	r1, r0, [sp]
 80087ca:	a902      	add	r1, sp, #8
 80087cc:	f7ff ff56 	bl	800867c <__b2d>
 80087d0:	9800      	ldr	r0, [sp, #0]
 80087d2:	a903      	add	r1, sp, #12
 80087d4:	ec55 4b10 	vmov	r4, r5, d0
 80087d8:	f7ff ff50 	bl	800867c <__b2d>
 80087dc:	9b01      	ldr	r3, [sp, #4]
 80087de:	6919      	ldr	r1, [r3, #16]
 80087e0:	9b00      	ldr	r3, [sp, #0]
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	1ac9      	subs	r1, r1, r3
 80087e6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80087ea:	1a9b      	subs	r3, r3, r2
 80087ec:	ec5b ab10 	vmov	sl, fp, d0
 80087f0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	bfce      	itee	gt
 80087f8:	462a      	movgt	r2, r5
 80087fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80087fe:	465a      	movle	r2, fp
 8008800:	462f      	mov	r7, r5
 8008802:	46d9      	mov	r9, fp
 8008804:	bfcc      	ite	gt
 8008806:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800880a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800880e:	464b      	mov	r3, r9
 8008810:	4652      	mov	r2, sl
 8008812:	4620      	mov	r0, r4
 8008814:	4639      	mov	r1, r7
 8008816:	f7f8 f819 	bl	800084c <__aeabi_ddiv>
 800881a:	ec41 0b10 	vmov	d0, r0, r1
 800881e:	b005      	add	sp, #20
 8008820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008824 <__copybits>:
 8008824:	3901      	subs	r1, #1
 8008826:	b570      	push	{r4, r5, r6, lr}
 8008828:	1149      	asrs	r1, r1, #5
 800882a:	6914      	ldr	r4, [r2, #16]
 800882c:	3101      	adds	r1, #1
 800882e:	f102 0314 	add.w	r3, r2, #20
 8008832:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008836:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800883a:	1f05      	subs	r5, r0, #4
 800883c:	42a3      	cmp	r3, r4
 800883e:	d30c      	bcc.n	800885a <__copybits+0x36>
 8008840:	1aa3      	subs	r3, r4, r2
 8008842:	3b11      	subs	r3, #17
 8008844:	f023 0303 	bic.w	r3, r3, #3
 8008848:	3211      	adds	r2, #17
 800884a:	42a2      	cmp	r2, r4
 800884c:	bf88      	it	hi
 800884e:	2300      	movhi	r3, #0
 8008850:	4418      	add	r0, r3
 8008852:	2300      	movs	r3, #0
 8008854:	4288      	cmp	r0, r1
 8008856:	d305      	bcc.n	8008864 <__copybits+0x40>
 8008858:	bd70      	pop	{r4, r5, r6, pc}
 800885a:	f853 6b04 	ldr.w	r6, [r3], #4
 800885e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008862:	e7eb      	b.n	800883c <__copybits+0x18>
 8008864:	f840 3b04 	str.w	r3, [r0], #4
 8008868:	e7f4      	b.n	8008854 <__copybits+0x30>

0800886a <__any_on>:
 800886a:	f100 0214 	add.w	r2, r0, #20
 800886e:	6900      	ldr	r0, [r0, #16]
 8008870:	114b      	asrs	r3, r1, #5
 8008872:	4298      	cmp	r0, r3
 8008874:	b510      	push	{r4, lr}
 8008876:	db11      	blt.n	800889c <__any_on+0x32>
 8008878:	dd0a      	ble.n	8008890 <__any_on+0x26>
 800887a:	f011 011f 	ands.w	r1, r1, #31
 800887e:	d007      	beq.n	8008890 <__any_on+0x26>
 8008880:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008884:	fa24 f001 	lsr.w	r0, r4, r1
 8008888:	fa00 f101 	lsl.w	r1, r0, r1
 800888c:	428c      	cmp	r4, r1
 800888e:	d10b      	bne.n	80088a8 <__any_on+0x3e>
 8008890:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008894:	4293      	cmp	r3, r2
 8008896:	d803      	bhi.n	80088a0 <__any_on+0x36>
 8008898:	2000      	movs	r0, #0
 800889a:	bd10      	pop	{r4, pc}
 800889c:	4603      	mov	r3, r0
 800889e:	e7f7      	b.n	8008890 <__any_on+0x26>
 80088a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088a4:	2900      	cmp	r1, #0
 80088a6:	d0f5      	beq.n	8008894 <__any_on+0x2a>
 80088a8:	2001      	movs	r0, #1
 80088aa:	e7f6      	b.n	800889a <__any_on+0x30>

080088ac <sulp>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	4604      	mov	r4, r0
 80088b0:	460d      	mov	r5, r1
 80088b2:	ec45 4b10 	vmov	d0, r4, r5
 80088b6:	4616      	mov	r6, r2
 80088b8:	f7ff feba 	bl	8008630 <__ulp>
 80088bc:	ec51 0b10 	vmov	r0, r1, d0
 80088c0:	b17e      	cbz	r6, 80088e2 <sulp+0x36>
 80088c2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80088c6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	dd09      	ble.n	80088e2 <sulp+0x36>
 80088ce:	051b      	lsls	r3, r3, #20
 80088d0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80088d4:	2400      	movs	r4, #0
 80088d6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80088da:	4622      	mov	r2, r4
 80088dc:	462b      	mov	r3, r5
 80088de:	f7f7 fe8b 	bl	80005f8 <__aeabi_dmul>
 80088e2:	ec41 0b10 	vmov	d0, r0, r1
 80088e6:	bd70      	pop	{r4, r5, r6, pc}

080088e8 <_strtod_l>:
 80088e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ec:	b09f      	sub	sp, #124	@ 0x7c
 80088ee:	460c      	mov	r4, r1
 80088f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80088f2:	2200      	movs	r2, #0
 80088f4:	921a      	str	r2, [sp, #104]	@ 0x68
 80088f6:	9005      	str	r0, [sp, #20]
 80088f8:	f04f 0a00 	mov.w	sl, #0
 80088fc:	f04f 0b00 	mov.w	fp, #0
 8008900:	460a      	mov	r2, r1
 8008902:	9219      	str	r2, [sp, #100]	@ 0x64
 8008904:	7811      	ldrb	r1, [r2, #0]
 8008906:	292b      	cmp	r1, #43	@ 0x2b
 8008908:	d04a      	beq.n	80089a0 <_strtod_l+0xb8>
 800890a:	d838      	bhi.n	800897e <_strtod_l+0x96>
 800890c:	290d      	cmp	r1, #13
 800890e:	d832      	bhi.n	8008976 <_strtod_l+0x8e>
 8008910:	2908      	cmp	r1, #8
 8008912:	d832      	bhi.n	800897a <_strtod_l+0x92>
 8008914:	2900      	cmp	r1, #0
 8008916:	d03b      	beq.n	8008990 <_strtod_l+0xa8>
 8008918:	2200      	movs	r2, #0
 800891a:	920e      	str	r2, [sp, #56]	@ 0x38
 800891c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800891e:	782a      	ldrb	r2, [r5, #0]
 8008920:	2a30      	cmp	r2, #48	@ 0x30
 8008922:	f040 80b2 	bne.w	8008a8a <_strtod_l+0x1a2>
 8008926:	786a      	ldrb	r2, [r5, #1]
 8008928:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800892c:	2a58      	cmp	r2, #88	@ 0x58
 800892e:	d16e      	bne.n	8008a0e <_strtod_l+0x126>
 8008930:	9302      	str	r3, [sp, #8]
 8008932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008934:	9301      	str	r3, [sp, #4]
 8008936:	ab1a      	add	r3, sp, #104	@ 0x68
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	4a8f      	ldr	r2, [pc, #572]	@ (8008b78 <_strtod_l+0x290>)
 800893c:	9805      	ldr	r0, [sp, #20]
 800893e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008940:	a919      	add	r1, sp, #100	@ 0x64
 8008942:	f001 f91b 	bl	8009b7c <__gethex>
 8008946:	f010 060f 	ands.w	r6, r0, #15
 800894a:	4604      	mov	r4, r0
 800894c:	d005      	beq.n	800895a <_strtod_l+0x72>
 800894e:	2e06      	cmp	r6, #6
 8008950:	d128      	bne.n	80089a4 <_strtod_l+0xbc>
 8008952:	3501      	adds	r5, #1
 8008954:	2300      	movs	r3, #0
 8008956:	9519      	str	r5, [sp, #100]	@ 0x64
 8008958:	930e      	str	r3, [sp, #56]	@ 0x38
 800895a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800895c:	2b00      	cmp	r3, #0
 800895e:	f040 858e 	bne.w	800947e <_strtod_l+0xb96>
 8008962:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008964:	b1cb      	cbz	r3, 800899a <_strtod_l+0xb2>
 8008966:	4652      	mov	r2, sl
 8008968:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800896c:	ec43 2b10 	vmov	d0, r2, r3
 8008970:	b01f      	add	sp, #124	@ 0x7c
 8008972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008976:	2920      	cmp	r1, #32
 8008978:	d1ce      	bne.n	8008918 <_strtod_l+0x30>
 800897a:	3201      	adds	r2, #1
 800897c:	e7c1      	b.n	8008902 <_strtod_l+0x1a>
 800897e:	292d      	cmp	r1, #45	@ 0x2d
 8008980:	d1ca      	bne.n	8008918 <_strtod_l+0x30>
 8008982:	2101      	movs	r1, #1
 8008984:	910e      	str	r1, [sp, #56]	@ 0x38
 8008986:	1c51      	adds	r1, r2, #1
 8008988:	9119      	str	r1, [sp, #100]	@ 0x64
 800898a:	7852      	ldrb	r2, [r2, #1]
 800898c:	2a00      	cmp	r2, #0
 800898e:	d1c5      	bne.n	800891c <_strtod_l+0x34>
 8008990:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008992:	9419      	str	r4, [sp, #100]	@ 0x64
 8008994:	2b00      	cmp	r3, #0
 8008996:	f040 8570 	bne.w	800947a <_strtod_l+0xb92>
 800899a:	4652      	mov	r2, sl
 800899c:	465b      	mov	r3, fp
 800899e:	e7e5      	b.n	800896c <_strtod_l+0x84>
 80089a0:	2100      	movs	r1, #0
 80089a2:	e7ef      	b.n	8008984 <_strtod_l+0x9c>
 80089a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80089a6:	b13a      	cbz	r2, 80089b8 <_strtod_l+0xd0>
 80089a8:	2135      	movs	r1, #53	@ 0x35
 80089aa:	a81c      	add	r0, sp, #112	@ 0x70
 80089ac:	f7ff ff3a 	bl	8008824 <__copybits>
 80089b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089b2:	9805      	ldr	r0, [sp, #20]
 80089b4:	f7ff fb10 	bl	8007fd8 <_Bfree>
 80089b8:	3e01      	subs	r6, #1
 80089ba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80089bc:	2e04      	cmp	r6, #4
 80089be:	d806      	bhi.n	80089ce <_strtod_l+0xe6>
 80089c0:	e8df f006 	tbb	[pc, r6]
 80089c4:	201d0314 	.word	0x201d0314
 80089c8:	14          	.byte	0x14
 80089c9:	00          	.byte	0x00
 80089ca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80089ce:	05e1      	lsls	r1, r4, #23
 80089d0:	bf48      	it	mi
 80089d2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80089d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089da:	0d1b      	lsrs	r3, r3, #20
 80089dc:	051b      	lsls	r3, r3, #20
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1bb      	bne.n	800895a <_strtod_l+0x72>
 80089e2:	f7fe fb1d 	bl	8007020 <__errno>
 80089e6:	2322      	movs	r3, #34	@ 0x22
 80089e8:	6003      	str	r3, [r0, #0]
 80089ea:	e7b6      	b.n	800895a <_strtod_l+0x72>
 80089ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80089f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80089f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80089f8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80089fc:	e7e7      	b.n	80089ce <_strtod_l+0xe6>
 80089fe:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008b80 <_strtod_l+0x298>
 8008a02:	e7e4      	b.n	80089ce <_strtod_l+0xe6>
 8008a04:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008a08:	f04f 3aff 	mov.w	sl, #4294967295
 8008a0c:	e7df      	b.n	80089ce <_strtod_l+0xe6>
 8008a0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a10:	1c5a      	adds	r2, r3, #1
 8008a12:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a14:	785b      	ldrb	r3, [r3, #1]
 8008a16:	2b30      	cmp	r3, #48	@ 0x30
 8008a18:	d0f9      	beq.n	8008a0e <_strtod_l+0x126>
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d09d      	beq.n	800895a <_strtod_l+0x72>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	2700      	movs	r7, #0
 8008a22:	9308      	str	r3, [sp, #32]
 8008a24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a26:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a28:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008a2a:	46b9      	mov	r9, r7
 8008a2c:	220a      	movs	r2, #10
 8008a2e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008a30:	7805      	ldrb	r5, [r0, #0]
 8008a32:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008a36:	b2d9      	uxtb	r1, r3
 8008a38:	2909      	cmp	r1, #9
 8008a3a:	d928      	bls.n	8008a8e <_strtod_l+0x1a6>
 8008a3c:	494f      	ldr	r1, [pc, #316]	@ (8008b7c <_strtod_l+0x294>)
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f000 ffd6 	bl	80099f0 <strncmp>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d032      	beq.n	8008aae <_strtod_l+0x1c6>
 8008a48:	2000      	movs	r0, #0
 8008a4a:	462a      	mov	r2, r5
 8008a4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a4e:	464d      	mov	r5, r9
 8008a50:	4603      	mov	r3, r0
 8008a52:	2a65      	cmp	r2, #101	@ 0x65
 8008a54:	d001      	beq.n	8008a5a <_strtod_l+0x172>
 8008a56:	2a45      	cmp	r2, #69	@ 0x45
 8008a58:	d114      	bne.n	8008a84 <_strtod_l+0x19c>
 8008a5a:	b91d      	cbnz	r5, 8008a64 <_strtod_l+0x17c>
 8008a5c:	9a08      	ldr	r2, [sp, #32]
 8008a5e:	4302      	orrs	r2, r0
 8008a60:	d096      	beq.n	8008990 <_strtod_l+0xa8>
 8008a62:	2500      	movs	r5, #0
 8008a64:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008a66:	1c62      	adds	r2, r4, #1
 8008a68:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a6a:	7862      	ldrb	r2, [r4, #1]
 8008a6c:	2a2b      	cmp	r2, #43	@ 0x2b
 8008a6e:	d07a      	beq.n	8008b66 <_strtod_l+0x27e>
 8008a70:	2a2d      	cmp	r2, #45	@ 0x2d
 8008a72:	d07e      	beq.n	8008b72 <_strtod_l+0x28a>
 8008a74:	f04f 0c00 	mov.w	ip, #0
 8008a78:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008a7c:	2909      	cmp	r1, #9
 8008a7e:	f240 8085 	bls.w	8008b8c <_strtod_l+0x2a4>
 8008a82:	9419      	str	r4, [sp, #100]	@ 0x64
 8008a84:	f04f 0800 	mov.w	r8, #0
 8008a88:	e0a5      	b.n	8008bd6 <_strtod_l+0x2ee>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	e7c8      	b.n	8008a20 <_strtod_l+0x138>
 8008a8e:	f1b9 0f08 	cmp.w	r9, #8
 8008a92:	bfd8      	it	le
 8008a94:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008a96:	f100 0001 	add.w	r0, r0, #1
 8008a9a:	bfda      	itte	le
 8008a9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008aa0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008aa2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008aa6:	f109 0901 	add.w	r9, r9, #1
 8008aaa:	9019      	str	r0, [sp, #100]	@ 0x64
 8008aac:	e7bf      	b.n	8008a2e <_strtod_l+0x146>
 8008aae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ab4:	785a      	ldrb	r2, [r3, #1]
 8008ab6:	f1b9 0f00 	cmp.w	r9, #0
 8008aba:	d03b      	beq.n	8008b34 <_strtod_l+0x24c>
 8008abc:	900a      	str	r0, [sp, #40]	@ 0x28
 8008abe:	464d      	mov	r5, r9
 8008ac0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008ac4:	2b09      	cmp	r3, #9
 8008ac6:	d912      	bls.n	8008aee <_strtod_l+0x206>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e7c2      	b.n	8008a52 <_strtod_l+0x16a>
 8008acc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ad2:	785a      	ldrb	r2, [r3, #1]
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	2a30      	cmp	r2, #48	@ 0x30
 8008ad8:	d0f8      	beq.n	8008acc <_strtod_l+0x1e4>
 8008ada:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008ade:	2b08      	cmp	r3, #8
 8008ae0:	f200 84d2 	bhi.w	8009488 <_strtod_l+0xba0>
 8008ae4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ae6:	900a      	str	r0, [sp, #40]	@ 0x28
 8008ae8:	2000      	movs	r0, #0
 8008aea:	930c      	str	r3, [sp, #48]	@ 0x30
 8008aec:	4605      	mov	r5, r0
 8008aee:	3a30      	subs	r2, #48	@ 0x30
 8008af0:	f100 0301 	add.w	r3, r0, #1
 8008af4:	d018      	beq.n	8008b28 <_strtod_l+0x240>
 8008af6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008af8:	4419      	add	r1, r3
 8008afa:	910a      	str	r1, [sp, #40]	@ 0x28
 8008afc:	462e      	mov	r6, r5
 8008afe:	f04f 0e0a 	mov.w	lr, #10
 8008b02:	1c71      	adds	r1, r6, #1
 8008b04:	eba1 0c05 	sub.w	ip, r1, r5
 8008b08:	4563      	cmp	r3, ip
 8008b0a:	dc15      	bgt.n	8008b38 <_strtod_l+0x250>
 8008b0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008b10:	182b      	adds	r3, r5, r0
 8008b12:	2b08      	cmp	r3, #8
 8008b14:	f105 0501 	add.w	r5, r5, #1
 8008b18:	4405      	add	r5, r0
 8008b1a:	dc1a      	bgt.n	8008b52 <_strtod_l+0x26a>
 8008b1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b1e:	230a      	movs	r3, #10
 8008b20:	fb03 2301 	mla	r3, r3, r1, r2
 8008b24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b26:	2300      	movs	r3, #0
 8008b28:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b2a:	1c51      	adds	r1, r2, #1
 8008b2c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008b2e:	7852      	ldrb	r2, [r2, #1]
 8008b30:	4618      	mov	r0, r3
 8008b32:	e7c5      	b.n	8008ac0 <_strtod_l+0x1d8>
 8008b34:	4648      	mov	r0, r9
 8008b36:	e7ce      	b.n	8008ad6 <_strtod_l+0x1ee>
 8008b38:	2e08      	cmp	r6, #8
 8008b3a:	dc05      	bgt.n	8008b48 <_strtod_l+0x260>
 8008b3c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008b3e:	fb0e f606 	mul.w	r6, lr, r6
 8008b42:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008b44:	460e      	mov	r6, r1
 8008b46:	e7dc      	b.n	8008b02 <_strtod_l+0x21a>
 8008b48:	2910      	cmp	r1, #16
 8008b4a:	bfd8      	it	le
 8008b4c:	fb0e f707 	mulle.w	r7, lr, r7
 8008b50:	e7f8      	b.n	8008b44 <_strtod_l+0x25c>
 8008b52:	2b0f      	cmp	r3, #15
 8008b54:	bfdc      	itt	le
 8008b56:	230a      	movle	r3, #10
 8008b58:	fb03 2707 	mlale	r7, r3, r7, r2
 8008b5c:	e7e3      	b.n	8008b26 <_strtod_l+0x23e>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b62:	2301      	movs	r3, #1
 8008b64:	e77a      	b.n	8008a5c <_strtod_l+0x174>
 8008b66:	f04f 0c00 	mov.w	ip, #0
 8008b6a:	1ca2      	adds	r2, r4, #2
 8008b6c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b6e:	78a2      	ldrb	r2, [r4, #2]
 8008b70:	e782      	b.n	8008a78 <_strtod_l+0x190>
 8008b72:	f04f 0c01 	mov.w	ip, #1
 8008b76:	e7f8      	b.n	8008b6a <_strtod_l+0x282>
 8008b78:	08021904 	.word	0x08021904
 8008b7c:	0802173b 	.word	0x0802173b
 8008b80:	7ff00000 	.word	0x7ff00000
 8008b84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b86:	1c51      	adds	r1, r2, #1
 8008b88:	9119      	str	r1, [sp, #100]	@ 0x64
 8008b8a:	7852      	ldrb	r2, [r2, #1]
 8008b8c:	2a30      	cmp	r2, #48	@ 0x30
 8008b8e:	d0f9      	beq.n	8008b84 <_strtod_l+0x29c>
 8008b90:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008b94:	2908      	cmp	r1, #8
 8008b96:	f63f af75 	bhi.w	8008a84 <_strtod_l+0x19c>
 8008b9a:	3a30      	subs	r2, #48	@ 0x30
 8008b9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b9e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ba0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008ba2:	f04f 080a 	mov.w	r8, #10
 8008ba6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ba8:	1c56      	adds	r6, r2, #1
 8008baa:	9619      	str	r6, [sp, #100]	@ 0x64
 8008bac:	7852      	ldrb	r2, [r2, #1]
 8008bae:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008bb2:	f1be 0f09 	cmp.w	lr, #9
 8008bb6:	d939      	bls.n	8008c2c <_strtod_l+0x344>
 8008bb8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008bba:	1a76      	subs	r6, r6, r1
 8008bbc:	2e08      	cmp	r6, #8
 8008bbe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008bc2:	dc03      	bgt.n	8008bcc <_strtod_l+0x2e4>
 8008bc4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008bc6:	4588      	cmp	r8, r1
 8008bc8:	bfa8      	it	ge
 8008bca:	4688      	movge	r8, r1
 8008bcc:	f1bc 0f00 	cmp.w	ip, #0
 8008bd0:	d001      	beq.n	8008bd6 <_strtod_l+0x2ee>
 8008bd2:	f1c8 0800 	rsb	r8, r8, #0
 8008bd6:	2d00      	cmp	r5, #0
 8008bd8:	d14e      	bne.n	8008c78 <_strtod_l+0x390>
 8008bda:	9908      	ldr	r1, [sp, #32]
 8008bdc:	4308      	orrs	r0, r1
 8008bde:	f47f aebc 	bne.w	800895a <_strtod_l+0x72>
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f47f aed4 	bne.w	8008990 <_strtod_l+0xa8>
 8008be8:	2a69      	cmp	r2, #105	@ 0x69
 8008bea:	d028      	beq.n	8008c3e <_strtod_l+0x356>
 8008bec:	dc25      	bgt.n	8008c3a <_strtod_l+0x352>
 8008bee:	2a49      	cmp	r2, #73	@ 0x49
 8008bf0:	d025      	beq.n	8008c3e <_strtod_l+0x356>
 8008bf2:	2a4e      	cmp	r2, #78	@ 0x4e
 8008bf4:	f47f aecc 	bne.w	8008990 <_strtod_l+0xa8>
 8008bf8:	499a      	ldr	r1, [pc, #616]	@ (8008e64 <_strtod_l+0x57c>)
 8008bfa:	a819      	add	r0, sp, #100	@ 0x64
 8008bfc:	f001 f9e0 	bl	8009fc0 <__match>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	f43f aec5 	beq.w	8008990 <_strtod_l+0xa8>
 8008c06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	2b28      	cmp	r3, #40	@ 0x28
 8008c0c:	d12e      	bne.n	8008c6c <_strtod_l+0x384>
 8008c0e:	4996      	ldr	r1, [pc, #600]	@ (8008e68 <_strtod_l+0x580>)
 8008c10:	aa1c      	add	r2, sp, #112	@ 0x70
 8008c12:	a819      	add	r0, sp, #100	@ 0x64
 8008c14:	f001 f9e8 	bl	8009fe8 <__hexnan>
 8008c18:	2805      	cmp	r0, #5
 8008c1a:	d127      	bne.n	8008c6c <_strtod_l+0x384>
 8008c1c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008c1e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008c22:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008c26:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008c2a:	e696      	b.n	800895a <_strtod_l+0x72>
 8008c2c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c2e:	fb08 2101 	mla	r1, r8, r1, r2
 8008c32:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008c36:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c38:	e7b5      	b.n	8008ba6 <_strtod_l+0x2be>
 8008c3a:	2a6e      	cmp	r2, #110	@ 0x6e
 8008c3c:	e7da      	b.n	8008bf4 <_strtod_l+0x30c>
 8008c3e:	498b      	ldr	r1, [pc, #556]	@ (8008e6c <_strtod_l+0x584>)
 8008c40:	a819      	add	r0, sp, #100	@ 0x64
 8008c42:	f001 f9bd 	bl	8009fc0 <__match>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	f43f aea2 	beq.w	8008990 <_strtod_l+0xa8>
 8008c4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c4e:	4988      	ldr	r1, [pc, #544]	@ (8008e70 <_strtod_l+0x588>)
 8008c50:	3b01      	subs	r3, #1
 8008c52:	a819      	add	r0, sp, #100	@ 0x64
 8008c54:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c56:	f001 f9b3 	bl	8009fc0 <__match>
 8008c5a:	b910      	cbnz	r0, 8008c62 <_strtod_l+0x37a>
 8008c5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c5e:	3301      	adds	r3, #1
 8008c60:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c62:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008e80 <_strtod_l+0x598>
 8008c66:	f04f 0a00 	mov.w	sl, #0
 8008c6a:	e676      	b.n	800895a <_strtod_l+0x72>
 8008c6c:	4881      	ldr	r0, [pc, #516]	@ (8008e74 <_strtod_l+0x58c>)
 8008c6e:	f000 fee3 	bl	8009a38 <nan>
 8008c72:	ec5b ab10 	vmov	sl, fp, d0
 8008c76:	e670      	b.n	800895a <_strtod_l+0x72>
 8008c78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c7a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008c7c:	eba8 0303 	sub.w	r3, r8, r3
 8008c80:	f1b9 0f00 	cmp.w	r9, #0
 8008c84:	bf08      	it	eq
 8008c86:	46a9      	moveq	r9, r5
 8008c88:	2d10      	cmp	r5, #16
 8008c8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c8c:	462c      	mov	r4, r5
 8008c8e:	bfa8      	it	ge
 8008c90:	2410      	movge	r4, #16
 8008c92:	f7f7 fc37 	bl	8000504 <__aeabi_ui2d>
 8008c96:	2d09      	cmp	r5, #9
 8008c98:	4682      	mov	sl, r0
 8008c9a:	468b      	mov	fp, r1
 8008c9c:	dc13      	bgt.n	8008cc6 <_strtod_l+0x3de>
 8008c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f43f ae5a 	beq.w	800895a <_strtod_l+0x72>
 8008ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ca8:	dd78      	ble.n	8008d9c <_strtod_l+0x4b4>
 8008caa:	2b16      	cmp	r3, #22
 8008cac:	dc5f      	bgt.n	8008d6e <_strtod_l+0x486>
 8008cae:	4972      	ldr	r1, [pc, #456]	@ (8008e78 <_strtod_l+0x590>)
 8008cb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008cb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cb8:	4652      	mov	r2, sl
 8008cba:	465b      	mov	r3, fp
 8008cbc:	f7f7 fc9c 	bl	80005f8 <__aeabi_dmul>
 8008cc0:	4682      	mov	sl, r0
 8008cc2:	468b      	mov	fp, r1
 8008cc4:	e649      	b.n	800895a <_strtod_l+0x72>
 8008cc6:	4b6c      	ldr	r3, [pc, #432]	@ (8008e78 <_strtod_l+0x590>)
 8008cc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ccc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008cd0:	f7f7 fc92 	bl	80005f8 <__aeabi_dmul>
 8008cd4:	4682      	mov	sl, r0
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	468b      	mov	fp, r1
 8008cda:	f7f7 fc13 	bl	8000504 <__aeabi_ui2d>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	4650      	mov	r0, sl
 8008ce4:	4659      	mov	r1, fp
 8008ce6:	f7f7 fad1 	bl	800028c <__adddf3>
 8008cea:	2d0f      	cmp	r5, #15
 8008cec:	4682      	mov	sl, r0
 8008cee:	468b      	mov	fp, r1
 8008cf0:	ddd5      	ble.n	8008c9e <_strtod_l+0x3b6>
 8008cf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cf4:	1b2c      	subs	r4, r5, r4
 8008cf6:	441c      	add	r4, r3
 8008cf8:	2c00      	cmp	r4, #0
 8008cfa:	f340 8093 	ble.w	8008e24 <_strtod_l+0x53c>
 8008cfe:	f014 030f 	ands.w	r3, r4, #15
 8008d02:	d00a      	beq.n	8008d1a <_strtod_l+0x432>
 8008d04:	495c      	ldr	r1, [pc, #368]	@ (8008e78 <_strtod_l+0x590>)
 8008d06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d0a:	4652      	mov	r2, sl
 8008d0c:	465b      	mov	r3, fp
 8008d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d12:	f7f7 fc71 	bl	80005f8 <__aeabi_dmul>
 8008d16:	4682      	mov	sl, r0
 8008d18:	468b      	mov	fp, r1
 8008d1a:	f034 040f 	bics.w	r4, r4, #15
 8008d1e:	d073      	beq.n	8008e08 <_strtod_l+0x520>
 8008d20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008d24:	dd49      	ble.n	8008dba <_strtod_l+0x4d2>
 8008d26:	2400      	movs	r4, #0
 8008d28:	46a0      	mov	r8, r4
 8008d2a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008d2c:	46a1      	mov	r9, r4
 8008d2e:	9a05      	ldr	r2, [sp, #20]
 8008d30:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008e80 <_strtod_l+0x598>
 8008d34:	2322      	movs	r3, #34	@ 0x22
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	f04f 0a00 	mov.w	sl, #0
 8008d3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f43f ae0b 	beq.w	800895a <_strtod_l+0x72>
 8008d44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d46:	9805      	ldr	r0, [sp, #20]
 8008d48:	f7ff f946 	bl	8007fd8 <_Bfree>
 8008d4c:	9805      	ldr	r0, [sp, #20]
 8008d4e:	4649      	mov	r1, r9
 8008d50:	f7ff f942 	bl	8007fd8 <_Bfree>
 8008d54:	9805      	ldr	r0, [sp, #20]
 8008d56:	4641      	mov	r1, r8
 8008d58:	f7ff f93e 	bl	8007fd8 <_Bfree>
 8008d5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d5e:	9805      	ldr	r0, [sp, #20]
 8008d60:	f7ff f93a 	bl	8007fd8 <_Bfree>
 8008d64:	9805      	ldr	r0, [sp, #20]
 8008d66:	4621      	mov	r1, r4
 8008d68:	f7ff f936 	bl	8007fd8 <_Bfree>
 8008d6c:	e5f5      	b.n	800895a <_strtod_l+0x72>
 8008d6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008d74:	4293      	cmp	r3, r2
 8008d76:	dbbc      	blt.n	8008cf2 <_strtod_l+0x40a>
 8008d78:	4c3f      	ldr	r4, [pc, #252]	@ (8008e78 <_strtod_l+0x590>)
 8008d7a:	f1c5 050f 	rsb	r5, r5, #15
 8008d7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008d82:	4652      	mov	r2, sl
 8008d84:	465b      	mov	r3, fp
 8008d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d8a:	f7f7 fc35 	bl	80005f8 <__aeabi_dmul>
 8008d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d90:	1b5d      	subs	r5, r3, r5
 8008d92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008d96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008d9a:	e78f      	b.n	8008cbc <_strtod_l+0x3d4>
 8008d9c:	3316      	adds	r3, #22
 8008d9e:	dba8      	blt.n	8008cf2 <_strtod_l+0x40a>
 8008da0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008da2:	eba3 0808 	sub.w	r8, r3, r8
 8008da6:	4b34      	ldr	r3, [pc, #208]	@ (8008e78 <_strtod_l+0x590>)
 8008da8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008dac:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008db0:	4650      	mov	r0, sl
 8008db2:	4659      	mov	r1, fp
 8008db4:	f7f7 fd4a 	bl	800084c <__aeabi_ddiv>
 8008db8:	e782      	b.n	8008cc0 <_strtod_l+0x3d8>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	4f2f      	ldr	r7, [pc, #188]	@ (8008e7c <_strtod_l+0x594>)
 8008dbe:	1124      	asrs	r4, r4, #4
 8008dc0:	4650      	mov	r0, sl
 8008dc2:	4659      	mov	r1, fp
 8008dc4:	461e      	mov	r6, r3
 8008dc6:	2c01      	cmp	r4, #1
 8008dc8:	dc21      	bgt.n	8008e0e <_strtod_l+0x526>
 8008dca:	b10b      	cbz	r3, 8008dd0 <_strtod_l+0x4e8>
 8008dcc:	4682      	mov	sl, r0
 8008dce:	468b      	mov	fp, r1
 8008dd0:	492a      	ldr	r1, [pc, #168]	@ (8008e7c <_strtod_l+0x594>)
 8008dd2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008dd6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008dda:	4652      	mov	r2, sl
 8008ddc:	465b      	mov	r3, fp
 8008dde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008de2:	f7f7 fc09 	bl	80005f8 <__aeabi_dmul>
 8008de6:	4b26      	ldr	r3, [pc, #152]	@ (8008e80 <_strtod_l+0x598>)
 8008de8:	460a      	mov	r2, r1
 8008dea:	400b      	ands	r3, r1
 8008dec:	4925      	ldr	r1, [pc, #148]	@ (8008e84 <_strtod_l+0x59c>)
 8008dee:	428b      	cmp	r3, r1
 8008df0:	4682      	mov	sl, r0
 8008df2:	d898      	bhi.n	8008d26 <_strtod_l+0x43e>
 8008df4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008df8:	428b      	cmp	r3, r1
 8008dfa:	bf86      	itte	hi
 8008dfc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008e88 <_strtod_l+0x5a0>
 8008e00:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e04:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008e08:	2300      	movs	r3, #0
 8008e0a:	9308      	str	r3, [sp, #32]
 8008e0c:	e076      	b.n	8008efc <_strtod_l+0x614>
 8008e0e:	07e2      	lsls	r2, r4, #31
 8008e10:	d504      	bpl.n	8008e1c <_strtod_l+0x534>
 8008e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e16:	f7f7 fbef 	bl	80005f8 <__aeabi_dmul>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	3601      	adds	r6, #1
 8008e1e:	1064      	asrs	r4, r4, #1
 8008e20:	3708      	adds	r7, #8
 8008e22:	e7d0      	b.n	8008dc6 <_strtod_l+0x4de>
 8008e24:	d0f0      	beq.n	8008e08 <_strtod_l+0x520>
 8008e26:	4264      	negs	r4, r4
 8008e28:	f014 020f 	ands.w	r2, r4, #15
 8008e2c:	d00a      	beq.n	8008e44 <_strtod_l+0x55c>
 8008e2e:	4b12      	ldr	r3, [pc, #72]	@ (8008e78 <_strtod_l+0x590>)
 8008e30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e34:	4650      	mov	r0, sl
 8008e36:	4659      	mov	r1, fp
 8008e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3c:	f7f7 fd06 	bl	800084c <__aeabi_ddiv>
 8008e40:	4682      	mov	sl, r0
 8008e42:	468b      	mov	fp, r1
 8008e44:	1124      	asrs	r4, r4, #4
 8008e46:	d0df      	beq.n	8008e08 <_strtod_l+0x520>
 8008e48:	2c1f      	cmp	r4, #31
 8008e4a:	dd1f      	ble.n	8008e8c <_strtod_l+0x5a4>
 8008e4c:	2400      	movs	r4, #0
 8008e4e:	46a0      	mov	r8, r4
 8008e50:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008e52:	46a1      	mov	r9, r4
 8008e54:	9a05      	ldr	r2, [sp, #20]
 8008e56:	2322      	movs	r3, #34	@ 0x22
 8008e58:	f04f 0a00 	mov.w	sl, #0
 8008e5c:	f04f 0b00 	mov.w	fp, #0
 8008e60:	6013      	str	r3, [r2, #0]
 8008e62:	e76b      	b.n	8008d3c <_strtod_l+0x454>
 8008e64:	08021629 	.word	0x08021629
 8008e68:	080218f0 	.word	0x080218f0
 8008e6c:	08021621 	.word	0x08021621
 8008e70:	08021658 	.word	0x08021658
 8008e74:	08021791 	.word	0x08021791
 8008e78:	08021828 	.word	0x08021828
 8008e7c:	08021800 	.word	0x08021800
 8008e80:	7ff00000 	.word	0x7ff00000
 8008e84:	7ca00000 	.word	0x7ca00000
 8008e88:	7fefffff 	.word	0x7fefffff
 8008e8c:	f014 0310 	ands.w	r3, r4, #16
 8008e90:	bf18      	it	ne
 8008e92:	236a      	movne	r3, #106	@ 0x6a
 8008e94:	4ea9      	ldr	r6, [pc, #676]	@ (800913c <_strtod_l+0x854>)
 8008e96:	9308      	str	r3, [sp, #32]
 8008e98:	4650      	mov	r0, sl
 8008e9a:	4659      	mov	r1, fp
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	07e7      	lsls	r7, r4, #31
 8008ea0:	d504      	bpl.n	8008eac <_strtod_l+0x5c4>
 8008ea2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ea6:	f7f7 fba7 	bl	80005f8 <__aeabi_dmul>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	1064      	asrs	r4, r4, #1
 8008eae:	f106 0608 	add.w	r6, r6, #8
 8008eb2:	d1f4      	bne.n	8008e9e <_strtod_l+0x5b6>
 8008eb4:	b10b      	cbz	r3, 8008eba <_strtod_l+0x5d2>
 8008eb6:	4682      	mov	sl, r0
 8008eb8:	468b      	mov	fp, r1
 8008eba:	9b08      	ldr	r3, [sp, #32]
 8008ebc:	b1b3      	cbz	r3, 8008eec <_strtod_l+0x604>
 8008ebe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008ec2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	4659      	mov	r1, fp
 8008eca:	dd0f      	ble.n	8008eec <_strtod_l+0x604>
 8008ecc:	2b1f      	cmp	r3, #31
 8008ece:	dd56      	ble.n	8008f7e <_strtod_l+0x696>
 8008ed0:	2b34      	cmp	r3, #52	@ 0x34
 8008ed2:	bfde      	ittt	le
 8008ed4:	f04f 33ff 	movle.w	r3, #4294967295
 8008ed8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008edc:	4093      	lslle	r3, r2
 8008ede:	f04f 0a00 	mov.w	sl, #0
 8008ee2:	bfcc      	ite	gt
 8008ee4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008ee8:	ea03 0b01 	andle.w	fp, r3, r1
 8008eec:	2200      	movs	r2, #0
 8008eee:	2300      	movs	r3, #0
 8008ef0:	4650      	mov	r0, sl
 8008ef2:	4659      	mov	r1, fp
 8008ef4:	f7f7 fde8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	d1a7      	bne.n	8008e4c <_strtod_l+0x564>
 8008efc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008f02:	9805      	ldr	r0, [sp, #20]
 8008f04:	462b      	mov	r3, r5
 8008f06:	464a      	mov	r2, r9
 8008f08:	f7ff f8ce 	bl	80080a8 <__s2b>
 8008f0c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	f43f af09 	beq.w	8008d26 <_strtod_l+0x43e>
 8008f14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f18:	2a00      	cmp	r2, #0
 8008f1a:	eba3 0308 	sub.w	r3, r3, r8
 8008f1e:	bfa8      	it	ge
 8008f20:	2300      	movge	r3, #0
 8008f22:	9312      	str	r3, [sp, #72]	@ 0x48
 8008f24:	2400      	movs	r4, #0
 8008f26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f2a:	9316      	str	r3, [sp, #88]	@ 0x58
 8008f2c:	46a0      	mov	r8, r4
 8008f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f30:	9805      	ldr	r0, [sp, #20]
 8008f32:	6859      	ldr	r1, [r3, #4]
 8008f34:	f7ff f810 	bl	8007f58 <_Balloc>
 8008f38:	4681      	mov	r9, r0
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	f43f aef7 	beq.w	8008d2e <_strtod_l+0x446>
 8008f40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f42:	691a      	ldr	r2, [r3, #16]
 8008f44:	3202      	adds	r2, #2
 8008f46:	f103 010c 	add.w	r1, r3, #12
 8008f4a:	0092      	lsls	r2, r2, #2
 8008f4c:	300c      	adds	r0, #12
 8008f4e:	f7fe f894 	bl	800707a <memcpy>
 8008f52:	ec4b ab10 	vmov	d0, sl, fp
 8008f56:	9805      	ldr	r0, [sp, #20]
 8008f58:	aa1c      	add	r2, sp, #112	@ 0x70
 8008f5a:	a91b      	add	r1, sp, #108	@ 0x6c
 8008f5c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008f60:	f7ff fbd6 	bl	8008710 <__d2b>
 8008f64:	901a      	str	r0, [sp, #104]	@ 0x68
 8008f66:	2800      	cmp	r0, #0
 8008f68:	f43f aee1 	beq.w	8008d2e <_strtod_l+0x446>
 8008f6c:	9805      	ldr	r0, [sp, #20]
 8008f6e:	2101      	movs	r1, #1
 8008f70:	f7ff f930 	bl	80081d4 <__i2b>
 8008f74:	4680      	mov	r8, r0
 8008f76:	b948      	cbnz	r0, 8008f8c <_strtod_l+0x6a4>
 8008f78:	f04f 0800 	mov.w	r8, #0
 8008f7c:	e6d7      	b.n	8008d2e <_strtod_l+0x446>
 8008f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f82:	fa02 f303 	lsl.w	r3, r2, r3
 8008f86:	ea03 0a0a 	and.w	sl, r3, sl
 8008f8a:	e7af      	b.n	8008eec <_strtod_l+0x604>
 8008f8c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008f8e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008f90:	2d00      	cmp	r5, #0
 8008f92:	bfab      	itete	ge
 8008f94:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008f96:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008f98:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008f9a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008f9c:	bfac      	ite	ge
 8008f9e:	18ef      	addge	r7, r5, r3
 8008fa0:	1b5e      	sublt	r6, r3, r5
 8008fa2:	9b08      	ldr	r3, [sp, #32]
 8008fa4:	1aed      	subs	r5, r5, r3
 8008fa6:	4415      	add	r5, r2
 8008fa8:	4b65      	ldr	r3, [pc, #404]	@ (8009140 <_strtod_l+0x858>)
 8008faa:	3d01      	subs	r5, #1
 8008fac:	429d      	cmp	r5, r3
 8008fae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008fb2:	da50      	bge.n	8009056 <_strtod_l+0x76e>
 8008fb4:	1b5b      	subs	r3, r3, r5
 8008fb6:	2b1f      	cmp	r3, #31
 8008fb8:	eba2 0203 	sub.w	r2, r2, r3
 8008fbc:	f04f 0101 	mov.w	r1, #1
 8008fc0:	dc3d      	bgt.n	800903e <_strtod_l+0x756>
 8008fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008fc8:	2300      	movs	r3, #0
 8008fca:	9310      	str	r3, [sp, #64]	@ 0x40
 8008fcc:	18bd      	adds	r5, r7, r2
 8008fce:	9b08      	ldr	r3, [sp, #32]
 8008fd0:	42af      	cmp	r7, r5
 8008fd2:	4416      	add	r6, r2
 8008fd4:	441e      	add	r6, r3
 8008fd6:	463b      	mov	r3, r7
 8008fd8:	bfa8      	it	ge
 8008fda:	462b      	movge	r3, r5
 8008fdc:	42b3      	cmp	r3, r6
 8008fde:	bfa8      	it	ge
 8008fe0:	4633      	movge	r3, r6
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	bfc2      	ittt	gt
 8008fe6:	1aed      	subgt	r5, r5, r3
 8008fe8:	1af6      	subgt	r6, r6, r3
 8008fea:	1aff      	subgt	r7, r7, r3
 8008fec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	dd16      	ble.n	8009020 <_strtod_l+0x738>
 8008ff2:	4641      	mov	r1, r8
 8008ff4:	9805      	ldr	r0, [sp, #20]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	f7ff f9a4 	bl	8008344 <__pow5mult>
 8008ffc:	4680      	mov	r8, r0
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d0ba      	beq.n	8008f78 <_strtod_l+0x690>
 8009002:	4601      	mov	r1, r0
 8009004:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009006:	9805      	ldr	r0, [sp, #20]
 8009008:	f7ff f8fa 	bl	8008200 <__multiply>
 800900c:	900a      	str	r0, [sp, #40]	@ 0x28
 800900e:	2800      	cmp	r0, #0
 8009010:	f43f ae8d 	beq.w	8008d2e <_strtod_l+0x446>
 8009014:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009016:	9805      	ldr	r0, [sp, #20]
 8009018:	f7fe ffde 	bl	8007fd8 <_Bfree>
 800901c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800901e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009020:	2d00      	cmp	r5, #0
 8009022:	dc1d      	bgt.n	8009060 <_strtod_l+0x778>
 8009024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009026:	2b00      	cmp	r3, #0
 8009028:	dd23      	ble.n	8009072 <_strtod_l+0x78a>
 800902a:	4649      	mov	r1, r9
 800902c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800902e:	9805      	ldr	r0, [sp, #20]
 8009030:	f7ff f988 	bl	8008344 <__pow5mult>
 8009034:	4681      	mov	r9, r0
 8009036:	b9e0      	cbnz	r0, 8009072 <_strtod_l+0x78a>
 8009038:	f04f 0900 	mov.w	r9, #0
 800903c:	e677      	b.n	8008d2e <_strtod_l+0x446>
 800903e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009042:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009046:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800904a:	35e2      	adds	r5, #226	@ 0xe2
 800904c:	fa01 f305 	lsl.w	r3, r1, r5
 8009050:	9310      	str	r3, [sp, #64]	@ 0x40
 8009052:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009054:	e7ba      	b.n	8008fcc <_strtod_l+0x6e4>
 8009056:	2300      	movs	r3, #0
 8009058:	9310      	str	r3, [sp, #64]	@ 0x40
 800905a:	2301      	movs	r3, #1
 800905c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800905e:	e7b5      	b.n	8008fcc <_strtod_l+0x6e4>
 8009060:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009062:	9805      	ldr	r0, [sp, #20]
 8009064:	462a      	mov	r2, r5
 8009066:	f7ff f9c7 	bl	80083f8 <__lshift>
 800906a:	901a      	str	r0, [sp, #104]	@ 0x68
 800906c:	2800      	cmp	r0, #0
 800906e:	d1d9      	bne.n	8009024 <_strtod_l+0x73c>
 8009070:	e65d      	b.n	8008d2e <_strtod_l+0x446>
 8009072:	2e00      	cmp	r6, #0
 8009074:	dd07      	ble.n	8009086 <_strtod_l+0x79e>
 8009076:	4649      	mov	r1, r9
 8009078:	9805      	ldr	r0, [sp, #20]
 800907a:	4632      	mov	r2, r6
 800907c:	f7ff f9bc 	bl	80083f8 <__lshift>
 8009080:	4681      	mov	r9, r0
 8009082:	2800      	cmp	r0, #0
 8009084:	d0d8      	beq.n	8009038 <_strtod_l+0x750>
 8009086:	2f00      	cmp	r7, #0
 8009088:	dd08      	ble.n	800909c <_strtod_l+0x7b4>
 800908a:	4641      	mov	r1, r8
 800908c:	9805      	ldr	r0, [sp, #20]
 800908e:	463a      	mov	r2, r7
 8009090:	f7ff f9b2 	bl	80083f8 <__lshift>
 8009094:	4680      	mov	r8, r0
 8009096:	2800      	cmp	r0, #0
 8009098:	f43f ae49 	beq.w	8008d2e <_strtod_l+0x446>
 800909c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800909e:	9805      	ldr	r0, [sp, #20]
 80090a0:	464a      	mov	r2, r9
 80090a2:	f7ff fa31 	bl	8008508 <__mdiff>
 80090a6:	4604      	mov	r4, r0
 80090a8:	2800      	cmp	r0, #0
 80090aa:	f43f ae40 	beq.w	8008d2e <_strtod_l+0x446>
 80090ae:	68c3      	ldr	r3, [r0, #12]
 80090b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80090b2:	2300      	movs	r3, #0
 80090b4:	60c3      	str	r3, [r0, #12]
 80090b6:	4641      	mov	r1, r8
 80090b8:	f7ff fa0a 	bl	80084d0 <__mcmp>
 80090bc:	2800      	cmp	r0, #0
 80090be:	da45      	bge.n	800914c <_strtod_l+0x864>
 80090c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090c2:	ea53 030a 	orrs.w	r3, r3, sl
 80090c6:	d16b      	bne.n	80091a0 <_strtod_l+0x8b8>
 80090c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d167      	bne.n	80091a0 <_strtod_l+0x8b8>
 80090d0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80090d4:	0d1b      	lsrs	r3, r3, #20
 80090d6:	051b      	lsls	r3, r3, #20
 80090d8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80090dc:	d960      	bls.n	80091a0 <_strtod_l+0x8b8>
 80090de:	6963      	ldr	r3, [r4, #20]
 80090e0:	b913      	cbnz	r3, 80090e8 <_strtod_l+0x800>
 80090e2:	6923      	ldr	r3, [r4, #16]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	dd5b      	ble.n	80091a0 <_strtod_l+0x8b8>
 80090e8:	4621      	mov	r1, r4
 80090ea:	2201      	movs	r2, #1
 80090ec:	9805      	ldr	r0, [sp, #20]
 80090ee:	f7ff f983 	bl	80083f8 <__lshift>
 80090f2:	4641      	mov	r1, r8
 80090f4:	4604      	mov	r4, r0
 80090f6:	f7ff f9eb 	bl	80084d0 <__mcmp>
 80090fa:	2800      	cmp	r0, #0
 80090fc:	dd50      	ble.n	80091a0 <_strtod_l+0x8b8>
 80090fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009102:	9a08      	ldr	r2, [sp, #32]
 8009104:	0d1b      	lsrs	r3, r3, #20
 8009106:	051b      	lsls	r3, r3, #20
 8009108:	2a00      	cmp	r2, #0
 800910a:	d06a      	beq.n	80091e2 <_strtod_l+0x8fa>
 800910c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009110:	d867      	bhi.n	80091e2 <_strtod_l+0x8fa>
 8009112:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009116:	f67f ae9d 	bls.w	8008e54 <_strtod_l+0x56c>
 800911a:	4b0a      	ldr	r3, [pc, #40]	@ (8009144 <_strtod_l+0x85c>)
 800911c:	4650      	mov	r0, sl
 800911e:	4659      	mov	r1, fp
 8009120:	2200      	movs	r2, #0
 8009122:	f7f7 fa69 	bl	80005f8 <__aeabi_dmul>
 8009126:	4b08      	ldr	r3, [pc, #32]	@ (8009148 <_strtod_l+0x860>)
 8009128:	400b      	ands	r3, r1
 800912a:	4682      	mov	sl, r0
 800912c:	468b      	mov	fp, r1
 800912e:	2b00      	cmp	r3, #0
 8009130:	f47f ae08 	bne.w	8008d44 <_strtod_l+0x45c>
 8009134:	9a05      	ldr	r2, [sp, #20]
 8009136:	2322      	movs	r3, #34	@ 0x22
 8009138:	6013      	str	r3, [r2, #0]
 800913a:	e603      	b.n	8008d44 <_strtod_l+0x45c>
 800913c:	08021918 	.word	0x08021918
 8009140:	fffffc02 	.word	0xfffffc02
 8009144:	39500000 	.word	0x39500000
 8009148:	7ff00000 	.word	0x7ff00000
 800914c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009150:	d165      	bne.n	800921e <_strtod_l+0x936>
 8009152:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009154:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009158:	b35a      	cbz	r2, 80091b2 <_strtod_l+0x8ca>
 800915a:	4a9f      	ldr	r2, [pc, #636]	@ (80093d8 <_strtod_l+0xaf0>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d12b      	bne.n	80091b8 <_strtod_l+0x8d0>
 8009160:	9b08      	ldr	r3, [sp, #32]
 8009162:	4651      	mov	r1, sl
 8009164:	b303      	cbz	r3, 80091a8 <_strtod_l+0x8c0>
 8009166:	4b9d      	ldr	r3, [pc, #628]	@ (80093dc <_strtod_l+0xaf4>)
 8009168:	465a      	mov	r2, fp
 800916a:	4013      	ands	r3, r2
 800916c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009170:	f04f 32ff 	mov.w	r2, #4294967295
 8009174:	d81b      	bhi.n	80091ae <_strtod_l+0x8c6>
 8009176:	0d1b      	lsrs	r3, r3, #20
 8009178:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800917c:	fa02 f303 	lsl.w	r3, r2, r3
 8009180:	4299      	cmp	r1, r3
 8009182:	d119      	bne.n	80091b8 <_strtod_l+0x8d0>
 8009184:	4b96      	ldr	r3, [pc, #600]	@ (80093e0 <_strtod_l+0xaf8>)
 8009186:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009188:	429a      	cmp	r2, r3
 800918a:	d102      	bne.n	8009192 <_strtod_l+0x8aa>
 800918c:	3101      	adds	r1, #1
 800918e:	f43f adce 	beq.w	8008d2e <_strtod_l+0x446>
 8009192:	4b92      	ldr	r3, [pc, #584]	@ (80093dc <_strtod_l+0xaf4>)
 8009194:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009196:	401a      	ands	r2, r3
 8009198:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800919c:	f04f 0a00 	mov.w	sl, #0
 80091a0:	9b08      	ldr	r3, [sp, #32]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1b9      	bne.n	800911a <_strtod_l+0x832>
 80091a6:	e5cd      	b.n	8008d44 <_strtod_l+0x45c>
 80091a8:	f04f 33ff 	mov.w	r3, #4294967295
 80091ac:	e7e8      	b.n	8009180 <_strtod_l+0x898>
 80091ae:	4613      	mov	r3, r2
 80091b0:	e7e6      	b.n	8009180 <_strtod_l+0x898>
 80091b2:	ea53 030a 	orrs.w	r3, r3, sl
 80091b6:	d0a2      	beq.n	80090fe <_strtod_l+0x816>
 80091b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80091ba:	b1db      	cbz	r3, 80091f4 <_strtod_l+0x90c>
 80091bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091be:	4213      	tst	r3, r2
 80091c0:	d0ee      	beq.n	80091a0 <_strtod_l+0x8b8>
 80091c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091c4:	9a08      	ldr	r2, [sp, #32]
 80091c6:	4650      	mov	r0, sl
 80091c8:	4659      	mov	r1, fp
 80091ca:	b1bb      	cbz	r3, 80091fc <_strtod_l+0x914>
 80091cc:	f7ff fb6e 	bl	80088ac <sulp>
 80091d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091d4:	ec53 2b10 	vmov	r2, r3, d0
 80091d8:	f7f7 f858 	bl	800028c <__adddf3>
 80091dc:	4682      	mov	sl, r0
 80091de:	468b      	mov	fp, r1
 80091e0:	e7de      	b.n	80091a0 <_strtod_l+0x8b8>
 80091e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80091e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80091ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80091ee:	f04f 3aff 	mov.w	sl, #4294967295
 80091f2:	e7d5      	b.n	80091a0 <_strtod_l+0x8b8>
 80091f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80091f6:	ea13 0f0a 	tst.w	r3, sl
 80091fa:	e7e1      	b.n	80091c0 <_strtod_l+0x8d8>
 80091fc:	f7ff fb56 	bl	80088ac <sulp>
 8009200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009204:	ec53 2b10 	vmov	r2, r3, d0
 8009208:	f7f7 f83e 	bl	8000288 <__aeabi_dsub>
 800920c:	2200      	movs	r2, #0
 800920e:	2300      	movs	r3, #0
 8009210:	4682      	mov	sl, r0
 8009212:	468b      	mov	fp, r1
 8009214:	f7f7 fc58 	bl	8000ac8 <__aeabi_dcmpeq>
 8009218:	2800      	cmp	r0, #0
 800921a:	d0c1      	beq.n	80091a0 <_strtod_l+0x8b8>
 800921c:	e61a      	b.n	8008e54 <_strtod_l+0x56c>
 800921e:	4641      	mov	r1, r8
 8009220:	4620      	mov	r0, r4
 8009222:	f7ff facd 	bl	80087c0 <__ratio>
 8009226:	ec57 6b10 	vmov	r6, r7, d0
 800922a:	2200      	movs	r2, #0
 800922c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009230:	4630      	mov	r0, r6
 8009232:	4639      	mov	r1, r7
 8009234:	f7f7 fc5c 	bl	8000af0 <__aeabi_dcmple>
 8009238:	2800      	cmp	r0, #0
 800923a:	d06f      	beq.n	800931c <_strtod_l+0xa34>
 800923c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800923e:	2b00      	cmp	r3, #0
 8009240:	d17a      	bne.n	8009338 <_strtod_l+0xa50>
 8009242:	f1ba 0f00 	cmp.w	sl, #0
 8009246:	d158      	bne.n	80092fa <_strtod_l+0xa12>
 8009248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800924a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800924e:	2b00      	cmp	r3, #0
 8009250:	d15a      	bne.n	8009308 <_strtod_l+0xa20>
 8009252:	4b64      	ldr	r3, [pc, #400]	@ (80093e4 <_strtod_l+0xafc>)
 8009254:	2200      	movs	r2, #0
 8009256:	4630      	mov	r0, r6
 8009258:	4639      	mov	r1, r7
 800925a:	f7f7 fc3f 	bl	8000adc <__aeabi_dcmplt>
 800925e:	2800      	cmp	r0, #0
 8009260:	d159      	bne.n	8009316 <_strtod_l+0xa2e>
 8009262:	4630      	mov	r0, r6
 8009264:	4639      	mov	r1, r7
 8009266:	4b60      	ldr	r3, [pc, #384]	@ (80093e8 <_strtod_l+0xb00>)
 8009268:	2200      	movs	r2, #0
 800926a:	f7f7 f9c5 	bl	80005f8 <__aeabi_dmul>
 800926e:	4606      	mov	r6, r0
 8009270:	460f      	mov	r7, r1
 8009272:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009276:	9606      	str	r6, [sp, #24]
 8009278:	9307      	str	r3, [sp, #28]
 800927a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800927e:	4d57      	ldr	r5, [pc, #348]	@ (80093dc <_strtod_l+0xaf4>)
 8009280:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009286:	401d      	ands	r5, r3
 8009288:	4b58      	ldr	r3, [pc, #352]	@ (80093ec <_strtod_l+0xb04>)
 800928a:	429d      	cmp	r5, r3
 800928c:	f040 80b2 	bne.w	80093f4 <_strtod_l+0xb0c>
 8009290:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009292:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009296:	ec4b ab10 	vmov	d0, sl, fp
 800929a:	f7ff f9c9 	bl	8008630 <__ulp>
 800929e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092a2:	ec51 0b10 	vmov	r0, r1, d0
 80092a6:	f7f7 f9a7 	bl	80005f8 <__aeabi_dmul>
 80092aa:	4652      	mov	r2, sl
 80092ac:	465b      	mov	r3, fp
 80092ae:	f7f6 ffed 	bl	800028c <__adddf3>
 80092b2:	460b      	mov	r3, r1
 80092b4:	4949      	ldr	r1, [pc, #292]	@ (80093dc <_strtod_l+0xaf4>)
 80092b6:	4a4e      	ldr	r2, [pc, #312]	@ (80093f0 <_strtod_l+0xb08>)
 80092b8:	4019      	ands	r1, r3
 80092ba:	4291      	cmp	r1, r2
 80092bc:	4682      	mov	sl, r0
 80092be:	d942      	bls.n	8009346 <_strtod_l+0xa5e>
 80092c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80092c2:	4b47      	ldr	r3, [pc, #284]	@ (80093e0 <_strtod_l+0xaf8>)
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d103      	bne.n	80092d0 <_strtod_l+0x9e8>
 80092c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80092ca:	3301      	adds	r3, #1
 80092cc:	f43f ad2f 	beq.w	8008d2e <_strtod_l+0x446>
 80092d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80093e0 <_strtod_l+0xaf8>
 80092d4:	f04f 3aff 	mov.w	sl, #4294967295
 80092d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092da:	9805      	ldr	r0, [sp, #20]
 80092dc:	f7fe fe7c 	bl	8007fd8 <_Bfree>
 80092e0:	9805      	ldr	r0, [sp, #20]
 80092e2:	4649      	mov	r1, r9
 80092e4:	f7fe fe78 	bl	8007fd8 <_Bfree>
 80092e8:	9805      	ldr	r0, [sp, #20]
 80092ea:	4641      	mov	r1, r8
 80092ec:	f7fe fe74 	bl	8007fd8 <_Bfree>
 80092f0:	9805      	ldr	r0, [sp, #20]
 80092f2:	4621      	mov	r1, r4
 80092f4:	f7fe fe70 	bl	8007fd8 <_Bfree>
 80092f8:	e619      	b.n	8008f2e <_strtod_l+0x646>
 80092fa:	f1ba 0f01 	cmp.w	sl, #1
 80092fe:	d103      	bne.n	8009308 <_strtod_l+0xa20>
 8009300:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009302:	2b00      	cmp	r3, #0
 8009304:	f43f ada6 	beq.w	8008e54 <_strtod_l+0x56c>
 8009308:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80093b8 <_strtod_l+0xad0>
 800930c:	4f35      	ldr	r7, [pc, #212]	@ (80093e4 <_strtod_l+0xafc>)
 800930e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009312:	2600      	movs	r6, #0
 8009314:	e7b1      	b.n	800927a <_strtod_l+0x992>
 8009316:	4f34      	ldr	r7, [pc, #208]	@ (80093e8 <_strtod_l+0xb00>)
 8009318:	2600      	movs	r6, #0
 800931a:	e7aa      	b.n	8009272 <_strtod_l+0x98a>
 800931c:	4b32      	ldr	r3, [pc, #200]	@ (80093e8 <_strtod_l+0xb00>)
 800931e:	4630      	mov	r0, r6
 8009320:	4639      	mov	r1, r7
 8009322:	2200      	movs	r2, #0
 8009324:	f7f7 f968 	bl	80005f8 <__aeabi_dmul>
 8009328:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800932a:	4606      	mov	r6, r0
 800932c:	460f      	mov	r7, r1
 800932e:	2b00      	cmp	r3, #0
 8009330:	d09f      	beq.n	8009272 <_strtod_l+0x98a>
 8009332:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009336:	e7a0      	b.n	800927a <_strtod_l+0x992>
 8009338:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80093c0 <_strtod_l+0xad8>
 800933c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009340:	ec57 6b17 	vmov	r6, r7, d7
 8009344:	e799      	b.n	800927a <_strtod_l+0x992>
 8009346:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800934a:	9b08      	ldr	r3, [sp, #32]
 800934c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009350:	2b00      	cmp	r3, #0
 8009352:	d1c1      	bne.n	80092d8 <_strtod_l+0x9f0>
 8009354:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009358:	0d1b      	lsrs	r3, r3, #20
 800935a:	051b      	lsls	r3, r3, #20
 800935c:	429d      	cmp	r5, r3
 800935e:	d1bb      	bne.n	80092d8 <_strtod_l+0x9f0>
 8009360:	4630      	mov	r0, r6
 8009362:	4639      	mov	r1, r7
 8009364:	f7f7 fca8 	bl	8000cb8 <__aeabi_d2lz>
 8009368:	f7f7 f918 	bl	800059c <__aeabi_l2d>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	4630      	mov	r0, r6
 8009372:	4639      	mov	r1, r7
 8009374:	f7f6 ff88 	bl	8000288 <__aeabi_dsub>
 8009378:	460b      	mov	r3, r1
 800937a:	4602      	mov	r2, r0
 800937c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009380:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009384:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009386:	ea46 060a 	orr.w	r6, r6, sl
 800938a:	431e      	orrs	r6, r3
 800938c:	d06f      	beq.n	800946e <_strtod_l+0xb86>
 800938e:	a30e      	add	r3, pc, #56	@ (adr r3, 80093c8 <_strtod_l+0xae0>)
 8009390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009394:	f7f7 fba2 	bl	8000adc <__aeabi_dcmplt>
 8009398:	2800      	cmp	r0, #0
 800939a:	f47f acd3 	bne.w	8008d44 <_strtod_l+0x45c>
 800939e:	a30c      	add	r3, pc, #48	@ (adr r3, 80093d0 <_strtod_l+0xae8>)
 80093a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093a8:	f7f7 fbb6 	bl	8000b18 <__aeabi_dcmpgt>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d093      	beq.n	80092d8 <_strtod_l+0x9f0>
 80093b0:	e4c8      	b.n	8008d44 <_strtod_l+0x45c>
 80093b2:	bf00      	nop
 80093b4:	f3af 8000 	nop.w
 80093b8:	00000000 	.word	0x00000000
 80093bc:	bff00000 	.word	0xbff00000
 80093c0:	00000000 	.word	0x00000000
 80093c4:	3ff00000 	.word	0x3ff00000
 80093c8:	94a03595 	.word	0x94a03595
 80093cc:	3fdfffff 	.word	0x3fdfffff
 80093d0:	35afe535 	.word	0x35afe535
 80093d4:	3fe00000 	.word	0x3fe00000
 80093d8:	000fffff 	.word	0x000fffff
 80093dc:	7ff00000 	.word	0x7ff00000
 80093e0:	7fefffff 	.word	0x7fefffff
 80093e4:	3ff00000 	.word	0x3ff00000
 80093e8:	3fe00000 	.word	0x3fe00000
 80093ec:	7fe00000 	.word	0x7fe00000
 80093f0:	7c9fffff 	.word	0x7c9fffff
 80093f4:	9b08      	ldr	r3, [sp, #32]
 80093f6:	b323      	cbz	r3, 8009442 <_strtod_l+0xb5a>
 80093f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80093fc:	d821      	bhi.n	8009442 <_strtod_l+0xb5a>
 80093fe:	a328      	add	r3, pc, #160	@ (adr r3, 80094a0 <_strtod_l+0xbb8>)
 8009400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009404:	4630      	mov	r0, r6
 8009406:	4639      	mov	r1, r7
 8009408:	f7f7 fb72 	bl	8000af0 <__aeabi_dcmple>
 800940c:	b1a0      	cbz	r0, 8009438 <_strtod_l+0xb50>
 800940e:	4639      	mov	r1, r7
 8009410:	4630      	mov	r0, r6
 8009412:	f7f7 fbc9 	bl	8000ba8 <__aeabi_d2uiz>
 8009416:	2801      	cmp	r0, #1
 8009418:	bf38      	it	cc
 800941a:	2001      	movcc	r0, #1
 800941c:	f7f7 f872 	bl	8000504 <__aeabi_ui2d>
 8009420:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009422:	4606      	mov	r6, r0
 8009424:	460f      	mov	r7, r1
 8009426:	b9fb      	cbnz	r3, 8009468 <_strtod_l+0xb80>
 8009428:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800942c:	9014      	str	r0, [sp, #80]	@ 0x50
 800942e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009430:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009434:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009438:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800943a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800943e:	1b5b      	subs	r3, r3, r5
 8009440:	9311      	str	r3, [sp, #68]	@ 0x44
 8009442:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009446:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800944a:	f7ff f8f1 	bl	8008630 <__ulp>
 800944e:	4650      	mov	r0, sl
 8009450:	ec53 2b10 	vmov	r2, r3, d0
 8009454:	4659      	mov	r1, fp
 8009456:	f7f7 f8cf 	bl	80005f8 <__aeabi_dmul>
 800945a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800945e:	f7f6 ff15 	bl	800028c <__adddf3>
 8009462:	4682      	mov	sl, r0
 8009464:	468b      	mov	fp, r1
 8009466:	e770      	b.n	800934a <_strtod_l+0xa62>
 8009468:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800946c:	e7e0      	b.n	8009430 <_strtod_l+0xb48>
 800946e:	a30e      	add	r3, pc, #56	@ (adr r3, 80094a8 <_strtod_l+0xbc0>)
 8009470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009474:	f7f7 fb32 	bl	8000adc <__aeabi_dcmplt>
 8009478:	e798      	b.n	80093ac <_strtod_l+0xac4>
 800947a:	2300      	movs	r3, #0
 800947c:	930e      	str	r3, [sp, #56]	@ 0x38
 800947e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009480:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009482:	6013      	str	r3, [r2, #0]
 8009484:	f7ff ba6d 	b.w	8008962 <_strtod_l+0x7a>
 8009488:	2a65      	cmp	r2, #101	@ 0x65
 800948a:	f43f ab68 	beq.w	8008b5e <_strtod_l+0x276>
 800948e:	2a45      	cmp	r2, #69	@ 0x45
 8009490:	f43f ab65 	beq.w	8008b5e <_strtod_l+0x276>
 8009494:	2301      	movs	r3, #1
 8009496:	f7ff bba0 	b.w	8008bda <_strtod_l+0x2f2>
 800949a:	bf00      	nop
 800949c:	f3af 8000 	nop.w
 80094a0:	ffc00000 	.word	0xffc00000
 80094a4:	41dfffff 	.word	0x41dfffff
 80094a8:	94a03595 	.word	0x94a03595
 80094ac:	3fcfffff 	.word	0x3fcfffff

080094b0 <_strtod_r>:
 80094b0:	4b01      	ldr	r3, [pc, #4]	@ (80094b8 <_strtod_r+0x8>)
 80094b2:	f7ff ba19 	b.w	80088e8 <_strtod_l>
 80094b6:	bf00      	nop
 80094b8:	200000d8 	.word	0x200000d8

080094bc <_strtol_l.isra.0>:
 80094bc:	2b24      	cmp	r3, #36	@ 0x24
 80094be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c2:	4686      	mov	lr, r0
 80094c4:	4690      	mov	r8, r2
 80094c6:	d801      	bhi.n	80094cc <_strtol_l.isra.0+0x10>
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d106      	bne.n	80094da <_strtol_l.isra.0+0x1e>
 80094cc:	f7fd fda8 	bl	8007020 <__errno>
 80094d0:	2316      	movs	r3, #22
 80094d2:	6003      	str	r3, [r0, #0]
 80094d4:	2000      	movs	r0, #0
 80094d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094da:	4834      	ldr	r0, [pc, #208]	@ (80095ac <_strtol_l.isra.0+0xf0>)
 80094dc:	460d      	mov	r5, r1
 80094de:	462a      	mov	r2, r5
 80094e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094e4:	5d06      	ldrb	r6, [r0, r4]
 80094e6:	f016 0608 	ands.w	r6, r6, #8
 80094ea:	d1f8      	bne.n	80094de <_strtol_l.isra.0+0x22>
 80094ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80094ee:	d110      	bne.n	8009512 <_strtol_l.isra.0+0x56>
 80094f0:	782c      	ldrb	r4, [r5, #0]
 80094f2:	2601      	movs	r6, #1
 80094f4:	1c95      	adds	r5, r2, #2
 80094f6:	f033 0210 	bics.w	r2, r3, #16
 80094fa:	d115      	bne.n	8009528 <_strtol_l.isra.0+0x6c>
 80094fc:	2c30      	cmp	r4, #48	@ 0x30
 80094fe:	d10d      	bne.n	800951c <_strtol_l.isra.0+0x60>
 8009500:	782a      	ldrb	r2, [r5, #0]
 8009502:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009506:	2a58      	cmp	r2, #88	@ 0x58
 8009508:	d108      	bne.n	800951c <_strtol_l.isra.0+0x60>
 800950a:	786c      	ldrb	r4, [r5, #1]
 800950c:	3502      	adds	r5, #2
 800950e:	2310      	movs	r3, #16
 8009510:	e00a      	b.n	8009528 <_strtol_l.isra.0+0x6c>
 8009512:	2c2b      	cmp	r4, #43	@ 0x2b
 8009514:	bf04      	itt	eq
 8009516:	782c      	ldrbeq	r4, [r5, #0]
 8009518:	1c95      	addeq	r5, r2, #2
 800951a:	e7ec      	b.n	80094f6 <_strtol_l.isra.0+0x3a>
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1f6      	bne.n	800950e <_strtol_l.isra.0+0x52>
 8009520:	2c30      	cmp	r4, #48	@ 0x30
 8009522:	bf14      	ite	ne
 8009524:	230a      	movne	r3, #10
 8009526:	2308      	moveq	r3, #8
 8009528:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800952c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009530:	2200      	movs	r2, #0
 8009532:	fbbc f9f3 	udiv	r9, ip, r3
 8009536:	4610      	mov	r0, r2
 8009538:	fb03 ca19 	mls	sl, r3, r9, ip
 800953c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009540:	2f09      	cmp	r7, #9
 8009542:	d80f      	bhi.n	8009564 <_strtol_l.isra.0+0xa8>
 8009544:	463c      	mov	r4, r7
 8009546:	42a3      	cmp	r3, r4
 8009548:	dd1b      	ble.n	8009582 <_strtol_l.isra.0+0xc6>
 800954a:	1c57      	adds	r7, r2, #1
 800954c:	d007      	beq.n	800955e <_strtol_l.isra.0+0xa2>
 800954e:	4581      	cmp	r9, r0
 8009550:	d314      	bcc.n	800957c <_strtol_l.isra.0+0xc0>
 8009552:	d101      	bne.n	8009558 <_strtol_l.isra.0+0x9c>
 8009554:	45a2      	cmp	sl, r4
 8009556:	db11      	blt.n	800957c <_strtol_l.isra.0+0xc0>
 8009558:	fb00 4003 	mla	r0, r0, r3, r4
 800955c:	2201      	movs	r2, #1
 800955e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009562:	e7eb      	b.n	800953c <_strtol_l.isra.0+0x80>
 8009564:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009568:	2f19      	cmp	r7, #25
 800956a:	d801      	bhi.n	8009570 <_strtol_l.isra.0+0xb4>
 800956c:	3c37      	subs	r4, #55	@ 0x37
 800956e:	e7ea      	b.n	8009546 <_strtol_l.isra.0+0x8a>
 8009570:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009574:	2f19      	cmp	r7, #25
 8009576:	d804      	bhi.n	8009582 <_strtol_l.isra.0+0xc6>
 8009578:	3c57      	subs	r4, #87	@ 0x57
 800957a:	e7e4      	b.n	8009546 <_strtol_l.isra.0+0x8a>
 800957c:	f04f 32ff 	mov.w	r2, #4294967295
 8009580:	e7ed      	b.n	800955e <_strtol_l.isra.0+0xa2>
 8009582:	1c53      	adds	r3, r2, #1
 8009584:	d108      	bne.n	8009598 <_strtol_l.isra.0+0xdc>
 8009586:	2322      	movs	r3, #34	@ 0x22
 8009588:	f8ce 3000 	str.w	r3, [lr]
 800958c:	4660      	mov	r0, ip
 800958e:	f1b8 0f00 	cmp.w	r8, #0
 8009592:	d0a0      	beq.n	80094d6 <_strtol_l.isra.0+0x1a>
 8009594:	1e69      	subs	r1, r5, #1
 8009596:	e006      	b.n	80095a6 <_strtol_l.isra.0+0xea>
 8009598:	b106      	cbz	r6, 800959c <_strtol_l.isra.0+0xe0>
 800959a:	4240      	negs	r0, r0
 800959c:	f1b8 0f00 	cmp.w	r8, #0
 80095a0:	d099      	beq.n	80094d6 <_strtol_l.isra.0+0x1a>
 80095a2:	2a00      	cmp	r2, #0
 80095a4:	d1f6      	bne.n	8009594 <_strtol_l.isra.0+0xd8>
 80095a6:	f8c8 1000 	str.w	r1, [r8]
 80095aa:	e794      	b.n	80094d6 <_strtol_l.isra.0+0x1a>
 80095ac:	08021941 	.word	0x08021941

080095b0 <_strtol_r>:
 80095b0:	f7ff bf84 	b.w	80094bc <_strtol_l.isra.0>

080095b4 <__ssputs_r>:
 80095b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095b8:	688e      	ldr	r6, [r1, #8]
 80095ba:	461f      	mov	r7, r3
 80095bc:	42be      	cmp	r6, r7
 80095be:	680b      	ldr	r3, [r1, #0]
 80095c0:	4682      	mov	sl, r0
 80095c2:	460c      	mov	r4, r1
 80095c4:	4690      	mov	r8, r2
 80095c6:	d82d      	bhi.n	8009624 <__ssputs_r+0x70>
 80095c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80095d0:	d026      	beq.n	8009620 <__ssputs_r+0x6c>
 80095d2:	6965      	ldr	r5, [r4, #20]
 80095d4:	6909      	ldr	r1, [r1, #16]
 80095d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095da:	eba3 0901 	sub.w	r9, r3, r1
 80095de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095e2:	1c7b      	adds	r3, r7, #1
 80095e4:	444b      	add	r3, r9
 80095e6:	106d      	asrs	r5, r5, #1
 80095e8:	429d      	cmp	r5, r3
 80095ea:	bf38      	it	cc
 80095ec:	461d      	movcc	r5, r3
 80095ee:	0553      	lsls	r3, r2, #21
 80095f0:	d527      	bpl.n	8009642 <__ssputs_r+0x8e>
 80095f2:	4629      	mov	r1, r5
 80095f4:	f7fe fc24 	bl	8007e40 <_malloc_r>
 80095f8:	4606      	mov	r6, r0
 80095fa:	b360      	cbz	r0, 8009656 <__ssputs_r+0xa2>
 80095fc:	6921      	ldr	r1, [r4, #16]
 80095fe:	464a      	mov	r2, r9
 8009600:	f7fd fd3b 	bl	800707a <memcpy>
 8009604:	89a3      	ldrh	r3, [r4, #12]
 8009606:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800960a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800960e:	81a3      	strh	r3, [r4, #12]
 8009610:	6126      	str	r6, [r4, #16]
 8009612:	6165      	str	r5, [r4, #20]
 8009614:	444e      	add	r6, r9
 8009616:	eba5 0509 	sub.w	r5, r5, r9
 800961a:	6026      	str	r6, [r4, #0]
 800961c:	60a5      	str	r5, [r4, #8]
 800961e:	463e      	mov	r6, r7
 8009620:	42be      	cmp	r6, r7
 8009622:	d900      	bls.n	8009626 <__ssputs_r+0x72>
 8009624:	463e      	mov	r6, r7
 8009626:	6820      	ldr	r0, [r4, #0]
 8009628:	4632      	mov	r2, r6
 800962a:	4641      	mov	r1, r8
 800962c:	f000 f9c6 	bl	80099bc <memmove>
 8009630:	68a3      	ldr	r3, [r4, #8]
 8009632:	1b9b      	subs	r3, r3, r6
 8009634:	60a3      	str	r3, [r4, #8]
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	4433      	add	r3, r6
 800963a:	6023      	str	r3, [r4, #0]
 800963c:	2000      	movs	r0, #0
 800963e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009642:	462a      	mov	r2, r5
 8009644:	f000 fd7d 	bl	800a142 <_realloc_r>
 8009648:	4606      	mov	r6, r0
 800964a:	2800      	cmp	r0, #0
 800964c:	d1e0      	bne.n	8009610 <__ssputs_r+0x5c>
 800964e:	6921      	ldr	r1, [r4, #16]
 8009650:	4650      	mov	r0, sl
 8009652:	f7fe fb81 	bl	8007d58 <_free_r>
 8009656:	230c      	movs	r3, #12
 8009658:	f8ca 3000 	str.w	r3, [sl]
 800965c:	89a3      	ldrh	r3, [r4, #12]
 800965e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009662:	81a3      	strh	r3, [r4, #12]
 8009664:	f04f 30ff 	mov.w	r0, #4294967295
 8009668:	e7e9      	b.n	800963e <__ssputs_r+0x8a>
	...

0800966c <_svfiprintf_r>:
 800966c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009670:	4698      	mov	r8, r3
 8009672:	898b      	ldrh	r3, [r1, #12]
 8009674:	061b      	lsls	r3, r3, #24
 8009676:	b09d      	sub	sp, #116	@ 0x74
 8009678:	4607      	mov	r7, r0
 800967a:	460d      	mov	r5, r1
 800967c:	4614      	mov	r4, r2
 800967e:	d510      	bpl.n	80096a2 <_svfiprintf_r+0x36>
 8009680:	690b      	ldr	r3, [r1, #16]
 8009682:	b973      	cbnz	r3, 80096a2 <_svfiprintf_r+0x36>
 8009684:	2140      	movs	r1, #64	@ 0x40
 8009686:	f7fe fbdb 	bl	8007e40 <_malloc_r>
 800968a:	6028      	str	r0, [r5, #0]
 800968c:	6128      	str	r0, [r5, #16]
 800968e:	b930      	cbnz	r0, 800969e <_svfiprintf_r+0x32>
 8009690:	230c      	movs	r3, #12
 8009692:	603b      	str	r3, [r7, #0]
 8009694:	f04f 30ff 	mov.w	r0, #4294967295
 8009698:	b01d      	add	sp, #116	@ 0x74
 800969a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800969e:	2340      	movs	r3, #64	@ 0x40
 80096a0:	616b      	str	r3, [r5, #20]
 80096a2:	2300      	movs	r3, #0
 80096a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80096a6:	2320      	movs	r3, #32
 80096a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80096b0:	2330      	movs	r3, #48	@ 0x30
 80096b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009850 <_svfiprintf_r+0x1e4>
 80096b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096ba:	f04f 0901 	mov.w	r9, #1
 80096be:	4623      	mov	r3, r4
 80096c0:	469a      	mov	sl, r3
 80096c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096c6:	b10a      	cbz	r2, 80096cc <_svfiprintf_r+0x60>
 80096c8:	2a25      	cmp	r2, #37	@ 0x25
 80096ca:	d1f9      	bne.n	80096c0 <_svfiprintf_r+0x54>
 80096cc:	ebba 0b04 	subs.w	fp, sl, r4
 80096d0:	d00b      	beq.n	80096ea <_svfiprintf_r+0x7e>
 80096d2:	465b      	mov	r3, fp
 80096d4:	4622      	mov	r2, r4
 80096d6:	4629      	mov	r1, r5
 80096d8:	4638      	mov	r0, r7
 80096da:	f7ff ff6b 	bl	80095b4 <__ssputs_r>
 80096de:	3001      	adds	r0, #1
 80096e0:	f000 80a7 	beq.w	8009832 <_svfiprintf_r+0x1c6>
 80096e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096e6:	445a      	add	r2, fp
 80096e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80096ea:	f89a 3000 	ldrb.w	r3, [sl]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 809f 	beq.w	8009832 <_svfiprintf_r+0x1c6>
 80096f4:	2300      	movs	r3, #0
 80096f6:	f04f 32ff 	mov.w	r2, #4294967295
 80096fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096fe:	f10a 0a01 	add.w	sl, sl, #1
 8009702:	9304      	str	r3, [sp, #16]
 8009704:	9307      	str	r3, [sp, #28]
 8009706:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800970a:	931a      	str	r3, [sp, #104]	@ 0x68
 800970c:	4654      	mov	r4, sl
 800970e:	2205      	movs	r2, #5
 8009710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009714:	484e      	ldr	r0, [pc, #312]	@ (8009850 <_svfiprintf_r+0x1e4>)
 8009716:	f7f6 fd5b 	bl	80001d0 <memchr>
 800971a:	9a04      	ldr	r2, [sp, #16]
 800971c:	b9d8      	cbnz	r0, 8009756 <_svfiprintf_r+0xea>
 800971e:	06d0      	lsls	r0, r2, #27
 8009720:	bf44      	itt	mi
 8009722:	2320      	movmi	r3, #32
 8009724:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009728:	0711      	lsls	r1, r2, #28
 800972a:	bf44      	itt	mi
 800972c:	232b      	movmi	r3, #43	@ 0x2b
 800972e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009732:	f89a 3000 	ldrb.w	r3, [sl]
 8009736:	2b2a      	cmp	r3, #42	@ 0x2a
 8009738:	d015      	beq.n	8009766 <_svfiprintf_r+0xfa>
 800973a:	9a07      	ldr	r2, [sp, #28]
 800973c:	4654      	mov	r4, sl
 800973e:	2000      	movs	r0, #0
 8009740:	f04f 0c0a 	mov.w	ip, #10
 8009744:	4621      	mov	r1, r4
 8009746:	f811 3b01 	ldrb.w	r3, [r1], #1
 800974a:	3b30      	subs	r3, #48	@ 0x30
 800974c:	2b09      	cmp	r3, #9
 800974e:	d94b      	bls.n	80097e8 <_svfiprintf_r+0x17c>
 8009750:	b1b0      	cbz	r0, 8009780 <_svfiprintf_r+0x114>
 8009752:	9207      	str	r2, [sp, #28]
 8009754:	e014      	b.n	8009780 <_svfiprintf_r+0x114>
 8009756:	eba0 0308 	sub.w	r3, r0, r8
 800975a:	fa09 f303 	lsl.w	r3, r9, r3
 800975e:	4313      	orrs	r3, r2
 8009760:	9304      	str	r3, [sp, #16]
 8009762:	46a2      	mov	sl, r4
 8009764:	e7d2      	b.n	800970c <_svfiprintf_r+0xa0>
 8009766:	9b03      	ldr	r3, [sp, #12]
 8009768:	1d19      	adds	r1, r3, #4
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	9103      	str	r1, [sp, #12]
 800976e:	2b00      	cmp	r3, #0
 8009770:	bfbb      	ittet	lt
 8009772:	425b      	neglt	r3, r3
 8009774:	f042 0202 	orrlt.w	r2, r2, #2
 8009778:	9307      	strge	r3, [sp, #28]
 800977a:	9307      	strlt	r3, [sp, #28]
 800977c:	bfb8      	it	lt
 800977e:	9204      	strlt	r2, [sp, #16]
 8009780:	7823      	ldrb	r3, [r4, #0]
 8009782:	2b2e      	cmp	r3, #46	@ 0x2e
 8009784:	d10a      	bne.n	800979c <_svfiprintf_r+0x130>
 8009786:	7863      	ldrb	r3, [r4, #1]
 8009788:	2b2a      	cmp	r3, #42	@ 0x2a
 800978a:	d132      	bne.n	80097f2 <_svfiprintf_r+0x186>
 800978c:	9b03      	ldr	r3, [sp, #12]
 800978e:	1d1a      	adds	r2, r3, #4
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	9203      	str	r2, [sp, #12]
 8009794:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009798:	3402      	adds	r4, #2
 800979a:	9305      	str	r3, [sp, #20]
 800979c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009860 <_svfiprintf_r+0x1f4>
 80097a0:	7821      	ldrb	r1, [r4, #0]
 80097a2:	2203      	movs	r2, #3
 80097a4:	4650      	mov	r0, sl
 80097a6:	f7f6 fd13 	bl	80001d0 <memchr>
 80097aa:	b138      	cbz	r0, 80097bc <_svfiprintf_r+0x150>
 80097ac:	9b04      	ldr	r3, [sp, #16]
 80097ae:	eba0 000a 	sub.w	r0, r0, sl
 80097b2:	2240      	movs	r2, #64	@ 0x40
 80097b4:	4082      	lsls	r2, r0
 80097b6:	4313      	orrs	r3, r2
 80097b8:	3401      	adds	r4, #1
 80097ba:	9304      	str	r3, [sp, #16]
 80097bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c0:	4824      	ldr	r0, [pc, #144]	@ (8009854 <_svfiprintf_r+0x1e8>)
 80097c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097c6:	2206      	movs	r2, #6
 80097c8:	f7f6 fd02 	bl	80001d0 <memchr>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d036      	beq.n	800983e <_svfiprintf_r+0x1d2>
 80097d0:	4b21      	ldr	r3, [pc, #132]	@ (8009858 <_svfiprintf_r+0x1ec>)
 80097d2:	bb1b      	cbnz	r3, 800981c <_svfiprintf_r+0x1b0>
 80097d4:	9b03      	ldr	r3, [sp, #12]
 80097d6:	3307      	adds	r3, #7
 80097d8:	f023 0307 	bic.w	r3, r3, #7
 80097dc:	3308      	adds	r3, #8
 80097de:	9303      	str	r3, [sp, #12]
 80097e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097e2:	4433      	add	r3, r6
 80097e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80097e6:	e76a      	b.n	80096be <_svfiprintf_r+0x52>
 80097e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80097ec:	460c      	mov	r4, r1
 80097ee:	2001      	movs	r0, #1
 80097f0:	e7a8      	b.n	8009744 <_svfiprintf_r+0xd8>
 80097f2:	2300      	movs	r3, #0
 80097f4:	3401      	adds	r4, #1
 80097f6:	9305      	str	r3, [sp, #20]
 80097f8:	4619      	mov	r1, r3
 80097fa:	f04f 0c0a 	mov.w	ip, #10
 80097fe:	4620      	mov	r0, r4
 8009800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009804:	3a30      	subs	r2, #48	@ 0x30
 8009806:	2a09      	cmp	r2, #9
 8009808:	d903      	bls.n	8009812 <_svfiprintf_r+0x1a6>
 800980a:	2b00      	cmp	r3, #0
 800980c:	d0c6      	beq.n	800979c <_svfiprintf_r+0x130>
 800980e:	9105      	str	r1, [sp, #20]
 8009810:	e7c4      	b.n	800979c <_svfiprintf_r+0x130>
 8009812:	fb0c 2101 	mla	r1, ip, r1, r2
 8009816:	4604      	mov	r4, r0
 8009818:	2301      	movs	r3, #1
 800981a:	e7f0      	b.n	80097fe <_svfiprintf_r+0x192>
 800981c:	ab03      	add	r3, sp, #12
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	462a      	mov	r2, r5
 8009822:	4b0e      	ldr	r3, [pc, #56]	@ (800985c <_svfiprintf_r+0x1f0>)
 8009824:	a904      	add	r1, sp, #16
 8009826:	4638      	mov	r0, r7
 8009828:	f7fc fcbc 	bl	80061a4 <_printf_float>
 800982c:	1c42      	adds	r2, r0, #1
 800982e:	4606      	mov	r6, r0
 8009830:	d1d6      	bne.n	80097e0 <_svfiprintf_r+0x174>
 8009832:	89ab      	ldrh	r3, [r5, #12]
 8009834:	065b      	lsls	r3, r3, #25
 8009836:	f53f af2d 	bmi.w	8009694 <_svfiprintf_r+0x28>
 800983a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800983c:	e72c      	b.n	8009698 <_svfiprintf_r+0x2c>
 800983e:	ab03      	add	r3, sp, #12
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	462a      	mov	r2, r5
 8009844:	4b05      	ldr	r3, [pc, #20]	@ (800985c <_svfiprintf_r+0x1f0>)
 8009846:	a904      	add	r1, sp, #16
 8009848:	4638      	mov	r0, r7
 800984a:	f7fc ff43 	bl	80066d4 <_printf_i>
 800984e:	e7ed      	b.n	800982c <_svfiprintf_r+0x1c0>
 8009850:	0802173d 	.word	0x0802173d
 8009854:	08021747 	.word	0x08021747
 8009858:	080061a5 	.word	0x080061a5
 800985c:	080095b5 	.word	0x080095b5
 8009860:	08021743 	.word	0x08021743

08009864 <__sflush_r>:
 8009864:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800986c:	0716      	lsls	r6, r2, #28
 800986e:	4605      	mov	r5, r0
 8009870:	460c      	mov	r4, r1
 8009872:	d454      	bmi.n	800991e <__sflush_r+0xba>
 8009874:	684b      	ldr	r3, [r1, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	dc02      	bgt.n	8009880 <__sflush_r+0x1c>
 800987a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800987c:	2b00      	cmp	r3, #0
 800987e:	dd48      	ble.n	8009912 <__sflush_r+0xae>
 8009880:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009882:	2e00      	cmp	r6, #0
 8009884:	d045      	beq.n	8009912 <__sflush_r+0xae>
 8009886:	2300      	movs	r3, #0
 8009888:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800988c:	682f      	ldr	r7, [r5, #0]
 800988e:	6a21      	ldr	r1, [r4, #32]
 8009890:	602b      	str	r3, [r5, #0]
 8009892:	d030      	beq.n	80098f6 <__sflush_r+0x92>
 8009894:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	0759      	lsls	r1, r3, #29
 800989a:	d505      	bpl.n	80098a8 <__sflush_r+0x44>
 800989c:	6863      	ldr	r3, [r4, #4]
 800989e:	1ad2      	subs	r2, r2, r3
 80098a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098a2:	b10b      	cbz	r3, 80098a8 <__sflush_r+0x44>
 80098a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098a6:	1ad2      	subs	r2, r2, r3
 80098a8:	2300      	movs	r3, #0
 80098aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098ac:	6a21      	ldr	r1, [r4, #32]
 80098ae:	4628      	mov	r0, r5
 80098b0:	47b0      	blx	r6
 80098b2:	1c43      	adds	r3, r0, #1
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	d106      	bne.n	80098c6 <__sflush_r+0x62>
 80098b8:	6829      	ldr	r1, [r5, #0]
 80098ba:	291d      	cmp	r1, #29
 80098bc:	d82b      	bhi.n	8009916 <__sflush_r+0xb2>
 80098be:	4a2a      	ldr	r2, [pc, #168]	@ (8009968 <__sflush_r+0x104>)
 80098c0:	40ca      	lsrs	r2, r1
 80098c2:	07d6      	lsls	r6, r2, #31
 80098c4:	d527      	bpl.n	8009916 <__sflush_r+0xb2>
 80098c6:	2200      	movs	r2, #0
 80098c8:	6062      	str	r2, [r4, #4]
 80098ca:	04d9      	lsls	r1, r3, #19
 80098cc:	6922      	ldr	r2, [r4, #16]
 80098ce:	6022      	str	r2, [r4, #0]
 80098d0:	d504      	bpl.n	80098dc <__sflush_r+0x78>
 80098d2:	1c42      	adds	r2, r0, #1
 80098d4:	d101      	bne.n	80098da <__sflush_r+0x76>
 80098d6:	682b      	ldr	r3, [r5, #0]
 80098d8:	b903      	cbnz	r3, 80098dc <__sflush_r+0x78>
 80098da:	6560      	str	r0, [r4, #84]	@ 0x54
 80098dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098de:	602f      	str	r7, [r5, #0]
 80098e0:	b1b9      	cbz	r1, 8009912 <__sflush_r+0xae>
 80098e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098e6:	4299      	cmp	r1, r3
 80098e8:	d002      	beq.n	80098f0 <__sflush_r+0x8c>
 80098ea:	4628      	mov	r0, r5
 80098ec:	f7fe fa34 	bl	8007d58 <_free_r>
 80098f0:	2300      	movs	r3, #0
 80098f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80098f4:	e00d      	b.n	8009912 <__sflush_r+0xae>
 80098f6:	2301      	movs	r3, #1
 80098f8:	4628      	mov	r0, r5
 80098fa:	47b0      	blx	r6
 80098fc:	4602      	mov	r2, r0
 80098fe:	1c50      	adds	r0, r2, #1
 8009900:	d1c9      	bne.n	8009896 <__sflush_r+0x32>
 8009902:	682b      	ldr	r3, [r5, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d0c6      	beq.n	8009896 <__sflush_r+0x32>
 8009908:	2b1d      	cmp	r3, #29
 800990a:	d001      	beq.n	8009910 <__sflush_r+0xac>
 800990c:	2b16      	cmp	r3, #22
 800990e:	d11e      	bne.n	800994e <__sflush_r+0xea>
 8009910:	602f      	str	r7, [r5, #0]
 8009912:	2000      	movs	r0, #0
 8009914:	e022      	b.n	800995c <__sflush_r+0xf8>
 8009916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800991a:	b21b      	sxth	r3, r3
 800991c:	e01b      	b.n	8009956 <__sflush_r+0xf2>
 800991e:	690f      	ldr	r7, [r1, #16]
 8009920:	2f00      	cmp	r7, #0
 8009922:	d0f6      	beq.n	8009912 <__sflush_r+0xae>
 8009924:	0793      	lsls	r3, r2, #30
 8009926:	680e      	ldr	r6, [r1, #0]
 8009928:	bf08      	it	eq
 800992a:	694b      	ldreq	r3, [r1, #20]
 800992c:	600f      	str	r7, [r1, #0]
 800992e:	bf18      	it	ne
 8009930:	2300      	movne	r3, #0
 8009932:	eba6 0807 	sub.w	r8, r6, r7
 8009936:	608b      	str	r3, [r1, #8]
 8009938:	f1b8 0f00 	cmp.w	r8, #0
 800993c:	dde9      	ble.n	8009912 <__sflush_r+0xae>
 800993e:	6a21      	ldr	r1, [r4, #32]
 8009940:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009942:	4643      	mov	r3, r8
 8009944:	463a      	mov	r2, r7
 8009946:	4628      	mov	r0, r5
 8009948:	47b0      	blx	r6
 800994a:	2800      	cmp	r0, #0
 800994c:	dc08      	bgt.n	8009960 <__sflush_r+0xfc>
 800994e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009956:	81a3      	strh	r3, [r4, #12]
 8009958:	f04f 30ff 	mov.w	r0, #4294967295
 800995c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009960:	4407      	add	r7, r0
 8009962:	eba8 0800 	sub.w	r8, r8, r0
 8009966:	e7e7      	b.n	8009938 <__sflush_r+0xd4>
 8009968:	20400001 	.word	0x20400001

0800996c <_fflush_r>:
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	690b      	ldr	r3, [r1, #16]
 8009970:	4605      	mov	r5, r0
 8009972:	460c      	mov	r4, r1
 8009974:	b913      	cbnz	r3, 800997c <_fflush_r+0x10>
 8009976:	2500      	movs	r5, #0
 8009978:	4628      	mov	r0, r5
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	b118      	cbz	r0, 8009986 <_fflush_r+0x1a>
 800997e:	6a03      	ldr	r3, [r0, #32]
 8009980:	b90b      	cbnz	r3, 8009986 <_fflush_r+0x1a>
 8009982:	f7fd fa5f 	bl	8006e44 <__sinit>
 8009986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d0f3      	beq.n	8009976 <_fflush_r+0xa>
 800998e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009990:	07d0      	lsls	r0, r2, #31
 8009992:	d404      	bmi.n	800999e <_fflush_r+0x32>
 8009994:	0599      	lsls	r1, r3, #22
 8009996:	d402      	bmi.n	800999e <_fflush_r+0x32>
 8009998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800999a:	f7fd fb6c 	bl	8007076 <__retarget_lock_acquire_recursive>
 800999e:	4628      	mov	r0, r5
 80099a0:	4621      	mov	r1, r4
 80099a2:	f7ff ff5f 	bl	8009864 <__sflush_r>
 80099a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099a8:	07da      	lsls	r2, r3, #31
 80099aa:	4605      	mov	r5, r0
 80099ac:	d4e4      	bmi.n	8009978 <_fflush_r+0xc>
 80099ae:	89a3      	ldrh	r3, [r4, #12]
 80099b0:	059b      	lsls	r3, r3, #22
 80099b2:	d4e1      	bmi.n	8009978 <_fflush_r+0xc>
 80099b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099b6:	f7fd fb5f 	bl	8007078 <__retarget_lock_release_recursive>
 80099ba:	e7dd      	b.n	8009978 <_fflush_r+0xc>

080099bc <memmove>:
 80099bc:	4288      	cmp	r0, r1
 80099be:	b510      	push	{r4, lr}
 80099c0:	eb01 0402 	add.w	r4, r1, r2
 80099c4:	d902      	bls.n	80099cc <memmove+0x10>
 80099c6:	4284      	cmp	r4, r0
 80099c8:	4623      	mov	r3, r4
 80099ca:	d807      	bhi.n	80099dc <memmove+0x20>
 80099cc:	1e43      	subs	r3, r0, #1
 80099ce:	42a1      	cmp	r1, r4
 80099d0:	d008      	beq.n	80099e4 <memmove+0x28>
 80099d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099da:	e7f8      	b.n	80099ce <memmove+0x12>
 80099dc:	4402      	add	r2, r0
 80099de:	4601      	mov	r1, r0
 80099e0:	428a      	cmp	r2, r1
 80099e2:	d100      	bne.n	80099e6 <memmove+0x2a>
 80099e4:	bd10      	pop	{r4, pc}
 80099e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099ee:	e7f7      	b.n	80099e0 <memmove+0x24>

080099f0 <strncmp>:
 80099f0:	b510      	push	{r4, lr}
 80099f2:	b16a      	cbz	r2, 8009a10 <strncmp+0x20>
 80099f4:	3901      	subs	r1, #1
 80099f6:	1884      	adds	r4, r0, r2
 80099f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d103      	bne.n	8009a0c <strncmp+0x1c>
 8009a04:	42a0      	cmp	r0, r4
 8009a06:	d001      	beq.n	8009a0c <strncmp+0x1c>
 8009a08:	2a00      	cmp	r2, #0
 8009a0a:	d1f5      	bne.n	80099f8 <strncmp+0x8>
 8009a0c:	1ad0      	subs	r0, r2, r3
 8009a0e:	bd10      	pop	{r4, pc}
 8009a10:	4610      	mov	r0, r2
 8009a12:	e7fc      	b.n	8009a0e <strncmp+0x1e>

08009a14 <_sbrk_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4d06      	ldr	r5, [pc, #24]	@ (8009a30 <_sbrk_r+0x1c>)
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	4608      	mov	r0, r1
 8009a1e:	602b      	str	r3, [r5, #0]
 8009a20:	f7fa fac6 	bl	8003fb0 <_sbrk>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	d102      	bne.n	8009a2e <_sbrk_r+0x1a>
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	b103      	cbz	r3, 8009a2e <_sbrk_r+0x1a>
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	2000052c 	.word	0x2000052c
 8009a34:	00000000 	.word	0x00000000

08009a38 <nan>:
 8009a38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009a40 <nan+0x8>
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	00000000 	.word	0x00000000
 8009a44:	7ff80000 	.word	0x7ff80000

08009a48 <__assert_func>:
 8009a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a4a:	4614      	mov	r4, r2
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	4b09      	ldr	r3, [pc, #36]	@ (8009a74 <__assert_func+0x2c>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4605      	mov	r5, r0
 8009a54:	68d8      	ldr	r0, [r3, #12]
 8009a56:	b14c      	cbz	r4, 8009a6c <__assert_func+0x24>
 8009a58:	4b07      	ldr	r3, [pc, #28]	@ (8009a78 <__assert_func+0x30>)
 8009a5a:	9100      	str	r1, [sp, #0]
 8009a5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a60:	4906      	ldr	r1, [pc, #24]	@ (8009a7c <__assert_func+0x34>)
 8009a62:	462b      	mov	r3, r5
 8009a64:	f000 fba8 	bl	800a1b8 <fiprintf>
 8009a68:	f000 fbb8 	bl	800a1dc <abort>
 8009a6c:	4b04      	ldr	r3, [pc, #16]	@ (8009a80 <__assert_func+0x38>)
 8009a6e:	461c      	mov	r4, r3
 8009a70:	e7f3      	b.n	8009a5a <__assert_func+0x12>
 8009a72:	bf00      	nop
 8009a74:	20000088 	.word	0x20000088
 8009a78:	08021756 	.word	0x08021756
 8009a7c:	08021763 	.word	0x08021763
 8009a80:	08021791 	.word	0x08021791

08009a84 <_calloc_r>:
 8009a84:	b570      	push	{r4, r5, r6, lr}
 8009a86:	fba1 5402 	umull	r5, r4, r1, r2
 8009a8a:	b934      	cbnz	r4, 8009a9a <_calloc_r+0x16>
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	f7fe f9d7 	bl	8007e40 <_malloc_r>
 8009a92:	4606      	mov	r6, r0
 8009a94:	b928      	cbnz	r0, 8009aa2 <_calloc_r+0x1e>
 8009a96:	4630      	mov	r0, r6
 8009a98:	bd70      	pop	{r4, r5, r6, pc}
 8009a9a:	220c      	movs	r2, #12
 8009a9c:	6002      	str	r2, [r0, #0]
 8009a9e:	2600      	movs	r6, #0
 8009aa0:	e7f9      	b.n	8009a96 <_calloc_r+0x12>
 8009aa2:	462a      	mov	r2, r5
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	f7fd fa68 	bl	8006f7a <memset>
 8009aaa:	e7f4      	b.n	8009a96 <_calloc_r+0x12>

08009aac <rshift>:
 8009aac:	6903      	ldr	r3, [r0, #16]
 8009aae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009ab2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ab6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009aba:	f100 0414 	add.w	r4, r0, #20
 8009abe:	dd45      	ble.n	8009b4c <rshift+0xa0>
 8009ac0:	f011 011f 	ands.w	r1, r1, #31
 8009ac4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ac8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009acc:	d10c      	bne.n	8009ae8 <rshift+0x3c>
 8009ace:	f100 0710 	add.w	r7, r0, #16
 8009ad2:	4629      	mov	r1, r5
 8009ad4:	42b1      	cmp	r1, r6
 8009ad6:	d334      	bcc.n	8009b42 <rshift+0x96>
 8009ad8:	1a9b      	subs	r3, r3, r2
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	1eea      	subs	r2, r5, #3
 8009ade:	4296      	cmp	r6, r2
 8009ae0:	bf38      	it	cc
 8009ae2:	2300      	movcc	r3, #0
 8009ae4:	4423      	add	r3, r4
 8009ae6:	e015      	b.n	8009b14 <rshift+0x68>
 8009ae8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009aec:	f1c1 0820 	rsb	r8, r1, #32
 8009af0:	40cf      	lsrs	r7, r1
 8009af2:	f105 0e04 	add.w	lr, r5, #4
 8009af6:	46a1      	mov	r9, r4
 8009af8:	4576      	cmp	r6, lr
 8009afa:	46f4      	mov	ip, lr
 8009afc:	d815      	bhi.n	8009b2a <rshift+0x7e>
 8009afe:	1a9a      	subs	r2, r3, r2
 8009b00:	0092      	lsls	r2, r2, #2
 8009b02:	3a04      	subs	r2, #4
 8009b04:	3501      	adds	r5, #1
 8009b06:	42ae      	cmp	r6, r5
 8009b08:	bf38      	it	cc
 8009b0a:	2200      	movcc	r2, #0
 8009b0c:	18a3      	adds	r3, r4, r2
 8009b0e:	50a7      	str	r7, [r4, r2]
 8009b10:	b107      	cbz	r7, 8009b14 <rshift+0x68>
 8009b12:	3304      	adds	r3, #4
 8009b14:	1b1a      	subs	r2, r3, r4
 8009b16:	42a3      	cmp	r3, r4
 8009b18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b1c:	bf08      	it	eq
 8009b1e:	2300      	moveq	r3, #0
 8009b20:	6102      	str	r2, [r0, #16]
 8009b22:	bf08      	it	eq
 8009b24:	6143      	streq	r3, [r0, #20]
 8009b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b2a:	f8dc c000 	ldr.w	ip, [ip]
 8009b2e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b32:	ea4c 0707 	orr.w	r7, ip, r7
 8009b36:	f849 7b04 	str.w	r7, [r9], #4
 8009b3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b3e:	40cf      	lsrs	r7, r1
 8009b40:	e7da      	b.n	8009af8 <rshift+0x4c>
 8009b42:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b46:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b4a:	e7c3      	b.n	8009ad4 <rshift+0x28>
 8009b4c:	4623      	mov	r3, r4
 8009b4e:	e7e1      	b.n	8009b14 <rshift+0x68>

08009b50 <__hexdig_fun>:
 8009b50:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009b54:	2b09      	cmp	r3, #9
 8009b56:	d802      	bhi.n	8009b5e <__hexdig_fun+0xe>
 8009b58:	3820      	subs	r0, #32
 8009b5a:	b2c0      	uxtb	r0, r0
 8009b5c:	4770      	bx	lr
 8009b5e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009b62:	2b05      	cmp	r3, #5
 8009b64:	d801      	bhi.n	8009b6a <__hexdig_fun+0x1a>
 8009b66:	3847      	subs	r0, #71	@ 0x47
 8009b68:	e7f7      	b.n	8009b5a <__hexdig_fun+0xa>
 8009b6a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009b6e:	2b05      	cmp	r3, #5
 8009b70:	d801      	bhi.n	8009b76 <__hexdig_fun+0x26>
 8009b72:	3827      	subs	r0, #39	@ 0x27
 8009b74:	e7f1      	b.n	8009b5a <__hexdig_fun+0xa>
 8009b76:	2000      	movs	r0, #0
 8009b78:	4770      	bx	lr
	...

08009b7c <__gethex>:
 8009b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b80:	b085      	sub	sp, #20
 8009b82:	468a      	mov	sl, r1
 8009b84:	9302      	str	r3, [sp, #8]
 8009b86:	680b      	ldr	r3, [r1, #0]
 8009b88:	9001      	str	r0, [sp, #4]
 8009b8a:	4690      	mov	r8, r2
 8009b8c:	1c9c      	adds	r4, r3, #2
 8009b8e:	46a1      	mov	r9, r4
 8009b90:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009b94:	2830      	cmp	r0, #48	@ 0x30
 8009b96:	d0fa      	beq.n	8009b8e <__gethex+0x12>
 8009b98:	eba9 0303 	sub.w	r3, r9, r3
 8009b9c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009ba0:	f7ff ffd6 	bl	8009b50 <__hexdig_fun>
 8009ba4:	4605      	mov	r5, r0
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d168      	bne.n	8009c7c <__gethex+0x100>
 8009baa:	49a0      	ldr	r1, [pc, #640]	@ (8009e2c <__gethex+0x2b0>)
 8009bac:	2201      	movs	r2, #1
 8009bae:	4648      	mov	r0, r9
 8009bb0:	f7ff ff1e 	bl	80099f0 <strncmp>
 8009bb4:	4607      	mov	r7, r0
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d167      	bne.n	8009c8a <__gethex+0x10e>
 8009bba:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009bbe:	4626      	mov	r6, r4
 8009bc0:	f7ff ffc6 	bl	8009b50 <__hexdig_fun>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d062      	beq.n	8009c8e <__gethex+0x112>
 8009bc8:	4623      	mov	r3, r4
 8009bca:	7818      	ldrb	r0, [r3, #0]
 8009bcc:	2830      	cmp	r0, #48	@ 0x30
 8009bce:	4699      	mov	r9, r3
 8009bd0:	f103 0301 	add.w	r3, r3, #1
 8009bd4:	d0f9      	beq.n	8009bca <__gethex+0x4e>
 8009bd6:	f7ff ffbb 	bl	8009b50 <__hexdig_fun>
 8009bda:	fab0 f580 	clz	r5, r0
 8009bde:	096d      	lsrs	r5, r5, #5
 8009be0:	f04f 0b01 	mov.w	fp, #1
 8009be4:	464a      	mov	r2, r9
 8009be6:	4616      	mov	r6, r2
 8009be8:	3201      	adds	r2, #1
 8009bea:	7830      	ldrb	r0, [r6, #0]
 8009bec:	f7ff ffb0 	bl	8009b50 <__hexdig_fun>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d1f8      	bne.n	8009be6 <__gethex+0x6a>
 8009bf4:	498d      	ldr	r1, [pc, #564]	@ (8009e2c <__gethex+0x2b0>)
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f7ff fef9 	bl	80099f0 <strncmp>
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d13f      	bne.n	8009c82 <__gethex+0x106>
 8009c02:	b944      	cbnz	r4, 8009c16 <__gethex+0x9a>
 8009c04:	1c74      	adds	r4, r6, #1
 8009c06:	4622      	mov	r2, r4
 8009c08:	4616      	mov	r6, r2
 8009c0a:	3201      	adds	r2, #1
 8009c0c:	7830      	ldrb	r0, [r6, #0]
 8009c0e:	f7ff ff9f 	bl	8009b50 <__hexdig_fun>
 8009c12:	2800      	cmp	r0, #0
 8009c14:	d1f8      	bne.n	8009c08 <__gethex+0x8c>
 8009c16:	1ba4      	subs	r4, r4, r6
 8009c18:	00a7      	lsls	r7, r4, #2
 8009c1a:	7833      	ldrb	r3, [r6, #0]
 8009c1c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009c20:	2b50      	cmp	r3, #80	@ 0x50
 8009c22:	d13e      	bne.n	8009ca2 <__gethex+0x126>
 8009c24:	7873      	ldrb	r3, [r6, #1]
 8009c26:	2b2b      	cmp	r3, #43	@ 0x2b
 8009c28:	d033      	beq.n	8009c92 <__gethex+0x116>
 8009c2a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009c2c:	d034      	beq.n	8009c98 <__gethex+0x11c>
 8009c2e:	1c71      	adds	r1, r6, #1
 8009c30:	2400      	movs	r4, #0
 8009c32:	7808      	ldrb	r0, [r1, #0]
 8009c34:	f7ff ff8c 	bl	8009b50 <__hexdig_fun>
 8009c38:	1e43      	subs	r3, r0, #1
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b18      	cmp	r3, #24
 8009c3e:	d830      	bhi.n	8009ca2 <__gethex+0x126>
 8009c40:	f1a0 0210 	sub.w	r2, r0, #16
 8009c44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c48:	f7ff ff82 	bl	8009b50 <__hexdig_fun>
 8009c4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009c50:	fa5f fc8c 	uxtb.w	ip, ip
 8009c54:	f1bc 0f18 	cmp.w	ip, #24
 8009c58:	f04f 030a 	mov.w	r3, #10
 8009c5c:	d91e      	bls.n	8009c9c <__gethex+0x120>
 8009c5e:	b104      	cbz	r4, 8009c62 <__gethex+0xe6>
 8009c60:	4252      	negs	r2, r2
 8009c62:	4417      	add	r7, r2
 8009c64:	f8ca 1000 	str.w	r1, [sl]
 8009c68:	b1ed      	cbz	r5, 8009ca6 <__gethex+0x12a>
 8009c6a:	f1bb 0f00 	cmp.w	fp, #0
 8009c6e:	bf0c      	ite	eq
 8009c70:	2506      	moveq	r5, #6
 8009c72:	2500      	movne	r5, #0
 8009c74:	4628      	mov	r0, r5
 8009c76:	b005      	add	sp, #20
 8009c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c7c:	2500      	movs	r5, #0
 8009c7e:	462c      	mov	r4, r5
 8009c80:	e7b0      	b.n	8009be4 <__gethex+0x68>
 8009c82:	2c00      	cmp	r4, #0
 8009c84:	d1c7      	bne.n	8009c16 <__gethex+0x9a>
 8009c86:	4627      	mov	r7, r4
 8009c88:	e7c7      	b.n	8009c1a <__gethex+0x9e>
 8009c8a:	464e      	mov	r6, r9
 8009c8c:	462f      	mov	r7, r5
 8009c8e:	2501      	movs	r5, #1
 8009c90:	e7c3      	b.n	8009c1a <__gethex+0x9e>
 8009c92:	2400      	movs	r4, #0
 8009c94:	1cb1      	adds	r1, r6, #2
 8009c96:	e7cc      	b.n	8009c32 <__gethex+0xb6>
 8009c98:	2401      	movs	r4, #1
 8009c9a:	e7fb      	b.n	8009c94 <__gethex+0x118>
 8009c9c:	fb03 0002 	mla	r0, r3, r2, r0
 8009ca0:	e7ce      	b.n	8009c40 <__gethex+0xc4>
 8009ca2:	4631      	mov	r1, r6
 8009ca4:	e7de      	b.n	8009c64 <__gethex+0xe8>
 8009ca6:	eba6 0309 	sub.w	r3, r6, r9
 8009caa:	3b01      	subs	r3, #1
 8009cac:	4629      	mov	r1, r5
 8009cae:	2b07      	cmp	r3, #7
 8009cb0:	dc0a      	bgt.n	8009cc8 <__gethex+0x14c>
 8009cb2:	9801      	ldr	r0, [sp, #4]
 8009cb4:	f7fe f950 	bl	8007f58 <_Balloc>
 8009cb8:	4604      	mov	r4, r0
 8009cba:	b940      	cbnz	r0, 8009cce <__gethex+0x152>
 8009cbc:	4b5c      	ldr	r3, [pc, #368]	@ (8009e30 <__gethex+0x2b4>)
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	21e4      	movs	r1, #228	@ 0xe4
 8009cc2:	485c      	ldr	r0, [pc, #368]	@ (8009e34 <__gethex+0x2b8>)
 8009cc4:	f7ff fec0 	bl	8009a48 <__assert_func>
 8009cc8:	3101      	adds	r1, #1
 8009cca:	105b      	asrs	r3, r3, #1
 8009ccc:	e7ef      	b.n	8009cae <__gethex+0x132>
 8009cce:	f100 0a14 	add.w	sl, r0, #20
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	4655      	mov	r5, sl
 8009cd6:	469b      	mov	fp, r3
 8009cd8:	45b1      	cmp	r9, r6
 8009cda:	d337      	bcc.n	8009d4c <__gethex+0x1d0>
 8009cdc:	f845 bb04 	str.w	fp, [r5], #4
 8009ce0:	eba5 050a 	sub.w	r5, r5, sl
 8009ce4:	10ad      	asrs	r5, r5, #2
 8009ce6:	6125      	str	r5, [r4, #16]
 8009ce8:	4658      	mov	r0, fp
 8009cea:	f7fe fa27 	bl	800813c <__hi0bits>
 8009cee:	016d      	lsls	r5, r5, #5
 8009cf0:	f8d8 6000 	ldr.w	r6, [r8]
 8009cf4:	1a2d      	subs	r5, r5, r0
 8009cf6:	42b5      	cmp	r5, r6
 8009cf8:	dd54      	ble.n	8009da4 <__gethex+0x228>
 8009cfa:	1bad      	subs	r5, r5, r6
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f7fe fdb3 	bl	800886a <__any_on>
 8009d04:	4681      	mov	r9, r0
 8009d06:	b178      	cbz	r0, 8009d28 <__gethex+0x1ac>
 8009d08:	1e6b      	subs	r3, r5, #1
 8009d0a:	1159      	asrs	r1, r3, #5
 8009d0c:	f003 021f 	and.w	r2, r3, #31
 8009d10:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009d14:	f04f 0901 	mov.w	r9, #1
 8009d18:	fa09 f202 	lsl.w	r2, r9, r2
 8009d1c:	420a      	tst	r2, r1
 8009d1e:	d003      	beq.n	8009d28 <__gethex+0x1ac>
 8009d20:	454b      	cmp	r3, r9
 8009d22:	dc36      	bgt.n	8009d92 <__gethex+0x216>
 8009d24:	f04f 0902 	mov.w	r9, #2
 8009d28:	4629      	mov	r1, r5
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f7ff febe 	bl	8009aac <rshift>
 8009d30:	442f      	add	r7, r5
 8009d32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d36:	42bb      	cmp	r3, r7
 8009d38:	da42      	bge.n	8009dc0 <__gethex+0x244>
 8009d3a:	9801      	ldr	r0, [sp, #4]
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	f7fe f94b 	bl	8007fd8 <_Bfree>
 8009d42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d44:	2300      	movs	r3, #0
 8009d46:	6013      	str	r3, [r2, #0]
 8009d48:	25a3      	movs	r5, #163	@ 0xa3
 8009d4a:	e793      	b.n	8009c74 <__gethex+0xf8>
 8009d4c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009d50:	2a2e      	cmp	r2, #46	@ 0x2e
 8009d52:	d012      	beq.n	8009d7a <__gethex+0x1fe>
 8009d54:	2b20      	cmp	r3, #32
 8009d56:	d104      	bne.n	8009d62 <__gethex+0x1e6>
 8009d58:	f845 bb04 	str.w	fp, [r5], #4
 8009d5c:	f04f 0b00 	mov.w	fp, #0
 8009d60:	465b      	mov	r3, fp
 8009d62:	7830      	ldrb	r0, [r6, #0]
 8009d64:	9303      	str	r3, [sp, #12]
 8009d66:	f7ff fef3 	bl	8009b50 <__hexdig_fun>
 8009d6a:	9b03      	ldr	r3, [sp, #12]
 8009d6c:	f000 000f 	and.w	r0, r0, #15
 8009d70:	4098      	lsls	r0, r3
 8009d72:	ea4b 0b00 	orr.w	fp, fp, r0
 8009d76:	3304      	adds	r3, #4
 8009d78:	e7ae      	b.n	8009cd8 <__gethex+0x15c>
 8009d7a:	45b1      	cmp	r9, r6
 8009d7c:	d8ea      	bhi.n	8009d54 <__gethex+0x1d8>
 8009d7e:	492b      	ldr	r1, [pc, #172]	@ (8009e2c <__gethex+0x2b0>)
 8009d80:	9303      	str	r3, [sp, #12]
 8009d82:	2201      	movs	r2, #1
 8009d84:	4630      	mov	r0, r6
 8009d86:	f7ff fe33 	bl	80099f0 <strncmp>
 8009d8a:	9b03      	ldr	r3, [sp, #12]
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	d1e1      	bne.n	8009d54 <__gethex+0x1d8>
 8009d90:	e7a2      	b.n	8009cd8 <__gethex+0x15c>
 8009d92:	1ea9      	subs	r1, r5, #2
 8009d94:	4620      	mov	r0, r4
 8009d96:	f7fe fd68 	bl	800886a <__any_on>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d0c2      	beq.n	8009d24 <__gethex+0x1a8>
 8009d9e:	f04f 0903 	mov.w	r9, #3
 8009da2:	e7c1      	b.n	8009d28 <__gethex+0x1ac>
 8009da4:	da09      	bge.n	8009dba <__gethex+0x23e>
 8009da6:	1b75      	subs	r5, r6, r5
 8009da8:	4621      	mov	r1, r4
 8009daa:	9801      	ldr	r0, [sp, #4]
 8009dac:	462a      	mov	r2, r5
 8009dae:	f7fe fb23 	bl	80083f8 <__lshift>
 8009db2:	1b7f      	subs	r7, r7, r5
 8009db4:	4604      	mov	r4, r0
 8009db6:	f100 0a14 	add.w	sl, r0, #20
 8009dba:	f04f 0900 	mov.w	r9, #0
 8009dbe:	e7b8      	b.n	8009d32 <__gethex+0x1b6>
 8009dc0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009dc4:	42bd      	cmp	r5, r7
 8009dc6:	dd6f      	ble.n	8009ea8 <__gethex+0x32c>
 8009dc8:	1bed      	subs	r5, r5, r7
 8009dca:	42ae      	cmp	r6, r5
 8009dcc:	dc34      	bgt.n	8009e38 <__gethex+0x2bc>
 8009dce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d022      	beq.n	8009e1c <__gethex+0x2a0>
 8009dd6:	2b03      	cmp	r3, #3
 8009dd8:	d024      	beq.n	8009e24 <__gethex+0x2a8>
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d115      	bne.n	8009e0a <__gethex+0x28e>
 8009dde:	42ae      	cmp	r6, r5
 8009de0:	d113      	bne.n	8009e0a <__gethex+0x28e>
 8009de2:	2e01      	cmp	r6, #1
 8009de4:	d10b      	bne.n	8009dfe <__gethex+0x282>
 8009de6:	9a02      	ldr	r2, [sp, #8]
 8009de8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009dec:	6013      	str	r3, [r2, #0]
 8009dee:	2301      	movs	r3, #1
 8009df0:	6123      	str	r3, [r4, #16]
 8009df2:	f8ca 3000 	str.w	r3, [sl]
 8009df6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009df8:	2562      	movs	r5, #98	@ 0x62
 8009dfa:	601c      	str	r4, [r3, #0]
 8009dfc:	e73a      	b.n	8009c74 <__gethex+0xf8>
 8009dfe:	1e71      	subs	r1, r6, #1
 8009e00:	4620      	mov	r0, r4
 8009e02:	f7fe fd32 	bl	800886a <__any_on>
 8009e06:	2800      	cmp	r0, #0
 8009e08:	d1ed      	bne.n	8009de6 <__gethex+0x26a>
 8009e0a:	9801      	ldr	r0, [sp, #4]
 8009e0c:	4621      	mov	r1, r4
 8009e0e:	f7fe f8e3 	bl	8007fd8 <_Bfree>
 8009e12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e14:	2300      	movs	r3, #0
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	2550      	movs	r5, #80	@ 0x50
 8009e1a:	e72b      	b.n	8009c74 <__gethex+0xf8>
 8009e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1f3      	bne.n	8009e0a <__gethex+0x28e>
 8009e22:	e7e0      	b.n	8009de6 <__gethex+0x26a>
 8009e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1dd      	bne.n	8009de6 <__gethex+0x26a>
 8009e2a:	e7ee      	b.n	8009e0a <__gethex+0x28e>
 8009e2c:	0802173b 	.word	0x0802173b
 8009e30:	080216d1 	.word	0x080216d1
 8009e34:	08021792 	.word	0x08021792
 8009e38:	1e6f      	subs	r7, r5, #1
 8009e3a:	f1b9 0f00 	cmp.w	r9, #0
 8009e3e:	d130      	bne.n	8009ea2 <__gethex+0x326>
 8009e40:	b127      	cbz	r7, 8009e4c <__gethex+0x2d0>
 8009e42:	4639      	mov	r1, r7
 8009e44:	4620      	mov	r0, r4
 8009e46:	f7fe fd10 	bl	800886a <__any_on>
 8009e4a:	4681      	mov	r9, r0
 8009e4c:	117a      	asrs	r2, r7, #5
 8009e4e:	2301      	movs	r3, #1
 8009e50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009e54:	f007 071f 	and.w	r7, r7, #31
 8009e58:	40bb      	lsls	r3, r7
 8009e5a:	4213      	tst	r3, r2
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	4620      	mov	r0, r4
 8009e60:	bf18      	it	ne
 8009e62:	f049 0902 	orrne.w	r9, r9, #2
 8009e66:	f7ff fe21 	bl	8009aac <rshift>
 8009e6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009e6e:	1b76      	subs	r6, r6, r5
 8009e70:	2502      	movs	r5, #2
 8009e72:	f1b9 0f00 	cmp.w	r9, #0
 8009e76:	d047      	beq.n	8009f08 <__gethex+0x38c>
 8009e78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	d015      	beq.n	8009eac <__gethex+0x330>
 8009e80:	2b03      	cmp	r3, #3
 8009e82:	d017      	beq.n	8009eb4 <__gethex+0x338>
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d109      	bne.n	8009e9c <__gethex+0x320>
 8009e88:	f019 0f02 	tst.w	r9, #2
 8009e8c:	d006      	beq.n	8009e9c <__gethex+0x320>
 8009e8e:	f8da 3000 	ldr.w	r3, [sl]
 8009e92:	ea49 0903 	orr.w	r9, r9, r3
 8009e96:	f019 0f01 	tst.w	r9, #1
 8009e9a:	d10e      	bne.n	8009eba <__gethex+0x33e>
 8009e9c:	f045 0510 	orr.w	r5, r5, #16
 8009ea0:	e032      	b.n	8009f08 <__gethex+0x38c>
 8009ea2:	f04f 0901 	mov.w	r9, #1
 8009ea6:	e7d1      	b.n	8009e4c <__gethex+0x2d0>
 8009ea8:	2501      	movs	r5, #1
 8009eaa:	e7e2      	b.n	8009e72 <__gethex+0x2f6>
 8009eac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eae:	f1c3 0301 	rsb	r3, r3, #1
 8009eb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009eb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d0f0      	beq.n	8009e9c <__gethex+0x320>
 8009eba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ebe:	f104 0314 	add.w	r3, r4, #20
 8009ec2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009ec6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009eca:	f04f 0c00 	mov.w	ip, #0
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ed4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009ed8:	d01b      	beq.n	8009f12 <__gethex+0x396>
 8009eda:	3201      	adds	r2, #1
 8009edc:	6002      	str	r2, [r0, #0]
 8009ede:	2d02      	cmp	r5, #2
 8009ee0:	f104 0314 	add.w	r3, r4, #20
 8009ee4:	d13c      	bne.n	8009f60 <__gethex+0x3e4>
 8009ee6:	f8d8 2000 	ldr.w	r2, [r8]
 8009eea:	3a01      	subs	r2, #1
 8009eec:	42b2      	cmp	r2, r6
 8009eee:	d109      	bne.n	8009f04 <__gethex+0x388>
 8009ef0:	1171      	asrs	r1, r6, #5
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ef8:	f006 061f 	and.w	r6, r6, #31
 8009efc:	fa02 f606 	lsl.w	r6, r2, r6
 8009f00:	421e      	tst	r6, r3
 8009f02:	d13a      	bne.n	8009f7a <__gethex+0x3fe>
 8009f04:	f045 0520 	orr.w	r5, r5, #32
 8009f08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f0a:	601c      	str	r4, [r3, #0]
 8009f0c:	9b02      	ldr	r3, [sp, #8]
 8009f0e:	601f      	str	r7, [r3, #0]
 8009f10:	e6b0      	b.n	8009c74 <__gethex+0xf8>
 8009f12:	4299      	cmp	r1, r3
 8009f14:	f843 cc04 	str.w	ip, [r3, #-4]
 8009f18:	d8d9      	bhi.n	8009ece <__gethex+0x352>
 8009f1a:	68a3      	ldr	r3, [r4, #8]
 8009f1c:	459b      	cmp	fp, r3
 8009f1e:	db17      	blt.n	8009f50 <__gethex+0x3d4>
 8009f20:	6861      	ldr	r1, [r4, #4]
 8009f22:	9801      	ldr	r0, [sp, #4]
 8009f24:	3101      	adds	r1, #1
 8009f26:	f7fe f817 	bl	8007f58 <_Balloc>
 8009f2a:	4681      	mov	r9, r0
 8009f2c:	b918      	cbnz	r0, 8009f36 <__gethex+0x3ba>
 8009f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8009f98 <__gethex+0x41c>)
 8009f30:	4602      	mov	r2, r0
 8009f32:	2184      	movs	r1, #132	@ 0x84
 8009f34:	e6c5      	b.n	8009cc2 <__gethex+0x146>
 8009f36:	6922      	ldr	r2, [r4, #16]
 8009f38:	3202      	adds	r2, #2
 8009f3a:	f104 010c 	add.w	r1, r4, #12
 8009f3e:	0092      	lsls	r2, r2, #2
 8009f40:	300c      	adds	r0, #12
 8009f42:	f7fd f89a 	bl	800707a <memcpy>
 8009f46:	4621      	mov	r1, r4
 8009f48:	9801      	ldr	r0, [sp, #4]
 8009f4a:	f7fe f845 	bl	8007fd8 <_Bfree>
 8009f4e:	464c      	mov	r4, r9
 8009f50:	6923      	ldr	r3, [r4, #16]
 8009f52:	1c5a      	adds	r2, r3, #1
 8009f54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f58:	6122      	str	r2, [r4, #16]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	615a      	str	r2, [r3, #20]
 8009f5e:	e7be      	b.n	8009ede <__gethex+0x362>
 8009f60:	6922      	ldr	r2, [r4, #16]
 8009f62:	455a      	cmp	r2, fp
 8009f64:	dd0b      	ble.n	8009f7e <__gethex+0x402>
 8009f66:	2101      	movs	r1, #1
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f7ff fd9f 	bl	8009aac <rshift>
 8009f6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f72:	3701      	adds	r7, #1
 8009f74:	42bb      	cmp	r3, r7
 8009f76:	f6ff aee0 	blt.w	8009d3a <__gethex+0x1be>
 8009f7a:	2501      	movs	r5, #1
 8009f7c:	e7c2      	b.n	8009f04 <__gethex+0x388>
 8009f7e:	f016 061f 	ands.w	r6, r6, #31
 8009f82:	d0fa      	beq.n	8009f7a <__gethex+0x3fe>
 8009f84:	4453      	add	r3, sl
 8009f86:	f1c6 0620 	rsb	r6, r6, #32
 8009f8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009f8e:	f7fe f8d5 	bl	800813c <__hi0bits>
 8009f92:	42b0      	cmp	r0, r6
 8009f94:	dbe7      	blt.n	8009f66 <__gethex+0x3ea>
 8009f96:	e7f0      	b.n	8009f7a <__gethex+0x3fe>
 8009f98:	080216d1 	.word	0x080216d1

08009f9c <L_shift>:
 8009f9c:	f1c2 0208 	rsb	r2, r2, #8
 8009fa0:	0092      	lsls	r2, r2, #2
 8009fa2:	b570      	push	{r4, r5, r6, lr}
 8009fa4:	f1c2 0620 	rsb	r6, r2, #32
 8009fa8:	6843      	ldr	r3, [r0, #4]
 8009faa:	6804      	ldr	r4, [r0, #0]
 8009fac:	fa03 f506 	lsl.w	r5, r3, r6
 8009fb0:	432c      	orrs	r4, r5
 8009fb2:	40d3      	lsrs	r3, r2
 8009fb4:	6004      	str	r4, [r0, #0]
 8009fb6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009fba:	4288      	cmp	r0, r1
 8009fbc:	d3f4      	bcc.n	8009fa8 <L_shift+0xc>
 8009fbe:	bd70      	pop	{r4, r5, r6, pc}

08009fc0 <__match>:
 8009fc0:	b530      	push	{r4, r5, lr}
 8009fc2:	6803      	ldr	r3, [r0, #0]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fca:	b914      	cbnz	r4, 8009fd2 <__match+0x12>
 8009fcc:	6003      	str	r3, [r0, #0]
 8009fce:	2001      	movs	r0, #1
 8009fd0:	bd30      	pop	{r4, r5, pc}
 8009fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fd6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009fda:	2d19      	cmp	r5, #25
 8009fdc:	bf98      	it	ls
 8009fde:	3220      	addls	r2, #32
 8009fe0:	42a2      	cmp	r2, r4
 8009fe2:	d0f0      	beq.n	8009fc6 <__match+0x6>
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	e7f3      	b.n	8009fd0 <__match+0x10>

08009fe8 <__hexnan>:
 8009fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	680b      	ldr	r3, [r1, #0]
 8009fee:	6801      	ldr	r1, [r0, #0]
 8009ff0:	115e      	asrs	r6, r3, #5
 8009ff2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009ff6:	f013 031f 	ands.w	r3, r3, #31
 8009ffa:	b087      	sub	sp, #28
 8009ffc:	bf18      	it	ne
 8009ffe:	3604      	addne	r6, #4
 800a000:	2500      	movs	r5, #0
 800a002:	1f37      	subs	r7, r6, #4
 800a004:	4682      	mov	sl, r0
 800a006:	4690      	mov	r8, r2
 800a008:	9301      	str	r3, [sp, #4]
 800a00a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a00e:	46b9      	mov	r9, r7
 800a010:	463c      	mov	r4, r7
 800a012:	9502      	str	r5, [sp, #8]
 800a014:	46ab      	mov	fp, r5
 800a016:	784a      	ldrb	r2, [r1, #1]
 800a018:	1c4b      	adds	r3, r1, #1
 800a01a:	9303      	str	r3, [sp, #12]
 800a01c:	b342      	cbz	r2, 800a070 <__hexnan+0x88>
 800a01e:	4610      	mov	r0, r2
 800a020:	9105      	str	r1, [sp, #20]
 800a022:	9204      	str	r2, [sp, #16]
 800a024:	f7ff fd94 	bl	8009b50 <__hexdig_fun>
 800a028:	2800      	cmp	r0, #0
 800a02a:	d151      	bne.n	800a0d0 <__hexnan+0xe8>
 800a02c:	9a04      	ldr	r2, [sp, #16]
 800a02e:	9905      	ldr	r1, [sp, #20]
 800a030:	2a20      	cmp	r2, #32
 800a032:	d818      	bhi.n	800a066 <__hexnan+0x7e>
 800a034:	9b02      	ldr	r3, [sp, #8]
 800a036:	459b      	cmp	fp, r3
 800a038:	dd13      	ble.n	800a062 <__hexnan+0x7a>
 800a03a:	454c      	cmp	r4, r9
 800a03c:	d206      	bcs.n	800a04c <__hexnan+0x64>
 800a03e:	2d07      	cmp	r5, #7
 800a040:	dc04      	bgt.n	800a04c <__hexnan+0x64>
 800a042:	462a      	mov	r2, r5
 800a044:	4649      	mov	r1, r9
 800a046:	4620      	mov	r0, r4
 800a048:	f7ff ffa8 	bl	8009f9c <L_shift>
 800a04c:	4544      	cmp	r4, r8
 800a04e:	d952      	bls.n	800a0f6 <__hexnan+0x10e>
 800a050:	2300      	movs	r3, #0
 800a052:	f1a4 0904 	sub.w	r9, r4, #4
 800a056:	f844 3c04 	str.w	r3, [r4, #-4]
 800a05a:	f8cd b008 	str.w	fp, [sp, #8]
 800a05e:	464c      	mov	r4, r9
 800a060:	461d      	mov	r5, r3
 800a062:	9903      	ldr	r1, [sp, #12]
 800a064:	e7d7      	b.n	800a016 <__hexnan+0x2e>
 800a066:	2a29      	cmp	r2, #41	@ 0x29
 800a068:	d157      	bne.n	800a11a <__hexnan+0x132>
 800a06a:	3102      	adds	r1, #2
 800a06c:	f8ca 1000 	str.w	r1, [sl]
 800a070:	f1bb 0f00 	cmp.w	fp, #0
 800a074:	d051      	beq.n	800a11a <__hexnan+0x132>
 800a076:	454c      	cmp	r4, r9
 800a078:	d206      	bcs.n	800a088 <__hexnan+0xa0>
 800a07a:	2d07      	cmp	r5, #7
 800a07c:	dc04      	bgt.n	800a088 <__hexnan+0xa0>
 800a07e:	462a      	mov	r2, r5
 800a080:	4649      	mov	r1, r9
 800a082:	4620      	mov	r0, r4
 800a084:	f7ff ff8a 	bl	8009f9c <L_shift>
 800a088:	4544      	cmp	r4, r8
 800a08a:	d936      	bls.n	800a0fa <__hexnan+0x112>
 800a08c:	f1a8 0204 	sub.w	r2, r8, #4
 800a090:	4623      	mov	r3, r4
 800a092:	f853 1b04 	ldr.w	r1, [r3], #4
 800a096:	f842 1f04 	str.w	r1, [r2, #4]!
 800a09a:	429f      	cmp	r7, r3
 800a09c:	d2f9      	bcs.n	800a092 <__hexnan+0xaa>
 800a09e:	1b3b      	subs	r3, r7, r4
 800a0a0:	f023 0303 	bic.w	r3, r3, #3
 800a0a4:	3304      	adds	r3, #4
 800a0a6:	3401      	adds	r4, #1
 800a0a8:	3e03      	subs	r6, #3
 800a0aa:	42b4      	cmp	r4, r6
 800a0ac:	bf88      	it	hi
 800a0ae:	2304      	movhi	r3, #4
 800a0b0:	4443      	add	r3, r8
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f843 2b04 	str.w	r2, [r3], #4
 800a0b8:	429f      	cmp	r7, r3
 800a0ba:	d2fb      	bcs.n	800a0b4 <__hexnan+0xcc>
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	b91b      	cbnz	r3, 800a0c8 <__hexnan+0xe0>
 800a0c0:	4547      	cmp	r7, r8
 800a0c2:	d128      	bne.n	800a116 <__hexnan+0x12e>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	603b      	str	r3, [r7, #0]
 800a0c8:	2005      	movs	r0, #5
 800a0ca:	b007      	add	sp, #28
 800a0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d0:	3501      	adds	r5, #1
 800a0d2:	2d08      	cmp	r5, #8
 800a0d4:	f10b 0b01 	add.w	fp, fp, #1
 800a0d8:	dd06      	ble.n	800a0e8 <__hexnan+0x100>
 800a0da:	4544      	cmp	r4, r8
 800a0dc:	d9c1      	bls.n	800a062 <__hexnan+0x7a>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0e4:	2501      	movs	r5, #1
 800a0e6:	3c04      	subs	r4, #4
 800a0e8:	6822      	ldr	r2, [r4, #0]
 800a0ea:	f000 000f 	and.w	r0, r0, #15
 800a0ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a0f2:	6020      	str	r0, [r4, #0]
 800a0f4:	e7b5      	b.n	800a062 <__hexnan+0x7a>
 800a0f6:	2508      	movs	r5, #8
 800a0f8:	e7b3      	b.n	800a062 <__hexnan+0x7a>
 800a0fa:	9b01      	ldr	r3, [sp, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d0dd      	beq.n	800a0bc <__hexnan+0xd4>
 800a100:	f1c3 0320 	rsb	r3, r3, #32
 800a104:	f04f 32ff 	mov.w	r2, #4294967295
 800a108:	40da      	lsrs	r2, r3
 800a10a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a10e:	4013      	ands	r3, r2
 800a110:	f846 3c04 	str.w	r3, [r6, #-4]
 800a114:	e7d2      	b.n	800a0bc <__hexnan+0xd4>
 800a116:	3f04      	subs	r7, #4
 800a118:	e7d0      	b.n	800a0bc <__hexnan+0xd4>
 800a11a:	2004      	movs	r0, #4
 800a11c:	e7d5      	b.n	800a0ca <__hexnan+0xe2>

0800a11e <__ascii_mbtowc>:
 800a11e:	b082      	sub	sp, #8
 800a120:	b901      	cbnz	r1, 800a124 <__ascii_mbtowc+0x6>
 800a122:	a901      	add	r1, sp, #4
 800a124:	b142      	cbz	r2, 800a138 <__ascii_mbtowc+0x1a>
 800a126:	b14b      	cbz	r3, 800a13c <__ascii_mbtowc+0x1e>
 800a128:	7813      	ldrb	r3, [r2, #0]
 800a12a:	600b      	str	r3, [r1, #0]
 800a12c:	7812      	ldrb	r2, [r2, #0]
 800a12e:	1e10      	subs	r0, r2, #0
 800a130:	bf18      	it	ne
 800a132:	2001      	movne	r0, #1
 800a134:	b002      	add	sp, #8
 800a136:	4770      	bx	lr
 800a138:	4610      	mov	r0, r2
 800a13a:	e7fb      	b.n	800a134 <__ascii_mbtowc+0x16>
 800a13c:	f06f 0001 	mvn.w	r0, #1
 800a140:	e7f8      	b.n	800a134 <__ascii_mbtowc+0x16>

0800a142 <_realloc_r>:
 800a142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a146:	4607      	mov	r7, r0
 800a148:	4614      	mov	r4, r2
 800a14a:	460d      	mov	r5, r1
 800a14c:	b921      	cbnz	r1, 800a158 <_realloc_r+0x16>
 800a14e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a152:	4611      	mov	r1, r2
 800a154:	f7fd be74 	b.w	8007e40 <_malloc_r>
 800a158:	b92a      	cbnz	r2, 800a166 <_realloc_r+0x24>
 800a15a:	f7fd fdfd 	bl	8007d58 <_free_r>
 800a15e:	4625      	mov	r5, r4
 800a160:	4628      	mov	r0, r5
 800a162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a166:	f000 f840 	bl	800a1ea <_malloc_usable_size_r>
 800a16a:	4284      	cmp	r4, r0
 800a16c:	4606      	mov	r6, r0
 800a16e:	d802      	bhi.n	800a176 <_realloc_r+0x34>
 800a170:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a174:	d8f4      	bhi.n	800a160 <_realloc_r+0x1e>
 800a176:	4621      	mov	r1, r4
 800a178:	4638      	mov	r0, r7
 800a17a:	f7fd fe61 	bl	8007e40 <_malloc_r>
 800a17e:	4680      	mov	r8, r0
 800a180:	b908      	cbnz	r0, 800a186 <_realloc_r+0x44>
 800a182:	4645      	mov	r5, r8
 800a184:	e7ec      	b.n	800a160 <_realloc_r+0x1e>
 800a186:	42b4      	cmp	r4, r6
 800a188:	4622      	mov	r2, r4
 800a18a:	4629      	mov	r1, r5
 800a18c:	bf28      	it	cs
 800a18e:	4632      	movcs	r2, r6
 800a190:	f7fc ff73 	bl	800707a <memcpy>
 800a194:	4629      	mov	r1, r5
 800a196:	4638      	mov	r0, r7
 800a198:	f7fd fdde 	bl	8007d58 <_free_r>
 800a19c:	e7f1      	b.n	800a182 <_realloc_r+0x40>

0800a19e <__ascii_wctomb>:
 800a19e:	4603      	mov	r3, r0
 800a1a0:	4608      	mov	r0, r1
 800a1a2:	b141      	cbz	r1, 800a1b6 <__ascii_wctomb+0x18>
 800a1a4:	2aff      	cmp	r2, #255	@ 0xff
 800a1a6:	d904      	bls.n	800a1b2 <__ascii_wctomb+0x14>
 800a1a8:	228a      	movs	r2, #138	@ 0x8a
 800a1aa:	601a      	str	r2, [r3, #0]
 800a1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b0:	4770      	bx	lr
 800a1b2:	700a      	strb	r2, [r1, #0]
 800a1b4:	2001      	movs	r0, #1
 800a1b6:	4770      	bx	lr

0800a1b8 <fiprintf>:
 800a1b8:	b40e      	push	{r1, r2, r3}
 800a1ba:	b503      	push	{r0, r1, lr}
 800a1bc:	4601      	mov	r1, r0
 800a1be:	ab03      	add	r3, sp, #12
 800a1c0:	4805      	ldr	r0, [pc, #20]	@ (800a1d8 <fiprintf+0x20>)
 800a1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1c6:	6800      	ldr	r0, [r0, #0]
 800a1c8:	9301      	str	r3, [sp, #4]
 800a1ca:	f000 f83f 	bl	800a24c <_vfiprintf_r>
 800a1ce:	b002      	add	sp, #8
 800a1d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1d4:	b003      	add	sp, #12
 800a1d6:	4770      	bx	lr
 800a1d8:	20000088 	.word	0x20000088

0800a1dc <abort>:
 800a1dc:	b508      	push	{r3, lr}
 800a1de:	2006      	movs	r0, #6
 800a1e0:	f000 fa08 	bl	800a5f4 <raise>
 800a1e4:	2001      	movs	r0, #1
 800a1e6:	f7f9 fe6b 	bl	8003ec0 <_exit>

0800a1ea <_malloc_usable_size_r>:
 800a1ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ee:	1f18      	subs	r0, r3, #4
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	bfbc      	itt	lt
 800a1f4:	580b      	ldrlt	r3, [r1, r0]
 800a1f6:	18c0      	addlt	r0, r0, r3
 800a1f8:	4770      	bx	lr

0800a1fa <__sfputc_r>:
 800a1fa:	6893      	ldr	r3, [r2, #8]
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	b410      	push	{r4}
 800a202:	6093      	str	r3, [r2, #8]
 800a204:	da08      	bge.n	800a218 <__sfputc_r+0x1e>
 800a206:	6994      	ldr	r4, [r2, #24]
 800a208:	42a3      	cmp	r3, r4
 800a20a:	db01      	blt.n	800a210 <__sfputc_r+0x16>
 800a20c:	290a      	cmp	r1, #10
 800a20e:	d103      	bne.n	800a218 <__sfputc_r+0x1e>
 800a210:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a214:	f000 b932 	b.w	800a47c <__swbuf_r>
 800a218:	6813      	ldr	r3, [r2, #0]
 800a21a:	1c58      	adds	r0, r3, #1
 800a21c:	6010      	str	r0, [r2, #0]
 800a21e:	7019      	strb	r1, [r3, #0]
 800a220:	4608      	mov	r0, r1
 800a222:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <__sfputs_r>:
 800a228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22a:	4606      	mov	r6, r0
 800a22c:	460f      	mov	r7, r1
 800a22e:	4614      	mov	r4, r2
 800a230:	18d5      	adds	r5, r2, r3
 800a232:	42ac      	cmp	r4, r5
 800a234:	d101      	bne.n	800a23a <__sfputs_r+0x12>
 800a236:	2000      	movs	r0, #0
 800a238:	e007      	b.n	800a24a <__sfputs_r+0x22>
 800a23a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a23e:	463a      	mov	r2, r7
 800a240:	4630      	mov	r0, r6
 800a242:	f7ff ffda 	bl	800a1fa <__sfputc_r>
 800a246:	1c43      	adds	r3, r0, #1
 800a248:	d1f3      	bne.n	800a232 <__sfputs_r+0xa>
 800a24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a24c <_vfiprintf_r>:
 800a24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a250:	460d      	mov	r5, r1
 800a252:	b09d      	sub	sp, #116	@ 0x74
 800a254:	4614      	mov	r4, r2
 800a256:	4698      	mov	r8, r3
 800a258:	4606      	mov	r6, r0
 800a25a:	b118      	cbz	r0, 800a264 <_vfiprintf_r+0x18>
 800a25c:	6a03      	ldr	r3, [r0, #32]
 800a25e:	b90b      	cbnz	r3, 800a264 <_vfiprintf_r+0x18>
 800a260:	f7fc fdf0 	bl	8006e44 <__sinit>
 800a264:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a266:	07d9      	lsls	r1, r3, #31
 800a268:	d405      	bmi.n	800a276 <_vfiprintf_r+0x2a>
 800a26a:	89ab      	ldrh	r3, [r5, #12]
 800a26c:	059a      	lsls	r2, r3, #22
 800a26e:	d402      	bmi.n	800a276 <_vfiprintf_r+0x2a>
 800a270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a272:	f7fc ff00 	bl	8007076 <__retarget_lock_acquire_recursive>
 800a276:	89ab      	ldrh	r3, [r5, #12]
 800a278:	071b      	lsls	r3, r3, #28
 800a27a:	d501      	bpl.n	800a280 <_vfiprintf_r+0x34>
 800a27c:	692b      	ldr	r3, [r5, #16]
 800a27e:	b99b      	cbnz	r3, 800a2a8 <_vfiprintf_r+0x5c>
 800a280:	4629      	mov	r1, r5
 800a282:	4630      	mov	r0, r6
 800a284:	f000 f938 	bl	800a4f8 <__swsetup_r>
 800a288:	b170      	cbz	r0, 800a2a8 <_vfiprintf_r+0x5c>
 800a28a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a28c:	07dc      	lsls	r4, r3, #31
 800a28e:	d504      	bpl.n	800a29a <_vfiprintf_r+0x4e>
 800a290:	f04f 30ff 	mov.w	r0, #4294967295
 800a294:	b01d      	add	sp, #116	@ 0x74
 800a296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a29a:	89ab      	ldrh	r3, [r5, #12]
 800a29c:	0598      	lsls	r0, r3, #22
 800a29e:	d4f7      	bmi.n	800a290 <_vfiprintf_r+0x44>
 800a2a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2a2:	f7fc fee9 	bl	8007078 <__retarget_lock_release_recursive>
 800a2a6:	e7f3      	b.n	800a290 <_vfiprintf_r+0x44>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2ac:	2320      	movs	r3, #32
 800a2ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2b6:	2330      	movs	r3, #48	@ 0x30
 800a2b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a468 <_vfiprintf_r+0x21c>
 800a2bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2c0:	f04f 0901 	mov.w	r9, #1
 800a2c4:	4623      	mov	r3, r4
 800a2c6:	469a      	mov	sl, r3
 800a2c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2cc:	b10a      	cbz	r2, 800a2d2 <_vfiprintf_r+0x86>
 800a2ce:	2a25      	cmp	r2, #37	@ 0x25
 800a2d0:	d1f9      	bne.n	800a2c6 <_vfiprintf_r+0x7a>
 800a2d2:	ebba 0b04 	subs.w	fp, sl, r4
 800a2d6:	d00b      	beq.n	800a2f0 <_vfiprintf_r+0xa4>
 800a2d8:	465b      	mov	r3, fp
 800a2da:	4622      	mov	r2, r4
 800a2dc:	4629      	mov	r1, r5
 800a2de:	4630      	mov	r0, r6
 800a2e0:	f7ff ffa2 	bl	800a228 <__sfputs_r>
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	f000 80a7 	beq.w	800a438 <_vfiprintf_r+0x1ec>
 800a2ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2ec:	445a      	add	r2, fp
 800a2ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f000 809f 	beq.w	800a438 <_vfiprintf_r+0x1ec>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a304:	f10a 0a01 	add.w	sl, sl, #1
 800a308:	9304      	str	r3, [sp, #16]
 800a30a:	9307      	str	r3, [sp, #28]
 800a30c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a310:	931a      	str	r3, [sp, #104]	@ 0x68
 800a312:	4654      	mov	r4, sl
 800a314:	2205      	movs	r2, #5
 800a316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a31a:	4853      	ldr	r0, [pc, #332]	@ (800a468 <_vfiprintf_r+0x21c>)
 800a31c:	f7f5 ff58 	bl	80001d0 <memchr>
 800a320:	9a04      	ldr	r2, [sp, #16]
 800a322:	b9d8      	cbnz	r0, 800a35c <_vfiprintf_r+0x110>
 800a324:	06d1      	lsls	r1, r2, #27
 800a326:	bf44      	itt	mi
 800a328:	2320      	movmi	r3, #32
 800a32a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a32e:	0713      	lsls	r3, r2, #28
 800a330:	bf44      	itt	mi
 800a332:	232b      	movmi	r3, #43	@ 0x2b
 800a334:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a338:	f89a 3000 	ldrb.w	r3, [sl]
 800a33c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a33e:	d015      	beq.n	800a36c <_vfiprintf_r+0x120>
 800a340:	9a07      	ldr	r2, [sp, #28]
 800a342:	4654      	mov	r4, sl
 800a344:	2000      	movs	r0, #0
 800a346:	f04f 0c0a 	mov.w	ip, #10
 800a34a:	4621      	mov	r1, r4
 800a34c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a350:	3b30      	subs	r3, #48	@ 0x30
 800a352:	2b09      	cmp	r3, #9
 800a354:	d94b      	bls.n	800a3ee <_vfiprintf_r+0x1a2>
 800a356:	b1b0      	cbz	r0, 800a386 <_vfiprintf_r+0x13a>
 800a358:	9207      	str	r2, [sp, #28]
 800a35a:	e014      	b.n	800a386 <_vfiprintf_r+0x13a>
 800a35c:	eba0 0308 	sub.w	r3, r0, r8
 800a360:	fa09 f303 	lsl.w	r3, r9, r3
 800a364:	4313      	orrs	r3, r2
 800a366:	9304      	str	r3, [sp, #16]
 800a368:	46a2      	mov	sl, r4
 800a36a:	e7d2      	b.n	800a312 <_vfiprintf_r+0xc6>
 800a36c:	9b03      	ldr	r3, [sp, #12]
 800a36e:	1d19      	adds	r1, r3, #4
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	9103      	str	r1, [sp, #12]
 800a374:	2b00      	cmp	r3, #0
 800a376:	bfbb      	ittet	lt
 800a378:	425b      	neglt	r3, r3
 800a37a:	f042 0202 	orrlt.w	r2, r2, #2
 800a37e:	9307      	strge	r3, [sp, #28]
 800a380:	9307      	strlt	r3, [sp, #28]
 800a382:	bfb8      	it	lt
 800a384:	9204      	strlt	r2, [sp, #16]
 800a386:	7823      	ldrb	r3, [r4, #0]
 800a388:	2b2e      	cmp	r3, #46	@ 0x2e
 800a38a:	d10a      	bne.n	800a3a2 <_vfiprintf_r+0x156>
 800a38c:	7863      	ldrb	r3, [r4, #1]
 800a38e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a390:	d132      	bne.n	800a3f8 <_vfiprintf_r+0x1ac>
 800a392:	9b03      	ldr	r3, [sp, #12]
 800a394:	1d1a      	adds	r2, r3, #4
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	9203      	str	r2, [sp, #12]
 800a39a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a39e:	3402      	adds	r4, #2
 800a3a0:	9305      	str	r3, [sp, #20]
 800a3a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a478 <_vfiprintf_r+0x22c>
 800a3a6:	7821      	ldrb	r1, [r4, #0]
 800a3a8:	2203      	movs	r2, #3
 800a3aa:	4650      	mov	r0, sl
 800a3ac:	f7f5 ff10 	bl	80001d0 <memchr>
 800a3b0:	b138      	cbz	r0, 800a3c2 <_vfiprintf_r+0x176>
 800a3b2:	9b04      	ldr	r3, [sp, #16]
 800a3b4:	eba0 000a 	sub.w	r0, r0, sl
 800a3b8:	2240      	movs	r2, #64	@ 0x40
 800a3ba:	4082      	lsls	r2, r0
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	3401      	adds	r4, #1
 800a3c0:	9304      	str	r3, [sp, #16]
 800a3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c6:	4829      	ldr	r0, [pc, #164]	@ (800a46c <_vfiprintf_r+0x220>)
 800a3c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3cc:	2206      	movs	r2, #6
 800a3ce:	f7f5 feff 	bl	80001d0 <memchr>
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	d03f      	beq.n	800a456 <_vfiprintf_r+0x20a>
 800a3d6:	4b26      	ldr	r3, [pc, #152]	@ (800a470 <_vfiprintf_r+0x224>)
 800a3d8:	bb1b      	cbnz	r3, 800a422 <_vfiprintf_r+0x1d6>
 800a3da:	9b03      	ldr	r3, [sp, #12]
 800a3dc:	3307      	adds	r3, #7
 800a3de:	f023 0307 	bic.w	r3, r3, #7
 800a3e2:	3308      	adds	r3, #8
 800a3e4:	9303      	str	r3, [sp, #12]
 800a3e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3e8:	443b      	add	r3, r7
 800a3ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3ec:	e76a      	b.n	800a2c4 <_vfiprintf_r+0x78>
 800a3ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3f2:	460c      	mov	r4, r1
 800a3f4:	2001      	movs	r0, #1
 800a3f6:	e7a8      	b.n	800a34a <_vfiprintf_r+0xfe>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	3401      	adds	r4, #1
 800a3fc:	9305      	str	r3, [sp, #20]
 800a3fe:	4619      	mov	r1, r3
 800a400:	f04f 0c0a 	mov.w	ip, #10
 800a404:	4620      	mov	r0, r4
 800a406:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a40a:	3a30      	subs	r2, #48	@ 0x30
 800a40c:	2a09      	cmp	r2, #9
 800a40e:	d903      	bls.n	800a418 <_vfiprintf_r+0x1cc>
 800a410:	2b00      	cmp	r3, #0
 800a412:	d0c6      	beq.n	800a3a2 <_vfiprintf_r+0x156>
 800a414:	9105      	str	r1, [sp, #20]
 800a416:	e7c4      	b.n	800a3a2 <_vfiprintf_r+0x156>
 800a418:	fb0c 2101 	mla	r1, ip, r1, r2
 800a41c:	4604      	mov	r4, r0
 800a41e:	2301      	movs	r3, #1
 800a420:	e7f0      	b.n	800a404 <_vfiprintf_r+0x1b8>
 800a422:	ab03      	add	r3, sp, #12
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	462a      	mov	r2, r5
 800a428:	4b12      	ldr	r3, [pc, #72]	@ (800a474 <_vfiprintf_r+0x228>)
 800a42a:	a904      	add	r1, sp, #16
 800a42c:	4630      	mov	r0, r6
 800a42e:	f7fb feb9 	bl	80061a4 <_printf_float>
 800a432:	4607      	mov	r7, r0
 800a434:	1c78      	adds	r0, r7, #1
 800a436:	d1d6      	bne.n	800a3e6 <_vfiprintf_r+0x19a>
 800a438:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a43a:	07d9      	lsls	r1, r3, #31
 800a43c:	d405      	bmi.n	800a44a <_vfiprintf_r+0x1fe>
 800a43e:	89ab      	ldrh	r3, [r5, #12]
 800a440:	059a      	lsls	r2, r3, #22
 800a442:	d402      	bmi.n	800a44a <_vfiprintf_r+0x1fe>
 800a444:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a446:	f7fc fe17 	bl	8007078 <__retarget_lock_release_recursive>
 800a44a:	89ab      	ldrh	r3, [r5, #12]
 800a44c:	065b      	lsls	r3, r3, #25
 800a44e:	f53f af1f 	bmi.w	800a290 <_vfiprintf_r+0x44>
 800a452:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a454:	e71e      	b.n	800a294 <_vfiprintf_r+0x48>
 800a456:	ab03      	add	r3, sp, #12
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	462a      	mov	r2, r5
 800a45c:	4b05      	ldr	r3, [pc, #20]	@ (800a474 <_vfiprintf_r+0x228>)
 800a45e:	a904      	add	r1, sp, #16
 800a460:	4630      	mov	r0, r6
 800a462:	f7fc f937 	bl	80066d4 <_printf_i>
 800a466:	e7e4      	b.n	800a432 <_vfiprintf_r+0x1e6>
 800a468:	0802173d 	.word	0x0802173d
 800a46c:	08021747 	.word	0x08021747
 800a470:	080061a5 	.word	0x080061a5
 800a474:	0800a229 	.word	0x0800a229
 800a478:	08021743 	.word	0x08021743

0800a47c <__swbuf_r>:
 800a47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47e:	460e      	mov	r6, r1
 800a480:	4614      	mov	r4, r2
 800a482:	4605      	mov	r5, r0
 800a484:	b118      	cbz	r0, 800a48e <__swbuf_r+0x12>
 800a486:	6a03      	ldr	r3, [r0, #32]
 800a488:	b90b      	cbnz	r3, 800a48e <__swbuf_r+0x12>
 800a48a:	f7fc fcdb 	bl	8006e44 <__sinit>
 800a48e:	69a3      	ldr	r3, [r4, #24]
 800a490:	60a3      	str	r3, [r4, #8]
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	071a      	lsls	r2, r3, #28
 800a496:	d501      	bpl.n	800a49c <__swbuf_r+0x20>
 800a498:	6923      	ldr	r3, [r4, #16]
 800a49a:	b943      	cbnz	r3, 800a4ae <__swbuf_r+0x32>
 800a49c:	4621      	mov	r1, r4
 800a49e:	4628      	mov	r0, r5
 800a4a0:	f000 f82a 	bl	800a4f8 <__swsetup_r>
 800a4a4:	b118      	cbz	r0, 800a4ae <__swbuf_r+0x32>
 800a4a6:	f04f 37ff 	mov.w	r7, #4294967295
 800a4aa:	4638      	mov	r0, r7
 800a4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4ae:	6823      	ldr	r3, [r4, #0]
 800a4b0:	6922      	ldr	r2, [r4, #16]
 800a4b2:	1a98      	subs	r0, r3, r2
 800a4b4:	6963      	ldr	r3, [r4, #20]
 800a4b6:	b2f6      	uxtb	r6, r6
 800a4b8:	4283      	cmp	r3, r0
 800a4ba:	4637      	mov	r7, r6
 800a4bc:	dc05      	bgt.n	800a4ca <__swbuf_r+0x4e>
 800a4be:	4621      	mov	r1, r4
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	f7ff fa53 	bl	800996c <_fflush_r>
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d1ed      	bne.n	800a4a6 <__swbuf_r+0x2a>
 800a4ca:	68a3      	ldr	r3, [r4, #8]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	60a3      	str	r3, [r4, #8]
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	6022      	str	r2, [r4, #0]
 800a4d6:	701e      	strb	r6, [r3, #0]
 800a4d8:	6962      	ldr	r2, [r4, #20]
 800a4da:	1c43      	adds	r3, r0, #1
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d004      	beq.n	800a4ea <__swbuf_r+0x6e>
 800a4e0:	89a3      	ldrh	r3, [r4, #12]
 800a4e2:	07db      	lsls	r3, r3, #31
 800a4e4:	d5e1      	bpl.n	800a4aa <__swbuf_r+0x2e>
 800a4e6:	2e0a      	cmp	r6, #10
 800a4e8:	d1df      	bne.n	800a4aa <__swbuf_r+0x2e>
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	f7ff fa3d 	bl	800996c <_fflush_r>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	d0d9      	beq.n	800a4aa <__swbuf_r+0x2e>
 800a4f6:	e7d6      	b.n	800a4a6 <__swbuf_r+0x2a>

0800a4f8 <__swsetup_r>:
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	4b29      	ldr	r3, [pc, #164]	@ (800a5a0 <__swsetup_r+0xa8>)
 800a4fc:	4605      	mov	r5, r0
 800a4fe:	6818      	ldr	r0, [r3, #0]
 800a500:	460c      	mov	r4, r1
 800a502:	b118      	cbz	r0, 800a50c <__swsetup_r+0x14>
 800a504:	6a03      	ldr	r3, [r0, #32]
 800a506:	b90b      	cbnz	r3, 800a50c <__swsetup_r+0x14>
 800a508:	f7fc fc9c 	bl	8006e44 <__sinit>
 800a50c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a510:	0719      	lsls	r1, r3, #28
 800a512:	d422      	bmi.n	800a55a <__swsetup_r+0x62>
 800a514:	06da      	lsls	r2, r3, #27
 800a516:	d407      	bmi.n	800a528 <__swsetup_r+0x30>
 800a518:	2209      	movs	r2, #9
 800a51a:	602a      	str	r2, [r5, #0]
 800a51c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a520:	81a3      	strh	r3, [r4, #12]
 800a522:	f04f 30ff 	mov.w	r0, #4294967295
 800a526:	e033      	b.n	800a590 <__swsetup_r+0x98>
 800a528:	0758      	lsls	r0, r3, #29
 800a52a:	d512      	bpl.n	800a552 <__swsetup_r+0x5a>
 800a52c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a52e:	b141      	cbz	r1, 800a542 <__swsetup_r+0x4a>
 800a530:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a534:	4299      	cmp	r1, r3
 800a536:	d002      	beq.n	800a53e <__swsetup_r+0x46>
 800a538:	4628      	mov	r0, r5
 800a53a:	f7fd fc0d 	bl	8007d58 <_free_r>
 800a53e:	2300      	movs	r3, #0
 800a540:	6363      	str	r3, [r4, #52]	@ 0x34
 800a542:	89a3      	ldrh	r3, [r4, #12]
 800a544:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a548:	81a3      	strh	r3, [r4, #12]
 800a54a:	2300      	movs	r3, #0
 800a54c:	6063      	str	r3, [r4, #4]
 800a54e:	6923      	ldr	r3, [r4, #16]
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	f043 0308 	orr.w	r3, r3, #8
 800a558:	81a3      	strh	r3, [r4, #12]
 800a55a:	6923      	ldr	r3, [r4, #16]
 800a55c:	b94b      	cbnz	r3, 800a572 <__swsetup_r+0x7a>
 800a55e:	89a3      	ldrh	r3, [r4, #12]
 800a560:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a568:	d003      	beq.n	800a572 <__swsetup_r+0x7a>
 800a56a:	4621      	mov	r1, r4
 800a56c:	4628      	mov	r0, r5
 800a56e:	f000 f883 	bl	800a678 <__smakebuf_r>
 800a572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a576:	f013 0201 	ands.w	r2, r3, #1
 800a57a:	d00a      	beq.n	800a592 <__swsetup_r+0x9a>
 800a57c:	2200      	movs	r2, #0
 800a57e:	60a2      	str	r2, [r4, #8]
 800a580:	6962      	ldr	r2, [r4, #20]
 800a582:	4252      	negs	r2, r2
 800a584:	61a2      	str	r2, [r4, #24]
 800a586:	6922      	ldr	r2, [r4, #16]
 800a588:	b942      	cbnz	r2, 800a59c <__swsetup_r+0xa4>
 800a58a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a58e:	d1c5      	bne.n	800a51c <__swsetup_r+0x24>
 800a590:	bd38      	pop	{r3, r4, r5, pc}
 800a592:	0799      	lsls	r1, r3, #30
 800a594:	bf58      	it	pl
 800a596:	6962      	ldrpl	r2, [r4, #20]
 800a598:	60a2      	str	r2, [r4, #8]
 800a59a:	e7f4      	b.n	800a586 <__swsetup_r+0x8e>
 800a59c:	2000      	movs	r0, #0
 800a59e:	e7f7      	b.n	800a590 <__swsetup_r+0x98>
 800a5a0:	20000088 	.word	0x20000088

0800a5a4 <_raise_r>:
 800a5a4:	291f      	cmp	r1, #31
 800a5a6:	b538      	push	{r3, r4, r5, lr}
 800a5a8:	4605      	mov	r5, r0
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	d904      	bls.n	800a5b8 <_raise_r+0x14>
 800a5ae:	2316      	movs	r3, #22
 800a5b0:	6003      	str	r3, [r0, #0]
 800a5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b6:	bd38      	pop	{r3, r4, r5, pc}
 800a5b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a5ba:	b112      	cbz	r2, 800a5c2 <_raise_r+0x1e>
 800a5bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5c0:	b94b      	cbnz	r3, 800a5d6 <_raise_r+0x32>
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	f000 f830 	bl	800a628 <_getpid_r>
 800a5c8:	4622      	mov	r2, r4
 800a5ca:	4601      	mov	r1, r0
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5d2:	f000 b817 	b.w	800a604 <_kill_r>
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d00a      	beq.n	800a5f0 <_raise_r+0x4c>
 800a5da:	1c59      	adds	r1, r3, #1
 800a5dc:	d103      	bne.n	800a5e6 <_raise_r+0x42>
 800a5de:	2316      	movs	r3, #22
 800a5e0:	6003      	str	r3, [r0, #0]
 800a5e2:	2001      	movs	r0, #1
 800a5e4:	e7e7      	b.n	800a5b6 <_raise_r+0x12>
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	4798      	blx	r3
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	e7e0      	b.n	800a5b6 <_raise_r+0x12>

0800a5f4 <raise>:
 800a5f4:	4b02      	ldr	r3, [pc, #8]	@ (800a600 <raise+0xc>)
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	6818      	ldr	r0, [r3, #0]
 800a5fa:	f7ff bfd3 	b.w	800a5a4 <_raise_r>
 800a5fe:	bf00      	nop
 800a600:	20000088 	.word	0x20000088

0800a604 <_kill_r>:
 800a604:	b538      	push	{r3, r4, r5, lr}
 800a606:	4d07      	ldr	r5, [pc, #28]	@ (800a624 <_kill_r+0x20>)
 800a608:	2300      	movs	r3, #0
 800a60a:	4604      	mov	r4, r0
 800a60c:	4608      	mov	r0, r1
 800a60e:	4611      	mov	r1, r2
 800a610:	602b      	str	r3, [r5, #0]
 800a612:	f7f9 fc45 	bl	8003ea0 <_kill>
 800a616:	1c43      	adds	r3, r0, #1
 800a618:	d102      	bne.n	800a620 <_kill_r+0x1c>
 800a61a:	682b      	ldr	r3, [r5, #0]
 800a61c:	b103      	cbz	r3, 800a620 <_kill_r+0x1c>
 800a61e:	6023      	str	r3, [r4, #0]
 800a620:	bd38      	pop	{r3, r4, r5, pc}
 800a622:	bf00      	nop
 800a624:	2000052c 	.word	0x2000052c

0800a628 <_getpid_r>:
 800a628:	f7f9 bc32 	b.w	8003e90 <_getpid>

0800a62c <__swhatbuf_r>:
 800a62c:	b570      	push	{r4, r5, r6, lr}
 800a62e:	460c      	mov	r4, r1
 800a630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a634:	2900      	cmp	r1, #0
 800a636:	b096      	sub	sp, #88	@ 0x58
 800a638:	4615      	mov	r5, r2
 800a63a:	461e      	mov	r6, r3
 800a63c:	da0d      	bge.n	800a65a <__swhatbuf_r+0x2e>
 800a63e:	89a3      	ldrh	r3, [r4, #12]
 800a640:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a644:	f04f 0100 	mov.w	r1, #0
 800a648:	bf14      	ite	ne
 800a64a:	2340      	movne	r3, #64	@ 0x40
 800a64c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a650:	2000      	movs	r0, #0
 800a652:	6031      	str	r1, [r6, #0]
 800a654:	602b      	str	r3, [r5, #0]
 800a656:	b016      	add	sp, #88	@ 0x58
 800a658:	bd70      	pop	{r4, r5, r6, pc}
 800a65a:	466a      	mov	r2, sp
 800a65c:	f000 f848 	bl	800a6f0 <_fstat_r>
 800a660:	2800      	cmp	r0, #0
 800a662:	dbec      	blt.n	800a63e <__swhatbuf_r+0x12>
 800a664:	9901      	ldr	r1, [sp, #4]
 800a666:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a66a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a66e:	4259      	negs	r1, r3
 800a670:	4159      	adcs	r1, r3
 800a672:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a676:	e7eb      	b.n	800a650 <__swhatbuf_r+0x24>

0800a678 <__smakebuf_r>:
 800a678:	898b      	ldrh	r3, [r1, #12]
 800a67a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a67c:	079d      	lsls	r5, r3, #30
 800a67e:	4606      	mov	r6, r0
 800a680:	460c      	mov	r4, r1
 800a682:	d507      	bpl.n	800a694 <__smakebuf_r+0x1c>
 800a684:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	6123      	str	r3, [r4, #16]
 800a68c:	2301      	movs	r3, #1
 800a68e:	6163      	str	r3, [r4, #20]
 800a690:	b003      	add	sp, #12
 800a692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a694:	ab01      	add	r3, sp, #4
 800a696:	466a      	mov	r2, sp
 800a698:	f7ff ffc8 	bl	800a62c <__swhatbuf_r>
 800a69c:	9f00      	ldr	r7, [sp, #0]
 800a69e:	4605      	mov	r5, r0
 800a6a0:	4639      	mov	r1, r7
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f7fd fbcc 	bl	8007e40 <_malloc_r>
 800a6a8:	b948      	cbnz	r0, 800a6be <__smakebuf_r+0x46>
 800a6aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ae:	059a      	lsls	r2, r3, #22
 800a6b0:	d4ee      	bmi.n	800a690 <__smakebuf_r+0x18>
 800a6b2:	f023 0303 	bic.w	r3, r3, #3
 800a6b6:	f043 0302 	orr.w	r3, r3, #2
 800a6ba:	81a3      	strh	r3, [r4, #12]
 800a6bc:	e7e2      	b.n	800a684 <__smakebuf_r+0xc>
 800a6be:	89a3      	ldrh	r3, [r4, #12]
 800a6c0:	6020      	str	r0, [r4, #0]
 800a6c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6c6:	81a3      	strh	r3, [r4, #12]
 800a6c8:	9b01      	ldr	r3, [sp, #4]
 800a6ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a6ce:	b15b      	cbz	r3, 800a6e8 <__smakebuf_r+0x70>
 800a6d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	f000 f81d 	bl	800a714 <_isatty_r>
 800a6da:	b128      	cbz	r0, 800a6e8 <__smakebuf_r+0x70>
 800a6dc:	89a3      	ldrh	r3, [r4, #12]
 800a6de:	f023 0303 	bic.w	r3, r3, #3
 800a6e2:	f043 0301 	orr.w	r3, r3, #1
 800a6e6:	81a3      	strh	r3, [r4, #12]
 800a6e8:	89a3      	ldrh	r3, [r4, #12]
 800a6ea:	431d      	orrs	r5, r3
 800a6ec:	81a5      	strh	r5, [r4, #12]
 800a6ee:	e7cf      	b.n	800a690 <__smakebuf_r+0x18>

0800a6f0 <_fstat_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	4d07      	ldr	r5, [pc, #28]	@ (800a710 <_fstat_r+0x20>)
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	4608      	mov	r0, r1
 800a6fa:	4611      	mov	r1, r2
 800a6fc:	602b      	str	r3, [r5, #0]
 800a6fe:	f7f9 fc2f 	bl	8003f60 <_fstat>
 800a702:	1c43      	adds	r3, r0, #1
 800a704:	d102      	bne.n	800a70c <_fstat_r+0x1c>
 800a706:	682b      	ldr	r3, [r5, #0]
 800a708:	b103      	cbz	r3, 800a70c <_fstat_r+0x1c>
 800a70a:	6023      	str	r3, [r4, #0]
 800a70c:	bd38      	pop	{r3, r4, r5, pc}
 800a70e:	bf00      	nop
 800a710:	2000052c 	.word	0x2000052c

0800a714 <_isatty_r>:
 800a714:	b538      	push	{r3, r4, r5, lr}
 800a716:	4d06      	ldr	r5, [pc, #24]	@ (800a730 <_isatty_r+0x1c>)
 800a718:	2300      	movs	r3, #0
 800a71a:	4604      	mov	r4, r0
 800a71c:	4608      	mov	r0, r1
 800a71e:	602b      	str	r3, [r5, #0]
 800a720:	f7f9 fc2e 	bl	8003f80 <_isatty>
 800a724:	1c43      	adds	r3, r0, #1
 800a726:	d102      	bne.n	800a72e <_isatty_r+0x1a>
 800a728:	682b      	ldr	r3, [r5, #0]
 800a72a:	b103      	cbz	r3, 800a72e <_isatty_r+0x1a>
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	bd38      	pop	{r3, r4, r5, pc}
 800a730:	2000052c 	.word	0x2000052c

0800a734 <_init>:
 800a734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a736:	bf00      	nop
 800a738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a73a:	bc08      	pop	{r3}
 800a73c:	469e      	mov	lr, r3
 800a73e:	4770      	bx	lr

0800a740 <_fini>:
 800a740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a742:	bf00      	nop
 800a744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a746:	bc08      	pop	{r3}
 800a748:	469e      	mov	lr, r3
 800a74a:	4770      	bx	lr
