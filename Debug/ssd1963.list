
ssd1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005104  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006584  08005294  08005294  00006294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b818  0800b818  0000d0b4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b818  0800b818  0000c818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b820  0800b820  0000d0b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b820  0800b820  0000c820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b824  0800b824  0000c824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b4  20000000  0800b828  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d0b4  2**0
                  CONTENTS
 10 .bss          000002f0  200000b4  200000b4  0000d0b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003a4  200003a4  0000d0b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d0b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fbab  00000000  00000000  0000d0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020d0  00000000  00000000  0001cc8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  0001ed60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b92  00000000  00000000  0001fc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002213e  00000000  00000000  000207ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000102f6  00000000  00000000  000428f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0ae1  00000000  00000000  00052bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001236cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004424  00000000  00000000  00123714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00127b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b4 	.word	0x200000b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800527c 	.word	0x0800527c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	0800527c 	.word	0x0800527c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <LCD_Write_DATA>:
   *(uint16_t *) (LCD_DATA)= data;
}


void LCD_Write_DATA(uint16_t data)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
	 *(uint16_t *) (LCD_DATA)= data;
 80005b6:	4a04      	ldr	r2, [pc, #16]	@ (80005c8 <LCD_Write_DATA+0x1c>)
 80005b8:	88fb      	ldrh	r3, [r7, #6]
 80005ba:	8013      	strh	r3, [r2, #0]

}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	60020000 	.word	0x60020000

080005cc <LCD_Write_COM>:

void LCD_Write_COM(uint16_t data)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
	*(uint16_t *) (LCD_REG) = data;
 80005d6:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	8013      	strh	r3, [r2, #0]
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <Init_SSD1963>:
Lcd_Write_Cmd(0x0);
}


void Init_SSD1963(void)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	af00      	add	r7, sp, #0
//
//Lcd_Write_Cmd(0x2c);



LCD_Write_COM(0xE2);		//PLL multiplier, set PLL clock to 120M
 80005ee:	20e2      	movs	r0, #226	@ 0xe2
 80005f0:	f7ff ffec 	bl	80005cc <LCD_Write_COM>
LCD_Write_DATA(0x23);	    //N=0x36 for 6.5M, 0x23 for 10M crystal
 80005f4:	2023      	movs	r0, #35	@ 0x23
 80005f6:	f7ff ffd9 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x02);
 80005fa:	2002      	movs	r0, #2
 80005fc:	f7ff ffd6 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x04);
 8000600:	2004      	movs	r0, #4
 8000602:	f7ff ffd3 	bl	80005ac <LCD_Write_DATA>
LCD_Write_COM(0xE0);		// PLL enable
 8000606:	20e0      	movs	r0, #224	@ 0xe0
 8000608:	f7ff ffe0 	bl	80005cc <LCD_Write_COM>
LCD_Write_DATA(0x01);
 800060c:	2001      	movs	r0, #1
 800060e:	f7ff ffcd 	bl	80005ac <LCD_Write_DATA>
HAL_Delay(10);
 8000612:	200a      	movs	r0, #10
 8000614:	f002 fa1c 	bl	8002a50 <HAL_Delay>
LCD_Write_COM(0xE0);
 8000618:	20e0      	movs	r0, #224	@ 0xe0
 800061a:	f7ff ffd7 	bl	80005cc <LCD_Write_COM>
LCD_Write_DATA(0x03);
 800061e:	2003      	movs	r0, #3
 8000620:	f7ff ffc4 	bl	80005ac <LCD_Write_DATA>
HAL_Delay(10);
 8000624:	200a      	movs	r0, #10
 8000626:	f002 fa13 	bl	8002a50 <HAL_Delay>
LCD_Write_COM(0x01);		// software reset
 800062a:	2001      	movs	r0, #1
 800062c:	f7ff ffce 	bl	80005cc <LCD_Write_COM>
HAL_Delay(100);
 8000630:	2064      	movs	r0, #100	@ 0x64
 8000632:	f002 fa0d 	bl	8002a50 <HAL_Delay>
LCD_Write_COM(0xE6);		//PLL setting for PCLK, depends on resolution
 8000636:	20e6      	movs	r0, #230	@ 0xe6
 8000638:	f7ff ffc8 	bl	80005cc <LCD_Write_COM>
LCD_Write_DATA(0x04);
 800063c:	2004      	movs	r0, #4
 800063e:	f7ff ffb5 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x93);
 8000642:	2093      	movs	r0, #147	@ 0x93
 8000644:	f7ff ffb2 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0xE0);
 8000648:	20e0      	movs	r0, #224	@ 0xe0
 800064a:	f7ff ffaf 	bl	80005ac <LCD_Write_DATA>

LCD_Write_COM(0xB0);		//LCD SPECIFICATION
 800064e:	20b0      	movs	r0, #176	@ 0xb0
 8000650:	f7ff ffbc 	bl	80005cc <LCD_Write_COM>
LCD_Write_DATA(0x00);	// 0x24
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff ffa9 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 800065a:	2000      	movs	r0, #0
 800065c:	f7ff ffa6 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x03);		//Set HDP	799
 8000660:	2003      	movs	r0, #3
 8000662:	f7ff ffa3 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x1F);
 8000666:	201f      	movs	r0, #31
 8000668:	f7ff ffa0 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x01);		//Set VDP	479
 800066c:	2001      	movs	r0, #1
 800066e:	f7ff ff9d 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0xDF);
 8000672:	20df      	movs	r0, #223	@ 0xdf
 8000674:	f7ff ff9a 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff ff97 	bl	80005ac <LCD_Write_DATA>

LCD_Write_COM(0xB4);		//HSYNC
 800067e:	20b4      	movs	r0, #180	@ 0xb4
 8000680:	f7ff ffa4 	bl	80005cc <LCD_Write_COM>
LCD_Write_DATA(0x03);		//Set HT	928
 8000684:	2003      	movs	r0, #3
 8000686:	f7ff ff91 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0xA0);
 800068a:	20a0      	movs	r0, #160	@ 0xa0
 800068c:	f7ff ff8e 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set HPS	46
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff ff8b 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x2E);
 8000696:	202e      	movs	r0, #46	@ 0x2e
 8000698:	f7ff ff88 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x30);		//Set HPW	48
 800069c:	2030      	movs	r0, #48	@ 0x30
 800069e:	f7ff ff85 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set LPS	15
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff ff82 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x0F);
 80006a8:	200f      	movs	r0, #15
 80006aa:	f7ff ff7f 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f7ff ff7c 	bl	80005ac <LCD_Write_DATA>

LCD_Write_COM(0xB6);		//VSYNC
 80006b4:	20b6      	movs	r0, #182	@ 0xb6
 80006b6:	f7ff ff89 	bl	80005cc <LCD_Write_COM>
LCD_Write_DATA(0x02);		//Set VT	525
 80006ba:	2002      	movs	r0, #2
 80006bc:	f7ff ff76 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x0D);
 80006c0:	200d      	movs	r0, #13
 80006c2:	f7ff ff73 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set VPS	16
 80006c6:	2000      	movs	r0, #0
 80006c8:	f7ff ff70 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x10);
 80006cc:	2010      	movs	r0, #16
 80006ce:	f7ff ff6d 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x10);		//Set VPW	16
 80006d2:	2010      	movs	r0, #16
 80006d4:	f7ff ff6a 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set FPS	8
 80006d8:	2000      	movs	r0, #0
 80006da:	f7ff ff67 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x08);
 80006de:	2008      	movs	r0, #8
 80006e0:	f7ff ff64 	bl	80005ac <LCD_Write_DATA>

LCD_Write_COM(0xBA);
 80006e4:	20ba      	movs	r0, #186	@ 0xba
 80006e6:	f7ff ff71 	bl	80005cc <LCD_Write_COM>
LCD_Write_DATA(0x05);		//GPIO[3:0] out 1
 80006ea:	2005      	movs	r0, #5
 80006ec:	f7ff ff5e 	bl	80005ac <LCD_Write_DATA>

LCD_Write_COM(0xB8);
 80006f0:	20b8      	movs	r0, #184	@ 0xb8
 80006f2:	f7ff ff6b 	bl	80005cc <LCD_Write_COM>
LCD_Write_DATA(0x07);	    //GPIO3=input, GPIO[2:0]=output
 80006f6:	2007      	movs	r0, #7
 80006f8:	f7ff ff58 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x01);		//GPIO0 normal
 80006fc:	2001      	movs	r0, #1
 80006fe:	f7ff ff55 	bl	80005ac <LCD_Write_DATA>

//LCD_Write_COM(0x36);		//rotation
//LCD_Write_DATA(0x21);		// -- Set to 0x22 to rotate 180 degrees 0x21

LCD_Write_COM(0xba);		//rotation
 8000702:	20ba      	movs	r0, #186	@ 0xba
 8000704:	f7ff ff62 	bl	80005cc <LCD_Write_COM>
LCD_Write_DATA(0x01);		// -- Set to 0x22 to rotate 180 degrees 0x21
 8000708:	2001      	movs	r0, #1
 800070a:	f7ff ff4f 	bl	80005ac <LCD_Write_DATA>


LCD_Write_COM(0xF0);		//pixel data interface
 800070e:	20f0      	movs	r0, #240	@ 0xf0
 8000710:	f7ff ff5c 	bl	80005cc <LCD_Write_COM>
LCD_Write_DATA(0x03);
 8000714:	2003      	movs	r0, #3
 8000716:	f7ff ff49 	bl	80005ac <LCD_Write_DATA>


HAL_Delay(10);
 800071a:	200a      	movs	r0, #10
 800071c:	f002 f998 	bl	8002a50 <HAL_Delay>
//Lcd_Write_Data(0x00);//SET start page address=0
//Lcd_Write_Data(0x00);
//Lcd_Write_Data(0x01);//SET end page address=479
//Lcd_Write_Data(0xdf);  //1f

LCD_Write_COM(0x29);		//display on
 8000720:	2029      	movs	r0, #41	@ 0x29
 8000722:	f7ff ff53 	bl	80005cc <LCD_Write_COM>

LCD_Write_COM(0xBE);		//set PWM for B/L
 8000726:	20be      	movs	r0, #190	@ 0xbe
 8000728:	f7ff ff50 	bl	80005cc <LCD_Write_COM>
LCD_Write_DATA(0x06);
 800072c:	2006      	movs	r0, #6
 800072e:	f7ff ff3d 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0xF0);
 8000732:	20f0      	movs	r0, #240	@ 0xf0
 8000734:	f7ff ff3a 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x01);
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff ff37 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0xF0);
 800073e:	20f0      	movs	r0, #240	@ 0xf0
 8000740:	f7ff ff34 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff ff31 	bl	80005ac <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 800074a:	2000      	movs	r0, #0
 800074c:	f7ff ff2e 	bl	80005ac <LCD_Write_DATA>

LCD_Write_COM(0xD0);
 8000750:	20d0      	movs	r0, #208	@ 0xd0
 8000752:	f7ff ff3b 	bl	80005cc <LCD_Write_COM>
LCD_Write_DATA(0x0D);
 8000756:	200d      	movs	r0, #13
 8000758:	f7ff ff28 	bl	80005ac <LCD_Write_DATA>

LCD_Write_COM(0x2C);
 800075c:	202c      	movs	r0, #44	@ 0x2c
 800075e:	f7ff ff35 	bl	80005cc <LCD_Write_COM>


}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}

08000766 <TFT_Send_Cmd>:
//===========================================================================
//===========================================================================
//�-��� ��� �������� ������
//static __inline  - not work before define of function 
void 	TFT_Send_Cmd(uint8_t index)
{
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	4603      	mov	r3, r0
 800076e:	71fb      	strb	r3, [r7, #7]
	*(uint8_t *) (LCD_REG) = index;	  
 8000770:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	7013      	strb	r3, [r2, #0]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <TFT_Write_Data>:

//�-��� ��� �������� ������
void TFT_Write_Data(uint16_t data)
{   
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]
    *(uint16_t *) (LCD_DATA) = data; 	
 800078e:	4a04      	ldr	r2, [pc, #16]	@ (80007a0 <TFT_Write_Data+0x1c>)
 8000790:	88fb      	ldrh	r3, [r7, #6]
 8000792:	8013      	strh	r3, [r2, #0]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	60020000 	.word	0x60020000

080007a4 <TFT_Set_X>:
//�-��� ������������� ������� ������� �� X
void TFT_Set_X(uint16_t start_x,uint16_t end_x)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	460a      	mov	r2, r1
 80007ae:	80fb      	strh	r3, [r7, #6]
 80007b0:	4613      	mov	r3, r2
 80007b2:	80bb      	strh	r3, [r7, #4]
	TFT_Send_Cmd(0x002A);
 80007b4:	202a      	movs	r0, #42	@ 0x2a
 80007b6:	f7ff ffd6 	bl	8000766 <TFT_Send_Cmd>
	TFT_Write_Data(start_x>>8);
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	0a1b      	lsrs	r3, r3, #8
 80007be:	b29b      	uxth	r3, r3
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ffdf 	bl	8000784 <TFT_Write_Data>
	TFT_Write_Data(start_x&0x00ff);
 80007c6:	88fb      	ldrh	r3, [r7, #6]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ffd9 	bl	8000784 <TFT_Write_Data>
	
	TFT_Write_Data(end_x>>8);
 80007d2:	88bb      	ldrh	r3, [r7, #4]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ffd3 	bl	8000784 <TFT_Write_Data>
	TFT_Write_Data(end_x&0x00ff);
 80007de:	88bb      	ldrh	r3, [r7, #4]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ffcd 	bl	8000784 <TFT_Write_Data>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <TFT_Set_Y>:

//�-��� ������������� ������� ������� �� Y
void TFT_Set_Y(uint16_t start_y,uint16_t end_y)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4603      	mov	r3, r0
 80007fa:	460a      	mov	r2, r1
 80007fc:	80fb      	strh	r3, [r7, #6]
 80007fe:	4613      	mov	r3, r2
 8000800:	80bb      	strh	r3, [r7, #4]
	TFT_Send_Cmd(0x002B);
 8000802:	202b      	movs	r0, #43	@ 0x2b
 8000804:	f7ff ffaf 	bl	8000766 <TFT_Send_Cmd>
	TFT_Write_Data(start_y>>8);
 8000808:	88fb      	ldrh	r3, [r7, #6]
 800080a:	0a1b      	lsrs	r3, r3, #8
 800080c:	b29b      	uxth	r3, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ffb8 	bl	8000784 <TFT_Write_Data>
	TFT_Write_Data(start_y&0x00ff);
 8000814:	88fb      	ldrh	r3, [r7, #6]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	b29b      	uxth	r3, r3
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ffb2 	bl	8000784 <TFT_Write_Data>
	
	TFT_Write_Data(end_y>>8);
 8000820:	88bb      	ldrh	r3, [r7, #4]
 8000822:	0a1b      	lsrs	r3, r3, #8
 8000824:	b29b      	uxth	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ffac 	bl	8000784 <TFT_Write_Data>
	TFT_Write_Data(end_y&0x00ff);
 800082c:	88bb      	ldrh	r3, [r7, #4]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	b29b      	uxth	r3, r3
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ffa6 	bl	8000784 <TFT_Write_Data>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <TFT_Set_Work_Area>:
}


//�-���  ������ ���������� ������� �������
void TFT_Set_Work_Area(uint16_t x, uint16_t y, uint16_t length, uint16_t width)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4604      	mov	r4, r0
 8000848:	4608      	mov	r0, r1
 800084a:	4611      	mov	r1, r2
 800084c:	461a      	mov	r2, r3
 800084e:	4623      	mov	r3, r4
 8000850:	80fb      	strh	r3, [r7, #6]
 8000852:	4603      	mov	r3, r0
 8000854:	80bb      	strh	r3, [r7, #4]
 8000856:	460b      	mov	r3, r1
 8000858:	807b      	strh	r3, [r7, #2]
 800085a:	4613      	mov	r3, r2
 800085c:	803b      	strh	r3, [r7, #0]
	TFT_Set_X(x, x+length-1);
 800085e:	88fa      	ldrh	r2, [r7, #6]
 8000860:	887b      	ldrh	r3, [r7, #2]
 8000862:	4413      	add	r3, r2
 8000864:	b29b      	uxth	r3, r3
 8000866:	3b01      	subs	r3, #1
 8000868:	b29a      	uxth	r2, r3
 800086a:	88fb      	ldrh	r3, [r7, #6]
 800086c:	4611      	mov	r1, r2
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ff98 	bl	80007a4 <TFT_Set_X>
	TFT_Set_Y(y, y+width-1);
 8000874:	88ba      	ldrh	r2, [r7, #4]
 8000876:	883b      	ldrh	r3, [r7, #0]
 8000878:	4413      	add	r3, r2
 800087a:	b29b      	uxth	r3, r3
 800087c:	3b01      	subs	r3, #1
 800087e:	b29a      	uxth	r2, r3
 8000880:	88bb      	ldrh	r3, [r7, #4]
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ffb4 	bl	80007f2 <TFT_Set_Y>
	TFT_Send_Cmd(0x2C);
 800088a:	202c      	movs	r0, #44	@ 0x2c
 800088c:	f7ff ff6b 	bl	8000766 <TFT_Send_Cmd>
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	bd90      	pop	{r4, r7, pc}

08000898 <TFT_Clear_Screen>:


void TFT_Clear_Screen(uint16_t color)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	80fb      	strh	r3, [r7, #6]
	uint32_t i=0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
	TFT_Set_Work_Area(0,0,800,480);
 80008a6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80008aa:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80008ae:	2100      	movs	r1, #0
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff ffc5 	bl	8000840 <TFT_Set_Work_Area>
	for(i=0; i < 384000; i++)
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	e006      	b.n	80008ca <TFT_Clear_Screen+0x32>
	{
		TFT_Write_Data(color);	//������� ��������� �����
 80008bc:	88fb      	ldrh	r3, [r7, #6]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ff60 	bl	8000784 <TFT_Write_Data>
	for(i=0; i < 384000; i++)
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	3301      	adds	r3, #1
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	4a03      	ldr	r2, [pc, #12]	@ (80008dc <TFT_Clear_Screen+0x44>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d9f4      	bls.n	80008bc <TFT_Clear_Screen+0x24>
	}
}
 80008d2:	bf00      	nop
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	0005dbff 	.word	0x0005dbff

080008e0 <TFT_Draw_HLine>:
	}
}

//�-��� ������ �������������� �����, ��������� �����, ������� � �����
void TFT_Draw_HLine(uint16_t x, uint16_t y, uint16_t length, uint16_t size, uint16_t color)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4604      	mov	r4, r0
 80008e8:	4608      	mov	r0, r1
 80008ea:	4611      	mov	r1, r2
 80008ec:	461a      	mov	r2, r3
 80008ee:	4623      	mov	r3, r4
 80008f0:	80fb      	strh	r3, [r7, #6]
 80008f2:	4603      	mov	r3, r0
 80008f4:	80bb      	strh	r3, [r7, #4]
 80008f6:	460b      	mov	r3, r1
 80008f8:	807b      	strh	r3, [r7, #2]
 80008fa:	4613      	mov	r3, r2
 80008fc:	803b      	strh	r3, [r7, #0]
	uint16_t i=0;
 80008fe:	2300      	movs	r3, #0
 8000900:	81fb      	strh	r3, [r7, #14]
	
	TFT_Set_Work_Area(x,y,length,size);
 8000902:	883b      	ldrh	r3, [r7, #0]
 8000904:	887a      	ldrh	r2, [r7, #2]
 8000906:	88b9      	ldrh	r1, [r7, #4]
 8000908:	88f8      	ldrh	r0, [r7, #6]
 800090a:	f7ff ff99 	bl	8000840 <TFT_Set_Work_Area>
	for(i=0; i<(length*size); i++)
 800090e:	2300      	movs	r3, #0
 8000910:	81fb      	strh	r3, [r7, #14]
 8000912:	e006      	b.n	8000922 <TFT_Draw_HLine+0x42>
	TFT_Write_Data(color);
 8000914:	8c3b      	ldrh	r3, [r7, #32]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ff34 	bl	8000784 <TFT_Write_Data>
	for(i=0; i<(length*size); i++)
 800091c:	89fb      	ldrh	r3, [r7, #14]
 800091e:	3301      	adds	r3, #1
 8000920:	81fb      	strh	r3, [r7, #14]
 8000922:	89fa      	ldrh	r2, [r7, #14]
 8000924:	887b      	ldrh	r3, [r7, #2]
 8000926:	8839      	ldrh	r1, [r7, #0]
 8000928:	fb01 f303 	mul.w	r3, r1, r3
 800092c:	429a      	cmp	r2, r3
 800092e:	dbf1      	blt.n	8000914 <TFT_Draw_HLine+0x34>
}
 8000930:	bf00      	nop
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	bd90      	pop	{r4, r7, pc}

0800093a <TFT_Draw_VLine>:

//�-��� ������ ������������ �����, ��������� �����, ������� � �����
void TFT_Draw_VLine(uint16_t x, uint16_t y, uint16_t length, uint16_t size, uint16_t color)
{
 800093a:	b590      	push	{r4, r7, lr}
 800093c:	b085      	sub	sp, #20
 800093e:	af00      	add	r7, sp, #0
 8000940:	4604      	mov	r4, r0
 8000942:	4608      	mov	r0, r1
 8000944:	4611      	mov	r1, r2
 8000946:	461a      	mov	r2, r3
 8000948:	4623      	mov	r3, r4
 800094a:	80fb      	strh	r3, [r7, #6]
 800094c:	4603      	mov	r3, r0
 800094e:	80bb      	strh	r3, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	807b      	strh	r3, [r7, #2]
 8000954:	4613      	mov	r3, r2
 8000956:	803b      	strh	r3, [r7, #0]
	uint16_t i=0;
 8000958:	2300      	movs	r3, #0
 800095a:	81fb      	strh	r3, [r7, #14]
	
	TFT_Set_Work_Area(x,y,size,length);
 800095c:	887b      	ldrh	r3, [r7, #2]
 800095e:	883a      	ldrh	r2, [r7, #0]
 8000960:	88b9      	ldrh	r1, [r7, #4]
 8000962:	88f8      	ldrh	r0, [r7, #6]
 8000964:	f7ff ff6c 	bl	8000840 <TFT_Set_Work_Area>
	for(i=0; i<(length*size); i++)
 8000968:	2300      	movs	r3, #0
 800096a:	81fb      	strh	r3, [r7, #14]
 800096c:	e006      	b.n	800097c <TFT_Draw_VLine+0x42>
	TFT_Write_Data(color);
 800096e:	8c3b      	ldrh	r3, [r7, #32]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff07 	bl	8000784 <TFT_Write_Data>
	for(i=0; i<(length*size); i++)
 8000976:	89fb      	ldrh	r3, [r7, #14]
 8000978:	3301      	adds	r3, #1
 800097a:	81fb      	strh	r3, [r7, #14]
 800097c:	89fa      	ldrh	r2, [r7, #14]
 800097e:	887b      	ldrh	r3, [r7, #2]
 8000980:	8839      	ldrh	r1, [r7, #0]
 8000982:	fb01 f303 	mul.w	r3, r1, r3
 8000986:	429a      	cmp	r2, r3
 8000988:	dbf1      	blt.n	800096e <TFT_Draw_VLine+0x34>
}
 800098a:	bf00      	nop
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	bd90      	pop	{r4, r7, pc}

08000994 <TFT_Draw_Fill_Rectangle>:
	TFT_Draw_VLine(x + length - size, y, width, size, color);
}

//�-��� ������ ����������� �������������, ��������� �����, ������, �����
void TFT_Draw_Fill_Rectangle(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t color)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	4604      	mov	r4, r0
 800099c:	4608      	mov	r0, r1
 800099e:	4611      	mov	r1, r2
 80009a0:	461a      	mov	r2, r3
 80009a2:	4623      	mov	r3, r4
 80009a4:	80fb      	strh	r3, [r7, #6]
 80009a6:	4603      	mov	r3, r0
 80009a8:	80bb      	strh	r3, [r7, #4]
 80009aa:	460b      	mov	r3, r1
 80009ac:	807b      	strh	r3, [r7, #2]
 80009ae:	4613      	mov	r3, r2
 80009b0:	803b      	strh	r3, [r7, #0]
	uint32_t i=0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
	
	TFT_Set_Work_Area(x,y,length, width);
 80009b6:	883b      	ldrh	r3, [r7, #0]
 80009b8:	887a      	ldrh	r2, [r7, #2]
 80009ba:	88b9      	ldrh	r1, [r7, #4]
 80009bc:	88f8      	ldrh	r0, [r7, #6]
 80009be:	f7ff ff3f 	bl	8000840 <TFT_Set_Work_Area>
	for(i=0; i < length*width; i++)
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e006      	b.n	80009d6 <TFT_Draw_Fill_Rectangle+0x42>
	{
		TFT_Write_Data(color);	//������� ��������� �����
 80009c8:	8c3b      	ldrh	r3, [r7, #32]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff feda 	bl	8000784 <TFT_Write_Data>
	for(i=0; i < length*width; i++)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3301      	adds	r3, #1
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	887b      	ldrh	r3, [r7, #2]
 80009d8:	883a      	ldrh	r2, [r7, #0]
 80009da:	fb02 f303 	mul.w	r3, r2, r3
 80009de:	461a      	mov	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d3f0      	bcc.n	80009c8 <TFT_Draw_Fill_Rectangle+0x34>
	}
}
 80009e6:	bf00      	nop
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd90      	pop	{r4, r7, pc}

080009f0 <TFT_Draw_Fill_Triangle_Simple>:


void TFT_Draw_Fill_Triangle_Simple(uint16_t x, uint16_t y,
                                   uint16_t width, uint16_t height,
                                   uint8_t size, uint16_t color)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af02      	add	r7, sp, #8
 80009f6:	4604      	mov	r4, r0
 80009f8:	4608      	mov	r0, r1
 80009fa:	4611      	mov	r1, r2
 80009fc:	461a      	mov	r2, r3
 80009fe:	4623      	mov	r3, r4
 8000a00:	80fb      	strh	r3, [r7, #6]
 8000a02:	4603      	mov	r3, r0
 8000a04:	80bb      	strh	r3, [r7, #4]
 8000a06:	460b      	mov	r3, r1
 8000a08:	807b      	strh	r3, [r7, #2]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	803b      	strh	r3, [r7, #0]
    for (uint16_t i = 0; i <= height; i++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	81fb      	strh	r3, [r7, #14]
 8000a12:	e022      	b.n	8000a5a <TFT_Draw_Fill_Triangle_Simple+0x6a>
    {
        // para cada linha i, a largura cresce de 0 até width
        uint16_t w = (uint32_t)width * i / height;
 8000a14:	887b      	ldrh	r3, [r7, #2]
 8000a16:	89fa      	ldrh	r2, [r7, #14]
 8000a18:	fb03 f202 	mul.w	r2, r3, r2
 8000a1c:	883b      	ldrh	r3, [r7, #0]
 8000a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a22:	81bb      	strh	r3, [r7, #12]
        // desloca de forma a manter o triângulo centrado na caixa
        uint16_t x0 = x + (width - w) / 2;
 8000a24:	887a      	ldrh	r2, [r7, #2]
 8000a26:	89bb      	ldrh	r3, [r7, #12]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	0fda      	lsrs	r2, r3, #31
 8000a2c:	4413      	add	r3, r2
 8000a2e:	105b      	asrs	r3, r3, #1
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	4413      	add	r3, r2
 8000a36:	817b      	strh	r3, [r7, #10]
        TFT_Draw_HLine(x0, y + i, w, size, color);
 8000a38:	88ba      	ldrh	r2, [r7, #4]
 8000a3a:	89fb      	ldrh	r3, [r7, #14]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	b299      	uxth	r1, r3
 8000a40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a44:	b29c      	uxth	r4, r3
 8000a46:	89ba      	ldrh	r2, [r7, #12]
 8000a48:	8978      	ldrh	r0, [r7, #10]
 8000a4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	4623      	mov	r3, r4
 8000a50:	f7ff ff46 	bl	80008e0 <TFT_Draw_HLine>
    for (uint16_t i = 0; i <= height; i++)
 8000a54:	89fb      	ldrh	r3, [r7, #14]
 8000a56:	3301      	adds	r3, #1
 8000a58:	81fb      	strh	r3, [r7, #14]
 8000a5a:	89fa      	ldrh	r2, [r7, #14]
 8000a5c:	883b      	ldrh	r3, [r7, #0]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d9d8      	bls.n	8000a14 <TFT_Draw_Fill_Triangle_Simple+0x24>
    }
}
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd90      	pop	{r4, r7, pc}

08000a6c <TFT_Draw_Fill_Triangle_Inverted_Simple>:
// Preenche um triângulo isósceles apontando para baixo
// mesma convenção de parâmetros, mas base no topo
void TFT_Draw_Fill_Triangle_Inverted_Simple(uint16_t x, uint16_t y,
                                            uint16_t width, uint16_t height,
                                            uint8_t size, uint16_t color)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b087      	sub	sp, #28
 8000a70:	af02      	add	r7, sp, #8
 8000a72:	4604      	mov	r4, r0
 8000a74:	4608      	mov	r0, r1
 8000a76:	4611      	mov	r1, r2
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4623      	mov	r3, r4
 8000a7c:	80fb      	strh	r3, [r7, #6]
 8000a7e:	4603      	mov	r3, r0
 8000a80:	80bb      	strh	r3, [r7, #4]
 8000a82:	460b      	mov	r3, r1
 8000a84:	807b      	strh	r3, [r7, #2]
 8000a86:	4613      	mov	r3, r2
 8000a88:	803b      	strh	r3, [r7, #0]
    for (uint16_t i = 0; i <= height; i++)
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	81fb      	strh	r3, [r7, #14]
 8000a8e:	e024      	b.n	8000ada <TFT_Draw_Fill_Triangle_Inverted_Simple+0x6e>
    {
        // aqui a largura decresce de width até 0
        uint16_t w = (uint32_t)width * (height - i) / height;
 8000a90:	887b      	ldrh	r3, [r7, #2]
 8000a92:	8839      	ldrh	r1, [r7, #0]
 8000a94:	89fa      	ldrh	r2, [r7, #14]
 8000a96:	1a8a      	subs	r2, r1, r2
 8000a98:	fb03 f202 	mul.w	r2, r3, r2
 8000a9c:	883b      	ldrh	r3, [r7, #0]
 8000a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa2:	81bb      	strh	r3, [r7, #12]
        uint16_t x0 = x + (width - w) / 2;
 8000aa4:	887a      	ldrh	r2, [r7, #2]
 8000aa6:	89bb      	ldrh	r3, [r7, #12]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	0fda      	lsrs	r2, r3, #31
 8000aac:	4413      	add	r3, r2
 8000aae:	105b      	asrs	r3, r3, #1
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	817b      	strh	r3, [r7, #10]
        TFT_Draw_HLine(x0, y + i, w, size, color);
 8000ab8:	88ba      	ldrh	r2, [r7, #4]
 8000aba:	89fb      	ldrh	r3, [r7, #14]
 8000abc:	4413      	add	r3, r2
 8000abe:	b299      	uxth	r1, r3
 8000ac0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ac4:	b29c      	uxth	r4, r3
 8000ac6:	89ba      	ldrh	r2, [r7, #12]
 8000ac8:	8978      	ldrh	r0, [r7, #10]
 8000aca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	4623      	mov	r3, r4
 8000ad0:	f7ff ff06 	bl	80008e0 <TFT_Draw_HLine>
    for (uint16_t i = 0; i <= height; i++)
 8000ad4:	89fb      	ldrh	r3, [r7, #14]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	81fb      	strh	r3, [r7, #14]
 8000ada:	89fa      	ldrh	r2, [r7, #14]
 8000adc:	883b      	ldrh	r3, [r7, #0]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d9d6      	bls.n	8000a90 <TFT_Draw_Fill_Triangle_Inverted_Simple+0x24>
    }
}
 8000ae2:	bf00      	nop
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd90      	pop	{r4, r7, pc}

08000aec <TFT_Draw_Circle>:
}

//�-��� ������ ���������� ������� �������, ������ �������� ������� � ��������� ������, ����� �������� 
//������ ���������� ������ ������ ��� ����� ���������� �������� fill ������ �������, ����� ����
void TFT_Draw_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint16_t color)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b089      	sub	sp, #36	@ 0x24
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	4604      	mov	r4, r0
 8000af4:	4608      	mov	r0, r1
 8000af6:	4611      	mov	r1, r2
 8000af8:	461a      	mov	r2, r3
 8000afa:	4623      	mov	r3, r4
 8000afc:	80fb      	strh	r3, [r7, #6]
 8000afe:	4603      	mov	r3, r0
 8000b00:	80bb      	strh	r3, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	70fb      	strb	r3, [r7, #3]
 8000b06:	4613      	mov	r3, r2
 8000b08:	70bb      	strb	r3, [r7, #2]
	int a_,b_,P;
	a_ = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
	b_ = radius;
 8000b0e:	78fb      	ldrb	r3, [r7, #3]
 8000b10:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 8000b12:	78fb      	ldrb	r3, [r7, #3]
 8000b14:	f1c3 0301 	rsb	r3, r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 8000b1a:	e0fc      	b.n	8000d16 <TFT_Draw_Circle+0x22a>
	{
		if(fill == 1)
 8000b1c:	78bb      	ldrb	r3, [r7, #2]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d136      	bne.n	8000b90 <TFT_Draw_Circle+0xa4>
		{
			TFT_Draw_Fill_Rectangle(x-a_,y-b_,2*a_+1,2*b_+1,color);
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	88fa      	ldrh	r2, [r7, #6]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	b298      	uxth	r0, r3
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	88ba      	ldrh	r2, [r7, #4]
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	b299      	uxth	r1, r3
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	3301      	adds	r3, #1
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	b29c      	uxth	r4, r3
 8000b4e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	4623      	mov	r3, r4
 8000b54:	f7ff ff1e 	bl	8000994 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-b_,y-a_,2*b_+1,2*a_+1,color);
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	88fa      	ldrh	r2, [r7, #6]
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	b298      	uxth	r0, r3
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	88ba      	ldrh	r2, [r7, #4]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	b299      	uxth	r1, r3
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	3301      	adds	r3, #1
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	3301      	adds	r3, #1
 8000b82:	b29c      	uxth	r4, r3
 8000b84:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	4623      	mov	r3, r4
 8000b8a:	f7ff ff03 	bl	8000994 <TFT_Draw_Fill_Rectangle>
 8000b8e:	e0a7      	b.n	8000ce0 <TFT_Draw_Circle+0x1f4>
		}
		else
		{
			TFT_Draw_Fill_Rectangle(a_+x, b_+y, size, size, color);
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	4413      	add	r3, r2
 8000b98:	b298      	uxth	r0, r3
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	88bb      	ldrh	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	b299      	uxth	r1, r3
 8000ba4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000bae:	b29c      	uxth	r4, r3
 8000bb0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	4623      	mov	r3, r4
 8000bb6:	f7ff feed 	bl	8000994 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(b_+x, a_+y, size, size, color);
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	b298      	uxth	r0, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	88bb      	ldrh	r3, [r7, #4]
 8000bca:	4413      	add	r3, r2
 8000bcc:	b299      	uxth	r1, r3
 8000bce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000bd8:	b29c      	uxth	r4, r3
 8000bda:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	4623      	mov	r3, r4
 8000be0:	f7ff fed8 	bl	8000994 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-a_, b_+y, size, size, color);
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	88fa      	ldrh	r2, [r7, #6]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	b298      	uxth	r0, r3
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	88bb      	ldrh	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	b299      	uxth	r1, r3
 8000bf8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c02:	b29c      	uxth	r4, r3
 8000c04:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	4623      	mov	r3, r4
 8000c0a:	f7ff fec3 	bl	8000994 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-b_, a_+y, size, size, color);
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	88fa      	ldrh	r2, [r7, #6]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	b298      	uxth	r0, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	88bb      	ldrh	r3, [r7, #4]
 8000c1e:	4413      	add	r3, r2
 8000c20:	b299      	uxth	r1, r3
 8000c22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c2c:	b29c      	uxth	r4, r3
 8000c2e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	4623      	mov	r3, r4
 8000c34:	f7ff feae 	bl	8000994 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(b_+x, y-a_, size, size, color);
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	4413      	add	r3, r2
 8000c40:	b298      	uxth	r0, r3
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	88ba      	ldrh	r2, [r7, #4]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	b299      	uxth	r1, r3
 8000c4c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c56:	b29c      	uxth	r4, r3
 8000c58:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	4623      	mov	r3, r4
 8000c5e:	f7ff fe99 	bl	8000994 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(a_+x, y-b_, size, size, color);
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	4413      	add	r3, r2
 8000c6a:	b298      	uxth	r0, r3
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	88ba      	ldrh	r2, [r7, #4]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	b299      	uxth	r1, r3
 8000c76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c80:	b29c      	uxth	r4, r3
 8000c82:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	4623      	mov	r3, r4
 8000c88:	f7ff fe84 	bl	8000994 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-a_, y-b_, size, size, color);
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	88fa      	ldrh	r2, [r7, #6]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	b298      	uxth	r0, r3
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	88ba      	ldrh	r2, [r7, #4]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	b299      	uxth	r1, r3
 8000ca0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000caa:	b29c      	uxth	r4, r3
 8000cac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	4623      	mov	r3, r4
 8000cb2:	f7ff fe6f 	bl	8000994 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-b_, y-a_, size, size, color);
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	88fa      	ldrh	r2, [r7, #6]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	b298      	uxth	r0, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	88ba      	ldrh	r2, [r7, #4]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	b299      	uxth	r1, r3
 8000cca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000cd4:	b29c      	uxth	r4, r3
 8000cd6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	4623      	mov	r3, r4
 8000cdc:	f7ff fe5a 	bl	8000994 <TFT_Draw_Fill_Rectangle>
		}
		if (P < 0 )
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da09      	bge.n	8000cfa <TFT_Draw_Circle+0x20e>
		{
			P = (P + 3) + (2* a_);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	1cda      	adds	r2, r3, #3
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	4413      	add	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
			a_ ++;
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e00d      	b.n	8000d16 <TFT_Draw_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2* (a_ - b_));
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	1d5a      	adds	r2, r3, #5
 8000cfe:	6979      	ldr	r1, [r7, #20]
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	1acb      	subs	r3, r1, r3
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
			a_ ++;
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
			b_ --;
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	f77f aefe 	ble.w	8000b1c <TFT_Draw_Circle+0x30>
		}
	}
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	371c      	adds	r7, #28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd90      	pop	{r4, r7, pc}

08000d2a <TFT_Draw_Circle_Helper>:

//��������������� �-��� ��� ����������� ���� ��������������
void TFT_Draw_Circle_Helper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint16_t color)
{
 8000d2a:	b590      	push	{r4, r7, lr}
 8000d2c:	b089      	sub	sp, #36	@ 0x24
 8000d2e:	af02      	add	r7, sp, #8
 8000d30:	4604      	mov	r4, r0
 8000d32:	4608      	mov	r0, r1
 8000d34:	4611      	mov	r1, r2
 8000d36:	461a      	mov	r2, r3
 8000d38:	4623      	mov	r3, r4
 8000d3a:	80fb      	strh	r3, [r7, #6]
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	80bb      	strh	r3, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	807b      	strh	r3, [r7, #2]
 8000d44:	4613      	mov	r3, r2
 8000d46:	707b      	strb	r3, [r7, #1]
  int16_t f     = 1 - r;
 8000d48:	887b      	ldrh	r3, [r7, #2]
 8000d4a:	f1c3 0301 	rsb	r3, r3, #1
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8000d52:	2301      	movs	r3, #1
 8000d54:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	03d2      	lsls	r2, r2, #15
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8000d68:	887b      	ldrh	r3, [r7, #2]
 8000d6a:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8000d6c:	e0cd      	b.n	8000f0a <TFT_Draw_Circle_Helper+0x1e0>
    if (f >= 0) {
 8000d6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	db0e      	blt.n	8000d94 <TFT_Draw_Circle_Helper+0x6a>
      y--;
 8000d76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8000d82:	8a7b      	ldrh	r3, [r7, #18]
 8000d84:	3302      	adds	r3, #2
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8000d8a:	8afa      	ldrh	r2, [r7, #22]
 8000d8c:	8a7b      	ldrh	r3, [r7, #18]
 8000d8e:	4413      	add	r3, r2
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8000d94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8000da0:	8abb      	ldrh	r3, [r7, #20]
 8000da2:	3302      	adds	r3, #2
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8000da8:	8afa      	ldrh	r2, [r7, #22]
 8000daa:	8abb      	ldrh	r3, [r7, #20]
 8000dac:	4413      	add	r3, r2
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	82fb      	strh	r3, [r7, #22]
    if (cornername & 0x4) {
 8000db2:	787b      	ldrb	r3, [r7, #1]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d025      	beq.n	8000e08 <TFT_Draw_Circle_Helper+0xde>
      TFT_Draw_Fill_Rectangle(x0 + x, y0 + y, size, size, color);
 8000dbc:	88fa      	ldrh	r2, [r7, #6]
 8000dbe:	8a3b      	ldrh	r3, [r7, #16]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b298      	uxth	r0, r3
 8000dc4:	88ba      	ldrh	r2, [r7, #4]
 8000dc6:	89fb      	ldrh	r3, [r7, #14]
 8000dc8:	4413      	add	r3, r2
 8000dca:	b299      	uxth	r1, r3
 8000dcc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000dd6:	b29c      	uxth	r4, r3
 8000dd8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	4623      	mov	r3, r4
 8000dde:	f7ff fdd9 	bl	8000994 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 + y, y0 + x, size, size, color);
 8000de2:	88fa      	ldrh	r2, [r7, #6]
 8000de4:	89fb      	ldrh	r3, [r7, #14]
 8000de6:	4413      	add	r3, r2
 8000de8:	b298      	uxth	r0, r3
 8000dea:	88ba      	ldrh	r2, [r7, #4]
 8000dec:	8a3b      	ldrh	r3, [r7, #16]
 8000dee:	4413      	add	r3, r2
 8000df0:	b299      	uxth	r1, r3
 8000df2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000dfc:	b29c      	uxth	r4, r3
 8000dfe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	4623      	mov	r3, r4
 8000e04:	f7ff fdc6 	bl	8000994 <TFT_Draw_Fill_Rectangle>
    }
    if (cornername & 0x2) {
 8000e08:	787b      	ldrb	r3, [r7, #1]
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d025      	beq.n	8000e5e <TFT_Draw_Circle_Helper+0x134>
      TFT_Draw_Fill_Rectangle(x0 + x, y0 - y, size, size, color);
 8000e12:	88fa      	ldrh	r2, [r7, #6]
 8000e14:	8a3b      	ldrh	r3, [r7, #16]
 8000e16:	4413      	add	r3, r2
 8000e18:	b298      	uxth	r0, r3
 8000e1a:	88ba      	ldrh	r2, [r7, #4]
 8000e1c:	89fb      	ldrh	r3, [r7, #14]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	b299      	uxth	r1, r3
 8000e22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000e2c:	b29c      	uxth	r4, r3
 8000e2e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	4623      	mov	r3, r4
 8000e34:	f7ff fdae 	bl	8000994 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 + y, y0 - x, size, size, color);
 8000e38:	88fa      	ldrh	r2, [r7, #6]
 8000e3a:	89fb      	ldrh	r3, [r7, #14]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b298      	uxth	r0, r3
 8000e40:	88ba      	ldrh	r2, [r7, #4]
 8000e42:	8a3b      	ldrh	r3, [r7, #16]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	b299      	uxth	r1, r3
 8000e48:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000e52:	b29c      	uxth	r4, r3
 8000e54:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	4623      	mov	r3, r4
 8000e5a:	f7ff fd9b 	bl	8000994 <TFT_Draw_Fill_Rectangle>
    }
    if (cornername & 0x8) {
 8000e5e:	787b      	ldrb	r3, [r7, #1]
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d025      	beq.n	8000eb4 <TFT_Draw_Circle_Helper+0x18a>
      TFT_Draw_Fill_Rectangle(x0 - y, y0 + x, size, size, color);
 8000e68:	88fa      	ldrh	r2, [r7, #6]
 8000e6a:	89fb      	ldrh	r3, [r7, #14]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	b298      	uxth	r0, r3
 8000e70:	88ba      	ldrh	r2, [r7, #4]
 8000e72:	8a3b      	ldrh	r3, [r7, #16]
 8000e74:	4413      	add	r3, r2
 8000e76:	b299      	uxth	r1, r3
 8000e78:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000e82:	b29c      	uxth	r4, r3
 8000e84:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	4623      	mov	r3, r4
 8000e8a:	f7ff fd83 	bl	8000994 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 - x, y0 + y, size, size, color);
 8000e8e:	88fa      	ldrh	r2, [r7, #6]
 8000e90:	8a3b      	ldrh	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	b298      	uxth	r0, r3
 8000e96:	88ba      	ldrh	r2, [r7, #4]
 8000e98:	89fb      	ldrh	r3, [r7, #14]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b299      	uxth	r1, r3
 8000e9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ea8:	b29c      	uxth	r4, r3
 8000eaa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	4623      	mov	r3, r4
 8000eb0:	f7ff fd70 	bl	8000994 <TFT_Draw_Fill_Rectangle>
    }
    if (cornername & 0x1) {
 8000eb4:	787b      	ldrb	r3, [r7, #1]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d025      	beq.n	8000f0a <TFT_Draw_Circle_Helper+0x1e0>
      TFT_Draw_Fill_Rectangle(x0 - y, y0 - x, size, size, color);
 8000ebe:	88fa      	ldrh	r2, [r7, #6]
 8000ec0:	89fb      	ldrh	r3, [r7, #14]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	b298      	uxth	r0, r3
 8000ec6:	88ba      	ldrh	r2, [r7, #4]
 8000ec8:	8a3b      	ldrh	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	b299      	uxth	r1, r3
 8000ece:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ed8:	b29c      	uxth	r4, r3
 8000eda:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	4623      	mov	r3, r4
 8000ee0:	f7ff fd58 	bl	8000994 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 - x, y0 - y, size, size, color);
 8000ee4:	88fa      	ldrh	r2, [r7, #6]
 8000ee6:	8a3b      	ldrh	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	b298      	uxth	r0, r3
 8000eec:	88ba      	ldrh	r2, [r7, #4]
 8000eee:	89fb      	ldrh	r3, [r7, #14]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	b299      	uxth	r1, r3
 8000ef4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000efe:	b29c      	uxth	r4, r3
 8000f00:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	4623      	mov	r3, r4
 8000f06:	f7ff fd45 	bl	8000994 <TFT_Draw_Fill_Rectangle>
  while (x<y) {
 8000f0a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000f0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	f6ff af2b 	blt.w	8000d6e <TFT_Draw_Circle_Helper+0x44>
    }
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	371c      	adds	r7, #28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd90      	pop	{r4, r7, pc}

08000f22 <TFT_Draw_Round_Rect>:

//�-��� ������ ������������� �������� �����, ������, �������� ����������� ����, ������� ����� � ��������� ������
void TFT_Draw_Round_Rect(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint16_t color)
{
 8000f22:	b590      	push	{r4, r7, lr}
 8000f24:	b085      	sub	sp, #20
 8000f26:	af02      	add	r7, sp, #8
 8000f28:	4604      	mov	r4, r0
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4623      	mov	r3, r4
 8000f32:	80fb      	strh	r3, [r7, #6]
 8000f34:	4603      	mov	r3, r0
 8000f36:	80bb      	strh	r3, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	807b      	strh	r3, [r7, #2]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	803b      	strh	r3, [r7, #0]

  TFT_Draw_HLine(x+r  , y    , length-2*r, size, color); // Top
 8000f40:	88fa      	ldrh	r2, [r7, #6]
 8000f42:	8b3b      	ldrh	r3, [r7, #24]
 8000f44:	4413      	add	r3, r2
 8000f46:	b298      	uxth	r0, r3
 8000f48:	8b3b      	ldrh	r3, [r7, #24]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	7f3b      	ldrb	r3, [r7, #28]
 8000f56:	b29c      	uxth	r4, r3
 8000f58:	88b9      	ldrh	r1, [r7, #4]
 8000f5a:	8c3b      	ldrh	r3, [r7, #32]
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	4623      	mov	r3, r4
 8000f60:	f7ff fcbe 	bl	80008e0 <TFT_Draw_HLine>
  TFT_Draw_HLine(x+r  , y+width-1, length-2*r, size, color); // Bottom
 8000f64:	88fa      	ldrh	r2, [r7, #6]
 8000f66:	8b3b      	ldrh	r3, [r7, #24]
 8000f68:	4413      	add	r3, r2
 8000f6a:	b298      	uxth	r0, r3
 8000f6c:	88ba      	ldrh	r2, [r7, #4]
 8000f6e:	883b      	ldrh	r3, [r7, #0]
 8000f70:	4413      	add	r3, r2
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	3b01      	subs	r3, #1
 8000f76:	b299      	uxth	r1, r3
 8000f78:	8b3b      	ldrh	r3, [r7, #24]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	7f3b      	ldrb	r3, [r7, #28]
 8000f86:	b29c      	uxth	r4, r3
 8000f88:	8c3b      	ldrh	r3, [r7, #32]
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	4623      	mov	r3, r4
 8000f8e:	f7ff fca7 	bl	80008e0 <TFT_Draw_HLine>
  TFT_Draw_VLine(x    , y+r  , width-2*r, size, color); // Left
 8000f92:	88ba      	ldrh	r2, [r7, #4]
 8000f94:	8b3b      	ldrh	r3, [r7, #24]
 8000f96:	4413      	add	r3, r2
 8000f98:	b299      	uxth	r1, r3
 8000f9a:	8b3b      	ldrh	r3, [r7, #24]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	883a      	ldrh	r2, [r7, #0]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	7f3b      	ldrb	r3, [r7, #28]
 8000fa8:	b29c      	uxth	r4, r3
 8000faa:	88f8      	ldrh	r0, [r7, #6]
 8000fac:	8c3b      	ldrh	r3, [r7, #32]
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	4623      	mov	r3, r4
 8000fb2:	f7ff fcc2 	bl	800093a <TFT_Draw_VLine>
  TFT_Draw_VLine(x+length-1, y+r  , width-2*r, size, color); // Right
 8000fb6:	88fa      	ldrh	r2, [r7, #6]
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	4413      	add	r3, r2
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	b298      	uxth	r0, r3
 8000fc2:	88ba      	ldrh	r2, [r7, #4]
 8000fc4:	8b3b      	ldrh	r3, [r7, #24]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b299      	uxth	r1, r3
 8000fca:	8b3b      	ldrh	r3, [r7, #24]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	883a      	ldrh	r2, [r7, #0]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	7f3b      	ldrb	r3, [r7, #28]
 8000fd8:	b29c      	uxth	r4, r3
 8000fda:	8c3b      	ldrh	r3, [r7, #32]
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	4623      	mov	r3, r4
 8000fe0:	f7ff fcab 	bl	800093a <TFT_Draw_VLine>

  TFT_Draw_Circle_Helper(x+r    , y+r    , r, 		 			1, size, color);
 8000fe4:	88fa      	ldrh	r2, [r7, #6]
 8000fe6:	8b3b      	ldrh	r3, [r7, #24]
 8000fe8:	4413      	add	r3, r2
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	b218      	sxth	r0, r3
 8000fee:	88ba      	ldrh	r2, [r7, #4]
 8000ff0:	8b3b      	ldrh	r3, [r7, #24]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	b219      	sxth	r1, r3
 8000ff8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000ffc:	8c3b      	ldrh	r3, [r7, #32]
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	7f3b      	ldrb	r3, [r7, #28]
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2301      	movs	r3, #1
 8001006:	f7ff fe90 	bl	8000d2a <TFT_Draw_Circle_Helper>
  TFT_Draw_Circle_Helper(x+length-r-1, y+r    , r, 			2, size, color);
 800100a:	88fa      	ldrh	r2, [r7, #6]
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	4413      	add	r3, r2
 8001010:	b29a      	uxth	r2, r3
 8001012:	8b3b      	ldrh	r3, [r7, #24]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	b29b      	uxth	r3, r3
 8001018:	3b01      	subs	r3, #1
 800101a:	b29b      	uxth	r3, r3
 800101c:	b218      	sxth	r0, r3
 800101e:	88ba      	ldrh	r2, [r7, #4]
 8001020:	8b3b      	ldrh	r3, [r7, #24]
 8001022:	4413      	add	r3, r2
 8001024:	b29b      	uxth	r3, r3
 8001026:	b219      	sxth	r1, r3
 8001028:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800102c:	8c3b      	ldrh	r3, [r7, #32]
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	7f3b      	ldrb	r3, [r7, #28]
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2302      	movs	r3, #2
 8001036:	f7ff fe78 	bl	8000d2a <TFT_Draw_Circle_Helper>
  TFT_Draw_Circle_Helper(x+length-r-1, y+width-r-1, r,  4, size, color);
 800103a:	88fa      	ldrh	r2, [r7, #6]
 800103c:	887b      	ldrh	r3, [r7, #2]
 800103e:	4413      	add	r3, r2
 8001040:	b29a      	uxth	r2, r3
 8001042:	8b3b      	ldrh	r3, [r7, #24]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	b29b      	uxth	r3, r3
 8001048:	3b01      	subs	r3, #1
 800104a:	b29b      	uxth	r3, r3
 800104c:	b218      	sxth	r0, r3
 800104e:	88ba      	ldrh	r2, [r7, #4]
 8001050:	883b      	ldrh	r3, [r7, #0]
 8001052:	4413      	add	r3, r2
 8001054:	b29a      	uxth	r2, r3
 8001056:	8b3b      	ldrh	r3, [r7, #24]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	b29b      	uxth	r3, r3
 800105c:	3b01      	subs	r3, #1
 800105e:	b29b      	uxth	r3, r3
 8001060:	b219      	sxth	r1, r3
 8001062:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001066:	8c3b      	ldrh	r3, [r7, #32]
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	7f3b      	ldrb	r3, [r7, #28]
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2304      	movs	r3, #4
 8001070:	f7ff fe5b 	bl	8000d2a <TFT_Draw_Circle_Helper>
  TFT_Draw_Circle_Helper(x+r    , y+width-r-1, r, 			8, size, color);
 8001074:	88fa      	ldrh	r2, [r7, #6]
 8001076:	8b3b      	ldrh	r3, [r7, #24]
 8001078:	4413      	add	r3, r2
 800107a:	b29b      	uxth	r3, r3
 800107c:	b218      	sxth	r0, r3
 800107e:	88ba      	ldrh	r2, [r7, #4]
 8001080:	883b      	ldrh	r3, [r7, #0]
 8001082:	4413      	add	r3, r2
 8001084:	b29a      	uxth	r2, r3
 8001086:	8b3b      	ldrh	r3, [r7, #24]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	b29b      	uxth	r3, r3
 800108c:	3b01      	subs	r3, #1
 800108e:	b29b      	uxth	r3, r3
 8001090:	b219      	sxth	r1, r3
 8001092:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001096:	8c3b      	ldrh	r3, [r7, #32]
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	7f3b      	ldrb	r3, [r7, #28]
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2308      	movs	r3, #8
 80010a0:	f7ff fe43 	bl	8000d2a <TFT_Draw_Circle_Helper>
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd90      	pop	{r4, r7, pc}

080010ac <TFT_Draw_Fill_Circle_Helper>:

//��������������� �-��� ��� ����������� ���� ������������ ��������������
void TFT_Draw_Fill_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) 
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b089      	sub	sp, #36	@ 0x24
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	4604      	mov	r4, r0
 80010b4:	4608      	mov	r0, r1
 80010b6:	4611      	mov	r1, r2
 80010b8:	461a      	mov	r2, r3
 80010ba:	4623      	mov	r3, r4
 80010bc:	80fb      	strh	r3, [r7, #6]
 80010be:	4603      	mov	r3, r0
 80010c0:	80bb      	strh	r3, [r7, #4]
 80010c2:	460b      	mov	r3, r1
 80010c4:	807b      	strh	r3, [r7, #2]
 80010c6:	4613      	mov	r3, r2
 80010c8:	707b      	strb	r3, [r7, #1]

  int16_t f     = 1 - r;
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	f1c3 0301 	rsb	r3, r3, #1
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 80010d8:	887b      	ldrh	r3, [r7, #2]
 80010da:	461a      	mov	r2, r3
 80010dc:	03d2      	lsls	r2, r2, #15
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 80010ee:	e07f      	b.n	80011f0 <TFT_Draw_Fill_Circle_Helper+0x144>
    if (f >= 0) {
 80010f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0e      	blt.n	8001116 <TFT_Draw_Fill_Circle_Helper+0x6a>
      y--;
 80010f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	3b01      	subs	r3, #1
 8001100:	b29b      	uxth	r3, r3
 8001102:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8001104:	8a7b      	ldrh	r3, [r7, #18]
 8001106:	3302      	adds	r3, #2
 8001108:	b29b      	uxth	r3, r3
 800110a:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 800110c:	8afa      	ldrh	r2, [r7, #22]
 800110e:	8a7b      	ldrh	r3, [r7, #18]
 8001110:	4413      	add	r3, r2
 8001112:	b29b      	uxth	r3, r3
 8001114:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8001116:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800111a:	b29b      	uxth	r3, r3
 800111c:	3301      	adds	r3, #1
 800111e:	b29b      	uxth	r3, r3
 8001120:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8001122:	8abb      	ldrh	r3, [r7, #20]
 8001124:	3302      	adds	r3, #2
 8001126:	b29b      	uxth	r3, r3
 8001128:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 800112a:	8afa      	ldrh	r2, [r7, #22]
 800112c:	8abb      	ldrh	r3, [r7, #20]
 800112e:	4413      	add	r3, r2
 8001130:	b29b      	uxth	r3, r3
 8001132:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8001134:	787b      	ldrb	r3, [r7, #1]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d029      	beq.n	8001192 <TFT_Draw_Fill_Circle_Helper+0xe6>
      TFT_Draw_VLine(x0+x, y0-y, 2*y+1+delta, 1, color);
 800113e:	88fa      	ldrh	r2, [r7, #6]
 8001140:	8a3b      	ldrh	r3, [r7, #16]
 8001142:	4413      	add	r3, r2
 8001144:	b298      	uxth	r0, r3
 8001146:	88ba      	ldrh	r2, [r7, #4]
 8001148:	89fb      	ldrh	r3, [r7, #14]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	b299      	uxth	r1, r3
 800114e:	89fb      	ldrh	r3, [r7, #14]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	b29a      	uxth	r2, r3
 8001154:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001156:	4413      	add	r3, r2
 8001158:	b29b      	uxth	r3, r3
 800115a:	3301      	adds	r3, #1
 800115c:	b29a      	uxth	r2, r3
 800115e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2301      	movs	r3, #1
 8001164:	f7ff fbe9 	bl	800093a <TFT_Draw_VLine>
      TFT_Draw_VLine(x0+y, y0-x, 2*x+1+delta, 1, color);
 8001168:	88fa      	ldrh	r2, [r7, #6]
 800116a:	89fb      	ldrh	r3, [r7, #14]
 800116c:	4413      	add	r3, r2
 800116e:	b298      	uxth	r0, r3
 8001170:	88ba      	ldrh	r2, [r7, #4]
 8001172:	8a3b      	ldrh	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	b299      	uxth	r1, r3
 8001178:	8a3b      	ldrh	r3, [r7, #16]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	b29a      	uxth	r2, r3
 800117e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001180:	4413      	add	r3, r2
 8001182:	b29b      	uxth	r3, r3
 8001184:	3301      	adds	r3, #1
 8001186:	b29a      	uxth	r2, r3
 8001188:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2301      	movs	r3, #1
 800118e:	f7ff fbd4 	bl	800093a <TFT_Draw_VLine>
    }
    if (cornername & 0x2) {
 8001192:	787b      	ldrb	r3, [r7, #1]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d029      	beq.n	80011f0 <TFT_Draw_Fill_Circle_Helper+0x144>
     TFT_Draw_VLine(x0-x, y0-y, 2*y+1+delta, 1, color);
 800119c:	88fa      	ldrh	r2, [r7, #6]
 800119e:	8a3b      	ldrh	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	b298      	uxth	r0, r3
 80011a4:	88ba      	ldrh	r2, [r7, #4]
 80011a6:	89fb      	ldrh	r3, [r7, #14]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	b299      	uxth	r1, r3
 80011ac:	89fb      	ldrh	r3, [r7, #14]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80011b4:	4413      	add	r3, r2
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	3301      	adds	r3, #1
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2301      	movs	r3, #1
 80011c2:	f7ff fbba 	bl	800093a <TFT_Draw_VLine>
     TFT_Draw_VLine(x0-y, y0-x, 2*x+1+delta, 1, color);
 80011c6:	88fa      	ldrh	r2, [r7, #6]
 80011c8:	89fb      	ldrh	r3, [r7, #14]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	b298      	uxth	r0, r3
 80011ce:	88ba      	ldrh	r2, [r7, #4]
 80011d0:	8a3b      	ldrh	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	b299      	uxth	r1, r3
 80011d6:	8a3b      	ldrh	r3, [r7, #16]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	b29a      	uxth	r2, r3
 80011dc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80011de:	4413      	add	r3, r2
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	f7ff fba5 	bl	800093a <TFT_Draw_VLine>
  while (x<y) {
 80011f0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80011f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	f6ff af79 	blt.w	80010f0 <TFT_Draw_Fill_Circle_Helper+0x44>
    }
  }
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	371c      	adds	r7, #28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd90      	pop	{r4, r7, pc}

08001208 <TFT_Draw_Fill_Round_Rect>:

//�-��� ������ ����������� ������������� �������� �����, ������, �������� ����������� ����� � ��������� ������
void TFT_Draw_Fill_Round_Rect(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint16_t color)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b085      	sub	sp, #20
 800120c:	af02      	add	r7, sp, #8
 800120e:	4604      	mov	r4, r0
 8001210:	4608      	mov	r0, r1
 8001212:	4611      	mov	r1, r2
 8001214:	461a      	mov	r2, r3
 8001216:	4623      	mov	r3, r4
 8001218:	80fb      	strh	r3, [r7, #6]
 800121a:	4603      	mov	r3, r0
 800121c:	80bb      	strh	r3, [r7, #4]
 800121e:	460b      	mov	r3, r1
 8001220:	807b      	strh	r3, [r7, #2]
 8001222:	4613      	mov	r3, r2
 8001224:	803b      	strh	r3, [r7, #0]
  TFT_Draw_Fill_Rectangle(x+r, y, length-2*r, width, color);
 8001226:	88fa      	ldrh	r2, [r7, #6]
 8001228:	8b3b      	ldrh	r3, [r7, #24]
 800122a:	4413      	add	r3, r2
 800122c:	b298      	uxth	r0, r3
 800122e:	8b3b      	ldrh	r3, [r7, #24]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	b29b      	uxth	r3, r3
 8001234:	887a      	ldrh	r2, [r7, #2]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	b29a      	uxth	r2, r3
 800123a:	883c      	ldrh	r4, [r7, #0]
 800123c:	88b9      	ldrh	r1, [r7, #4]
 800123e:	8bbb      	ldrh	r3, [r7, #28]
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	4623      	mov	r3, r4
 8001244:	f7ff fba6 	bl	8000994 <TFT_Draw_Fill_Rectangle>

  TFT_Draw_Fill_Circle_Helper(x+length-r-1, y+r, r, 1, width-2*r-1, color);
 8001248:	88fa      	ldrh	r2, [r7, #6]
 800124a:	887b      	ldrh	r3, [r7, #2]
 800124c:	4413      	add	r3, r2
 800124e:	b29a      	uxth	r2, r3
 8001250:	8b3b      	ldrh	r3, [r7, #24]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	b29b      	uxth	r3, r3
 8001256:	3b01      	subs	r3, #1
 8001258:	b29b      	uxth	r3, r3
 800125a:	b218      	sxth	r0, r3
 800125c:	88ba      	ldrh	r2, [r7, #4]
 800125e:	8b3b      	ldrh	r3, [r7, #24]
 8001260:	4413      	add	r3, r2
 8001262:	b29b      	uxth	r3, r3
 8001264:	b219      	sxth	r1, r3
 8001266:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800126a:	8b3b      	ldrh	r3, [r7, #24]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	b29b      	uxth	r3, r3
 8001270:	883a      	ldrh	r2, [r7, #0]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	b29b      	uxth	r3, r3
 8001276:	3b01      	subs	r3, #1
 8001278:	b29b      	uxth	r3, r3
 800127a:	b21b      	sxth	r3, r3
 800127c:	8bba      	ldrh	r2, [r7, #28]
 800127e:	9201      	str	r2, [sp, #4]
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2301      	movs	r3, #1
 8001284:	4622      	mov	r2, r4
 8001286:	f7ff ff11 	bl	80010ac <TFT_Draw_Fill_Circle_Helper>
  TFT_Draw_Fill_Circle_Helper(x+r    , y+r, r, 2, width-2*r-1, color);
 800128a:	88fa      	ldrh	r2, [r7, #6]
 800128c:	8b3b      	ldrh	r3, [r7, #24]
 800128e:	4413      	add	r3, r2
 8001290:	b29b      	uxth	r3, r3
 8001292:	b218      	sxth	r0, r3
 8001294:	88ba      	ldrh	r2, [r7, #4]
 8001296:	8b3b      	ldrh	r3, [r7, #24]
 8001298:	4413      	add	r3, r2
 800129a:	b29b      	uxth	r3, r3
 800129c:	b219      	sxth	r1, r3
 800129e:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80012a2:	8b3b      	ldrh	r3, [r7, #24]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	883a      	ldrh	r2, [r7, #0]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	3b01      	subs	r3, #1
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	8bba      	ldrh	r2, [r7, #28]
 80012b6:	9201      	str	r2, [sp, #4]
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2302      	movs	r3, #2
 80012bc:	4622      	mov	r2, r4
 80012be:	f7ff fef5 	bl	80010ac <TFT_Draw_Fill_Circle_Helper>
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd90      	pop	{r4, r7, pc}

080012ca <LCD_Char>:

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 80012ca:	b590      	push	{r4, r7, lr}
 80012cc:	b08b      	sub	sp, #44	@ 0x2c
 80012ce:	af02      	add	r7, sp, #8
 80012d0:	60ba      	str	r2, [r7, #8]
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	4603      	mov	r3, r0
 80012d6:	81fb      	strh	r3, [r7, #14]
 80012d8:	460b      	mov	r3, r1
 80012da:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	777b      	strb	r3, [r7, #29]
 80012ec:	2300      	movs	r3, #0
 80012ee:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	763b      	strb	r3, [r7, #24]
 80012f8:	e095      	b.n	8001426 <LCD_Char+0x15c>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	767b      	strb	r3, [r7, #25]
 80012fe:	e053      	b.n	80013a8 <LCD_Char+0xde>
		{
			if(bit == 0)
 8001300:	7f3b      	ldrb	r3, [r7, #28]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d109      	bne.n	800131a <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8001306:	8bfb      	ldrh	r3, [r7, #30]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	83fa      	strh	r2, [r7, #30]
 800130c:	461a      	mov	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	4413      	add	r3, r2
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8001316:	2380      	movs	r3, #128	@ 0x80
 8001318:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 800131a:	7f7a      	ldrb	r2, [r7, #29]
 800131c:	7f3b      	ldrb	r3, [r7, #28]
 800131e:	4013      	ands	r3, r2
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <LCD_Char+0x64>
			{
				set_pixels++;
 8001326:	8b7b      	ldrh	r3, [r7, #26]
 8001328:	3301      	adds	r3, #1
 800132a:	837b      	strh	r3, [r7, #26]
 800132c:	e036      	b.n	800139c <LCD_Char+0xd2>
			}
			else if (set_pixels > 0)
 800132e:	8b7b      	ldrh	r3, [r7, #26]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d033      	beq.n	800139c <LCD_Char+0xd2>
			{
				TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800133a:	461a      	mov	r2, r3
 800133c:	7e7b      	ldrb	r3, [r7, #25]
 800133e:	441a      	add	r2, r3
 8001340:	8b7b      	ldrh	r3, [r7, #26]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	b29a      	uxth	r2, r3
 8001346:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800134a:	b29b      	uxth	r3, r3
 800134c:	fb12 f303 	smulbb	r3, r2, r3
 8001350:	b29a      	uxth	r2, r3
 8001352:	89fb      	ldrh	r3, [r7, #14]
 8001354:	4413      	add	r3, r2
 8001356:	b298      	uxth	r0, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800135e:	461a      	mov	r2, r3
 8001360:	7e3b      	ldrb	r3, [r7, #24]
 8001362:	4413      	add	r3, r2
 8001364:	b29a      	uxth	r2, r3
 8001366:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800136a:	b29b      	uxth	r3, r3
 800136c:	fb12 f303 	smulbb	r3, r2, r3
 8001370:	b29a      	uxth	r2, r3
 8001372:	89bb      	ldrh	r3, [r7, #12]
 8001374:	4413      	add	r3, r2
 8001376:	b299      	uxth	r1, r3
 8001378:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800137c:	b29b      	uxth	r3, r3
 800137e:	8b7a      	ldrh	r2, [r7, #26]
 8001380:	fb12 f303 	smulbb	r3, r2, r3
 8001384:	b29a      	uxth	r2, r3
 8001386:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800138a:	b29c      	uxth	r4, r3
 800138c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800138e:	b29b      	uxth	r3, r3
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	4623      	mov	r3, r4
 8001394:	f7ff fafe 	bl	8000994 <TFT_Draw_Fill_Rectangle>
				set_pixels = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 800139c:	7f3b      	ldrb	r3, [r7, #28]
 800139e:	085b      	lsrs	r3, r3, #1
 80013a0:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80013a2:	7e7b      	ldrb	r3, [r7, #25]
 80013a4:	3301      	adds	r3, #1
 80013a6:	767b      	strb	r3, [r7, #25]
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	789b      	ldrb	r3, [r3, #2]
 80013ac:	7e7a      	ldrb	r2, [r7, #25]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d3a6      	bcc.n	8001300 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 80013b2:	8b7b      	ldrh	r3, [r7, #26]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d033      	beq.n	8001420 <LCD_Char+0x156>
		{
			TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80013be:	461a      	mov	r2, r3
 80013c0:	7e7b      	ldrb	r3, [r7, #25]
 80013c2:	441a      	add	r2, r3
 80013c4:	8b7b      	ldrh	r3, [r7, #26]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	fb12 f303 	smulbb	r3, r2, r3
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	89fb      	ldrh	r3, [r7, #14]
 80013d8:	4413      	add	r3, r2
 80013da:	b298      	uxth	r0, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80013e2:	461a      	mov	r2, r3
 80013e4:	7e3b      	ldrb	r3, [r7, #24]
 80013e6:	4413      	add	r3, r2
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	fb12 f303 	smulbb	r3, r2, r3
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	89bb      	ldrh	r3, [r7, #12]
 80013f8:	4413      	add	r3, r2
 80013fa:	b299      	uxth	r1, r3
 80013fc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001400:	b29b      	uxth	r3, r3
 8001402:	8b7a      	ldrh	r2, [r7, #26]
 8001404:	fb12 f303 	smulbb	r3, r2, r3
 8001408:	b29a      	uxth	r2, r3
 800140a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800140e:	b29c      	uxth	r4, r3
 8001410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001412:	b29b      	uxth	r3, r3
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	4623      	mov	r3, r4
 8001418:	f7ff fabc 	bl	8000994 <TFT_Draw_Fill_Rectangle>
			set_pixels = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001420:	7e3b      	ldrb	r3, [r7, #24]
 8001422:	3301      	adds	r3, #1
 8001424:	763b      	strb	r3, [r7, #24]
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	78db      	ldrb	r3, [r3, #3]
 800142a:	7e3a      	ldrb	r2, [r7, #24]
 800142c:	429a      	cmp	r2, r3
 800142e:	f4ff af64 	bcc.w	80012fa <LCD_Char+0x30>
		}
	}
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	3724      	adds	r7, #36	@ 0x24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd90      	pop	{r4, r7, pc}

0800143c <LCD_Font>:
void LCD_Font(uint16_t x, uint16_t y, char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b08f      	sub	sp, #60	@ 0x3c
 8001440:	af02      	add	r7, sp, #8
 8001442:	60ba      	str	r2, [r7, #8]
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4603      	mov	r3, r0
 8001448:	81fb      	strh	r3, [r7, #14]
 800144a:	460b      	mov	r3, r1
 800144c:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 800144e:	89fb      	ldrh	r3, [r7, #14]
 8001450:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int16_t cursor_y = y;
 8001452:	89bb      	ldrh	r3, [r7, #12]
 8001454:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	220c      	movs	r2, #12
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	4618      	mov	r0, r3
 8001460:	f003 fac2 	bl	80049e8 <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001464:	2300      	movs	r3, #0
 8001466:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001468:	e056      	b.n	8001518 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 800146a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800146c:	68ba      	ldr	r2, [r7, #8]
 800146e:	4413      	add	r3, r2
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		if(c == '\n')
 8001476:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800147a:	2b0a      	cmp	r3, #10
 800147c:	d10f      	bne.n	800149e <LCD_Font+0x62>
		{
			cursor_x = x;
 800147e:	89fb      	ldrh	r3, [r7, #14]
 8001480:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			cursor_y += font.yAdvance * size;
 8001482:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001486:	461a      	mov	r2, r3
 8001488:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800148c:	b29b      	uxth	r3, r3
 800148e:	fb12 f303 	smulbb	r3, r2, r3
 8001492:	b29a      	uxth	r2, r3
 8001494:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001496:	4413      	add	r3, r2
 8001498:	b29b      	uxth	r3, r3
 800149a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800149c:	e039      	b.n	8001512 <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 800149e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80014a2:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d333      	bcc.n	8001512 <LCD_Font+0xd6>
 80014aa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80014ae:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d82d      	bhi.n	8001512 <LCD_Font+0xd6>
 80014b6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80014ba:	2b0d      	cmp	r3, #13
 80014bc:	d029      	beq.n	8001512 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80014be:	6a3a      	ldr	r2, [r7, #32]
 80014c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80014c4:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80014c8:	1a5b      	subs	r3, r3, r1
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	18d1      	adds	r1, r2, r3
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	2208      	movs	r2, #8
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 fa87 	bl	80049e8 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80014da:	f107 041c 	add.w	r4, r7, #28
 80014de:	f107 0214 	add.w	r2, r7, #20
 80014e2:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80014e6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80014ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	4623      	mov	r3, r4
 80014f6:	f7ff fee8 	bl	80012ca <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 80014fa:	7e3b      	ldrb	r3, [r7, #24]
 80014fc:	461a      	mov	r2, r3
 80014fe:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001502:	b29b      	uxth	r3, r3
 8001504:	fb12 f303 	smulbb	r3, r2, r3
 8001508:	b29a      	uxth	r2, r3
 800150a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800150c:	4413      	add	r3, r2
 800150e:	b29b      	uxth	r3, r3
 8001510:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001512:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001514:	3301      	adds	r3, #1
 8001516:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001518:	8d7c      	ldrh	r4, [r7, #42]	@ 0x2a
 800151a:	68b8      	ldr	r0, [r7, #8]
 800151c:	f7fe fe58 	bl	80001d0 <strlen>
 8001520:	4603      	mov	r3, r0
 8001522:	429c      	cmp	r4, r3
 8001524:	d3a1      	bcc.n	800146a <LCD_Font+0x2e>
		}
	}
}
 8001526:	bf00      	nop
 8001528:	bf00      	nop
 800152a:	3734      	adds	r7, #52	@ 0x34
 800152c:	46bd      	mov	sp, r7
 800152e:	bd90      	pop	{r4, r7, pc}

08001530 <starter_Screen>:
volatile uint8_t flag_botao_up = 0; 			// Flag para indicar que o botão UP foi presscionado
volatile uint8_t flag_botao_down = 0; 			// Flag para indicar que o botão DOWN foi presscionado
volatile uint8_t flag_botao_on = 0; 			// Flag para indicar que o botão ON foi presscionado

void starter_Screen (void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af02      	add	r7, sp, #8
	TFT_Clear_Screen(VIVID_BLUE);
 8001536:	f240 401f 	movw	r0, #1055	@ 0x41f
 800153a:	f7ff f9ad 	bl	8000898 <TFT_Clear_Screen>
//	TFT_Draw_Round_Rect(40, 420, 140, 40, 10, 1, WHITE);
//	TFT_Draw_Round_Rect(230, 420, 140, 40, 10, 1, WHITE);
//	TFT_Draw_Round_Rect(420, 420, 140, 40, 10, 1, WHITE);
//	TFT_Draw_Round_Rect(620, 420, 140, 40, 10, 1, WHITE);

	TFT_Draw_HLine(30, 45, 740, 3, WHITE);
 800153e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2303      	movs	r3, #3
 8001546:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800154a:	212d      	movs	r1, #45	@ 0x2d
 800154c:	201e      	movs	r0, #30
 800154e:	f7ff f9c7 	bl	80008e0 <TFT_Draw_HLine>
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <home_screen>:

void home_screen(void) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af04      	add	r7, sp, #16
	TFT_Draw_Round_Rect(30, 90, 740, 65, 10, 1, WHITE);
 800155e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001562:	9302      	str	r3, [sp, #8]
 8001564:	2301      	movs	r3, #1
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	230a      	movs	r3, #10
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2341      	movs	r3, #65	@ 0x41
 800156e:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8001572:	215a      	movs	r1, #90	@ 0x5a
 8001574:	201e      	movs	r0, #30
 8001576:	f7ff fcd4 	bl	8000f22 <TFT_Draw_Round_Rect>
	TFT_Draw_Round_Rect(30, 165, 740, 65, 10, 1, WHITE);
 800157a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800157e:	9302      	str	r3, [sp, #8]
 8001580:	2301      	movs	r3, #1
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	230a      	movs	r3, #10
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2341      	movs	r3, #65	@ 0x41
 800158a:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800158e:	21a5      	movs	r1, #165	@ 0xa5
 8001590:	201e      	movs	r0, #30
 8001592:	f7ff fcc6 	bl	8000f22 <TFT_Draw_Round_Rect>
	TFT_Draw_Round_Rect(30, 240, 740, 65, 10, 1, WHITE);
 8001596:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	2301      	movs	r3, #1
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	230a      	movs	r3, #10
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	2341      	movs	r3, #65	@ 0x41
 80015a6:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80015aa:	21f0      	movs	r1, #240	@ 0xf0
 80015ac:	201e      	movs	r0, #30
 80015ae:	f7ff fcb8 	bl	8000f22 <TFT_Draw_Round_Rect>
	TFT_Draw_Round_Rect(30, 315, 740, 65, 10, 1, WHITE);
 80015b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015b6:	9302      	str	r3, [sp, #8]
 80015b8:	2301      	movs	r3, #1
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	230a      	movs	r3, #10
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2341      	movs	r3, #65	@ 0x41
 80015c2:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80015c6:	f240 113b 	movw	r1, #315	@ 0x13b
 80015ca:	201e      	movs	r0, #30
 80015cc:	f7ff fca9 	bl	8000f22 <TFT_Draw_Round_Rect>

	// Escreve os 4 modos nas suas devidas posições
	LCD_Font(140, 130, menu_items[0], _Open_Sans_Bold_24, 1, WHITE);
 80015d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	2301      	movs	r3, #1
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <home_screen+0xdc>)
 80015dc:	4a16      	ldr	r2, [pc, #88]	@ (8001638 <home_screen+0xe0>)
 80015de:	2182      	movs	r1, #130	@ 0x82
 80015e0:	208c      	movs	r0, #140	@ 0x8c
 80015e2:	f7ff ff2b 	bl	800143c <LCD_Font>
	LCD_Font(140, 205, menu_items[1], _Open_Sans_Bold_24, 1, WHITE);
 80015e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	2301      	movs	r3, #1
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <home_screen+0xdc>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	@ (800163c <home_screen+0xe4>)
 80015f4:	21cd      	movs	r1, #205	@ 0xcd
 80015f6:	208c      	movs	r0, #140	@ 0x8c
 80015f8:	f7ff ff20 	bl	800143c <LCD_Font>
	LCD_Font(140, 280, menu_items[2], _Open_Sans_Bold_24, 1, WHITE);
 80015fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	2301      	movs	r3, #1
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <home_screen+0xdc>)
 8001608:	4a0d      	ldr	r2, [pc, #52]	@ (8001640 <home_screen+0xe8>)
 800160a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800160e:	208c      	movs	r0, #140	@ 0x8c
 8001610:	f7ff ff14 	bl	800143c <LCD_Font>
	LCD_Font(140, 355, menu_items[3], _Open_Sans_Bold_24, 1, WHITE);
 8001614:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	2301      	movs	r3, #1
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	4b05      	ldr	r3, [pc, #20]	@ (8001634 <home_screen+0xdc>)
 8001620:	4a08      	ldr	r2, [pc, #32]	@ (8001644 <home_screen+0xec>)
 8001622:	f240 1163 	movw	r1, #355	@ 0x163
 8001626:	208c      	movs	r0, #140	@ 0x8c
 8001628:	f7ff ff08 	bl	800143c <LCD_Font>
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	08006754 	.word	0x08006754
 8001638:	20000000 	.word	0x20000000
 800163c:	20000014 	.word	0x20000014
 8001640:	20000028 	.word	0x20000028
 8001644:	2000003c 	.word	0x2000003c

08001648 <atualiza_Cursor>:

void atualiza_Cursor (void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af02      	add	r7, sp, #8
	// Inserir o Cursor na primeira iteração
	if(ultimo_item_selecionado == -1)
 800164e:	4b72      	ldr	r3, [pc, #456]	@ (8001818 <atualiza_Cursor+0x1d0>)
 8001650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001658:	d119      	bne.n	800168e <atualiza_Cursor+0x46>
	{
		TFT_Draw_Fill_Round_Rect(31, 91, 738, 63, 6, WHITE);
 800165a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	2306      	movs	r3, #6
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	233f      	movs	r3, #63	@ 0x3f
 8001666:	f240 22e2 	movw	r2, #738	@ 0x2e2
 800166a:	215b      	movs	r1, #91	@ 0x5b
 800166c:	201f      	movs	r0, #31
 800166e:	f7ff fdcb 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
		LCD_Font(140, 130, menu_items[0], _Open_Sans_Bold_24, 1, VIVID_BLUE);
 8001672:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	2301      	movs	r3, #1
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	4b67      	ldr	r3, [pc, #412]	@ (800181c <atualiza_Cursor+0x1d4>)
 800167e:	4a68      	ldr	r2, [pc, #416]	@ (8001820 <atualiza_Cursor+0x1d8>)
 8001680:	2182      	movs	r1, #130	@ 0x82
 8001682:	208c      	movs	r0, #140	@ 0x8c
 8001684:	f7ff feda 	bl	800143c <LCD_Font>
		ultimo_item_selecionado = 0;
 8001688:	4b63      	ldr	r3, [pc, #396]	@ (8001818 <atualiza_Cursor+0x1d0>)
 800168a:	2200      	movs	r2, #0
 800168c:	801a      	strh	r2, [r3, #0]

	}

	// Inserir o cursor após a troca de tela
	if(ultimo_estado_menu != current_screen)
 800168e:	4b65      	ldr	r3, [pc, #404]	@ (8001824 <atualiza_Cursor+0x1dc>)
 8001690:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001694:	4b64      	ldr	r3, [pc, #400]	@ (8001828 <atualiza_Cursor+0x1e0>)
 8001696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169a:	429a      	cmp	r2, r3
 800169c:	d03c      	beq.n	8001718 <atualiza_Cursor+0xd0>
	{
		ultimo_estado_menu = current_screen;
 800169e:	4b62      	ldr	r3, [pc, #392]	@ (8001828 <atualiza_Cursor+0x1e0>)
 80016a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016a4:	4b5f      	ldr	r3, [pc, #380]	@ (8001824 <atualiza_Cursor+0x1dc>)
 80016a6:	801a      	strh	r2, [r3, #0]
		TFT_Draw_Fill_Round_Rect(31, (item_selected * (65 + 10)) + 91, 738, 63, 8, WHITE);
 80016a8:	4b60      	ldr	r3, [pc, #384]	@ (800182c <atualiza_Cursor+0x1e4>)
 80016aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	0092      	lsls	r2, r2, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	461a      	mov	r2, r3
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	b29b      	uxth	r3, r3
 80016be:	335b      	adds	r3, #91	@ 0x5b
 80016c0:	b299      	uxth	r1, r3
 80016c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	2308      	movs	r3, #8
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	233f      	movs	r3, #63	@ 0x3f
 80016ce:	f240 22e2 	movw	r2, #738	@ 0x2e2
 80016d2:	201f      	movs	r0, #31
 80016d4:	f7ff fd98 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
		LCD_Font(140, (item_selected * (65 + 10)) + 131, menu_items[item_selected], _Open_Sans_Bold_24, 1, VIVID_BLUE);
 80016d8:	4b54      	ldr	r3, [pc, #336]	@ (800182c <atualiza_Cursor+0x1e4>)
 80016da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	0092      	lsls	r2, r2, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	461a      	mov	r2, r3
 80016e8:	0112      	lsls	r2, r2, #4
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	3383      	adds	r3, #131	@ 0x83
 80016f0:	b299      	uxth	r1, r3
 80016f2:	4b4e      	ldr	r3, [pc, #312]	@ (800182c <atualiza_Cursor+0x1e4>)
 80016f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4a47      	ldr	r2, [pc, #284]	@ (8001820 <atualiza_Cursor+0x1d8>)
 8001704:	441a      	add	r2, r3
 8001706:	f240 431f 	movw	r3, #1055	@ 0x41f
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	2301      	movs	r3, #1
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	4b42      	ldr	r3, [pc, #264]	@ (800181c <atualiza_Cursor+0x1d4>)
 8001712:	208c      	movs	r0, #140	@ 0x8c
 8001714:	f7ff fe92 	bl	800143c <LCD_Font>
	}

	// Verifica se a variável item_selecionado mudou = a posição do cursor deve mudar para a nova posição
	if (ultimo_item_selecionado != item_selected)
 8001718:	4b3f      	ldr	r3, [pc, #252]	@ (8001818 <atualiza_Cursor+0x1d0>)
 800171a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800171e:	4b43      	ldr	r3, [pc, #268]	@ (800182c <atualiza_Cursor+0x1e4>)
 8001720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001724:	429a      	cmp	r2, r3
 8001726:	d074      	beq.n	8001812 <atualiza_Cursor+0x1ca>
	{
		// Escreve os antigos cursores com branco para não precisar apagar a tela totalmente
		TFT_Draw_Fill_Round_Rect(31, (ultimo_item_selecionado * (65 + 10)) + 91, 738, 63, 8, VIVID_BLUE);
 8001728:	4b3b      	ldr	r3, [pc, #236]	@ (8001818 <atualiza_Cursor+0x1d0>)
 800172a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172e:	b29b      	uxth	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	0092      	lsls	r2, r2, #2
 8001734:	4413      	add	r3, r2
 8001736:	461a      	mov	r2, r3
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	b29b      	uxth	r3, r3
 800173e:	335b      	adds	r3, #91	@ 0x5b
 8001740:	b299      	uxth	r1, r3
 8001742:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	2308      	movs	r3, #8
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	233f      	movs	r3, #63	@ 0x3f
 800174e:	f240 22e2 	movw	r2, #738	@ 0x2e2
 8001752:	201f      	movs	r0, #31
 8001754:	f7ff fd58 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
		LCD_Font(140, (ultimo_item_selecionado * (65 + 10)) + 131, menu_items[ultimo_item_selecionado], _Open_Sans_Bold_24, 1, WHITE);
 8001758:	4b2f      	ldr	r3, [pc, #188]	@ (8001818 <atualiza_Cursor+0x1d0>)
 800175a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175e:	b29b      	uxth	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	0092      	lsls	r2, r2, #2
 8001764:	4413      	add	r3, r2
 8001766:	461a      	mov	r2, r3
 8001768:	0112      	lsls	r2, r2, #4
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	b29b      	uxth	r3, r3
 800176e:	3383      	adds	r3, #131	@ 0x83
 8001770:	b299      	uxth	r1, r3
 8001772:	4b29      	ldr	r3, [pc, #164]	@ (8001818 <atualiza_Cursor+0x1d0>)
 8001774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001778:	461a      	mov	r2, r3
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4a27      	ldr	r2, [pc, #156]	@ (8001820 <atualiza_Cursor+0x1d8>)
 8001784:	441a      	add	r2, r3
 8001786:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	2301      	movs	r3, #1
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	4b22      	ldr	r3, [pc, #136]	@ (800181c <atualiza_Cursor+0x1d4>)
 8001792:	208c      	movs	r0, #140	@ 0x8c
 8001794:	f7ff fe52 	bl	800143c <LCD_Font>

		ultimo_item_selecionado = item_selected; // Muda o item selecionado
 8001798:	4b24      	ldr	r3, [pc, #144]	@ (800182c <atualiza_Cursor+0x1e4>)
 800179a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800179e:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <atualiza_Cursor+0x1d0>)
 80017a0:	801a      	strh	r2, [r3, #0]

		TFT_Draw_Fill_Round_Rect(31, (item_selected * (65 + 10)) + 91, 738, 63, 8, WHITE);
 80017a2:	4b22      	ldr	r3, [pc, #136]	@ (800182c <atualiza_Cursor+0x1e4>)
 80017a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	461a      	mov	r2, r3
 80017ac:	0092      	lsls	r2, r2, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	461a      	mov	r2, r3
 80017b2:	0112      	lsls	r2, r2, #4
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	335b      	adds	r3, #91	@ 0x5b
 80017ba:	b299      	uxth	r1, r3
 80017bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	2308      	movs	r3, #8
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	233f      	movs	r3, #63	@ 0x3f
 80017c8:	f240 22e2 	movw	r2, #738	@ 0x2e2
 80017cc:	201f      	movs	r0, #31
 80017ce:	f7ff fd1b 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
		LCD_Font(140, (item_selected * (65 + 10)) + 131, menu_items[item_selected], _Open_Sans_Bold_24, 1, VIVID_BLUE);
 80017d2:	4b16      	ldr	r3, [pc, #88]	@ (800182c <atualiza_Cursor+0x1e4>)
 80017d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	0092      	lsls	r2, r2, #2
 80017de:	4413      	add	r3, r2
 80017e0:	461a      	mov	r2, r3
 80017e2:	0112      	lsls	r2, r2, #4
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	3383      	adds	r3, #131	@ 0x83
 80017ea:	b299      	uxth	r1, r3
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <atualiza_Cursor+0x1e4>)
 80017ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f2:	461a      	mov	r2, r3
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4a08      	ldr	r2, [pc, #32]	@ (8001820 <atualiza_Cursor+0x1d8>)
 80017fe:	441a      	add	r2, r3
 8001800:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	2301      	movs	r3, #1
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	4b04      	ldr	r3, [pc, #16]	@ (800181c <atualiza_Cursor+0x1d4>)
 800180c:	208c      	movs	r0, #140	@ 0x8c
 800180e:	f7ff fe15 	bl	800143c <LCD_Font>
	}
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000052 	.word	0x20000052
 800181c:	08006754 	.word	0x08006754
 8001820:	20000000 	.word	0x20000000
 8001824:	20000050 	.word	0x20000050
 8001828:	200000d0 	.word	0x200000d0
 800182c:	200000d2 	.word	0x200000d2

08001830 <header>:
	LCD_Font(x, 50, titulo, _Open_Sans_Bold_48, 1, BLACK);
	TFT_Draw_HLine(5, 100, 795, 2, BLACK);
}

void header (void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af02      	add	r7, sp, #8
	TFT_Draw_Fill_Rectangle(30, 0, 600, 35, VIVID_BLUE);
 8001836:	f240 431f 	movw	r3, #1055	@ 0x41f
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2323      	movs	r3, #35	@ 0x23
 800183e:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001842:	2100      	movs	r1, #0
 8001844:	201e      	movs	r0, #30
 8001846:	f7ff f8a5 	bl	8000994 <TFT_Draw_Fill_Rectangle>

	if(current_screen == 0)
 800184a:	4b2b      	ldr	r3, [pc, #172]	@ (80018f8 <header+0xc8>)
 800184c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10b      	bne.n	800186c <header+0x3c>
		LCD_Font(33, 30, "Menu", _Open_Sans_Bold_18, 1, WHITE);
 8001854:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	2301      	movs	r3, #1
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	4b27      	ldr	r3, [pc, #156]	@ (80018fc <header+0xcc>)
 8001860:	4a27      	ldr	r2, [pc, #156]	@ (8001900 <header+0xd0>)
 8001862:	211e      	movs	r1, #30
 8001864:	2021      	movs	r0, #33	@ 0x21
 8001866:	f7ff fde9 	bl	800143c <LCD_Font>
		if(item_selected == 0)	LCD_Font(33, 30, "Banho", _Open_Sans_Bold_18, 1, WHITE);
		else if(item_selected == 1)	LCD_Font(33, 30, "Abastecimento", _Open_Sans_Bold_18, 1, WHITE);
		else if(item_selected == 2)	LCD_Font(33, 30, "Drenagem", _Open_Sans_Bold_18, 1, WHITE);
		else if(item_selected == 3)	LCD_Font(33, 30, "Configuracao", _Open_Sans_Bold_18, 1, WHITE);
	}
}
 800186a:	e042      	b.n	80018f2 <header+0xc2>
		if(item_selected == 0)	LCD_Font(33, 30, "Banho", _Open_Sans_Bold_18, 1, WHITE);
 800186c:	4b25      	ldr	r3, [pc, #148]	@ (8001904 <header+0xd4>)
 800186e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10b      	bne.n	800188e <header+0x5e>
 8001876:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	2301      	movs	r3, #1
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	4b1e      	ldr	r3, [pc, #120]	@ (80018fc <header+0xcc>)
 8001882:	4a21      	ldr	r2, [pc, #132]	@ (8001908 <header+0xd8>)
 8001884:	211e      	movs	r1, #30
 8001886:	2021      	movs	r0, #33	@ 0x21
 8001888:	f7ff fdd8 	bl	800143c <LCD_Font>
}
 800188c:	e031      	b.n	80018f2 <header+0xc2>
		else if(item_selected == 1)	LCD_Font(33, 30, "Abastecimento", _Open_Sans_Bold_18, 1, WHITE);
 800188e:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <header+0xd4>)
 8001890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d10b      	bne.n	80018b0 <header+0x80>
 8001898:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	2301      	movs	r3, #1
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <header+0xcc>)
 80018a4:	4a19      	ldr	r2, [pc, #100]	@ (800190c <header+0xdc>)
 80018a6:	211e      	movs	r1, #30
 80018a8:	2021      	movs	r0, #33	@ 0x21
 80018aa:	f7ff fdc7 	bl	800143c <LCD_Font>
}
 80018ae:	e020      	b.n	80018f2 <header+0xc2>
		else if(item_selected == 2)	LCD_Font(33, 30, "Drenagem", _Open_Sans_Bold_18, 1, WHITE);
 80018b0:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <header+0xd4>)
 80018b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d10b      	bne.n	80018d2 <header+0xa2>
 80018ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	2301      	movs	r3, #1
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	4b0d      	ldr	r3, [pc, #52]	@ (80018fc <header+0xcc>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	@ (8001910 <header+0xe0>)
 80018c8:	211e      	movs	r1, #30
 80018ca:	2021      	movs	r0, #33	@ 0x21
 80018cc:	f7ff fdb6 	bl	800143c <LCD_Font>
}
 80018d0:	e00f      	b.n	80018f2 <header+0xc2>
		else if(item_selected == 3)	LCD_Font(33, 30, "Configuracao", _Open_Sans_Bold_18, 1, WHITE);
 80018d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <header+0xd4>)
 80018d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d10a      	bne.n	80018f2 <header+0xc2>
 80018dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	2301      	movs	r3, #1
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <header+0xcc>)
 80018e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <header+0xe4>)
 80018ea:	211e      	movs	r1, #30
 80018ec:	2021      	movs	r0, #33	@ 0x21
 80018ee:	f7ff fda5 	bl	800143c <LCD_Font>
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200000d0 	.word	0x200000d0
 80018fc:	08005b38 	.word	0x08005b38
 8001900:	08005294 	.word	0x08005294
 8001904:	200000d2 	.word	0x200000d2
 8001908:	0800529c 	.word	0x0800529c
 800190c:	080052a4 	.word	0x080052a4
 8001910:	080052b4 	.word	0x080052b4
 8001914:	080052c0 	.word	0x080052c0

08001918 <fotter>:

void fotter (void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af02      	add	r7, sp, #8
	if(current_screen == 0)
 800191e:	4bb6      	ldr	r3, [pc, #728]	@ (8001bf8 <fotter+0x2e0>)
 8001920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d159      	bne.n	80019dc <fotter+0xc4>
	{
		TFT_Draw_Fill_Round_Rect(41, 421, 138, 38, 8, VIVID_BLUE);
 8001928:	f240 431f 	movw	r3, #1055	@ 0x41f
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	2308      	movs	r3, #8
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2326      	movs	r3, #38	@ 0x26
 8001934:	228a      	movs	r2, #138	@ 0x8a
 8001936:	f240 11a5 	movw	r1, #421	@ 0x1a5
 800193a:	2029      	movs	r0, #41	@ 0x29
 800193c:	f7ff fc64 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
		TFT_Draw_Fill_Round_Rect(231, 421, 138, 38, 8, WHITE);
 8001940:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	2308      	movs	r3, #8
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2326      	movs	r3, #38	@ 0x26
 800194c:	228a      	movs	r2, #138	@ 0x8a
 800194e:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001952:	20e7      	movs	r0, #231	@ 0xe7
 8001954:	f7ff fc58 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
		TFT_Draw_Fill_Round_Rect(421, 421, 138, 38, 8, WHITE);
 8001958:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	2308      	movs	r3, #8
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2326      	movs	r3, #38	@ 0x26
 8001964:	228a      	movs	r2, #138	@ 0x8a
 8001966:	f240 11a5 	movw	r1, #421	@ 0x1a5
 800196a:	f240 10a5 	movw	r0, #421	@ 0x1a5
 800196e:	f7ff fc4b 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
		TFT_Draw_Fill_Round_Rect(621, 421, 138, 38, 8, WHITE);
 8001972:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	2308      	movs	r3, #8
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2326      	movs	r3, #38	@ 0x26
 800197e:	228a      	movs	r2, #138	@ 0x8a
 8001980:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001984:	f240 206d 	movw	r0, #621	@ 0x26d
 8001988:	f7ff fc3e 	bl	8001208 <TFT_Draw_Fill_Round_Rect>

		TFT_Draw_Fill_Triangle_Simple(285, 427, 30, 18, 1, VIVID_BLUE);
 800198c:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	2301      	movs	r3, #1
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2312      	movs	r3, #18
 8001998:	221e      	movs	r2, #30
 800199a:	f240 11ab 	movw	r1, #427	@ 0x1ab
 800199e:	f240 101d 	movw	r0, #285	@ 0x11d
 80019a2:	f7ff f825 	bl	80009f0 <TFT_Draw_Fill_Triangle_Simple>
		TFT_Draw_Fill_Triangle_Inverted_Simple(475, 432, 30, 18, 1, VIVID_BLUE);
 80019a6:	f240 431f 	movw	r3, #1055	@ 0x41f
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	2301      	movs	r3, #1
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2312      	movs	r3, #18
 80019b2:	221e      	movs	r2, #30
 80019b4:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 80019b8:	f240 10db 	movw	r0, #475	@ 0x1db
 80019bc:	f7ff f856 	bl	8000a6c <TFT_Draw_Fill_Triangle_Inverted_Simple>
		LCD_Font(660, 446, "Entrar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 80019c0:	f240 431f 	movw	r3, #1055	@ 0x41f
 80019c4:	9301      	str	r3, [sp, #4]
 80019c6:	2301      	movs	r3, #1
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	4b8c      	ldr	r3, [pc, #560]	@ (8001bfc <fotter+0x2e4>)
 80019cc:	4a8c      	ldr	r2, [pc, #560]	@ (8001c00 <fotter+0x2e8>)
 80019ce:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 80019d2:	f44f 7025 	mov.w	r0, #660	@ 0x294
 80019d6:	f7ff fd31 	bl	800143c <LCD_Font>
			TFT_Draw_Fill_Triangle_Simple(285, 427, 30, 18, 1, VIVID_BLUE);
			TFT_Draw_Fill_Triangle_Inverted_Simple(475, 432, 30, 18, 1, VIVID_BLUE);
			LCD_Font(660, 446, "Entrar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
		}
	}
}
 80019da:	e183      	b.n	8001ce4 <fotter+0x3cc>
		if(item_selected == 0)
 80019dc:	4b89      	ldr	r3, [pc, #548]	@ (8001c04 <fotter+0x2ec>)
 80019de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d165      	bne.n	8001ab2 <fotter+0x19a>
			TFT_Draw_Fill_Round_Rect(41, 421, 138, 38, 8, WHITE);
 80019e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	2308      	movs	r3, #8
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2326      	movs	r3, #38	@ 0x26
 80019f2:	228a      	movs	r2, #138	@ 0x8a
 80019f4:	f240 11a5 	movw	r1, #421	@ 0x1a5
 80019f8:	2029      	movs	r0, #41	@ 0x29
 80019fa:	f7ff fc05 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
			TFT_Draw_Fill_Round_Rect(231, 421, 138, 38, 8, WHITE);
 80019fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	2308      	movs	r3, #8
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2326      	movs	r3, #38	@ 0x26
 8001a0a:	228a      	movs	r2, #138	@ 0x8a
 8001a0c:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001a10:	20e7      	movs	r0, #231	@ 0xe7
 8001a12:	f7ff fbf9 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
			TFT_Draw_Fill_Round_Rect(421, 421, 138, 38, 8, WHITE);
 8001a16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2326      	movs	r3, #38	@ 0x26
 8001a22:	228a      	movs	r2, #138	@ 0x8a
 8001a24:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001a28:	f240 10a5 	movw	r0, #421	@ 0x1a5
 8001a2c:	f7ff fbec 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
			TFT_Draw_Fill_Round_Rect(621, 421, 138, 38, 8, WHITE);
 8001a30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a34:	9301      	str	r3, [sp, #4]
 8001a36:	2308      	movs	r3, #8
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2326      	movs	r3, #38	@ 0x26
 8001a3c:	228a      	movs	r2, #138	@ 0x8a
 8001a3e:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001a42:	f240 206d 	movw	r0, #621	@ 0x26d
 8001a46:	f7ff fbdf 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
			LCD_Font(80, 446, "Voltar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8001a4a:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	2301      	movs	r3, #1
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	4b69      	ldr	r3, [pc, #420]	@ (8001bfc <fotter+0x2e4>)
 8001a56:	4a6c      	ldr	r2, [pc, #432]	@ (8001c08 <fotter+0x2f0>)
 8001a58:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8001a5c:	2050      	movs	r0, #80	@ 0x50
 8001a5e:	f7ff fced 	bl	800143c <LCD_Font>
			TFT_Draw_Fill_Triangle_Simple(285, 427, 30, 18, 1, VIVID_BLUE);
 8001a62:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	2301      	movs	r3, #1
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2312      	movs	r3, #18
 8001a6e:	221e      	movs	r2, #30
 8001a70:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8001a74:	f240 101d 	movw	r0, #285	@ 0x11d
 8001a78:	f7fe ffba 	bl	80009f0 <TFT_Draw_Fill_Triangle_Simple>
			TFT_Draw_Fill_Triangle_Inverted_Simple(475, 432, 30, 18, 1, VIVID_BLUE);
 8001a7c:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	2301      	movs	r3, #1
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2312      	movs	r3, #18
 8001a88:	221e      	movs	r2, #30
 8001a8a:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8001a8e:	f240 10db 	movw	r0, #475	@ 0x1db
 8001a92:	f7fe ffeb 	bl	8000a6c <TFT_Draw_Fill_Triangle_Inverted_Simple>
			LCD_Font(655, 446, "Iniciar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8001a96:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	4b56      	ldr	r3, [pc, #344]	@ (8001bfc <fotter+0x2e4>)
 8001aa2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c0c <fotter+0x2f4>)
 8001aa4:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8001aa8:	f240 208f 	movw	r0, #655	@ 0x28f
 8001aac:	f7ff fcc6 	bl	800143c <LCD_Font>
}
 8001ab0:	e118      	b.n	8001ce4 <fotter+0x3cc>
		else if(item_selected == 1)
 8001ab2:	4b54      	ldr	r3, [pc, #336]	@ (8001c04 <fotter+0x2ec>)
 8001ab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d14b      	bne.n	8001b54 <fotter+0x23c>
			TFT_Draw_Fill_Round_Rect(41, 421, 138, 38, 8, WHITE);
 8001abc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	2326      	movs	r3, #38	@ 0x26
 8001ac8:	228a      	movs	r2, #138	@ 0x8a
 8001aca:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001ace:	2029      	movs	r0, #41	@ 0x29
 8001ad0:	f7ff fb9a 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
			TFT_Draw_Fill_Round_Rect(231, 421, 138, 38, 8, VIVID_BLUE);
 8001ad4:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	2308      	movs	r3, #8
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	2326      	movs	r3, #38	@ 0x26
 8001ae0:	228a      	movs	r2, #138	@ 0x8a
 8001ae2:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001ae6:	20e7      	movs	r0, #231	@ 0xe7
 8001ae8:	f7ff fb8e 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
			TFT_Draw_Fill_Round_Rect(421, 421, 138, 38, 8, VIVID_BLUE);
 8001aec:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	2308      	movs	r3, #8
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2326      	movs	r3, #38	@ 0x26
 8001af8:	228a      	movs	r2, #138	@ 0x8a
 8001afa:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001afe:	f240 10a5 	movw	r0, #421	@ 0x1a5
 8001b02:	f7ff fb81 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
			TFT_Draw_Fill_Round_Rect(621, 421, 138, 38, 8, WHITE);
 8001b06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	2326      	movs	r3, #38	@ 0x26
 8001b12:	228a      	movs	r2, #138	@ 0x8a
 8001b14:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001b18:	f240 206d 	movw	r0, #621	@ 0x26d
 8001b1c:	f7ff fb74 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
			LCD_Font(80, 446, "Voltar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8001b20:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	2301      	movs	r3, #1
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	4b34      	ldr	r3, [pc, #208]	@ (8001bfc <fotter+0x2e4>)
 8001b2c:	4a36      	ldr	r2, [pc, #216]	@ (8001c08 <fotter+0x2f0>)
 8001b2e:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8001b32:	2050      	movs	r0, #80	@ 0x50
 8001b34:	f7ff fc82 	bl	800143c <LCD_Font>
			LCD_Font(655, 446, "Iniciar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8001b38:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	2301      	movs	r3, #1
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	4b2e      	ldr	r3, [pc, #184]	@ (8001bfc <fotter+0x2e4>)
 8001b44:	4a31      	ldr	r2, [pc, #196]	@ (8001c0c <fotter+0x2f4>)
 8001b46:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8001b4a:	f240 208f 	movw	r0, #655	@ 0x28f
 8001b4e:	f7ff fc75 	bl	800143c <LCD_Font>
}
 8001b52:	e0c7      	b.n	8001ce4 <fotter+0x3cc>
		else if(item_selected == 2)
 8001b54:	4b2b      	ldr	r3, [pc, #172]	@ (8001c04 <fotter+0x2ec>)
 8001b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d158      	bne.n	8001c10 <fotter+0x2f8>
			TFT_Draw_Fill_Round_Rect(41, 421, 138, 38, 8, WHITE);
 8001b5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	2308      	movs	r3, #8
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2326      	movs	r3, #38	@ 0x26
 8001b6a:	228a      	movs	r2, #138	@ 0x8a
 8001b6c:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001b70:	2029      	movs	r0, #41	@ 0x29
 8001b72:	f7ff fb49 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
			TFT_Draw_Fill_Round_Rect(231, 421, 138, 38, 8, VIVID_BLUE);
 8001b76:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	2308      	movs	r3, #8
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2326      	movs	r3, #38	@ 0x26
 8001b82:	228a      	movs	r2, #138	@ 0x8a
 8001b84:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001b88:	20e7      	movs	r0, #231	@ 0xe7
 8001b8a:	f7ff fb3d 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
			TFT_Draw_Fill_Round_Rect(421, 421, 138, 38, 8, VIVID_BLUE);
 8001b8e:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	2308      	movs	r3, #8
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2326      	movs	r3, #38	@ 0x26
 8001b9a:	228a      	movs	r2, #138	@ 0x8a
 8001b9c:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001ba0:	f240 10a5 	movw	r0, #421	@ 0x1a5
 8001ba4:	f7ff fb30 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
			TFT_Draw_Fill_Round_Rect(621, 421, 138, 38, 8, WHITE);
 8001ba8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	2308      	movs	r3, #8
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	2326      	movs	r3, #38	@ 0x26
 8001bb4:	228a      	movs	r2, #138	@ 0x8a
 8001bb6:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001bba:	f240 206d 	movw	r0, #621	@ 0x26d
 8001bbe:	f7ff fb23 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
			LCD_Font(80, 446, "Voltar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8001bc2:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	2301      	movs	r3, #1
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <fotter+0x2e4>)
 8001bce:	4a0e      	ldr	r2, [pc, #56]	@ (8001c08 <fotter+0x2f0>)
 8001bd0:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8001bd4:	2050      	movs	r0, #80	@ 0x50
 8001bd6:	f7ff fc31 	bl	800143c <LCD_Font>
			LCD_Font(655, 446, "Iniciar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8001bda:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	2301      	movs	r3, #1
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <fotter+0x2e4>)
 8001be6:	4a09      	ldr	r2, [pc, #36]	@ (8001c0c <fotter+0x2f4>)
 8001be8:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8001bec:	f240 208f 	movw	r0, #655	@ 0x28f
 8001bf0:	f7ff fc24 	bl	800143c <LCD_Font>
}
 8001bf4:	e076      	b.n	8001ce4 <fotter+0x3cc>
 8001bf6:	bf00      	nop
 8001bf8:	200000d0 	.word	0x200000d0
 8001bfc:	08005b38 	.word	0x08005b38
 8001c00:	080052d0 	.word	0x080052d0
 8001c04:	200000d2 	.word	0x200000d2
 8001c08:	080052d8 	.word	0x080052d8
 8001c0c:	080052e0 	.word	0x080052e0
		else if(item_selected == 3)
 8001c10:	4b36      	ldr	r3, [pc, #216]	@ (8001cec <fotter+0x3d4>)
 8001c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d164      	bne.n	8001ce4 <fotter+0x3cc>
			TFT_Draw_Fill_Round_Rect(41, 421, 138, 38, 8, WHITE);
 8001c1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	2308      	movs	r3, #8
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2326      	movs	r3, #38	@ 0x26
 8001c26:	228a      	movs	r2, #138	@ 0x8a
 8001c28:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001c2c:	2029      	movs	r0, #41	@ 0x29
 8001c2e:	f7ff faeb 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
			TFT_Draw_Fill_Round_Rect(231, 421, 138, 38, 8, WHITE);
 8001c32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	2308      	movs	r3, #8
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	2326      	movs	r3, #38	@ 0x26
 8001c3e:	228a      	movs	r2, #138	@ 0x8a
 8001c40:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001c44:	20e7      	movs	r0, #231	@ 0xe7
 8001c46:	f7ff fadf 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
			TFT_Draw_Fill_Round_Rect(421, 421, 138, 38, 8, WHITE);
 8001c4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	2308      	movs	r3, #8
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2326      	movs	r3, #38	@ 0x26
 8001c56:	228a      	movs	r2, #138	@ 0x8a
 8001c58:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001c5c:	f240 10a5 	movw	r0, #421	@ 0x1a5
 8001c60:	f7ff fad2 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
			TFT_Draw_Fill_Round_Rect(621, 421, 138, 38, 8, WHITE);
 8001c64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	2308      	movs	r3, #8
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2326      	movs	r3, #38	@ 0x26
 8001c70:	228a      	movs	r2, #138	@ 0x8a
 8001c72:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001c76:	f240 206d 	movw	r0, #621	@ 0x26d
 8001c7a:	f7ff fac5 	bl	8001208 <TFT_Draw_Fill_Round_Rect>
			LCD_Font(80, 446, "Voltar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8001c7e:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	2301      	movs	r3, #1
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	4b19      	ldr	r3, [pc, #100]	@ (8001cf0 <fotter+0x3d8>)
 8001c8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001cf4 <fotter+0x3dc>)
 8001c8c:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8001c90:	2050      	movs	r0, #80	@ 0x50
 8001c92:	f7ff fbd3 	bl	800143c <LCD_Font>
			TFT_Draw_Fill_Triangle_Simple(285, 427, 30, 18, 1, VIVID_BLUE);
 8001c96:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2312      	movs	r3, #18
 8001ca2:	221e      	movs	r2, #30
 8001ca4:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8001ca8:	f240 101d 	movw	r0, #285	@ 0x11d
 8001cac:	f7fe fea0 	bl	80009f0 <TFT_Draw_Fill_Triangle_Simple>
			TFT_Draw_Fill_Triangle_Inverted_Simple(475, 432, 30, 18, 1, VIVID_BLUE);
 8001cb0:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2312      	movs	r3, #18
 8001cbc:	221e      	movs	r2, #30
 8001cbe:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8001cc2:	f240 10db 	movw	r0, #475	@ 0x1db
 8001cc6:	f7fe fed1 	bl	8000a6c <TFT_Draw_Fill_Triangle_Inverted_Simple>
			LCD_Font(660, 446, "Entrar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8001cca:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001cce:	9301      	str	r3, [sp, #4]
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <fotter+0x3d8>)
 8001cd6:	4a08      	ldr	r2, [pc, #32]	@ (8001cf8 <fotter+0x3e0>)
 8001cd8:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8001cdc:	f44f 7025 	mov.w	r0, #660	@ 0x294
 8001ce0:	f7ff fbac 	bl	800143c <LCD_Font>
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200000d2 	.word	0x200000d2
 8001cf0:	08005b38 	.word	0x08005b38
 8001cf4:	080052d8 	.word	0x080052d8
 8001cf8:	080052d0 	.word	0x080052d0

08001cfc <scan_membrana>:
	else if (item_selected == 3)
		cabecalho("Configuracao", 75);
}

int8_t scan_membrana(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0

		for(int col = 0; col < 4; col++ )
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	e041      	b.n	8001d8c <scan_membrana+0x90>
		{

			uint32_t botao_mask = (GPIOE->IDR & (0x0F << 2)) >> 2;
 8001d08:	4b26      	ldr	r3, [pc, #152]	@ (8001da4 <scan_membrana+0xa8>)
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	60bb      	str	r3, [r7, #8]
			uint8_t botao = (botao_mask >> col) & 1;
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	71fb      	strb	r3, [r7, #7]


			if(botao == key_pressed[0][col])
 8001d24:	4a20      	ldr	r2, [pc, #128]	@ (8001da8 <scan_membrana+0xac>)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4413      	add	r3, r2
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	79fa      	ldrb	r2, [r7, #7]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d105      	bne.n	8001d3e <scan_membrana+0x42>
			{
				debounce_counter[0][col] = 0;
 8001d32:	4a1e      	ldr	r2, [pc, #120]	@ (8001dac <scan_membrana+0xb0>)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
 8001d3c:	e023      	b.n	8001d86 <scan_membrana+0x8a>
			}else if(++debounce_counter[0][col] >= DEBOUNCE_THRESHOLD)
 8001d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001dac <scan_membrana+0xb0>)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4413      	add	r3, r2
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	3301      	adds	r3, #1
 8001d48:	b2d9      	uxtb	r1, r3
 8001d4a:	4a18      	ldr	r2, [pc, #96]	@ (8001dac <scan_membrana+0xb0>)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4413      	add	r3, r2
 8001d50:	460a      	mov	r2, r1
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	4a15      	ldr	r2, [pc, #84]	@ (8001dac <scan_membrana+0xb0>)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4413      	add	r3, r2
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d912      	bls.n	8001d86 <scan_membrana+0x8a>
			{
				key_pressed[0][col] = botao;
 8001d60:	4a11      	ldr	r2, [pc, #68]	@ (8001da8 <scan_membrana+0xac>)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4413      	add	r3, r2
 8001d66:	79fa      	ldrb	r2, [r7, #7]
 8001d68:	701a      	strb	r2, [r3, #0]
				debounce_counter[0][col] = 0;
 8001d6a:	4a10      	ldr	r2, [pc, #64]	@ (8001dac <scan_membrana+0xb0>)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]

				if(botao)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d005      	beq.n	8001d86 <scan_membrana+0x8a>
				{
					return mask_keyboard[0][col];
 8001d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8001db0 <scan_membrana+0xb4>)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4413      	add	r3, r2
 8001d80:	f993 3000 	ldrsb.w	r3, [r3]
 8001d84:	e007      	b.n	8001d96 <scan_membrana+0x9a>
		for(int col = 0; col < 4; col++ )
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	ddba      	ble.n	8001d08 <scan_membrana+0xc>
				}
			}
	}


	return -1;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	200000d4 	.word	0x200000d4
 8001dac:	200000e4 	.word	0x200000e4
 8001db0:	0800b7bc 	.word	0x0800b7bc

08001db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dba:	f000 fdd7 	bl	800296c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dbe:	f000 f9ab 	bl	8002118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc2:	f000 faad 	bl	8002320 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001dc6:	f000 faf5 	bl	80023b4 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001dca:	f000 fa7f 	bl	80022cc <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8001dce:	f000 fa0d 	bl	80021ec <MX_TIM7_Init>
  MX_TIM9_Init();
 8001dd2:	f000 fa41 	bl	8002258 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  Init_SSD1963();
 8001dd6:	f7fe fc08 	bl	80005ea <Init_SSD1963>
  HAL_TIM_Base_Start_IT(&htim7);
 8001dda:	48ac      	ldr	r0, [pc, #688]	@ (800208c <main+0x2d8>)
 8001ddc:	f001 fdfa 	bl	80039d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 8001de0:	48ab      	ldr	r0, [pc, #684]	@ (8002090 <main+0x2dc>)
 8001de2:	f001 fdf7 	bl	80039d4 <HAL_TIM_Base_Start_IT>
  TFT_Clear_Screen(WHITE);
 8001de6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001dea:	f7fe fd55 	bl	8000898 <TFT_Clear_Screen>
  starter_Screen();
 8001dee:	f7ff fb9f 	bl	8001530 <starter_Screen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(current_screen == 0){
 8001df2:	4ba8      	ldr	r3, [pc, #672]	@ (8002094 <main+0x2e0>)
 8001df4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d164      	bne.n	8001ec6 <main+0x112>

		if (current_screen != ultimo_estado_menu)
 8001dfc:	4ba5      	ldr	r3, [pc, #660]	@ (8002094 <main+0x2e0>)
 8001dfe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e02:	4ba5      	ldr	r3, [pc, #660]	@ (8002098 <main+0x2e4>)
 8001e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d01c      	beq.n	8001e46 <main+0x92>
		{
			TFT_Draw_Fill_Rectangle(0, 81, 800, 317, VIVID_BLUE);
 8001e0c:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	f240 133d 	movw	r3, #317	@ 0x13d
 8001e16:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001e1a:	2151      	movs	r1, #81	@ 0x51
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7fe fdb9 	bl	8000994 <TFT_Draw_Fill_Rectangle>
			home_screen();
 8001e22:	f7ff fb99 	bl	8001558 <home_screen>
			header();
 8001e26:	f7ff fd03 	bl	8001830 <header>
			fotter();
 8001e2a:	f7ff fd75 	bl	8001918 <fotter>
			flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 8001e2e:	2200      	movs	r2, #0
 8001e30:	4b9a      	ldr	r3, [pc, #616]	@ (800209c <main+0x2e8>)
 8001e32:	4611      	mov	r1, r2
 8001e34:	7019      	strb	r1, [r3, #0]
 8001e36:	4b9a      	ldr	r3, [pc, #616]	@ (80020a0 <main+0x2ec>)
 8001e38:	4611      	mov	r1, r2
 8001e3a:	7019      	strb	r1, [r3, #0]
 8001e3c:	4b99      	ldr	r3, [pc, #612]	@ (80020a4 <main+0x2f0>)
 8001e3e:	4611      	mov	r1, r2
 8001e40:	7019      	strb	r1, [r3, #0]
 8001e42:	4b99      	ldr	r3, [pc, #612]	@ (80020a8 <main+0x2f4>)
 8001e44:	701a      	strb	r2, [r3, #0]
		}

		atualiza_Cursor();
 8001e46:	f7ff fbff 	bl	8001648 <atualiza_Cursor>

		if (flag_botao_on){
 8001e4a:	4b97      	ldr	r3, [pc, #604]	@ (80020a8 <main+0x2f4>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <main+0xac>
			current_screen = 1;
 8001e54:	4b8f      	ldr	r3, [pc, #572]	@ (8002094 <main+0x2e0>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	801a      	strh	r2, [r3, #0]
			flag_botao_on = 0;
 8001e5a:	4b93      	ldr	r3, [pc, #588]	@ (80020a8 <main+0x2f4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
//				TFT_Draw_Fill_Triangle_Simple(255, 240, 30, 30, 1, BLACK);
//				TFT_Draw_Fill_Triangle_Inverted_Simple(255, 280, 30, 30, 1, BLACK);
//			}
		}

		if (flag_botao_down)
 8001e60:	4b8e      	ldr	r3, [pc, #568]	@ (800209c <main+0x2e8>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d013      	beq.n	8001e92 <main+0xde>
		{
			flag_botao_down = 0;
 8001e6a:	4b8c      	ldr	r3, [pc, #560]	@ (800209c <main+0x2e8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
			item_selected++;
 8001e70:	4b8e      	ldr	r3, [pc, #568]	@ (80020ac <main+0x2f8>)
 8001e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	3301      	adds	r3, #1
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	b21a      	sxth	r2, r3
 8001e7e:	4b8b      	ldr	r3, [pc, #556]	@ (80020ac <main+0x2f8>)
 8001e80:	801a      	strh	r2, [r3, #0]

			if (item_selected >= NUM_ITEMS)
 8001e82:	4b8a      	ldr	r3, [pc, #552]	@ (80020ac <main+0x2f8>)
 8001e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	dd02      	ble.n	8001e92 <main+0xde>
				item_selected = 0;
 8001e8c:	4b87      	ldr	r3, [pc, #540]	@ (80020ac <main+0x2f8>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	801a      	strh	r2, [r3, #0]
		}

		if(flag_botao_up)
 8001e92:	4b83      	ldr	r3, [pc, #524]	@ (80020a0 <main+0x2ec>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0aa      	beq.n	8001df2 <main+0x3e>
		{
			flag_botao_up = 0;
 8001e9c:	4b80      	ldr	r3, [pc, #512]	@ (80020a0 <main+0x2ec>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
			item_selected--;
 8001ea2:	4b82      	ldr	r3, [pc, #520]	@ (80020ac <main+0x2f8>)
 8001ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	b21a      	sxth	r2, r3
 8001eb0:	4b7e      	ldr	r3, [pc, #504]	@ (80020ac <main+0x2f8>)
 8001eb2:	801a      	strh	r2, [r3, #0]

			if (item_selected < 0)
 8001eb4:	4b7d      	ldr	r3, [pc, #500]	@ (80020ac <main+0x2f8>)
 8001eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	da99      	bge.n	8001df2 <main+0x3e>
				item_selected = NUM_ITEMS - 1;
 8001ebe:	4b7b      	ldr	r3, [pc, #492]	@ (80020ac <main+0x2f8>)
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	801a      	strh	r2, [r3, #0]
 8001ec4:	e795      	b.n	8001df2 <main+0x3e>
		}

	  }
	  else
	  {
			if (current_screen != ultimo_estado_menu)
 8001ec6:	4b73      	ldr	r3, [pc, #460]	@ (8002094 <main+0x2e0>)
 8001ec8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ecc:	4b72      	ldr	r3, [pc, #456]	@ (8002098 <main+0x2e4>)
 8001ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d01f      	beq.n	8001f16 <main+0x162>
			{
				TFT_Draw_Fill_Rectangle(0, 81, 800, 317, VIVID_BLUE);
 8001ed6:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	f240 133d 	movw	r3, #317	@ 0x13d
 8001ee0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001ee4:	2151      	movs	r1, #81	@ 0x51
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7fe fd54 	bl	8000994 <TFT_Draw_Fill_Rectangle>
				ultimo_estado_menu = current_screen;
 8001eec:	4b69      	ldr	r3, [pc, #420]	@ (8002094 <main+0x2e0>)
 8001eee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ef2:	4b69      	ldr	r3, [pc, #420]	@ (8002098 <main+0x2e4>)
 8001ef4:	801a      	strh	r2, [r3, #0]
				header();
 8001ef6:	f7ff fc9b 	bl	8001830 <header>
				fotter();
 8001efa:	f7ff fd0d 	bl	8001918 <fotter>
				flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 8001efe:	2200      	movs	r2, #0
 8001f00:	4b66      	ldr	r3, [pc, #408]	@ (800209c <main+0x2e8>)
 8001f02:	4611      	mov	r1, r2
 8001f04:	7019      	strb	r1, [r3, #0]
 8001f06:	4b66      	ldr	r3, [pc, #408]	@ (80020a0 <main+0x2ec>)
 8001f08:	4611      	mov	r1, r2
 8001f0a:	7019      	strb	r1, [r3, #0]
 8001f0c:	4b65      	ldr	r3, [pc, #404]	@ (80020a4 <main+0x2f0>)
 8001f0e:	4611      	mov	r1, r2
 8001f10:	7019      	strb	r1, [r3, #0]
 8001f12:	4b65      	ldr	r3, [pc, #404]	@ (80020a8 <main+0x2f4>)
 8001f14:	701a      	strb	r2, [r3, #0]
			}

			/********************* BANHO *************************/
			if(item_selected == 0)
 8001f16:	4b65      	ldr	r3, [pc, #404]	@ (80020ac <main+0x2f8>)
 8001f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d178      	bne.n	8002012 <main+0x25e>
//					}
//
//
//				}

				if (flag_botao_off)
 8001f20:	4b60      	ldr	r3, [pc, #384]	@ (80020a4 <main+0x2f0>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d011      	beq.n	8001f4e <main+0x19a>
				{
					flag_botao_off = 0;
 8001f2a:	4b5e      	ldr	r3, [pc, #376]	@ (80020a4 <main+0x2f0>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
					flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 8001f30:	2200      	movs	r2, #0
 8001f32:	4b5a      	ldr	r3, [pc, #360]	@ (800209c <main+0x2e8>)
 8001f34:	4611      	mov	r1, r2
 8001f36:	7019      	strb	r1, [r3, #0]
 8001f38:	4b59      	ldr	r3, [pc, #356]	@ (80020a0 <main+0x2ec>)
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	7019      	strb	r1, [r3, #0]
 8001f3e:	4b59      	ldr	r3, [pc, #356]	@ (80020a4 <main+0x2f0>)
 8001f40:	4611      	mov	r1, r2
 8001f42:	7019      	strb	r1, [r3, #0]
 8001f44:	4b58      	ldr	r3, [pc, #352]	@ (80020a8 <main+0x2f4>)
 8001f46:	701a      	strb	r2, [r3, #0]
					current_screen = 0;
 8001f48:	4b52      	ldr	r3, [pc, #328]	@ (8002094 <main+0x2e0>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	801a      	strh	r2, [r3, #0]
				}

				if(flag_botao_up)
 8001f4e:	4b54      	ldr	r3, [pc, #336]	@ (80020a0 <main+0x2ec>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d02a      	beq.n	8001fae <main+0x1fa>
				{
					flag_botao_up = 0;
 8001f58:	4b51      	ldr	r3, [pc, #324]	@ (80020a0 <main+0x2ec>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
					temp++;
 8001f5e:	4b54      	ldr	r3, [pc, #336]	@ (80020b0 <main+0x2fc>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	4b52      	ldr	r3, [pc, #328]	@ (80020b0 <main+0x2fc>)
 8001f68:	801a      	strh	r2, [r3, #0]

					if(temp > 42) temp = 42;
 8001f6a:	4b51      	ldr	r3, [pc, #324]	@ (80020b0 <main+0x2fc>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f70:	d902      	bls.n	8001f78 <main+0x1c4>
 8001f72:	4b4f      	ldr	r3, [pc, #316]	@ (80020b0 <main+0x2fc>)
 8001f74:	222a      	movs	r2, #42	@ 0x2a
 8001f76:	801a      	strh	r2, [r3, #0]

					TFT_Draw_Fill_Rectangle(70, 195, 180, 120, WHITE);
 8001f78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	2378      	movs	r3, #120	@ 0x78
 8001f80:	22b4      	movs	r2, #180	@ 0xb4
 8001f82:	21c3      	movs	r1, #195	@ 0xc3
 8001f84:	2046      	movs	r0, #70	@ 0x46
 8001f86:	f7fe fd05 	bl	8000994 <TFT_Draw_Fill_Rectangle>
					sprintf(buffer, "%d", temp);
 8001f8a:	4b49      	ldr	r3, [pc, #292]	@ (80020b0 <main+0x2fc>)
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4948      	ldr	r1, [pc, #288]	@ (80020b4 <main+0x300>)
 8001f92:	4849      	ldr	r0, [pc, #292]	@ (80020b8 <main+0x304>)
 8001f94:	f002 fcd2 	bl	800493c <siprintf>
					LCD_Font(70, 300, buffer,_Open_Sans_Bold_72, 2, BLACK);
 8001f98:	2300      	movs	r3, #0
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	4b46      	ldr	r3, [pc, #280]	@ (80020bc <main+0x308>)
 8001fa2:	4a45      	ldr	r2, [pc, #276]	@ (80020b8 <main+0x304>)
 8001fa4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001fa8:	2046      	movs	r0, #70	@ 0x46
 8001faa:	f7ff fa47 	bl	800143c <LCD_Font>
				}

				if(flag_botao_down)
 8001fae:	4b3b      	ldr	r3, [pc, #236]	@ (800209c <main+0x2e8>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f43f af1c 	beq.w	8001df2 <main+0x3e>
				{
					flag_botao_down = 0;
 8001fba:	4b38      	ldr	r3, [pc, #224]	@ (800209c <main+0x2e8>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
					temp--;
 8001fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80020b0 <main+0x2fc>)
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	4b39      	ldr	r3, [pc, #228]	@ (80020b0 <main+0x2fc>)
 8001fca:	801a      	strh	r2, [r3, #0]

					if(temp < 36) temp = 36;
 8001fcc:	4b38      	ldr	r3, [pc, #224]	@ (80020b0 <main+0x2fc>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	2b23      	cmp	r3, #35	@ 0x23
 8001fd2:	d802      	bhi.n	8001fda <main+0x226>
 8001fd4:	4b36      	ldr	r3, [pc, #216]	@ (80020b0 <main+0x2fc>)
 8001fd6:	2224      	movs	r2, #36	@ 0x24
 8001fd8:	801a      	strh	r2, [r3, #0]

					TFT_Draw_Fill_Rectangle(70, 195, 180, 120, WHITE);
 8001fda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2378      	movs	r3, #120	@ 0x78
 8001fe2:	22b4      	movs	r2, #180	@ 0xb4
 8001fe4:	21c3      	movs	r1, #195	@ 0xc3
 8001fe6:	2046      	movs	r0, #70	@ 0x46
 8001fe8:	f7fe fcd4 	bl	8000994 <TFT_Draw_Fill_Rectangle>
					sprintf(buffer, "%d", temp);
 8001fec:	4b30      	ldr	r3, [pc, #192]	@ (80020b0 <main+0x2fc>)
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4930      	ldr	r1, [pc, #192]	@ (80020b4 <main+0x300>)
 8001ff4:	4830      	ldr	r0, [pc, #192]	@ (80020b8 <main+0x304>)
 8001ff6:	f002 fca1 	bl	800493c <siprintf>
					LCD_Font(70, 300, buffer,_Open_Sans_Bold_72, 2, BLACK);
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	2302      	movs	r3, #2
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	4b2e      	ldr	r3, [pc, #184]	@ (80020bc <main+0x308>)
 8002004:	4a2c      	ldr	r2, [pc, #176]	@ (80020b8 <main+0x304>)
 8002006:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800200a:	2046      	movs	r0, #70	@ 0x46
 800200c:	f7ff fa16 	bl	800143c <LCD_Font>
 8002010:	e6ef      	b.n	8001df2 <main+0x3e>
				}

			}
			else if(item_selected == 1)
 8002012:	4b26      	ldr	r3, [pc, #152]	@ (80020ac <main+0x2f8>)
 8002014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d118      	bne.n	800204e <main+0x29a>
			{
				if (flag_botao_off)
 800201c:	4b21      	ldr	r3, [pc, #132]	@ (80020a4 <main+0x2f0>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	f43f aee5 	beq.w	8001df2 <main+0x3e>
				{
					flag_botao_off = 0;
 8002028:	4b1e      	ldr	r3, [pc, #120]	@ (80020a4 <main+0x2f0>)
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
					flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 800202e:	2200      	movs	r2, #0
 8002030:	4b1a      	ldr	r3, [pc, #104]	@ (800209c <main+0x2e8>)
 8002032:	4611      	mov	r1, r2
 8002034:	7019      	strb	r1, [r3, #0]
 8002036:	4b1a      	ldr	r3, [pc, #104]	@ (80020a0 <main+0x2ec>)
 8002038:	4611      	mov	r1, r2
 800203a:	7019      	strb	r1, [r3, #0]
 800203c:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <main+0x2f0>)
 800203e:	4611      	mov	r1, r2
 8002040:	7019      	strb	r1, [r3, #0]
 8002042:	4b19      	ldr	r3, [pc, #100]	@ (80020a8 <main+0x2f4>)
 8002044:	701a      	strb	r2, [r3, #0]
					current_screen = 0;
 8002046:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <main+0x2e0>)
 8002048:	2200      	movs	r2, #0
 800204a:	801a      	strh	r2, [r3, #0]
 800204c:	e6d1      	b.n	8001df2 <main+0x3e>
				}
			}
			else if(item_selected == 2)
 800204e:	4b17      	ldr	r3, [pc, #92]	@ (80020ac <main+0x2f8>)
 8002050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d133      	bne.n	80020c0 <main+0x30c>
			{
				if (flag_botao_off)
 8002058:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <main+0x2f0>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	f43f aec7 	beq.w	8001df2 <main+0x3e>
				{
					flag_botao_off = 0;
 8002064:	4b0f      	ldr	r3, [pc, #60]	@ (80020a4 <main+0x2f0>)
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
					flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 800206a:	2200      	movs	r2, #0
 800206c:	4b0b      	ldr	r3, [pc, #44]	@ (800209c <main+0x2e8>)
 800206e:	4611      	mov	r1, r2
 8002070:	7019      	strb	r1, [r3, #0]
 8002072:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <main+0x2ec>)
 8002074:	4611      	mov	r1, r2
 8002076:	7019      	strb	r1, [r3, #0]
 8002078:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <main+0x2f0>)
 800207a:	4611      	mov	r1, r2
 800207c:	7019      	strb	r1, [r3, #0]
 800207e:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <main+0x2f4>)
 8002080:	701a      	strb	r2, [r3, #0]
					current_screen = 0;
 8002082:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <main+0x2e0>)
 8002084:	2200      	movs	r2, #0
 8002086:	801a      	strh	r2, [r3, #0]
 8002088:	e6b3      	b.n	8001df2 <main+0x3e>
 800208a:	bf00      	nop
 800208c:	200000f8 	.word	0x200000f8
 8002090:	20000140 	.word	0x20000140
 8002094:	200000d0 	.word	0x200000d0
 8002098:	20000050 	.word	0x20000050
 800209c:	200000f6 	.word	0x200000f6
 80020a0:	200000f5 	.word	0x200000f5
 80020a4:	200000f4 	.word	0x200000f4
 80020a8:	200000f7 	.word	0x200000f7
 80020ac:	200000d2 	.word	0x200000d2
 80020b0:	20000054 	.word	0x20000054
 80020b4:	080052f4 	.word	0x080052f4
 80020b8:	20000220 	.word	0x20000220
 80020bc:	0800b7b0 	.word	0x0800b7b0
				}
			}
			else if(item_selected == 3)
 80020c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002100 <main+0x34c>)
 80020c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	f47f ae93 	bne.w	8001df2 <main+0x3e>
			{
				if (flag_botao_off)
 80020cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002104 <main+0x350>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f43f ae8d 	beq.w	8001df2 <main+0x3e>
				{
					flag_botao_off = 0;
 80020d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002104 <main+0x350>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
					flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 80020de:	2200      	movs	r2, #0
 80020e0:	4b09      	ldr	r3, [pc, #36]	@ (8002108 <main+0x354>)
 80020e2:	4611      	mov	r1, r2
 80020e4:	7019      	strb	r1, [r3, #0]
 80020e6:	4b09      	ldr	r3, [pc, #36]	@ (800210c <main+0x358>)
 80020e8:	4611      	mov	r1, r2
 80020ea:	7019      	strb	r1, [r3, #0]
 80020ec:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <main+0x350>)
 80020ee:	4611      	mov	r1, r2
 80020f0:	7019      	strb	r1, [r3, #0]
 80020f2:	4b07      	ldr	r3, [pc, #28]	@ (8002110 <main+0x35c>)
 80020f4:	701a      	strb	r2, [r3, #0]
					current_screen = 0;
 80020f6:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <main+0x360>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	801a      	strh	r2, [r3, #0]
	  if(current_screen == 0){
 80020fc:	e679      	b.n	8001df2 <main+0x3e>
 80020fe:	bf00      	nop
 8002100:	200000d2 	.word	0x200000d2
 8002104:	200000f4 	.word	0x200000f4
 8002108:	200000f6 	.word	0x200000f6
 800210c:	200000f5 	.word	0x200000f5
 8002110:	200000f7 	.word	0x200000f7
 8002114:	200000d0 	.word	0x200000d0

08002118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b094      	sub	sp, #80	@ 0x50
 800211c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800211e:	f107 0320 	add.w	r3, r7, #32
 8002122:	2230      	movs	r2, #48	@ 0x30
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f002 fc2a 	bl	8004980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	4b28      	ldr	r3, [pc, #160]	@ (80021e4 <SystemClock_Config+0xcc>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	4a27      	ldr	r2, [pc, #156]	@ (80021e4 <SystemClock_Config+0xcc>)
 8002146:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800214a:	6413      	str	r3, [r2, #64]	@ 0x40
 800214c:	4b25      	ldr	r3, [pc, #148]	@ (80021e4 <SystemClock_Config+0xcc>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002158:	2300      	movs	r3, #0
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	4b22      	ldr	r3, [pc, #136]	@ (80021e8 <SystemClock_Config+0xd0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a21      	ldr	r2, [pc, #132]	@ (80021e8 <SystemClock_Config+0xd0>)
 8002162:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b1f      	ldr	r3, [pc, #124]	@ (80021e8 <SystemClock_Config+0xd0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002174:	2302      	movs	r3, #2
 8002176:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002178:	2301      	movs	r3, #1
 800217a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800217c:	2310      	movs	r3, #16
 800217e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002180:	2302      	movs	r3, #2
 8002182:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002184:	2300      	movs	r3, #0
 8002186:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002188:	2308      	movs	r3, #8
 800218a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800218c:	23a8      	movs	r3, #168	@ 0xa8
 800218e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002190:	2302      	movs	r3, #2
 8002192:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002194:	2304      	movs	r3, #4
 8002196:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002198:	f107 0320 	add.w	r3, r7, #32
 800219c:	4618      	mov	r0, r3
 800219e:	f000 ff29 	bl	8002ff4 <HAL_RCC_OscConfig>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021a8:	f000 fa18 	bl	80025dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ac:	230f      	movs	r3, #15
 80021ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021b0:	2302      	movs	r3, #2
 80021b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80021bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	2105      	movs	r1, #5
 80021ca:	4618      	mov	r0, r3
 80021cc:	f001 f98a 	bl	80034e4 <HAL_RCC_ClockConfig>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80021d6:	f000 fa01 	bl	80025dc <Error_Handler>
  }
}
 80021da:	bf00      	nop
 80021dc:	3750      	adds	r7, #80	@ 0x50
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40007000 	.word	0x40007000

080021ec <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f2:	463b      	mov	r3, r7
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80021fa:	4b15      	ldr	r3, [pc, #84]	@ (8002250 <MX_TIM7_Init+0x64>)
 80021fc:	4a15      	ldr	r2, [pc, #84]	@ (8002254 <MX_TIM7_Init+0x68>)
 80021fe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8399;
 8002200:	4b13      	ldr	r3, [pc, #76]	@ (8002250 <MX_TIM7_Init+0x64>)
 8002202:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002206:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002208:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <MX_TIM7_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800220e:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <MX_TIM7_Init+0x64>)
 8002210:	2231      	movs	r2, #49	@ 0x31
 8002212:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002214:	4b0e      	ldr	r3, [pc, #56]	@ (8002250 <MX_TIM7_Init+0x64>)
 8002216:	2200      	movs	r2, #0
 8002218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800221a:	480d      	ldr	r0, [pc, #52]	@ (8002250 <MX_TIM7_Init+0x64>)
 800221c:	f001 fb8a 	bl	8003934 <HAL_TIM_Base_Init>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002226:	f000 f9d9 	bl	80025dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002232:	463b      	mov	r3, r7
 8002234:	4619      	mov	r1, r3
 8002236:	4806      	ldr	r0, [pc, #24]	@ (8002250 <MX_TIM7_Init+0x64>)
 8002238:	f001 ff5c 	bl	80040f4 <HAL_TIMEx_MasterConfigSynchronization>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002242:	f000 f9cb 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200000f8 	.word	0x200000f8
 8002254:	40001400 	.word	0x40001400

08002258 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800225e:	463b      	mov	r3, r7
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800226a:	4b16      	ldr	r3, [pc, #88]	@ (80022c4 <MX_TIM9_Init+0x6c>)
 800226c:	4a16      	ldr	r2, [pc, #88]	@ (80022c8 <MX_TIM9_Init+0x70>)
 800226e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 16799;
 8002270:	4b14      	ldr	r3, [pc, #80]	@ (80022c4 <MX_TIM9_Init+0x6c>)
 8002272:	f244 129f 	movw	r2, #16799	@ 0x419f
 8002276:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002278:	4b12      	ldr	r3, [pc, #72]	@ (80022c4 <MX_TIM9_Init+0x6c>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1999;
 800227e:	4b11      	ldr	r3, [pc, #68]	@ (80022c4 <MX_TIM9_Init+0x6c>)
 8002280:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002284:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002286:	4b0f      	ldr	r3, [pc, #60]	@ (80022c4 <MX_TIM9_Init+0x6c>)
 8002288:	2200      	movs	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228c:	4b0d      	ldr	r3, [pc, #52]	@ (80022c4 <MX_TIM9_Init+0x6c>)
 800228e:	2200      	movs	r2, #0
 8002290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002292:	480c      	ldr	r0, [pc, #48]	@ (80022c4 <MX_TIM9_Init+0x6c>)
 8002294:	f001 fb4e 	bl	8003934 <HAL_TIM_Base_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800229e:	f000 f99d 	bl	80025dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022a6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80022a8:	463b      	mov	r3, r7
 80022aa:	4619      	mov	r1, r3
 80022ac:	4805      	ldr	r0, [pc, #20]	@ (80022c4 <MX_TIM9_Init+0x6c>)
 80022ae:	f001 fcf1 	bl	8003c94 <HAL_TIM_ConfigClockSource>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80022b8:	f000 f990 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80022bc:	bf00      	nop
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000140 	.word	0x20000140
 80022c8:	40014000 	.word	0x40014000

080022cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022d0:	4b10      	ldr	r3, [pc, #64]	@ (8002314 <MX_USART1_UART_Init+0x48>)
 80022d2:	4a11      	ldr	r2, [pc, #68]	@ (8002318 <MX_USART1_UART_Init+0x4c>)
 80022d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 80022d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <MX_USART1_UART_Init+0x48>)
 80022d8:	4a10      	ldr	r2, [pc, #64]	@ (800231c <MX_USART1_UART_Init+0x50>)
 80022da:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002314 <MX_USART1_UART_Init+0x48>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <MX_USART1_UART_Init+0x48>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <MX_USART1_UART_Init+0x48>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022ee:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <MX_USART1_UART_Init+0x48>)
 80022f0:	220c      	movs	r2, #12
 80022f2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f4:	4b07      	ldr	r3, [pc, #28]	@ (8002314 <MX_USART1_UART_Init+0x48>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022fa:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <MX_USART1_UART_Init+0x48>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002300:	4804      	ldr	r0, [pc, #16]	@ (8002314 <MX_USART1_UART_Init+0x48>)
 8002302:	f001 ff87 	bl	8004214 <HAL_UART_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 800230c:	f000 f966 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000188 	.word	0x20000188
 8002318:	40011000 	.word	0x40011000
 800231c:	000f4240 	.word	0x000f4240

08002320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002326:	f107 030c 	add.w	r3, r7, #12
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	605a      	str	r2, [r3, #4]
 8002330:	609a      	str	r2, [r3, #8]
 8002332:	60da      	str	r2, [r3, #12]
 8002334:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	4b1c      	ldr	r3, [pc, #112]	@ (80023ac <MX_GPIO_Init+0x8c>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	4a1b      	ldr	r2, [pc, #108]	@ (80023ac <MX_GPIO_Init+0x8c>)
 8002340:	f043 0310 	orr.w	r3, r3, #16
 8002344:	6313      	str	r3, [r2, #48]	@ 0x30
 8002346:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <MX_GPIO_Init+0x8c>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <MX_GPIO_Init+0x8c>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	4a14      	ldr	r2, [pc, #80]	@ (80023ac <MX_GPIO_Init+0x8c>)
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	6313      	str	r3, [r2, #48]	@ 0x30
 8002362:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <MX_GPIO_Init+0x8c>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	603b      	str	r3, [r7, #0]
 8002372:	4b0e      	ldr	r3, [pc, #56]	@ (80023ac <MX_GPIO_Init+0x8c>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	4a0d      	ldr	r2, [pc, #52]	@ (80023ac <MX_GPIO_Init+0x8c>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6313      	str	r3, [r2, #48]	@ 0x30
 800237e:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <MX_GPIO_Init+0x8c>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800238a:	233c      	movs	r3, #60	@ 0x3c
 800238c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002392:	2302      	movs	r3, #2
 8002394:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	4619      	mov	r1, r3
 800239c:	4804      	ldr	r0, [pc, #16]	@ (80023b0 <MX_GPIO_Init+0x90>)
 800239e:	f000 fc8d 	bl	8002cbc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80023a2:	bf00      	nop
 80023a4:	3720      	adds	r7, #32
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40021000 	.word	0x40021000

080023b4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
 80023c8:	615a      	str	r2, [r3, #20]
 80023ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80023cc:	4b27      	ldr	r3, [pc, #156]	@ (800246c <MX_FSMC_Init+0xb8>)
 80023ce:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80023d2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80023d4:	4b25      	ldr	r3, [pc, #148]	@ (800246c <MX_FSMC_Init+0xb8>)
 80023d6:	4a26      	ldr	r2, [pc, #152]	@ (8002470 <MX_FSMC_Init+0xbc>)
 80023d8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80023da:	4b24      	ldr	r3, [pc, #144]	@ (800246c <MX_FSMC_Init+0xb8>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80023e0:	4b22      	ldr	r3, [pc, #136]	@ (800246c <MX_FSMC_Init+0xb8>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80023e6:	4b21      	ldr	r3, [pc, #132]	@ (800246c <MX_FSMC_Init+0xb8>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80023ec:	4b1f      	ldr	r3, [pc, #124]	@ (800246c <MX_FSMC_Init+0xb8>)
 80023ee:	2210      	movs	r2, #16
 80023f0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80023f2:	4b1e      	ldr	r3, [pc, #120]	@ (800246c <MX_FSMC_Init+0xb8>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80023f8:	4b1c      	ldr	r3, [pc, #112]	@ (800246c <MX_FSMC_Init+0xb8>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80023fe:	4b1b      	ldr	r3, [pc, #108]	@ (800246c <MX_FSMC_Init+0xb8>)
 8002400:	2200      	movs	r2, #0
 8002402:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002404:	4b19      	ldr	r3, [pc, #100]	@ (800246c <MX_FSMC_Init+0xb8>)
 8002406:	2200      	movs	r2, #0
 8002408:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800240a:	4b18      	ldr	r3, [pc, #96]	@ (800246c <MX_FSMC_Init+0xb8>)
 800240c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002410:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002412:	4b16      	ldr	r3, [pc, #88]	@ (800246c <MX_FSMC_Init+0xb8>)
 8002414:	2200      	movs	r2, #0
 8002416:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002418:	4b14      	ldr	r3, [pc, #80]	@ (800246c <MX_FSMC_Init+0xb8>)
 800241a:	2200      	movs	r2, #0
 800241c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800241e:	4b13      	ldr	r3, [pc, #76]	@ (800246c <MX_FSMC_Init+0xb8>)
 8002420:	2200      	movs	r2, #0
 8002422:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002424:	4b11      	ldr	r3, [pc, #68]	@ (800246c <MX_FSMC_Init+0xb8>)
 8002426:	2200      	movs	r2, #0
 8002428:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800242a:	4b10      	ldr	r3, [pc, #64]	@ (800246c <MX_FSMC_Init+0xb8>)
 800242c:	2200      	movs	r2, #0
 800242e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 8002430:	2301      	movs	r3, #1
 8002432:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002434:	230f      	movs	r3, #15
 8002436:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8002438:	2305      	movs	r3, #5
 800243a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800243c:	230f      	movs	r3, #15
 800243e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002440:	2310      	movs	r3, #16
 8002442:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002444:	2311      	movs	r3, #17
 8002446:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	2200      	movs	r2, #0
 8002450:	4619      	mov	r1, r3
 8002452:	4806      	ldr	r0, [pc, #24]	@ (800246c <MX_FSMC_Init+0xb8>)
 8002454:	f001 fa26 	bl	80038a4 <HAL_SRAM_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 800245e:	f000 f8bd 	bl	80025dc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002462:	bf00      	nop
 8002464:	3720      	adds	r7, #32
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	200001d0 	.word	0x200001d0
 8002470:	a0000104 	.word	0xa0000104

08002474 <HAL_TIM_PeriodElapsedCallback>:

int __io_getchar(void) {
	return (uint16_t) (USART1->DR & (uint16_t) 0x01FF);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af02      	add	r7, sp, #8
 800247a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM7)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a49      	ldr	r2, [pc, #292]	@ (80025a8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d134      	bne.n	80024f0 <HAL_TIM_PeriodElapsedCallback+0x7c>
	{
		int8_t botao_selecionado = scan_membrana();
 8002486:	f7ff fc39 	bl	8001cfc <scan_membrana>
 800248a:	4603      	mov	r3, r0
 800248c:	73fb      	strb	r3, [r7, #15]
		if(botao_selecionado != -1){
 800248e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002496:	d02b      	beq.n	80024f0 <HAL_TIM_PeriodElapsedCallback+0x7c>

			switch(botao_selecionado){
 8002498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249c:	3b01      	subs	r3, #1
 800249e:	2b09      	cmp	r3, #9
 80024a0:	d826      	bhi.n	80024f0 <HAL_TIM_PeriodElapsedCallback+0x7c>
 80024a2:	a201      	add	r2, pc, #4	@ (adr r2, 80024a8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80024a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a8:	080024d9 	.word	0x080024d9
 80024ac:	080024e1 	.word	0x080024e1
 80024b0:	080024e9 	.word	0x080024e9
 80024b4:	080024f1 	.word	0x080024f1
 80024b8:	080024f1 	.word	0x080024f1
 80024bc:	080024f1 	.word	0x080024f1
 80024c0:	080024f1 	.word	0x080024f1
 80024c4:	080024f1 	.word	0x080024f1
 80024c8:	080024f1 	.word	0x080024f1
 80024cc:	080024d1 	.word	0x080024d1

			case 10:
				flag_botao_on = 1;
 80024d0:	4b36      	ldr	r3, [pc, #216]	@ (80025ac <HAL_TIM_PeriodElapsedCallback+0x138>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
				break;
 80024d6:	e00b      	b.n	80024f0 <HAL_TIM_PeriodElapsedCallback+0x7c>

			case 1:
				flag_botao_off = 1;
 80024d8:	4b35      	ldr	r3, [pc, #212]	@ (80025b0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
				break;
 80024de:	e007      	b.n	80024f0 <HAL_TIM_PeriodElapsedCallback+0x7c>

			case 2:
				flag_botao_up = 1;
 80024e0:	4b34      	ldr	r3, [pc, #208]	@ (80025b4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]
				break;
 80024e6:	e003      	b.n	80024f0 <HAL_TIM_PeriodElapsedCallback+0x7c>

			case 3:
				flag_botao_down = 1;
 80024e8:	4b33      	ldr	r3, [pc, #204]	@ (80025b8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
				break;
 80024ee:	bf00      	nop
			}
		}
	}
	if(htim->Instance == TIM9)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a31      	ldr	r2, [pc, #196]	@ (80025bc <HAL_TIM_PeriodElapsedCallback+0x148>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d151      	bne.n	800259e <HAL_TIM_PeriodElapsedCallback+0x12a>
	{
		if(flag_iniciar_banho)
 80024fa:	4b31      	ldr	r3, [pc, #196]	@ (80025c0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80024fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d017      	beq.n	8002534 <HAL_TIM_PeriodElapsedCallback+0xc0>
		{
			if(contador_Iniciar >= COUNT_LIM)
 8002504:	4b2f      	ldr	r3, [pc, #188]	@ (80025c4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800250a:	2b31      	cmp	r3, #49	@ 0x31
 800250c:	dd09      	ble.n	8002522 <HAL_TIM_PeriodElapsedCallback+0xae>
			{
				contador_Iniciar = 0;
 800250e:	4b2d      	ldr	r3, [pc, #180]	@ (80025c4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002510:	2200      	movs	r2, #0
 8002512:	801a      	strh	r2, [r3, #0]
				flag_estado_banho = 1;
 8002514:	4b2c      	ldr	r3, [pc, #176]	@ (80025c8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002516:	2201      	movs	r2, #1
 8002518:	801a      	strh	r2, [r3, #0]
				flag_iniciar_banho = 0;
 800251a:	4b29      	ldr	r3, [pc, #164]	@ (80025c0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800251c:	2200      	movs	r2, #0
 800251e:	801a      	strh	r2, [r3, #0]
 8002520:	e008      	b.n	8002534 <HAL_TIM_PeriodElapsedCallback+0xc0>
//				TFT_Draw_Fill_Rectangle(597, 97, 186, 54, WHITE);
			}
			else
			{
				contador_Iniciar++;
 8002522:	4b28      	ldr	r3, [pc, #160]	@ (80025c4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002528:	b29b      	uxth	r3, r3
 800252a:	3301      	adds	r3, #1
 800252c:	b29b      	uxth	r3, r3
 800252e:	b21a      	sxth	r2, r3
 8002530:	4b24      	ldr	r3, [pc, #144]	@ (80025c4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002532:	801a      	strh	r2, [r3, #0]
//				uint16_t w = (180 * contador_Iniciar) / COUNT_LIM;
//				TFT_Draw_Fill_Rectangle(600, 100, w, 50, BLACK);
			}
		}

		if(flag_desligar_banho)
 8002534:	4b25      	ldr	r3, [pc, #148]	@ (80025cc <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d02f      	beq.n	800259e <HAL_TIM_PeriodElapsedCallback+0x12a>
		{
			if(contador_Desligar >= COUNT_LIM)
 800253e:	4b24      	ldr	r3, [pc, #144]	@ (80025d0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002544:	2b31      	cmp	r3, #49	@ 0x31
 8002546:	dd21      	ble.n	800258c <HAL_TIM_PeriodElapsedCallback+0x118>
			{
				flag_estado_banho = 0;
 8002548:	4b1f      	ldr	r3, [pc, #124]	@ (80025c8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800254a:	2200      	movs	r2, #0
 800254c:	801a      	strh	r2, [r3, #0]
				contador_Desligar = 0;
 800254e:	4b20      	ldr	r3, [pc, #128]	@ (80025d0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002550:	2200      	movs	r2, #0
 8002552:	801a      	strh	r2, [r3, #0]
				flag_desligar_banho = 0;
 8002554:	4b1d      	ldr	r3, [pc, #116]	@ (80025cc <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002556:	2200      	movs	r2, #0
 8002558:	801a      	strh	r2, [r3, #0]
				LCD_Font(600, 250, "Recirculando", _Open_Sans_Bold_24, 1, WHITE);
 800255a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	2301      	movs	r3, #1
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	4b1b      	ldr	r3, [pc, #108]	@ (80025d4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002566:	4a1c      	ldr	r2, [pc, #112]	@ (80025d8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002568:	21fa      	movs	r1, #250	@ 0xfa
 800256a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800256e:	f7fe ff65 	bl	800143c <LCD_Font>
				TFT_Draw_Circle(580, 242, 13, 1, 1, WHITE);
 8002572:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	2301      	movs	r3, #1
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	2301      	movs	r3, #1
 800257e:	220d      	movs	r2, #13
 8002580:	21f2      	movs	r1, #242	@ 0xf2
 8002582:	f44f 7011 	mov.w	r0, #580	@ 0x244
 8002586:	f7fe fab1 	bl	8000aec <TFT_Draw_Circle>
			}
			else contador_Desligar++;
		}
	}
}
 800258a:	e008      	b.n	800259e <HAL_TIM_PeriodElapsedCallback+0x12a>
			else contador_Desligar++;
 800258c:	4b10      	ldr	r3, [pc, #64]	@ (80025d0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800258e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002592:	b29b      	uxth	r3, r3
 8002594:	3301      	adds	r3, #1
 8002596:	b29b      	uxth	r3, r3
 8002598:	b21a      	sxth	r2, r3
 800259a:	4b0d      	ldr	r3, [pc, #52]	@ (80025d0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800259c:	801a      	strh	r2, [r3, #0]
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40001400 	.word	0x40001400
 80025ac:	200000f7 	.word	0x200000f7
 80025b0:	200000f4 	.word	0x200000f4
 80025b4:	200000f5 	.word	0x200000f5
 80025b8:	200000f6 	.word	0x200000f6
 80025bc:	40014000 	.word	0x40014000
 80025c0:	20000248 	.word	0x20000248
 80025c4:	20000246 	.word	0x20000246
 80025c8:	2000024a 	.word	0x2000024a
 80025cc:	2000024c 	.word	0x2000024c
 80025d0:	20000244 	.word	0x20000244
 80025d4:	08006754 	.word	0x08006754
 80025d8:	080052f8 	.word	0x080052f8

080025dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e0:	b672      	cpsid	i
}
 80025e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <Error_Handler+0x8>

080025e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	4b10      	ldr	r3, [pc, #64]	@ (8002634 <HAL_MspInit+0x4c>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002634 <HAL_MspInit+0x4c>)
 80025f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002634 <HAL_MspInit+0x4c>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	603b      	str	r3, [r7, #0]
 800260e:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <HAL_MspInit+0x4c>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	4a08      	ldr	r2, [pc, #32]	@ (8002634 <HAL_MspInit+0x4c>)
 8002614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002618:	6413      	str	r3, [r2, #64]	@ 0x40
 800261a:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <HAL_MspInit+0x4c>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40023800 	.word	0x40023800

08002638 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1c      	ldr	r2, [pc, #112]	@ (80026b8 <HAL_TIM_Base_MspInit+0x80>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d116      	bne.n	8002678 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	4b1b      	ldr	r3, [pc, #108]	@ (80026bc <HAL_TIM_Base_MspInit+0x84>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	4a1a      	ldr	r2, [pc, #104]	@ (80026bc <HAL_TIM_Base_MspInit+0x84>)
 8002654:	f043 0320 	orr.w	r3, r3, #32
 8002658:	6413      	str	r3, [r2, #64]	@ 0x40
 800265a:	4b18      	ldr	r3, [pc, #96]	@ (80026bc <HAL_TIM_Base_MspInit+0x84>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	2037      	movs	r0, #55	@ 0x37
 800266c:	f000 faef 	bl	8002c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002670:	2037      	movs	r0, #55	@ 0x37
 8002672:	f000 fb08 	bl	8002c86 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM9_MspInit 1 */

    /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002676:	e01a      	b.n	80026ae <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM9)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a10      	ldr	r2, [pc, #64]	@ (80026c0 <HAL_TIM_Base_MspInit+0x88>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d115      	bne.n	80026ae <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	4b0d      	ldr	r3, [pc, #52]	@ (80026bc <HAL_TIM_Base_MspInit+0x84>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268a:	4a0c      	ldr	r2, [pc, #48]	@ (80026bc <HAL_TIM_Base_MspInit+0x84>)
 800268c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002690:	6453      	str	r3, [r2, #68]	@ 0x44
 8002692:	4b0a      	ldr	r3, [pc, #40]	@ (80026bc <HAL_TIM_Base_MspInit+0x84>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800269e:	2200      	movs	r2, #0
 80026a0:	2100      	movs	r1, #0
 80026a2:	2018      	movs	r0, #24
 80026a4:	f000 fad3 	bl	8002c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80026a8:	2018      	movs	r0, #24
 80026aa:	f000 faec 	bl	8002c86 <HAL_NVIC_EnableIRQ>
}
 80026ae:	bf00      	nop
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40001400 	.word	0x40001400
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40014000 	.word	0x40014000

080026c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	@ 0x28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a19      	ldr	r2, [pc, #100]	@ (8002748 <HAL_UART_MspInit+0x84>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d12c      	bne.n	8002740 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	4b18      	ldr	r3, [pc, #96]	@ (800274c <HAL_UART_MspInit+0x88>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	4a17      	ldr	r2, [pc, #92]	@ (800274c <HAL_UART_MspInit+0x88>)
 80026f0:	f043 0310 	orr.w	r3, r3, #16
 80026f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026f6:	4b15      	ldr	r3, [pc, #84]	@ (800274c <HAL_UART_MspInit+0x88>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	4b11      	ldr	r3, [pc, #68]	@ (800274c <HAL_UART_MspInit+0x88>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	4a10      	ldr	r2, [pc, #64]	@ (800274c <HAL_UART_MspInit+0x88>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6313      	str	r3, [r2, #48]	@ 0x30
 8002712:	4b0e      	ldr	r3, [pc, #56]	@ (800274c <HAL_UART_MspInit+0x88>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800271e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272c:	2303      	movs	r3, #3
 800272e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002730:	2307      	movs	r3, #7
 8002732:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4619      	mov	r1, r3
 800273a:	4805      	ldr	r0, [pc, #20]	@ (8002750 <HAL_UART_MspInit+0x8c>)
 800273c:	f000 fabe 	bl	8002cbc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002740:	bf00      	nop
 8002742:	3728      	adds	r7, #40	@ 0x28
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40011000 	.word	0x40011000
 800274c:	40023800 	.word	0x40023800
 8002750:	40020000 	.word	0x40020000

08002754 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002768:	4b1c      	ldr	r3, [pc, #112]	@ (80027dc <HAL_FSMC_MspInit+0x88>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d131      	bne.n	80027d4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8002770:	4b1a      	ldr	r3, [pc, #104]	@ (80027dc <HAL_FSMC_MspInit+0x88>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	4b19      	ldr	r3, [pc, #100]	@ (80027e0 <HAL_FSMC_MspInit+0x8c>)
 800277c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800277e:	4a18      	ldr	r2, [pc, #96]	@ (80027e0 <HAL_FSMC_MspInit+0x8c>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6393      	str	r3, [r2, #56]	@ 0x38
 8002786:	4b16      	ldr	r3, [pc, #88]	@ (80027e0 <HAL_FSMC_MspInit+0x8c>)
 8002788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002792:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002796:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002798:	2302      	movs	r3, #2
 800279a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a0:	2303      	movs	r3, #3
 80027a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80027a4:	230c      	movs	r3, #12
 80027a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027a8:	1d3b      	adds	r3, r7, #4
 80027aa:	4619      	mov	r1, r3
 80027ac:	480d      	ldr	r0, [pc, #52]	@ (80027e4 <HAL_FSMC_MspInit+0x90>)
 80027ae:	f000 fa85 	bl	8002cbc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80027b2:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 80027b6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c0:	2303      	movs	r3, #3
 80027c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80027c4:	230c      	movs	r3, #12
 80027c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	4619      	mov	r1, r3
 80027cc:	4806      	ldr	r0, [pc, #24]	@ (80027e8 <HAL_FSMC_MspInit+0x94>)
 80027ce:	f000 fa75 	bl	8002cbc <HAL_GPIO_Init>
 80027d2:	e000      	b.n	80027d6 <HAL_FSMC_MspInit+0x82>
    return;
 80027d4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000250 	.word	0x20000250
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40020c00 	.word	0x40020c00

080027ec <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80027f4:	f7ff ffae 	bl	8002754 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002804:	bf00      	nop
 8002806:	e7fd      	b.n	8002804 <NMI_Handler+0x4>

08002808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800280c:	bf00      	nop
 800280e:	e7fd      	b.n	800280c <HardFault_Handler+0x4>

08002810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <MemManage_Handler+0x4>

08002818 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800281c:	bf00      	nop
 800281e:	e7fd      	b.n	800281c <BusFault_Handler+0x4>

08002820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002824:	bf00      	nop
 8002826:	e7fd      	b.n	8002824 <UsageFault_Handler+0x4>

08002828 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002856:	f000 f8db 	bl	8002a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002864:	4802      	ldr	r0, [pc, #8]	@ (8002870 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002866:	f001 f925 	bl	8003ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000140 	.word	0x20000140

08002874 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002878:	4802      	ldr	r0, [pc, #8]	@ (8002884 <TIM7_IRQHandler+0x10>)
 800287a:	f001 f91b 	bl	8003ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200000f8 	.word	0x200000f8

08002888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002890:	4a14      	ldr	r2, [pc, #80]	@ (80028e4 <_sbrk+0x5c>)
 8002892:	4b15      	ldr	r3, [pc, #84]	@ (80028e8 <_sbrk+0x60>)
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800289c:	4b13      	ldr	r3, [pc, #76]	@ (80028ec <_sbrk+0x64>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028a4:	4b11      	ldr	r3, [pc, #68]	@ (80028ec <_sbrk+0x64>)
 80028a6:	4a12      	ldr	r2, [pc, #72]	@ (80028f0 <_sbrk+0x68>)
 80028a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028aa:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <_sbrk+0x64>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d207      	bcs.n	80028c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028b8:	f002 f86a 	bl	8004990 <__errno>
 80028bc:	4603      	mov	r3, r0
 80028be:	220c      	movs	r2, #12
 80028c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
 80028c6:	e009      	b.n	80028dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028c8:	4b08      	ldr	r3, [pc, #32]	@ (80028ec <_sbrk+0x64>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ce:	4b07      	ldr	r3, [pc, #28]	@ (80028ec <_sbrk+0x64>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	4a05      	ldr	r2, [pc, #20]	@ (80028ec <_sbrk+0x64>)
 80028d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028da:	68fb      	ldr	r3, [r7, #12]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20020000 	.word	0x20020000
 80028e8:	00000400 	.word	0x00000400
 80028ec:	20000254 	.word	0x20000254
 80028f0:	200003a8 	.word	0x200003a8

080028f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028f8:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <SystemInit+0x20>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fe:	4a05      	ldr	r2, [pc, #20]	@ (8002914 <SystemInit+0x20>)
 8002900:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002904:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002950 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800291c:	f7ff ffea 	bl	80028f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002920:	480c      	ldr	r0, [pc, #48]	@ (8002954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002922:	490d      	ldr	r1, [pc, #52]	@ (8002958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002924:	4a0d      	ldr	r2, [pc, #52]	@ (800295c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002928:	e002      	b.n	8002930 <LoopCopyDataInit>

0800292a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800292c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800292e:	3304      	adds	r3, #4

08002930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002934:	d3f9      	bcc.n	800292a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002936:	4a0a      	ldr	r2, [pc, #40]	@ (8002960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002938:	4c0a      	ldr	r4, [pc, #40]	@ (8002964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800293a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800293c:	e001      	b.n	8002942 <LoopFillZerobss>

0800293e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800293e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002940:	3204      	adds	r2, #4

08002942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002944:	d3fb      	bcc.n	800293e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002946:	f002 f829 	bl	800499c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800294a:	f7ff fa33 	bl	8001db4 <main>
  bx  lr    
 800294e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002950:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002958:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 800295c:	0800b828 	.word	0x0800b828
  ldr r2, =_sbss
 8002960:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8002964:	200003a4 	.word	0x200003a4

08002968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002968:	e7fe      	b.n	8002968 <ADC_IRQHandler>
	...

0800296c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002970:	4b0e      	ldr	r3, [pc, #56]	@ (80029ac <HAL_Init+0x40>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0d      	ldr	r2, [pc, #52]	@ (80029ac <HAL_Init+0x40>)
 8002976:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800297a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800297c:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <HAL_Init+0x40>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <HAL_Init+0x40>)
 8002982:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002988:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <HAL_Init+0x40>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a07      	ldr	r2, [pc, #28]	@ (80029ac <HAL_Init+0x40>)
 800298e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002994:	2003      	movs	r0, #3
 8002996:	f000 f94f 	bl	8002c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800299a:	200f      	movs	r0, #15
 800299c:	f000 f808 	bl	80029b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a0:	f7ff fe22 	bl	80025e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40023c00 	.word	0x40023c00

080029b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b8:	4b12      	ldr	r3, [pc, #72]	@ (8002a04 <HAL_InitTick+0x54>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b12      	ldr	r3, [pc, #72]	@ (8002a08 <HAL_InitTick+0x58>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	4619      	mov	r1, r3
 80029c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 f967 	bl	8002ca2 <HAL_SYSTICK_Config>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e00e      	b.n	80029fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b0f      	cmp	r3, #15
 80029e2:	d80a      	bhi.n	80029fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e4:	2200      	movs	r2, #0
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ec:	f000 f92f 	bl	8002c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f0:	4a06      	ldr	r2, [pc, #24]	@ (8002a0c <HAL_InitTick+0x5c>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e000      	b.n	80029fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000058 	.word	0x20000058
 8002a08:	20000060 	.word	0x20000060
 8002a0c:	2000005c 	.word	0x2000005c

08002a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a14:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <HAL_IncTick+0x20>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b06      	ldr	r3, [pc, #24]	@ (8002a34 <HAL_IncTick+0x24>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	4a04      	ldr	r2, [pc, #16]	@ (8002a34 <HAL_IncTick+0x24>)
 8002a22:	6013      	str	r3, [r2, #0]
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000060 	.word	0x20000060
 8002a34:	20000258 	.word	0x20000258

08002a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a3c:	4b03      	ldr	r3, [pc, #12]	@ (8002a4c <HAL_GetTick+0x14>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000258 	.word	0x20000258

08002a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a58:	f7ff ffee 	bl	8002a38 <HAL_GetTick>
 8002a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d005      	beq.n	8002a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a94 <HAL_Delay+0x44>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4413      	add	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a76:	bf00      	nop
 8002a78:	f7ff ffde 	bl	8002a38 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d8f7      	bhi.n	8002a78 <HAL_Delay+0x28>
  {
  }
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000060 	.word	0x20000060

08002a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <__NVIC_SetPriorityGrouping+0x44>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aca:	4a04      	ldr	r2, [pc, #16]	@ (8002adc <__NVIC_SetPriorityGrouping+0x44>)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	60d3      	str	r3, [r2, #12]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae4:	4b04      	ldr	r3, [pc, #16]	@ (8002af8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	f003 0307 	and.w	r3, r3, #7
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	db0b      	blt.n	8002b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	f003 021f 	and.w	r2, r3, #31
 8002b14:	4907      	ldr	r1, [pc, #28]	@ (8002b34 <__NVIC_EnableIRQ+0x38>)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e000e100 	.word	0xe000e100

08002b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	6039      	str	r1, [r7, #0]
 8002b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	db0a      	blt.n	8002b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	490c      	ldr	r1, [pc, #48]	@ (8002b84 <__NVIC_SetPriority+0x4c>)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	0112      	lsls	r2, r2, #4
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b60:	e00a      	b.n	8002b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4908      	ldr	r1, [pc, #32]	@ (8002b88 <__NVIC_SetPriority+0x50>)
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	3b04      	subs	r3, #4
 8002b70:	0112      	lsls	r2, r2, #4
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	440b      	add	r3, r1
 8002b76:	761a      	strb	r2, [r3, #24]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000e100 	.word	0xe000e100
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b089      	sub	sp, #36	@ 0x24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f1c3 0307 	rsb	r3, r3, #7
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	bf28      	it	cs
 8002baa:	2304      	movcs	r3, #4
 8002bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	2b06      	cmp	r3, #6
 8002bb4:	d902      	bls.n	8002bbc <NVIC_EncodePriority+0x30>
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3b03      	subs	r3, #3
 8002bba:	e000      	b.n	8002bbe <NVIC_EncodePriority+0x32>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	401a      	ands	r2, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	fa01 f303 	lsl.w	r3, r1, r3
 8002bde:	43d9      	mvns	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be4:	4313      	orrs	r3, r2
         );
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3724      	adds	r7, #36	@ 0x24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c04:	d301      	bcc.n	8002c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c06:	2301      	movs	r3, #1
 8002c08:	e00f      	b.n	8002c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c34 <SysTick_Config+0x40>)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c12:	210f      	movs	r1, #15
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295
 8002c18:	f7ff ff8e 	bl	8002b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c1c:	4b05      	ldr	r3, [pc, #20]	@ (8002c34 <SysTick_Config+0x40>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c22:	4b04      	ldr	r3, [pc, #16]	@ (8002c34 <SysTick_Config+0x40>)
 8002c24:	2207      	movs	r2, #7
 8002c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	e000e010 	.word	0xe000e010

08002c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff ff29 	bl	8002a98 <__NVIC_SetPriorityGrouping>
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b086      	sub	sp, #24
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	4603      	mov	r3, r0
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c60:	f7ff ff3e 	bl	8002ae0 <__NVIC_GetPriorityGrouping>
 8002c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	6978      	ldr	r0, [r7, #20]
 8002c6c:	f7ff ff8e 	bl	8002b8c <NVIC_EncodePriority>
 8002c70:	4602      	mov	r2, r0
 8002c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c76:	4611      	mov	r1, r2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff5d 	bl	8002b38 <__NVIC_SetPriority>
}
 8002c7e:	bf00      	nop
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff31 	bl	8002afc <__NVIC_EnableIRQ>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff ffa2 	bl	8002bf4 <SysTick_Config>
 8002cb0:	4603      	mov	r3, r0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b089      	sub	sp, #36	@ 0x24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	e16b      	b.n	8002fb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cd8:	2201      	movs	r2, #1
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	f040 815a 	bne.w	8002faa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d005      	beq.n	8002d0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d130      	bne.n	8002d70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	2203      	movs	r2, #3
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d44:	2201      	movs	r2, #1
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f003 0201 	and.w	r2, r3, #1
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d017      	beq.n	8002dac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	2203      	movs	r2, #3
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d123      	bne.n	8002e00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	08da      	lsrs	r2, r3, #3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3208      	adds	r2, #8
 8002dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	220f      	movs	r2, #15
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	08da      	lsrs	r2, r3, #3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3208      	adds	r2, #8
 8002dfa:	69b9      	ldr	r1, [r7, #24]
 8002dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 0203 	and.w	r2, r3, #3
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80b4 	beq.w	8002faa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	4b60      	ldr	r3, [pc, #384]	@ (8002fc8 <HAL_GPIO_Init+0x30c>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4a:	4a5f      	ldr	r2, [pc, #380]	@ (8002fc8 <HAL_GPIO_Init+0x30c>)
 8002e4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e52:	4b5d      	ldr	r3, [pc, #372]	@ (8002fc8 <HAL_GPIO_Init+0x30c>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e5e:	4a5b      	ldr	r2, [pc, #364]	@ (8002fcc <HAL_GPIO_Init+0x310>)
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	089b      	lsrs	r3, r3, #2
 8002e64:	3302      	adds	r3, #2
 8002e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	220f      	movs	r2, #15
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a52      	ldr	r2, [pc, #328]	@ (8002fd0 <HAL_GPIO_Init+0x314>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d02b      	beq.n	8002ee2 <HAL_GPIO_Init+0x226>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a51      	ldr	r2, [pc, #324]	@ (8002fd4 <HAL_GPIO_Init+0x318>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d025      	beq.n	8002ede <HAL_GPIO_Init+0x222>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a50      	ldr	r2, [pc, #320]	@ (8002fd8 <HAL_GPIO_Init+0x31c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d01f      	beq.n	8002eda <HAL_GPIO_Init+0x21e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a4f      	ldr	r2, [pc, #316]	@ (8002fdc <HAL_GPIO_Init+0x320>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d019      	beq.n	8002ed6 <HAL_GPIO_Init+0x21a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a4e      	ldr	r2, [pc, #312]	@ (8002fe0 <HAL_GPIO_Init+0x324>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_GPIO_Init+0x216>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a4d      	ldr	r2, [pc, #308]	@ (8002fe4 <HAL_GPIO_Init+0x328>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00d      	beq.n	8002ece <HAL_GPIO_Init+0x212>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a4c      	ldr	r2, [pc, #304]	@ (8002fe8 <HAL_GPIO_Init+0x32c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d007      	beq.n	8002eca <HAL_GPIO_Init+0x20e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a4b      	ldr	r2, [pc, #300]	@ (8002fec <HAL_GPIO_Init+0x330>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d101      	bne.n	8002ec6 <HAL_GPIO_Init+0x20a>
 8002ec2:	2307      	movs	r3, #7
 8002ec4:	e00e      	b.n	8002ee4 <HAL_GPIO_Init+0x228>
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	e00c      	b.n	8002ee4 <HAL_GPIO_Init+0x228>
 8002eca:	2306      	movs	r3, #6
 8002ecc:	e00a      	b.n	8002ee4 <HAL_GPIO_Init+0x228>
 8002ece:	2305      	movs	r3, #5
 8002ed0:	e008      	b.n	8002ee4 <HAL_GPIO_Init+0x228>
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	e006      	b.n	8002ee4 <HAL_GPIO_Init+0x228>
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e004      	b.n	8002ee4 <HAL_GPIO_Init+0x228>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e002      	b.n	8002ee4 <HAL_GPIO_Init+0x228>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_GPIO_Init+0x228>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	f002 0203 	and.w	r2, r2, #3
 8002eea:	0092      	lsls	r2, r2, #2
 8002eec:	4093      	lsls	r3, r2
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ef4:	4935      	ldr	r1, [pc, #212]	@ (8002fcc <HAL_GPIO_Init+0x310>)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	089b      	lsrs	r3, r3, #2
 8002efa:	3302      	adds	r3, #2
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f02:	4b3b      	ldr	r3, [pc, #236]	@ (8002ff0 <HAL_GPIO_Init+0x334>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f26:	4a32      	ldr	r2, [pc, #200]	@ (8002ff0 <HAL_GPIO_Init+0x334>)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f2c:	4b30      	ldr	r3, [pc, #192]	@ (8002ff0 <HAL_GPIO_Init+0x334>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f50:	4a27      	ldr	r2, [pc, #156]	@ (8002ff0 <HAL_GPIO_Init+0x334>)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f56:	4b26      	ldr	r3, [pc, #152]	@ (8002ff0 <HAL_GPIO_Init+0x334>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff0 <HAL_GPIO_Init+0x334>)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f80:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff0 <HAL_GPIO_Init+0x334>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fa4:	4a12      	ldr	r2, [pc, #72]	@ (8002ff0 <HAL_GPIO_Init+0x334>)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3301      	adds	r3, #1
 8002fae:	61fb      	str	r3, [r7, #28]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	2b0f      	cmp	r3, #15
 8002fb4:	f67f ae90 	bls.w	8002cd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	3724      	adds	r7, #36	@ 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40013800 	.word	0x40013800
 8002fd0:	40020000 	.word	0x40020000
 8002fd4:	40020400 	.word	0x40020400
 8002fd8:	40020800 	.word	0x40020800
 8002fdc:	40020c00 	.word	0x40020c00
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40021400 	.word	0x40021400
 8002fe8:	40021800 	.word	0x40021800
 8002fec:	40021c00 	.word	0x40021c00
 8002ff0:	40013c00 	.word	0x40013c00

08002ff4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e267      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d075      	beq.n	80030fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003012:	4b88      	ldr	r3, [pc, #544]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b04      	cmp	r3, #4
 800301c:	d00c      	beq.n	8003038 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301e:	4b85      	ldr	r3, [pc, #532]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003026:	2b08      	cmp	r3, #8
 8003028:	d112      	bne.n	8003050 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302a:	4b82      	ldr	r3, [pc, #520]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003032:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003036:	d10b      	bne.n	8003050 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	4b7e      	ldr	r3, [pc, #504]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d05b      	beq.n	80030fc <HAL_RCC_OscConfig+0x108>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d157      	bne.n	80030fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e242      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003058:	d106      	bne.n	8003068 <HAL_RCC_OscConfig+0x74>
 800305a:	4b76      	ldr	r3, [pc, #472]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a75      	ldr	r2, [pc, #468]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e01d      	b.n	80030a4 <HAL_RCC_OscConfig+0xb0>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003070:	d10c      	bne.n	800308c <HAL_RCC_OscConfig+0x98>
 8003072:	4b70      	ldr	r3, [pc, #448]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a6f      	ldr	r2, [pc, #444]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	4b6d      	ldr	r3, [pc, #436]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a6c      	ldr	r2, [pc, #432]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e00b      	b.n	80030a4 <HAL_RCC_OscConfig+0xb0>
 800308c:	4b69      	ldr	r3, [pc, #420]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a68      	ldr	r2, [pc, #416]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b66      	ldr	r3, [pc, #408]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a65      	ldr	r2, [pc, #404]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 800309e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d013      	beq.n	80030d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7ff fcc4 	bl	8002a38 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b4:	f7ff fcc0 	bl	8002a38 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	@ 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e207      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0xc0>
 80030d2:	e014      	b.n	80030fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7ff fcb0 	bl	8002a38 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030dc:	f7ff fcac 	bl	8002a38 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	@ 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e1f3      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	4b51      	ldr	r3, [pc, #324]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0xe8>
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d063      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800310a:	4b4a      	ldr	r3, [pc, #296]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003116:	4b47      	ldr	r3, [pc, #284]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800311e:	2b08      	cmp	r3, #8
 8003120:	d11c      	bne.n	800315c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003122:	4b44      	ldr	r3, [pc, #272]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d116      	bne.n	800315c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	4b41      	ldr	r3, [pc, #260]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_RCC_OscConfig+0x152>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e1c7      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	4b3b      	ldr	r3, [pc, #236]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4937      	ldr	r1, [pc, #220]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	e03a      	b.n	80031d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d020      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003164:	4b34      	ldr	r3, [pc, #208]	@ (8003238 <HAL_RCC_OscConfig+0x244>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7ff fc65 	bl	8002a38 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003172:	f7ff fc61 	bl	8002a38 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e1a8      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	4b2b      	ldr	r3, [pc, #172]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003190:	4b28      	ldr	r3, [pc, #160]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4925      	ldr	r1, [pc, #148]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]
 80031a4:	e015      	b.n	80031d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a6:	4b24      	ldr	r3, [pc, #144]	@ (8003238 <HAL_RCC_OscConfig+0x244>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7ff fc44 	bl	8002a38 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b4:	f7ff fc40 	bl	8002a38 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e187      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d036      	beq.n	800324c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d016      	beq.n	8003214 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e6:	4b15      	ldr	r3, [pc, #84]	@ (800323c <HAL_RCC_OscConfig+0x248>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ec:	f7ff fc24 	bl	8002a38 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f4:	f7ff fc20 	bl	8002a38 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e167      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	4b0b      	ldr	r3, [pc, #44]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x200>
 8003212:	e01b      	b.n	800324c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003214:	4b09      	ldr	r3, [pc, #36]	@ (800323c <HAL_RCC_OscConfig+0x248>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321a:	f7ff fc0d 	bl	8002a38 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	e00e      	b.n	8003240 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003222:	f7ff fc09 	bl	8002a38 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d907      	bls.n	8003240 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e150      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
 8003234:	40023800 	.word	0x40023800
 8003238:	42470000 	.word	0x42470000
 800323c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003240:	4b88      	ldr	r3, [pc, #544]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1ea      	bne.n	8003222 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8097 	beq.w	8003388 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325a:	2300      	movs	r3, #0
 800325c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325e:	4b81      	ldr	r3, [pc, #516]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10f      	bne.n	800328a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	4b7d      	ldr	r3, [pc, #500]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	4a7c      	ldr	r2, [pc, #496]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003278:	6413      	str	r3, [r2, #64]	@ 0x40
 800327a:	4b7a      	ldr	r3, [pc, #488]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	4b77      	ldr	r3, [pc, #476]	@ (8003468 <HAL_RCC_OscConfig+0x474>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d118      	bne.n	80032c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003296:	4b74      	ldr	r3, [pc, #464]	@ (8003468 <HAL_RCC_OscConfig+0x474>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a73      	ldr	r2, [pc, #460]	@ (8003468 <HAL_RCC_OscConfig+0x474>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a2:	f7ff fbc9 	bl	8002a38 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032aa:	f7ff fbc5 	bl	8002a38 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e10c      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003468 <HAL_RCC_OscConfig+0x474>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d106      	bne.n	80032de <HAL_RCC_OscConfig+0x2ea>
 80032d0:	4b64      	ldr	r3, [pc, #400]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 80032d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d4:	4a63      	ldr	r2, [pc, #396]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	6713      	str	r3, [r2, #112]	@ 0x70
 80032dc:	e01c      	b.n	8003318 <HAL_RCC_OscConfig+0x324>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0x30c>
 80032e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ea:	4a5e      	ldr	r2, [pc, #376]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032fe:	e00b      	b.n	8003318 <HAL_RCC_OscConfig+0x324>
 8003300:	4b58      	ldr	r3, [pc, #352]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003304:	4a57      	ldr	r2, [pc, #348]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003306:	f023 0301 	bic.w	r3, r3, #1
 800330a:	6713      	str	r3, [r2, #112]	@ 0x70
 800330c:	4b55      	ldr	r3, [pc, #340]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003310:	4a54      	ldr	r2, [pc, #336]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003312:	f023 0304 	bic.w	r3, r3, #4
 8003316:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d015      	beq.n	800334c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7ff fb8a 	bl	8002a38 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003326:	e00a      	b.n	800333e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003328:	f7ff fb86 	bl	8002a38 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e0cb      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333e:	4b49      	ldr	r3, [pc, #292]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0ee      	beq.n	8003328 <HAL_RCC_OscConfig+0x334>
 800334a:	e014      	b.n	8003376 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334c:	f7ff fb74 	bl	8002a38 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003352:	e00a      	b.n	800336a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003354:	f7ff fb70 	bl	8002a38 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e0b5      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336a:	4b3e      	ldr	r3, [pc, #248]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1ee      	bne.n	8003354 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003376:	7dfb      	ldrb	r3, [r7, #23]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d105      	bne.n	8003388 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800337c:	4b39      	ldr	r3, [pc, #228]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	4a38      	ldr	r2, [pc, #224]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003386:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80a1 	beq.w	80034d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003392:	4b34      	ldr	r3, [pc, #208]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b08      	cmp	r3, #8
 800339c:	d05c      	beq.n	8003458 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d141      	bne.n	800342a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a6:	4b31      	ldr	r3, [pc, #196]	@ (800346c <HAL_RCC_OscConfig+0x478>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7ff fb44 	bl	8002a38 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b4:	f7ff fb40 	bl	8002a38 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e087      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	4b27      	ldr	r3, [pc, #156]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69da      	ldr	r2, [r3, #28]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	3b01      	subs	r3, #1
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	491b      	ldr	r1, [pc, #108]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033fc:	4b1b      	ldr	r3, [pc, #108]	@ (800346c <HAL_RCC_OscConfig+0x478>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7ff fb19 	bl	8002a38 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340a:	f7ff fb15 	bl	8002a38 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e05c      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341c:	4b11      	ldr	r3, [pc, #68]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x416>
 8003428:	e054      	b.n	80034d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342a:	4b10      	ldr	r3, [pc, #64]	@ (800346c <HAL_RCC_OscConfig+0x478>)
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7ff fb02 	bl	8002a38 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003438:	f7ff fafe 	bl	8002a38 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e045      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344a:	4b06      	ldr	r3, [pc, #24]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0x444>
 8003456:	e03d      	b.n	80034d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d107      	bne.n	8003470 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e038      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
 8003464:	40023800 	.word	0x40023800
 8003468:	40007000 	.word	0x40007000
 800346c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003470:	4b1b      	ldr	r3, [pc, #108]	@ (80034e0 <HAL_RCC_OscConfig+0x4ec>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d028      	beq.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003488:	429a      	cmp	r2, r3
 800348a:	d121      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003496:	429a      	cmp	r2, r3
 8003498:	d11a      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034a0:	4013      	ands	r3, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d111      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b6:	085b      	lsrs	r3, r3, #1
 80034b8:	3b01      	subs	r3, #1
 80034ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d107      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800

080034e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0cc      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034f8:	4b68      	ldr	r3, [pc, #416]	@ (800369c <HAL_RCC_ClockConfig+0x1b8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d90c      	bls.n	8003520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4b65      	ldr	r3, [pc, #404]	@ (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800350e:	4b63      	ldr	r3, [pc, #396]	@ (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0b8      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d020      	beq.n	800356e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003538:	4b59      	ldr	r3, [pc, #356]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4a58      	ldr	r2, [pc, #352]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003542:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003550:	4b53      	ldr	r3, [pc, #332]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a52      	ldr	r2, [pc, #328]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800355a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800355c:	4b50      	ldr	r3, [pc, #320]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	494d      	ldr	r1, [pc, #308]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d044      	beq.n	8003604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003582:	4b47      	ldr	r3, [pc, #284]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d119      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e07f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d003      	beq.n	80035a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d107      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a2:	4b3f      	ldr	r3, [pc, #252]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d109      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e06f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b2:	4b3b      	ldr	r3, [pc, #236]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e067      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c2:	4b37      	ldr	r3, [pc, #220]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f023 0203 	bic.w	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	4934      	ldr	r1, [pc, #208]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d4:	f7ff fa30 	bl	8002a38 <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035da:	e00a      	b.n	80035f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035dc:	f7ff fa2c 	bl	8002a38 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e04f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	4b2b      	ldr	r3, [pc, #172]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 020c 	and.w	r2, r3, #12
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	429a      	cmp	r2, r3
 8003602:	d1eb      	bne.n	80035dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003604:	4b25      	ldr	r3, [pc, #148]	@ (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d20c      	bcs.n	800362c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b22      	ldr	r3, [pc, #136]	@ (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361a:	4b20      	ldr	r3, [pc, #128]	@ (800369c <HAL_RCC_ClockConfig+0x1b8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e032      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003638:	4b19      	ldr	r3, [pc, #100]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4916      	ldr	r1, [pc, #88]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003656:	4b12      	ldr	r3, [pc, #72]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	490e      	ldr	r1, [pc, #56]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	4313      	orrs	r3, r2
 8003668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800366a:	f000 f821 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 800366e:	4602      	mov	r2, r0
 8003670:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	091b      	lsrs	r3, r3, #4
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	490a      	ldr	r1, [pc, #40]	@ (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 800367c:	5ccb      	ldrb	r3, [r1, r3]
 800367e:	fa22 f303 	lsr.w	r3, r2, r3
 8003682:	4a09      	ldr	r2, [pc, #36]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003686:	4b09      	ldr	r3, [pc, #36]	@ (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff f990 	bl	80029b0 <HAL_InitTick>

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40023c00 	.word	0x40023c00
 80036a0:	40023800 	.word	0x40023800
 80036a4:	0800b7cc 	.word	0x0800b7cc
 80036a8:	20000058 	.word	0x20000058
 80036ac:	2000005c 	.word	0x2000005c

080036b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b4:	b090      	sub	sp, #64	@ 0x40
 80036b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c8:	4b59      	ldr	r3, [pc, #356]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x180>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d00d      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x40>
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	f200 80a1 	bhi.w	800381c <HAL_RCC_GetSysClockFreq+0x16c>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0x34>
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d003      	beq.n	80036ea <HAL_RCC_GetSysClockFreq+0x3a>
 80036e2:	e09b      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036e4:	4b53      	ldr	r3, [pc, #332]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x184>)
 80036e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036e8:	e09b      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ea:	4b53      	ldr	r3, [pc, #332]	@ (8003838 <HAL_RCC_GetSysClockFreq+0x188>)
 80036ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036ee:	e098      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f0:	4b4f      	ldr	r3, [pc, #316]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x180>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036fa:	4b4d      	ldr	r3, [pc, #308]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x180>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d028      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003706:	4b4a      	ldr	r3, [pc, #296]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x180>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	099b      	lsrs	r3, r3, #6
 800370c:	2200      	movs	r2, #0
 800370e:	623b      	str	r3, [r7, #32]
 8003710:	627a      	str	r2, [r7, #36]	@ 0x24
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003718:	2100      	movs	r1, #0
 800371a:	4b47      	ldr	r3, [pc, #284]	@ (8003838 <HAL_RCC_GetSysClockFreq+0x188>)
 800371c:	fb03 f201 	mul.w	r2, r3, r1
 8003720:	2300      	movs	r3, #0
 8003722:	fb00 f303 	mul.w	r3, r0, r3
 8003726:	4413      	add	r3, r2
 8003728:	4a43      	ldr	r2, [pc, #268]	@ (8003838 <HAL_RCC_GetSysClockFreq+0x188>)
 800372a:	fba0 1202 	umull	r1, r2, r0, r2
 800372e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003730:	460a      	mov	r2, r1
 8003732:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003734:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003736:	4413      	add	r3, r2
 8003738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800373a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800373c:	2200      	movs	r2, #0
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	61fa      	str	r2, [r7, #28]
 8003742:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003746:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800374a:	f7fc fd99 	bl	8000280 <__aeabi_uldivmod>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4613      	mov	r3, r2
 8003754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003756:	e053      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003758:	4b35      	ldr	r3, [pc, #212]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x180>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	099b      	lsrs	r3, r3, #6
 800375e:	2200      	movs	r2, #0
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	617a      	str	r2, [r7, #20]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800376a:	f04f 0b00 	mov.w	fp, #0
 800376e:	4652      	mov	r2, sl
 8003770:	465b      	mov	r3, fp
 8003772:	f04f 0000 	mov.w	r0, #0
 8003776:	f04f 0100 	mov.w	r1, #0
 800377a:	0159      	lsls	r1, r3, #5
 800377c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003780:	0150      	lsls	r0, r2, #5
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	ebb2 080a 	subs.w	r8, r2, sl
 800378a:	eb63 090b 	sbc.w	r9, r3, fp
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800379a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800379e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037a2:	ebb2 0408 	subs.w	r4, r2, r8
 80037a6:	eb63 0509 	sbc.w	r5, r3, r9
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	00eb      	lsls	r3, r5, #3
 80037b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037b8:	00e2      	lsls	r2, r4, #3
 80037ba:	4614      	mov	r4, r2
 80037bc:	461d      	mov	r5, r3
 80037be:	eb14 030a 	adds.w	r3, r4, sl
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	eb45 030b 	adc.w	r3, r5, fp
 80037c8:	607b      	str	r3, [r7, #4]
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037d6:	4629      	mov	r1, r5
 80037d8:	028b      	lsls	r3, r1, #10
 80037da:	4621      	mov	r1, r4
 80037dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037e0:	4621      	mov	r1, r4
 80037e2:	028a      	lsls	r2, r1, #10
 80037e4:	4610      	mov	r0, r2
 80037e6:	4619      	mov	r1, r3
 80037e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ea:	2200      	movs	r2, #0
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	60fa      	str	r2, [r7, #12]
 80037f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037f4:	f7fc fd44 	bl	8000280 <__aeabi_uldivmod>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4613      	mov	r3, r2
 80037fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003800:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x180>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	3301      	adds	r3, #1
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003810:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800381a:	e002      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800381c:	4b05      	ldr	r3, [pc, #20]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x184>)
 800381e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003824:	4618      	mov	r0, r3
 8003826:	3740      	adds	r7, #64	@ 0x40
 8003828:	46bd      	mov	sp, r7
 800382a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800
 8003834:	00f42400 	.word	0x00f42400
 8003838:	017d7840 	.word	0x017d7840

0800383c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003840:	4b03      	ldr	r3, [pc, #12]	@ (8003850 <HAL_RCC_GetHCLKFreq+0x14>)
 8003842:	681b      	ldr	r3, [r3, #0]
}
 8003844:	4618      	mov	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000058 	.word	0x20000058

08003854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003858:	f7ff fff0 	bl	800383c <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b05      	ldr	r3, [pc, #20]	@ (8003874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	0a9b      	lsrs	r3, r3, #10
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4903      	ldr	r1, [pc, #12]	@ (8003878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003870:	4618      	mov	r0, r3
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40023800 	.word	0x40023800
 8003878:	0800b7dc 	.word	0x0800b7dc

0800387c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003880:	f7ff ffdc 	bl	800383c <HAL_RCC_GetHCLKFreq>
 8003884:	4602      	mov	r2, r0
 8003886:	4b05      	ldr	r3, [pc, #20]	@ (800389c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	0b5b      	lsrs	r3, r3, #13
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	4903      	ldr	r1, [pc, #12]	@ (80038a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003892:	5ccb      	ldrb	r3, [r1, r3]
 8003894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003898:	4618      	mov	r0, r3
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40023800 	.word	0x40023800
 80038a0:	0800b7dc 	.word	0x0800b7dc

080038a4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e038      	b.n	800392c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f7fe ff8c 	bl	80027ec <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3308      	adds	r3, #8
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f000 ff5c 	bl	800479c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	461a      	mov	r2, r3
 80038ee:	68b9      	ldr	r1, [r7, #8]
 80038f0:	f000 ffbe 	bl	8004870 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6858      	ldr	r0, [r3, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	f000 ffe3 	bl	80048cc <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	6892      	ldr	r2, [r2, #8]
 800390e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	6892      	ldr	r2, [r2, #8]
 800391a:	f041 0101 	orr.w	r1, r1, #1
 800391e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e041      	b.n	80039ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fe fe6c 	bl	8002638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	4619      	mov	r1, r3
 8003972:	4610      	mov	r0, r2
 8003974:	f000 fa7e 	bl	8003e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d001      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e04e      	b.n	8003a8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a23      	ldr	r2, [pc, #140]	@ (8003a98 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d022      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a16:	d01d      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8003a9c <HAL_TIM_Base_Start_IT+0xc8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d018      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d013      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00e      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003aa8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d009      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a19      	ldr	r2, [pc, #100]	@ (8003aac <HAL_TIM_Base_Start_IT+0xd8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d004      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a18      	ldr	r2, [pc, #96]	@ (8003ab0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d111      	bne.n	8003a78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b06      	cmp	r3, #6
 8003a64:	d010      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a76:	e007      	b.n	8003a88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40010000 	.word	0x40010000
 8003a9c:	40000400 	.word	0x40000400
 8003aa0:	40000800 	.word	0x40000800
 8003aa4:	40000c00 	.word	0x40000c00
 8003aa8:	40010400 	.word	0x40010400
 8003aac:	40014000 	.word	0x40014000
 8003ab0:	40001800 	.word	0x40001800

08003ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d020      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01b      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0202 	mvn.w	r2, #2
 8003ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f999 	bl	8003e36 <HAL_TIM_IC_CaptureCallback>
 8003b04:	e005      	b.n	8003b12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f98b 	bl	8003e22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f99c 	bl	8003e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d020      	beq.n	8003b64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01b      	beq.n	8003b64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0204 	mvn.w	r2, #4
 8003b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f973 	bl	8003e36 <HAL_TIM_IC_CaptureCallback>
 8003b50:	e005      	b.n	8003b5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f965 	bl	8003e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f976 	bl	8003e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d020      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01b      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0208 	mvn.w	r2, #8
 8003b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2204      	movs	r2, #4
 8003b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f94d 	bl	8003e36 <HAL_TIM_IC_CaptureCallback>
 8003b9c:	e005      	b.n	8003baa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f93f 	bl	8003e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f950 	bl	8003e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d020      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01b      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0210 	mvn.w	r2, #16
 8003bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f927 	bl	8003e36 <HAL_TIM_IC_CaptureCallback>
 8003be8:	e005      	b.n	8003bf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f919 	bl	8003e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f92a 	bl	8003e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00c      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0201 	mvn.w	r2, #1
 8003c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fe fc2a 	bl	8002474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00c      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fade 	bl	8004200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00c      	beq.n	8003c68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f8fb 	bl	8003e5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00c      	beq.n	8003c8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0220 	mvn.w	r2, #32
 8003c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fab0 	bl	80041ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_TIM_ConfigClockSource+0x1c>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e0b4      	b.n	8003e1a <HAL_TIM_ConfigClockSource+0x186>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ce8:	d03e      	beq.n	8003d68 <HAL_TIM_ConfigClockSource+0xd4>
 8003cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cee:	f200 8087 	bhi.w	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cf6:	f000 8086 	beq.w	8003e06 <HAL_TIM_ConfigClockSource+0x172>
 8003cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cfe:	d87f      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d00:	2b70      	cmp	r3, #112	@ 0x70
 8003d02:	d01a      	beq.n	8003d3a <HAL_TIM_ConfigClockSource+0xa6>
 8003d04:	2b70      	cmp	r3, #112	@ 0x70
 8003d06:	d87b      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d08:	2b60      	cmp	r3, #96	@ 0x60
 8003d0a:	d050      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0x11a>
 8003d0c:	2b60      	cmp	r3, #96	@ 0x60
 8003d0e:	d877      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d10:	2b50      	cmp	r3, #80	@ 0x50
 8003d12:	d03c      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0xfa>
 8003d14:	2b50      	cmp	r3, #80	@ 0x50
 8003d16:	d873      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d18:	2b40      	cmp	r3, #64	@ 0x40
 8003d1a:	d058      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0x13a>
 8003d1c:	2b40      	cmp	r3, #64	@ 0x40
 8003d1e:	d86f      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d20:	2b30      	cmp	r3, #48	@ 0x30
 8003d22:	d064      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x15a>
 8003d24:	2b30      	cmp	r3, #48	@ 0x30
 8003d26:	d86b      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d060      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x15a>
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d867      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d05c      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x15a>
 8003d34:	2b10      	cmp	r3, #16
 8003d36:	d05a      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x15a>
 8003d38:	e062      	b.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d4a:	f000 f9b3 	bl	80040b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	609a      	str	r2, [r3, #8]
      break;
 8003d66:	e04f      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d78:	f000 f99c 	bl	80040b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d8a:	609a      	str	r2, [r3, #8]
      break;
 8003d8c:	e03c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f000 f910 	bl	8003fc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2150      	movs	r1, #80	@ 0x50
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f969 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 8003dac:	e02c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f000 f92f 	bl	800401e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2160      	movs	r1, #96	@ 0x60
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 f959 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 8003dcc:	e01c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f000 f8f0 	bl	8003fc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2140      	movs	r1, #64	@ 0x40
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f949 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 8003dec:	e00c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4619      	mov	r1, r3
 8003df8:	4610      	mov	r0, r2
 8003dfa:	f000 f940 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 8003dfe:	e003      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
      break;
 8003e04:	e000      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a43      	ldr	r2, [pc, #268]	@ (8003f94 <TIM_Base_SetConfig+0x120>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d013      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e92:	d00f      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a40      	ldr	r2, [pc, #256]	@ (8003f98 <TIM_Base_SetConfig+0x124>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00b      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f9c <TIM_Base_SetConfig+0x128>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d007      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a3e      	ldr	r2, [pc, #248]	@ (8003fa0 <TIM_Base_SetConfig+0x12c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3d      	ldr	r2, [pc, #244]	@ (8003fa4 <TIM_Base_SetConfig+0x130>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d108      	bne.n	8003ec6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a32      	ldr	r2, [pc, #200]	@ (8003f94 <TIM_Base_SetConfig+0x120>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d02b      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed4:	d027      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2f      	ldr	r2, [pc, #188]	@ (8003f98 <TIM_Base_SetConfig+0x124>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d023      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f9c <TIM_Base_SetConfig+0x128>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01f      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8003fa0 <TIM_Base_SetConfig+0x12c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01b      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa4 <TIM_Base_SetConfig+0x130>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d017      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8003fa8 <TIM_Base_SetConfig+0x134>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2a      	ldr	r2, [pc, #168]	@ (8003fac <TIM_Base_SetConfig+0x138>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00f      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a29      	ldr	r2, [pc, #164]	@ (8003fb0 <TIM_Base_SetConfig+0x13c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00b      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a28      	ldr	r2, [pc, #160]	@ (8003fb4 <TIM_Base_SetConfig+0x140>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d007      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a27      	ldr	r2, [pc, #156]	@ (8003fb8 <TIM_Base_SetConfig+0x144>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a26      	ldr	r2, [pc, #152]	@ (8003fbc <TIM_Base_SetConfig+0x148>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d108      	bne.n	8003f38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a0e      	ldr	r2, [pc, #56]	@ (8003f94 <TIM_Base_SetConfig+0x120>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d003      	beq.n	8003f66 <TIM_Base_SetConfig+0xf2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a10      	ldr	r2, [pc, #64]	@ (8003fa4 <TIM_Base_SetConfig+0x130>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d103      	bne.n	8003f6e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f043 0204 	orr.w	r2, r3, #4
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	601a      	str	r2, [r3, #0]
}
 8003f86:	bf00      	nop
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40010000 	.word	0x40010000
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	40000800 	.word	0x40000800
 8003fa0:	40000c00 	.word	0x40000c00
 8003fa4:	40010400 	.word	0x40010400
 8003fa8:	40014000 	.word	0x40014000
 8003fac:	40014400 	.word	0x40014400
 8003fb0:	40014800 	.word	0x40014800
 8003fb4:	40001800 	.word	0x40001800
 8003fb8:	40001c00 	.word	0x40001c00
 8003fbc:	40002000 	.word	0x40002000

08003fc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f023 0201 	bic.w	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f023 030a 	bic.w	r3, r3, #10
 8003ffc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	621a      	str	r2, [r3, #32]
}
 8004012:	bf00      	nop
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800401e:	b480      	push	{r7}
 8004020:	b087      	sub	sp, #28
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	f023 0210 	bic.w	r2, r3, #16
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004048:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	031b      	lsls	r3, r3, #12
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800405a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800407e:	b480      	push	{r7}
 8004080:	b085      	sub	sp, #20
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004094:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	f043 0307 	orr.w	r3, r3, #7
 80040a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	609a      	str	r2, [r3, #8]
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	021a      	lsls	r2, r3, #8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4313      	orrs	r3, r2
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	609a      	str	r2, [r3, #8]
}
 80040e8:	bf00      	nop
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004108:	2302      	movs	r3, #2
 800410a:	e05a      	b.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a21      	ldr	r2, [pc, #132]	@ (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d022      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004158:	d01d      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1d      	ldr	r2, [pc, #116]	@ (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d018      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1b      	ldr	r2, [pc, #108]	@ (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a1a      	ldr	r2, [pc, #104]	@ (80041dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00e      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a18      	ldr	r2, [pc, #96]	@ (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d009      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a17      	ldr	r2, [pc, #92]	@ (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d004      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a15      	ldr	r2, [pc, #84]	@ (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d10c      	bne.n	80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800419c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40010000 	.word	0x40010000
 80041d4:	40000400 	.word	0x40000400
 80041d8:	40000800 	.word	0x40000800
 80041dc:	40000c00 	.word	0x40000c00
 80041e0:	40010400 	.word	0x40010400
 80041e4:	40014000 	.word	0x40014000
 80041e8:	40001800 	.word	0x40001800

080041ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e042      	b.n	80042ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fe fa42 	bl	80026c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2224      	movs	r2, #36	@ 0x24
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004256:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f82b 	bl	80042b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800426c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695a      	ldr	r2, [r3, #20]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800427c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800428c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b8:	b0c0      	sub	sp, #256	@ 0x100
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d0:	68d9      	ldr	r1, [r3, #12]
 80042d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	ea40 0301 	orr.w	r3, r0, r1
 80042dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800430c:	f021 010c 	bic.w	r1, r1, #12
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800431a:	430b      	orrs	r3, r1
 800431c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800431e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800432a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432e:	6999      	ldr	r1, [r3, #24]
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	ea40 0301 	orr.w	r3, r0, r1
 800433a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	4b8f      	ldr	r3, [pc, #572]	@ (8004580 <UART_SetConfig+0x2cc>)
 8004344:	429a      	cmp	r2, r3
 8004346:	d005      	beq.n	8004354 <UART_SetConfig+0xa0>
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b8d      	ldr	r3, [pc, #564]	@ (8004584 <UART_SetConfig+0x2d0>)
 8004350:	429a      	cmp	r2, r3
 8004352:	d104      	bne.n	800435e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004354:	f7ff fa92 	bl	800387c <HAL_RCC_GetPCLK2Freq>
 8004358:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800435c:	e003      	b.n	8004366 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800435e:	f7ff fa79 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8004362:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004370:	f040 810c 	bne.w	800458c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004378:	2200      	movs	r2, #0
 800437a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800437e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004382:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004386:	4622      	mov	r2, r4
 8004388:	462b      	mov	r3, r5
 800438a:	1891      	adds	r1, r2, r2
 800438c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800438e:	415b      	adcs	r3, r3
 8004390:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004392:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004396:	4621      	mov	r1, r4
 8004398:	eb12 0801 	adds.w	r8, r2, r1
 800439c:	4629      	mov	r1, r5
 800439e:	eb43 0901 	adc.w	r9, r3, r1
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043b6:	4690      	mov	r8, r2
 80043b8:	4699      	mov	r9, r3
 80043ba:	4623      	mov	r3, r4
 80043bc:	eb18 0303 	adds.w	r3, r8, r3
 80043c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043c4:	462b      	mov	r3, r5
 80043c6:	eb49 0303 	adc.w	r3, r9, r3
 80043ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043e2:	460b      	mov	r3, r1
 80043e4:	18db      	adds	r3, r3, r3
 80043e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80043e8:	4613      	mov	r3, r2
 80043ea:	eb42 0303 	adc.w	r3, r2, r3
 80043ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80043f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043f8:	f7fb ff42 	bl	8000280 <__aeabi_uldivmod>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4b61      	ldr	r3, [pc, #388]	@ (8004588 <UART_SetConfig+0x2d4>)
 8004402:	fba3 2302 	umull	r2, r3, r3, r2
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	011c      	lsls	r4, r3, #4
 800440a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800440e:	2200      	movs	r2, #0
 8004410:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004414:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004418:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800441c:	4642      	mov	r2, r8
 800441e:	464b      	mov	r3, r9
 8004420:	1891      	adds	r1, r2, r2
 8004422:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004424:	415b      	adcs	r3, r3
 8004426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004428:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800442c:	4641      	mov	r1, r8
 800442e:	eb12 0a01 	adds.w	sl, r2, r1
 8004432:	4649      	mov	r1, r9
 8004434:	eb43 0b01 	adc.w	fp, r3, r1
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004444:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004448:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800444c:	4692      	mov	sl, r2
 800444e:	469b      	mov	fp, r3
 8004450:	4643      	mov	r3, r8
 8004452:	eb1a 0303 	adds.w	r3, sl, r3
 8004456:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800445a:	464b      	mov	r3, r9
 800445c:	eb4b 0303 	adc.w	r3, fp, r3
 8004460:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004470:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004474:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004478:	460b      	mov	r3, r1
 800447a:	18db      	adds	r3, r3, r3
 800447c:	643b      	str	r3, [r7, #64]	@ 0x40
 800447e:	4613      	mov	r3, r2
 8004480:	eb42 0303 	adc.w	r3, r2, r3
 8004484:	647b      	str	r3, [r7, #68]	@ 0x44
 8004486:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800448a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800448e:	f7fb fef7 	bl	8000280 <__aeabi_uldivmod>
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	4611      	mov	r1, r2
 8004498:	4b3b      	ldr	r3, [pc, #236]	@ (8004588 <UART_SetConfig+0x2d4>)
 800449a:	fba3 2301 	umull	r2, r3, r3, r1
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	2264      	movs	r2, #100	@ 0x64
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
 80044a6:	1acb      	subs	r3, r1, r3
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044ae:	4b36      	ldr	r3, [pc, #216]	@ (8004588 <UART_SetConfig+0x2d4>)
 80044b0:	fba3 2302 	umull	r2, r3, r3, r2
 80044b4:	095b      	lsrs	r3, r3, #5
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044bc:	441c      	add	r4, r3
 80044be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044d0:	4642      	mov	r2, r8
 80044d2:	464b      	mov	r3, r9
 80044d4:	1891      	adds	r1, r2, r2
 80044d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044d8:	415b      	adcs	r3, r3
 80044da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044e0:	4641      	mov	r1, r8
 80044e2:	1851      	adds	r1, r2, r1
 80044e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80044e6:	4649      	mov	r1, r9
 80044e8:	414b      	adcs	r3, r1
 80044ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044f8:	4659      	mov	r1, fp
 80044fa:	00cb      	lsls	r3, r1, #3
 80044fc:	4651      	mov	r1, sl
 80044fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004502:	4651      	mov	r1, sl
 8004504:	00ca      	lsls	r2, r1, #3
 8004506:	4610      	mov	r0, r2
 8004508:	4619      	mov	r1, r3
 800450a:	4603      	mov	r3, r0
 800450c:	4642      	mov	r2, r8
 800450e:	189b      	adds	r3, r3, r2
 8004510:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004514:	464b      	mov	r3, r9
 8004516:	460a      	mov	r2, r1
 8004518:	eb42 0303 	adc.w	r3, r2, r3
 800451c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800452c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004530:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004534:	460b      	mov	r3, r1
 8004536:	18db      	adds	r3, r3, r3
 8004538:	62bb      	str	r3, [r7, #40]	@ 0x28
 800453a:	4613      	mov	r3, r2
 800453c:	eb42 0303 	adc.w	r3, r2, r3
 8004540:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004542:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004546:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800454a:	f7fb fe99 	bl	8000280 <__aeabi_uldivmod>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4b0d      	ldr	r3, [pc, #52]	@ (8004588 <UART_SetConfig+0x2d4>)
 8004554:	fba3 1302 	umull	r1, r3, r3, r2
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	2164      	movs	r1, #100	@ 0x64
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	3332      	adds	r3, #50	@ 0x32
 8004566:	4a08      	ldr	r2, [pc, #32]	@ (8004588 <UART_SetConfig+0x2d4>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	f003 0207 	and.w	r2, r3, #7
 8004572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4422      	add	r2, r4
 800457a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800457c:	e106      	b.n	800478c <UART_SetConfig+0x4d8>
 800457e:	bf00      	nop
 8004580:	40011000 	.word	0x40011000
 8004584:	40011400 	.word	0x40011400
 8004588:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800458c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004590:	2200      	movs	r2, #0
 8004592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004596:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800459a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800459e:	4642      	mov	r2, r8
 80045a0:	464b      	mov	r3, r9
 80045a2:	1891      	adds	r1, r2, r2
 80045a4:	6239      	str	r1, [r7, #32]
 80045a6:	415b      	adcs	r3, r3
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045ae:	4641      	mov	r1, r8
 80045b0:	1854      	adds	r4, r2, r1
 80045b2:	4649      	mov	r1, r9
 80045b4:	eb43 0501 	adc.w	r5, r3, r1
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	00eb      	lsls	r3, r5, #3
 80045c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045c6:	00e2      	lsls	r2, r4, #3
 80045c8:	4614      	mov	r4, r2
 80045ca:	461d      	mov	r5, r3
 80045cc:	4643      	mov	r3, r8
 80045ce:	18e3      	adds	r3, r4, r3
 80045d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045d4:	464b      	mov	r3, r9
 80045d6:	eb45 0303 	adc.w	r3, r5, r3
 80045da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045fa:	4629      	mov	r1, r5
 80045fc:	008b      	lsls	r3, r1, #2
 80045fe:	4621      	mov	r1, r4
 8004600:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004604:	4621      	mov	r1, r4
 8004606:	008a      	lsls	r2, r1, #2
 8004608:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800460c:	f7fb fe38 	bl	8000280 <__aeabi_uldivmod>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4b60      	ldr	r3, [pc, #384]	@ (8004798 <UART_SetConfig+0x4e4>)
 8004616:	fba3 2302 	umull	r2, r3, r3, r2
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	011c      	lsls	r4, r3, #4
 800461e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004622:	2200      	movs	r2, #0
 8004624:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004628:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800462c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004630:	4642      	mov	r2, r8
 8004632:	464b      	mov	r3, r9
 8004634:	1891      	adds	r1, r2, r2
 8004636:	61b9      	str	r1, [r7, #24]
 8004638:	415b      	adcs	r3, r3
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004640:	4641      	mov	r1, r8
 8004642:	1851      	adds	r1, r2, r1
 8004644:	6139      	str	r1, [r7, #16]
 8004646:	4649      	mov	r1, r9
 8004648:	414b      	adcs	r3, r1
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004658:	4659      	mov	r1, fp
 800465a:	00cb      	lsls	r3, r1, #3
 800465c:	4651      	mov	r1, sl
 800465e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004662:	4651      	mov	r1, sl
 8004664:	00ca      	lsls	r2, r1, #3
 8004666:	4610      	mov	r0, r2
 8004668:	4619      	mov	r1, r3
 800466a:	4603      	mov	r3, r0
 800466c:	4642      	mov	r2, r8
 800466e:	189b      	adds	r3, r3, r2
 8004670:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004674:	464b      	mov	r3, r9
 8004676:	460a      	mov	r2, r1
 8004678:	eb42 0303 	adc.w	r3, r2, r3
 800467c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	67bb      	str	r3, [r7, #120]	@ 0x78
 800468a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004698:	4649      	mov	r1, r9
 800469a:	008b      	lsls	r3, r1, #2
 800469c:	4641      	mov	r1, r8
 800469e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046a2:	4641      	mov	r1, r8
 80046a4:	008a      	lsls	r2, r1, #2
 80046a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046aa:	f7fb fde9 	bl	8000280 <__aeabi_uldivmod>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4611      	mov	r1, r2
 80046b4:	4b38      	ldr	r3, [pc, #224]	@ (8004798 <UART_SetConfig+0x4e4>)
 80046b6:	fba3 2301 	umull	r2, r3, r3, r1
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	2264      	movs	r2, #100	@ 0x64
 80046be:	fb02 f303 	mul.w	r3, r2, r3
 80046c2:	1acb      	subs	r3, r1, r3
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	3332      	adds	r3, #50	@ 0x32
 80046c8:	4a33      	ldr	r2, [pc, #204]	@ (8004798 <UART_SetConfig+0x4e4>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046d4:	441c      	add	r4, r3
 80046d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046da:	2200      	movs	r2, #0
 80046dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80046de:	677a      	str	r2, [r7, #116]	@ 0x74
 80046e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046e4:	4642      	mov	r2, r8
 80046e6:	464b      	mov	r3, r9
 80046e8:	1891      	adds	r1, r2, r2
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	415b      	adcs	r3, r3
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046f4:	4641      	mov	r1, r8
 80046f6:	1851      	adds	r1, r2, r1
 80046f8:	6039      	str	r1, [r7, #0]
 80046fa:	4649      	mov	r1, r9
 80046fc:	414b      	adcs	r3, r1
 80046fe:	607b      	str	r3, [r7, #4]
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800470c:	4659      	mov	r1, fp
 800470e:	00cb      	lsls	r3, r1, #3
 8004710:	4651      	mov	r1, sl
 8004712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004716:	4651      	mov	r1, sl
 8004718:	00ca      	lsls	r2, r1, #3
 800471a:	4610      	mov	r0, r2
 800471c:	4619      	mov	r1, r3
 800471e:	4603      	mov	r3, r0
 8004720:	4642      	mov	r2, r8
 8004722:	189b      	adds	r3, r3, r2
 8004724:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004726:	464b      	mov	r3, r9
 8004728:	460a      	mov	r2, r1
 800472a:	eb42 0303 	adc.w	r3, r2, r3
 800472e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	663b      	str	r3, [r7, #96]	@ 0x60
 800473a:	667a      	str	r2, [r7, #100]	@ 0x64
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004748:	4649      	mov	r1, r9
 800474a:	008b      	lsls	r3, r1, #2
 800474c:	4641      	mov	r1, r8
 800474e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004752:	4641      	mov	r1, r8
 8004754:	008a      	lsls	r2, r1, #2
 8004756:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800475a:	f7fb fd91 	bl	8000280 <__aeabi_uldivmod>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4b0d      	ldr	r3, [pc, #52]	@ (8004798 <UART_SetConfig+0x4e4>)
 8004764:	fba3 1302 	umull	r1, r3, r3, r2
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	2164      	movs	r1, #100	@ 0x64
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	3332      	adds	r3, #50	@ 0x32
 8004776:	4a08      	ldr	r2, [pc, #32]	@ (8004798 <UART_SetConfig+0x4e4>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	f003 020f 	and.w	r2, r3, #15
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4422      	add	r2, r4
 800478a:	609a      	str	r2, [r3, #8]
}
 800478c:	bf00      	nop
 800478e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004792:	46bd      	mov	sp, r7
 8004794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004798:	51eb851f 	.word	0x51eb851f

0800479c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	6812      	ldr	r2, [r2, #0]
 80047b4:	f023 0101 	bic.w	r1, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d102      	bne.n	80047cc <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80047c6:	2340      	movs	r3, #64	@ 0x40
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	e001      	b.n	80047d0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80047cc:	2300      	movs	r3, #0
 80047ce:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80047dc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80047e2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80047e8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80047ee:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80047f4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80047fa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8004800:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8004806:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 800480c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800482a:	4b10      	ldr	r3, [pc, #64]	@ (800486c <FSMC_NORSRAM_Init+0xd0>)
 800482c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004834:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800483c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	43db      	mvns	r3, r3
 800484c:	ea02 0103 	and.w	r1, r2, r3
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	4319      	orrs	r1, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	371c      	adds	r7, #28
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	0008fb7f 	.word	0x0008fb7f

08004870 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8004886:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 800488e:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8004896:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	3b01      	subs	r3, #1
 800489e:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 80048a0:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	3b02      	subs	r3, #2
 80048a8:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 80048aa:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 80048b6:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048e0:	d11d      	bne.n	800491e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80048ea:	4b13      	ldr	r3, [pc, #76]	@ (8004938 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	6811      	ldr	r1, [r2, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	6852      	ldr	r2, [r2, #4]
 80048f6:	0112      	lsls	r2, r2, #4
 80048f8:	4311      	orrs	r1, r2
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	6892      	ldr	r2, [r2, #8]
 80048fe:	0212      	lsls	r2, r2, #8
 8004900:	4311      	orrs	r1, r2
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	6992      	ldr	r2, [r2, #24]
 8004906:	4311      	orrs	r1, r2
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	68d2      	ldr	r2, [r2, #12]
 800490c:	0412      	lsls	r2, r2, #16
 800490e:	430a      	orrs	r2, r1
 8004910:	ea43 0102 	orr.w	r1, r3, r2
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800491c:	e005      	b.n	800492a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8004926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	cff00000 	.word	0xcff00000

0800493c <siprintf>:
 800493c:	b40e      	push	{r1, r2, r3}
 800493e:	b510      	push	{r4, lr}
 8004940:	b09d      	sub	sp, #116	@ 0x74
 8004942:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004944:	9002      	str	r0, [sp, #8]
 8004946:	9006      	str	r0, [sp, #24]
 8004948:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800494c:	480a      	ldr	r0, [pc, #40]	@ (8004978 <siprintf+0x3c>)
 800494e:	9107      	str	r1, [sp, #28]
 8004950:	9104      	str	r1, [sp, #16]
 8004952:	490a      	ldr	r1, [pc, #40]	@ (800497c <siprintf+0x40>)
 8004954:	f853 2b04 	ldr.w	r2, [r3], #4
 8004958:	9105      	str	r1, [sp, #20]
 800495a:	2400      	movs	r4, #0
 800495c:	a902      	add	r1, sp, #8
 800495e:	6800      	ldr	r0, [r0, #0]
 8004960:	9301      	str	r3, [sp, #4]
 8004962:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004964:	f000 f9a2 	bl	8004cac <_svfiprintf_r>
 8004968:	9b02      	ldr	r3, [sp, #8]
 800496a:	701c      	strb	r4, [r3, #0]
 800496c:	b01d      	add	sp, #116	@ 0x74
 800496e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004972:	b003      	add	sp, #12
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000064 	.word	0x20000064
 800497c:	ffff0208 	.word	0xffff0208

08004980 <memset>:
 8004980:	4402      	add	r2, r0
 8004982:	4603      	mov	r3, r0
 8004984:	4293      	cmp	r3, r2
 8004986:	d100      	bne.n	800498a <memset+0xa>
 8004988:	4770      	bx	lr
 800498a:	f803 1b01 	strb.w	r1, [r3], #1
 800498e:	e7f9      	b.n	8004984 <memset+0x4>

08004990 <__errno>:
 8004990:	4b01      	ldr	r3, [pc, #4]	@ (8004998 <__errno+0x8>)
 8004992:	6818      	ldr	r0, [r3, #0]
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20000064 	.word	0x20000064

0800499c <__libc_init_array>:
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	4d0d      	ldr	r5, [pc, #52]	@ (80049d4 <__libc_init_array+0x38>)
 80049a0:	4c0d      	ldr	r4, [pc, #52]	@ (80049d8 <__libc_init_array+0x3c>)
 80049a2:	1b64      	subs	r4, r4, r5
 80049a4:	10a4      	asrs	r4, r4, #2
 80049a6:	2600      	movs	r6, #0
 80049a8:	42a6      	cmp	r6, r4
 80049aa:	d109      	bne.n	80049c0 <__libc_init_array+0x24>
 80049ac:	4d0b      	ldr	r5, [pc, #44]	@ (80049dc <__libc_init_array+0x40>)
 80049ae:	4c0c      	ldr	r4, [pc, #48]	@ (80049e0 <__libc_init_array+0x44>)
 80049b0:	f000 fc64 	bl	800527c <_init>
 80049b4:	1b64      	subs	r4, r4, r5
 80049b6:	10a4      	asrs	r4, r4, #2
 80049b8:	2600      	movs	r6, #0
 80049ba:	42a6      	cmp	r6, r4
 80049bc:	d105      	bne.n	80049ca <__libc_init_array+0x2e>
 80049be:	bd70      	pop	{r4, r5, r6, pc}
 80049c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c4:	4798      	blx	r3
 80049c6:	3601      	adds	r6, #1
 80049c8:	e7ee      	b.n	80049a8 <__libc_init_array+0xc>
 80049ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ce:	4798      	blx	r3
 80049d0:	3601      	adds	r6, #1
 80049d2:	e7f2      	b.n	80049ba <__libc_init_array+0x1e>
 80049d4:	0800b820 	.word	0x0800b820
 80049d8:	0800b820 	.word	0x0800b820
 80049dc:	0800b820 	.word	0x0800b820
 80049e0:	0800b824 	.word	0x0800b824

080049e4 <__retarget_lock_acquire_recursive>:
 80049e4:	4770      	bx	lr

080049e6 <__retarget_lock_release_recursive>:
 80049e6:	4770      	bx	lr

080049e8 <memcpy>:
 80049e8:	440a      	add	r2, r1
 80049ea:	4291      	cmp	r1, r2
 80049ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80049f0:	d100      	bne.n	80049f4 <memcpy+0xc>
 80049f2:	4770      	bx	lr
 80049f4:	b510      	push	{r4, lr}
 80049f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049fe:	4291      	cmp	r1, r2
 8004a00:	d1f9      	bne.n	80049f6 <memcpy+0xe>
 8004a02:	bd10      	pop	{r4, pc}

08004a04 <_free_r>:
 8004a04:	b538      	push	{r3, r4, r5, lr}
 8004a06:	4605      	mov	r5, r0
 8004a08:	2900      	cmp	r1, #0
 8004a0a:	d041      	beq.n	8004a90 <_free_r+0x8c>
 8004a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a10:	1f0c      	subs	r4, r1, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	bfb8      	it	lt
 8004a16:	18e4      	addlt	r4, r4, r3
 8004a18:	f000 f8e0 	bl	8004bdc <__malloc_lock>
 8004a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004a94 <_free_r+0x90>)
 8004a1e:	6813      	ldr	r3, [r2, #0]
 8004a20:	b933      	cbnz	r3, 8004a30 <_free_r+0x2c>
 8004a22:	6063      	str	r3, [r4, #4]
 8004a24:	6014      	str	r4, [r2, #0]
 8004a26:	4628      	mov	r0, r5
 8004a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a2c:	f000 b8dc 	b.w	8004be8 <__malloc_unlock>
 8004a30:	42a3      	cmp	r3, r4
 8004a32:	d908      	bls.n	8004a46 <_free_r+0x42>
 8004a34:	6820      	ldr	r0, [r4, #0]
 8004a36:	1821      	adds	r1, r4, r0
 8004a38:	428b      	cmp	r3, r1
 8004a3a:	bf01      	itttt	eq
 8004a3c:	6819      	ldreq	r1, [r3, #0]
 8004a3e:	685b      	ldreq	r3, [r3, #4]
 8004a40:	1809      	addeq	r1, r1, r0
 8004a42:	6021      	streq	r1, [r4, #0]
 8004a44:	e7ed      	b.n	8004a22 <_free_r+0x1e>
 8004a46:	461a      	mov	r2, r3
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	b10b      	cbz	r3, 8004a50 <_free_r+0x4c>
 8004a4c:	42a3      	cmp	r3, r4
 8004a4e:	d9fa      	bls.n	8004a46 <_free_r+0x42>
 8004a50:	6811      	ldr	r1, [r2, #0]
 8004a52:	1850      	adds	r0, r2, r1
 8004a54:	42a0      	cmp	r0, r4
 8004a56:	d10b      	bne.n	8004a70 <_free_r+0x6c>
 8004a58:	6820      	ldr	r0, [r4, #0]
 8004a5a:	4401      	add	r1, r0
 8004a5c:	1850      	adds	r0, r2, r1
 8004a5e:	4283      	cmp	r3, r0
 8004a60:	6011      	str	r1, [r2, #0]
 8004a62:	d1e0      	bne.n	8004a26 <_free_r+0x22>
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	6053      	str	r3, [r2, #4]
 8004a6a:	4408      	add	r0, r1
 8004a6c:	6010      	str	r0, [r2, #0]
 8004a6e:	e7da      	b.n	8004a26 <_free_r+0x22>
 8004a70:	d902      	bls.n	8004a78 <_free_r+0x74>
 8004a72:	230c      	movs	r3, #12
 8004a74:	602b      	str	r3, [r5, #0]
 8004a76:	e7d6      	b.n	8004a26 <_free_r+0x22>
 8004a78:	6820      	ldr	r0, [r4, #0]
 8004a7a:	1821      	adds	r1, r4, r0
 8004a7c:	428b      	cmp	r3, r1
 8004a7e:	bf04      	itt	eq
 8004a80:	6819      	ldreq	r1, [r3, #0]
 8004a82:	685b      	ldreq	r3, [r3, #4]
 8004a84:	6063      	str	r3, [r4, #4]
 8004a86:	bf04      	itt	eq
 8004a88:	1809      	addeq	r1, r1, r0
 8004a8a:	6021      	streq	r1, [r4, #0]
 8004a8c:	6054      	str	r4, [r2, #4]
 8004a8e:	e7ca      	b.n	8004a26 <_free_r+0x22>
 8004a90:	bd38      	pop	{r3, r4, r5, pc}
 8004a92:	bf00      	nop
 8004a94:	200003a0 	.word	0x200003a0

08004a98 <sbrk_aligned>:
 8004a98:	b570      	push	{r4, r5, r6, lr}
 8004a9a:	4e0f      	ldr	r6, [pc, #60]	@ (8004ad8 <sbrk_aligned+0x40>)
 8004a9c:	460c      	mov	r4, r1
 8004a9e:	6831      	ldr	r1, [r6, #0]
 8004aa0:	4605      	mov	r5, r0
 8004aa2:	b911      	cbnz	r1, 8004aaa <sbrk_aligned+0x12>
 8004aa4:	f000 fba4 	bl	80051f0 <_sbrk_r>
 8004aa8:	6030      	str	r0, [r6, #0]
 8004aaa:	4621      	mov	r1, r4
 8004aac:	4628      	mov	r0, r5
 8004aae:	f000 fb9f 	bl	80051f0 <_sbrk_r>
 8004ab2:	1c43      	adds	r3, r0, #1
 8004ab4:	d103      	bne.n	8004abe <sbrk_aligned+0x26>
 8004ab6:	f04f 34ff 	mov.w	r4, #4294967295
 8004aba:	4620      	mov	r0, r4
 8004abc:	bd70      	pop	{r4, r5, r6, pc}
 8004abe:	1cc4      	adds	r4, r0, #3
 8004ac0:	f024 0403 	bic.w	r4, r4, #3
 8004ac4:	42a0      	cmp	r0, r4
 8004ac6:	d0f8      	beq.n	8004aba <sbrk_aligned+0x22>
 8004ac8:	1a21      	subs	r1, r4, r0
 8004aca:	4628      	mov	r0, r5
 8004acc:	f000 fb90 	bl	80051f0 <_sbrk_r>
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	d1f2      	bne.n	8004aba <sbrk_aligned+0x22>
 8004ad4:	e7ef      	b.n	8004ab6 <sbrk_aligned+0x1e>
 8004ad6:	bf00      	nop
 8004ad8:	2000039c 	.word	0x2000039c

08004adc <_malloc_r>:
 8004adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ae0:	1ccd      	adds	r5, r1, #3
 8004ae2:	f025 0503 	bic.w	r5, r5, #3
 8004ae6:	3508      	adds	r5, #8
 8004ae8:	2d0c      	cmp	r5, #12
 8004aea:	bf38      	it	cc
 8004aec:	250c      	movcc	r5, #12
 8004aee:	2d00      	cmp	r5, #0
 8004af0:	4606      	mov	r6, r0
 8004af2:	db01      	blt.n	8004af8 <_malloc_r+0x1c>
 8004af4:	42a9      	cmp	r1, r5
 8004af6:	d904      	bls.n	8004b02 <_malloc_r+0x26>
 8004af8:	230c      	movs	r3, #12
 8004afa:	6033      	str	r3, [r6, #0]
 8004afc:	2000      	movs	r0, #0
 8004afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004bd8 <_malloc_r+0xfc>
 8004b06:	f000 f869 	bl	8004bdc <__malloc_lock>
 8004b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b0e:	461c      	mov	r4, r3
 8004b10:	bb44      	cbnz	r4, 8004b64 <_malloc_r+0x88>
 8004b12:	4629      	mov	r1, r5
 8004b14:	4630      	mov	r0, r6
 8004b16:	f7ff ffbf 	bl	8004a98 <sbrk_aligned>
 8004b1a:	1c43      	adds	r3, r0, #1
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	d158      	bne.n	8004bd2 <_malloc_r+0xf6>
 8004b20:	f8d8 4000 	ldr.w	r4, [r8]
 8004b24:	4627      	mov	r7, r4
 8004b26:	2f00      	cmp	r7, #0
 8004b28:	d143      	bne.n	8004bb2 <_malloc_r+0xd6>
 8004b2a:	2c00      	cmp	r4, #0
 8004b2c:	d04b      	beq.n	8004bc6 <_malloc_r+0xea>
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	4639      	mov	r1, r7
 8004b32:	4630      	mov	r0, r6
 8004b34:	eb04 0903 	add.w	r9, r4, r3
 8004b38:	f000 fb5a 	bl	80051f0 <_sbrk_r>
 8004b3c:	4581      	cmp	r9, r0
 8004b3e:	d142      	bne.n	8004bc6 <_malloc_r+0xea>
 8004b40:	6821      	ldr	r1, [r4, #0]
 8004b42:	1a6d      	subs	r5, r5, r1
 8004b44:	4629      	mov	r1, r5
 8004b46:	4630      	mov	r0, r6
 8004b48:	f7ff ffa6 	bl	8004a98 <sbrk_aligned>
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	d03a      	beq.n	8004bc6 <_malloc_r+0xea>
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	442b      	add	r3, r5
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	f8d8 3000 	ldr.w	r3, [r8]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	bb62      	cbnz	r2, 8004bb8 <_malloc_r+0xdc>
 8004b5e:	f8c8 7000 	str.w	r7, [r8]
 8004b62:	e00f      	b.n	8004b84 <_malloc_r+0xa8>
 8004b64:	6822      	ldr	r2, [r4, #0]
 8004b66:	1b52      	subs	r2, r2, r5
 8004b68:	d420      	bmi.n	8004bac <_malloc_r+0xd0>
 8004b6a:	2a0b      	cmp	r2, #11
 8004b6c:	d917      	bls.n	8004b9e <_malloc_r+0xc2>
 8004b6e:	1961      	adds	r1, r4, r5
 8004b70:	42a3      	cmp	r3, r4
 8004b72:	6025      	str	r5, [r4, #0]
 8004b74:	bf18      	it	ne
 8004b76:	6059      	strne	r1, [r3, #4]
 8004b78:	6863      	ldr	r3, [r4, #4]
 8004b7a:	bf08      	it	eq
 8004b7c:	f8c8 1000 	streq.w	r1, [r8]
 8004b80:	5162      	str	r2, [r4, r5]
 8004b82:	604b      	str	r3, [r1, #4]
 8004b84:	4630      	mov	r0, r6
 8004b86:	f000 f82f 	bl	8004be8 <__malloc_unlock>
 8004b8a:	f104 000b 	add.w	r0, r4, #11
 8004b8e:	1d23      	adds	r3, r4, #4
 8004b90:	f020 0007 	bic.w	r0, r0, #7
 8004b94:	1ac2      	subs	r2, r0, r3
 8004b96:	bf1c      	itt	ne
 8004b98:	1a1b      	subne	r3, r3, r0
 8004b9a:	50a3      	strne	r3, [r4, r2]
 8004b9c:	e7af      	b.n	8004afe <_malloc_r+0x22>
 8004b9e:	6862      	ldr	r2, [r4, #4]
 8004ba0:	42a3      	cmp	r3, r4
 8004ba2:	bf0c      	ite	eq
 8004ba4:	f8c8 2000 	streq.w	r2, [r8]
 8004ba8:	605a      	strne	r2, [r3, #4]
 8004baa:	e7eb      	b.n	8004b84 <_malloc_r+0xa8>
 8004bac:	4623      	mov	r3, r4
 8004bae:	6864      	ldr	r4, [r4, #4]
 8004bb0:	e7ae      	b.n	8004b10 <_malloc_r+0x34>
 8004bb2:	463c      	mov	r4, r7
 8004bb4:	687f      	ldr	r7, [r7, #4]
 8004bb6:	e7b6      	b.n	8004b26 <_malloc_r+0x4a>
 8004bb8:	461a      	mov	r2, r3
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	42a3      	cmp	r3, r4
 8004bbe:	d1fb      	bne.n	8004bb8 <_malloc_r+0xdc>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	6053      	str	r3, [r2, #4]
 8004bc4:	e7de      	b.n	8004b84 <_malloc_r+0xa8>
 8004bc6:	230c      	movs	r3, #12
 8004bc8:	6033      	str	r3, [r6, #0]
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f000 f80c 	bl	8004be8 <__malloc_unlock>
 8004bd0:	e794      	b.n	8004afc <_malloc_r+0x20>
 8004bd2:	6005      	str	r5, [r0, #0]
 8004bd4:	e7d6      	b.n	8004b84 <_malloc_r+0xa8>
 8004bd6:	bf00      	nop
 8004bd8:	200003a0 	.word	0x200003a0

08004bdc <__malloc_lock>:
 8004bdc:	4801      	ldr	r0, [pc, #4]	@ (8004be4 <__malloc_lock+0x8>)
 8004bde:	f7ff bf01 	b.w	80049e4 <__retarget_lock_acquire_recursive>
 8004be2:	bf00      	nop
 8004be4:	20000398 	.word	0x20000398

08004be8 <__malloc_unlock>:
 8004be8:	4801      	ldr	r0, [pc, #4]	@ (8004bf0 <__malloc_unlock+0x8>)
 8004bea:	f7ff befc 	b.w	80049e6 <__retarget_lock_release_recursive>
 8004bee:	bf00      	nop
 8004bf0:	20000398 	.word	0x20000398

08004bf4 <__ssputs_r>:
 8004bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf8:	688e      	ldr	r6, [r1, #8]
 8004bfa:	461f      	mov	r7, r3
 8004bfc:	42be      	cmp	r6, r7
 8004bfe:	680b      	ldr	r3, [r1, #0]
 8004c00:	4682      	mov	sl, r0
 8004c02:	460c      	mov	r4, r1
 8004c04:	4690      	mov	r8, r2
 8004c06:	d82d      	bhi.n	8004c64 <__ssputs_r+0x70>
 8004c08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c10:	d026      	beq.n	8004c60 <__ssputs_r+0x6c>
 8004c12:	6965      	ldr	r5, [r4, #20]
 8004c14:	6909      	ldr	r1, [r1, #16]
 8004c16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c1a:	eba3 0901 	sub.w	r9, r3, r1
 8004c1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c22:	1c7b      	adds	r3, r7, #1
 8004c24:	444b      	add	r3, r9
 8004c26:	106d      	asrs	r5, r5, #1
 8004c28:	429d      	cmp	r5, r3
 8004c2a:	bf38      	it	cc
 8004c2c:	461d      	movcc	r5, r3
 8004c2e:	0553      	lsls	r3, r2, #21
 8004c30:	d527      	bpl.n	8004c82 <__ssputs_r+0x8e>
 8004c32:	4629      	mov	r1, r5
 8004c34:	f7ff ff52 	bl	8004adc <_malloc_r>
 8004c38:	4606      	mov	r6, r0
 8004c3a:	b360      	cbz	r0, 8004c96 <__ssputs_r+0xa2>
 8004c3c:	6921      	ldr	r1, [r4, #16]
 8004c3e:	464a      	mov	r2, r9
 8004c40:	f7ff fed2 	bl	80049e8 <memcpy>
 8004c44:	89a3      	ldrh	r3, [r4, #12]
 8004c46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c4e:	81a3      	strh	r3, [r4, #12]
 8004c50:	6126      	str	r6, [r4, #16]
 8004c52:	6165      	str	r5, [r4, #20]
 8004c54:	444e      	add	r6, r9
 8004c56:	eba5 0509 	sub.w	r5, r5, r9
 8004c5a:	6026      	str	r6, [r4, #0]
 8004c5c:	60a5      	str	r5, [r4, #8]
 8004c5e:	463e      	mov	r6, r7
 8004c60:	42be      	cmp	r6, r7
 8004c62:	d900      	bls.n	8004c66 <__ssputs_r+0x72>
 8004c64:	463e      	mov	r6, r7
 8004c66:	6820      	ldr	r0, [r4, #0]
 8004c68:	4632      	mov	r2, r6
 8004c6a:	4641      	mov	r1, r8
 8004c6c:	f000 faa6 	bl	80051bc <memmove>
 8004c70:	68a3      	ldr	r3, [r4, #8]
 8004c72:	1b9b      	subs	r3, r3, r6
 8004c74:	60a3      	str	r3, [r4, #8]
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	4433      	add	r3, r6
 8004c7a:	6023      	str	r3, [r4, #0]
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c82:	462a      	mov	r2, r5
 8004c84:	f000 fac4 	bl	8005210 <_realloc_r>
 8004c88:	4606      	mov	r6, r0
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	d1e0      	bne.n	8004c50 <__ssputs_r+0x5c>
 8004c8e:	6921      	ldr	r1, [r4, #16]
 8004c90:	4650      	mov	r0, sl
 8004c92:	f7ff feb7 	bl	8004a04 <_free_r>
 8004c96:	230c      	movs	r3, #12
 8004c98:	f8ca 3000 	str.w	r3, [sl]
 8004c9c:	89a3      	ldrh	r3, [r4, #12]
 8004c9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ca2:	81a3      	strh	r3, [r4, #12]
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca8:	e7e9      	b.n	8004c7e <__ssputs_r+0x8a>
	...

08004cac <_svfiprintf_r>:
 8004cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb0:	4698      	mov	r8, r3
 8004cb2:	898b      	ldrh	r3, [r1, #12]
 8004cb4:	061b      	lsls	r3, r3, #24
 8004cb6:	b09d      	sub	sp, #116	@ 0x74
 8004cb8:	4607      	mov	r7, r0
 8004cba:	460d      	mov	r5, r1
 8004cbc:	4614      	mov	r4, r2
 8004cbe:	d510      	bpl.n	8004ce2 <_svfiprintf_r+0x36>
 8004cc0:	690b      	ldr	r3, [r1, #16]
 8004cc2:	b973      	cbnz	r3, 8004ce2 <_svfiprintf_r+0x36>
 8004cc4:	2140      	movs	r1, #64	@ 0x40
 8004cc6:	f7ff ff09 	bl	8004adc <_malloc_r>
 8004cca:	6028      	str	r0, [r5, #0]
 8004ccc:	6128      	str	r0, [r5, #16]
 8004cce:	b930      	cbnz	r0, 8004cde <_svfiprintf_r+0x32>
 8004cd0:	230c      	movs	r3, #12
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	b01d      	add	sp, #116	@ 0x74
 8004cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cde:	2340      	movs	r3, #64	@ 0x40
 8004ce0:	616b      	str	r3, [r5, #20]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ce6:	2320      	movs	r3, #32
 8004ce8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004cec:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cf0:	2330      	movs	r3, #48	@ 0x30
 8004cf2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004e90 <_svfiprintf_r+0x1e4>
 8004cf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004cfa:	f04f 0901 	mov.w	r9, #1
 8004cfe:	4623      	mov	r3, r4
 8004d00:	469a      	mov	sl, r3
 8004d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d06:	b10a      	cbz	r2, 8004d0c <_svfiprintf_r+0x60>
 8004d08:	2a25      	cmp	r2, #37	@ 0x25
 8004d0a:	d1f9      	bne.n	8004d00 <_svfiprintf_r+0x54>
 8004d0c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d10:	d00b      	beq.n	8004d2a <_svfiprintf_r+0x7e>
 8004d12:	465b      	mov	r3, fp
 8004d14:	4622      	mov	r2, r4
 8004d16:	4629      	mov	r1, r5
 8004d18:	4638      	mov	r0, r7
 8004d1a:	f7ff ff6b 	bl	8004bf4 <__ssputs_r>
 8004d1e:	3001      	adds	r0, #1
 8004d20:	f000 80a7 	beq.w	8004e72 <_svfiprintf_r+0x1c6>
 8004d24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d26:	445a      	add	r2, fp
 8004d28:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 809f 	beq.w	8004e72 <_svfiprintf_r+0x1c6>
 8004d34:	2300      	movs	r3, #0
 8004d36:	f04f 32ff 	mov.w	r2, #4294967295
 8004d3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d3e:	f10a 0a01 	add.w	sl, sl, #1
 8004d42:	9304      	str	r3, [sp, #16]
 8004d44:	9307      	str	r3, [sp, #28]
 8004d46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d4c:	4654      	mov	r4, sl
 8004d4e:	2205      	movs	r2, #5
 8004d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d54:	484e      	ldr	r0, [pc, #312]	@ (8004e90 <_svfiprintf_r+0x1e4>)
 8004d56:	f7fb fa43 	bl	80001e0 <memchr>
 8004d5a:	9a04      	ldr	r2, [sp, #16]
 8004d5c:	b9d8      	cbnz	r0, 8004d96 <_svfiprintf_r+0xea>
 8004d5e:	06d0      	lsls	r0, r2, #27
 8004d60:	bf44      	itt	mi
 8004d62:	2320      	movmi	r3, #32
 8004d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d68:	0711      	lsls	r1, r2, #28
 8004d6a:	bf44      	itt	mi
 8004d6c:	232b      	movmi	r3, #43	@ 0x2b
 8004d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d72:	f89a 3000 	ldrb.w	r3, [sl]
 8004d76:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d78:	d015      	beq.n	8004da6 <_svfiprintf_r+0xfa>
 8004d7a:	9a07      	ldr	r2, [sp, #28]
 8004d7c:	4654      	mov	r4, sl
 8004d7e:	2000      	movs	r0, #0
 8004d80:	f04f 0c0a 	mov.w	ip, #10
 8004d84:	4621      	mov	r1, r4
 8004d86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d8a:	3b30      	subs	r3, #48	@ 0x30
 8004d8c:	2b09      	cmp	r3, #9
 8004d8e:	d94b      	bls.n	8004e28 <_svfiprintf_r+0x17c>
 8004d90:	b1b0      	cbz	r0, 8004dc0 <_svfiprintf_r+0x114>
 8004d92:	9207      	str	r2, [sp, #28]
 8004d94:	e014      	b.n	8004dc0 <_svfiprintf_r+0x114>
 8004d96:	eba0 0308 	sub.w	r3, r0, r8
 8004d9a:	fa09 f303 	lsl.w	r3, r9, r3
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	9304      	str	r3, [sp, #16]
 8004da2:	46a2      	mov	sl, r4
 8004da4:	e7d2      	b.n	8004d4c <_svfiprintf_r+0xa0>
 8004da6:	9b03      	ldr	r3, [sp, #12]
 8004da8:	1d19      	adds	r1, r3, #4
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	9103      	str	r1, [sp, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bfbb      	ittet	lt
 8004db2:	425b      	neglt	r3, r3
 8004db4:	f042 0202 	orrlt.w	r2, r2, #2
 8004db8:	9307      	strge	r3, [sp, #28]
 8004dba:	9307      	strlt	r3, [sp, #28]
 8004dbc:	bfb8      	it	lt
 8004dbe:	9204      	strlt	r2, [sp, #16]
 8004dc0:	7823      	ldrb	r3, [r4, #0]
 8004dc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dc4:	d10a      	bne.n	8004ddc <_svfiprintf_r+0x130>
 8004dc6:	7863      	ldrb	r3, [r4, #1]
 8004dc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dca:	d132      	bne.n	8004e32 <_svfiprintf_r+0x186>
 8004dcc:	9b03      	ldr	r3, [sp, #12]
 8004dce:	1d1a      	adds	r2, r3, #4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	9203      	str	r2, [sp, #12]
 8004dd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004dd8:	3402      	adds	r4, #2
 8004dda:	9305      	str	r3, [sp, #20]
 8004ddc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004ea0 <_svfiprintf_r+0x1f4>
 8004de0:	7821      	ldrb	r1, [r4, #0]
 8004de2:	2203      	movs	r2, #3
 8004de4:	4650      	mov	r0, sl
 8004de6:	f7fb f9fb 	bl	80001e0 <memchr>
 8004dea:	b138      	cbz	r0, 8004dfc <_svfiprintf_r+0x150>
 8004dec:	9b04      	ldr	r3, [sp, #16]
 8004dee:	eba0 000a 	sub.w	r0, r0, sl
 8004df2:	2240      	movs	r2, #64	@ 0x40
 8004df4:	4082      	lsls	r2, r0
 8004df6:	4313      	orrs	r3, r2
 8004df8:	3401      	adds	r4, #1
 8004dfa:	9304      	str	r3, [sp, #16]
 8004dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e00:	4824      	ldr	r0, [pc, #144]	@ (8004e94 <_svfiprintf_r+0x1e8>)
 8004e02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e06:	2206      	movs	r2, #6
 8004e08:	f7fb f9ea 	bl	80001e0 <memchr>
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	d036      	beq.n	8004e7e <_svfiprintf_r+0x1d2>
 8004e10:	4b21      	ldr	r3, [pc, #132]	@ (8004e98 <_svfiprintf_r+0x1ec>)
 8004e12:	bb1b      	cbnz	r3, 8004e5c <_svfiprintf_r+0x1b0>
 8004e14:	9b03      	ldr	r3, [sp, #12]
 8004e16:	3307      	adds	r3, #7
 8004e18:	f023 0307 	bic.w	r3, r3, #7
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	9303      	str	r3, [sp, #12]
 8004e20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e22:	4433      	add	r3, r6
 8004e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e26:	e76a      	b.n	8004cfe <_svfiprintf_r+0x52>
 8004e28:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	2001      	movs	r0, #1
 8004e30:	e7a8      	b.n	8004d84 <_svfiprintf_r+0xd8>
 8004e32:	2300      	movs	r3, #0
 8004e34:	3401      	adds	r4, #1
 8004e36:	9305      	str	r3, [sp, #20]
 8004e38:	4619      	mov	r1, r3
 8004e3a:	f04f 0c0a 	mov.w	ip, #10
 8004e3e:	4620      	mov	r0, r4
 8004e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e44:	3a30      	subs	r2, #48	@ 0x30
 8004e46:	2a09      	cmp	r2, #9
 8004e48:	d903      	bls.n	8004e52 <_svfiprintf_r+0x1a6>
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0c6      	beq.n	8004ddc <_svfiprintf_r+0x130>
 8004e4e:	9105      	str	r1, [sp, #20]
 8004e50:	e7c4      	b.n	8004ddc <_svfiprintf_r+0x130>
 8004e52:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e56:	4604      	mov	r4, r0
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e7f0      	b.n	8004e3e <_svfiprintf_r+0x192>
 8004e5c:	ab03      	add	r3, sp, #12
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	462a      	mov	r2, r5
 8004e62:	4b0e      	ldr	r3, [pc, #56]	@ (8004e9c <_svfiprintf_r+0x1f0>)
 8004e64:	a904      	add	r1, sp, #16
 8004e66:	4638      	mov	r0, r7
 8004e68:	f3af 8000 	nop.w
 8004e6c:	1c42      	adds	r2, r0, #1
 8004e6e:	4606      	mov	r6, r0
 8004e70:	d1d6      	bne.n	8004e20 <_svfiprintf_r+0x174>
 8004e72:	89ab      	ldrh	r3, [r5, #12]
 8004e74:	065b      	lsls	r3, r3, #25
 8004e76:	f53f af2d 	bmi.w	8004cd4 <_svfiprintf_r+0x28>
 8004e7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e7c:	e72c      	b.n	8004cd8 <_svfiprintf_r+0x2c>
 8004e7e:	ab03      	add	r3, sp, #12
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	462a      	mov	r2, r5
 8004e84:	4b05      	ldr	r3, [pc, #20]	@ (8004e9c <_svfiprintf_r+0x1f0>)
 8004e86:	a904      	add	r1, sp, #16
 8004e88:	4638      	mov	r0, r7
 8004e8a:	f000 f879 	bl	8004f80 <_printf_i>
 8004e8e:	e7ed      	b.n	8004e6c <_svfiprintf_r+0x1c0>
 8004e90:	0800b7e4 	.word	0x0800b7e4
 8004e94:	0800b7ee 	.word	0x0800b7ee
 8004e98:	00000000 	.word	0x00000000
 8004e9c:	08004bf5 	.word	0x08004bf5
 8004ea0:	0800b7ea 	.word	0x0800b7ea

08004ea4 <_printf_common>:
 8004ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea8:	4616      	mov	r6, r2
 8004eaa:	4698      	mov	r8, r3
 8004eac:	688a      	ldr	r2, [r1, #8]
 8004eae:	690b      	ldr	r3, [r1, #16]
 8004eb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	bfb8      	it	lt
 8004eb8:	4613      	movlt	r3, r2
 8004eba:	6033      	str	r3, [r6, #0]
 8004ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ec0:	4607      	mov	r7, r0
 8004ec2:	460c      	mov	r4, r1
 8004ec4:	b10a      	cbz	r2, 8004eca <_printf_common+0x26>
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	6033      	str	r3, [r6, #0]
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	0699      	lsls	r1, r3, #26
 8004ece:	bf42      	ittt	mi
 8004ed0:	6833      	ldrmi	r3, [r6, #0]
 8004ed2:	3302      	addmi	r3, #2
 8004ed4:	6033      	strmi	r3, [r6, #0]
 8004ed6:	6825      	ldr	r5, [r4, #0]
 8004ed8:	f015 0506 	ands.w	r5, r5, #6
 8004edc:	d106      	bne.n	8004eec <_printf_common+0x48>
 8004ede:	f104 0a19 	add.w	sl, r4, #25
 8004ee2:	68e3      	ldr	r3, [r4, #12]
 8004ee4:	6832      	ldr	r2, [r6, #0]
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	42ab      	cmp	r3, r5
 8004eea:	dc26      	bgt.n	8004f3a <_printf_common+0x96>
 8004eec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ef0:	6822      	ldr	r2, [r4, #0]
 8004ef2:	3b00      	subs	r3, #0
 8004ef4:	bf18      	it	ne
 8004ef6:	2301      	movne	r3, #1
 8004ef8:	0692      	lsls	r2, r2, #26
 8004efa:	d42b      	bmi.n	8004f54 <_printf_common+0xb0>
 8004efc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f00:	4641      	mov	r1, r8
 8004f02:	4638      	mov	r0, r7
 8004f04:	47c8      	blx	r9
 8004f06:	3001      	adds	r0, #1
 8004f08:	d01e      	beq.n	8004f48 <_printf_common+0xa4>
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	6922      	ldr	r2, [r4, #16]
 8004f0e:	f003 0306 	and.w	r3, r3, #6
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	bf02      	ittt	eq
 8004f16:	68e5      	ldreq	r5, [r4, #12]
 8004f18:	6833      	ldreq	r3, [r6, #0]
 8004f1a:	1aed      	subeq	r5, r5, r3
 8004f1c:	68a3      	ldr	r3, [r4, #8]
 8004f1e:	bf0c      	ite	eq
 8004f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f24:	2500      	movne	r5, #0
 8004f26:	4293      	cmp	r3, r2
 8004f28:	bfc4      	itt	gt
 8004f2a:	1a9b      	subgt	r3, r3, r2
 8004f2c:	18ed      	addgt	r5, r5, r3
 8004f2e:	2600      	movs	r6, #0
 8004f30:	341a      	adds	r4, #26
 8004f32:	42b5      	cmp	r5, r6
 8004f34:	d11a      	bne.n	8004f6c <_printf_common+0xc8>
 8004f36:	2000      	movs	r0, #0
 8004f38:	e008      	b.n	8004f4c <_printf_common+0xa8>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	4652      	mov	r2, sl
 8004f3e:	4641      	mov	r1, r8
 8004f40:	4638      	mov	r0, r7
 8004f42:	47c8      	blx	r9
 8004f44:	3001      	adds	r0, #1
 8004f46:	d103      	bne.n	8004f50 <_printf_common+0xac>
 8004f48:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f50:	3501      	adds	r5, #1
 8004f52:	e7c6      	b.n	8004ee2 <_printf_common+0x3e>
 8004f54:	18e1      	adds	r1, r4, r3
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	2030      	movs	r0, #48	@ 0x30
 8004f5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f5e:	4422      	add	r2, r4
 8004f60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f68:	3302      	adds	r3, #2
 8004f6a:	e7c7      	b.n	8004efc <_printf_common+0x58>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	4622      	mov	r2, r4
 8004f70:	4641      	mov	r1, r8
 8004f72:	4638      	mov	r0, r7
 8004f74:	47c8      	blx	r9
 8004f76:	3001      	adds	r0, #1
 8004f78:	d0e6      	beq.n	8004f48 <_printf_common+0xa4>
 8004f7a:	3601      	adds	r6, #1
 8004f7c:	e7d9      	b.n	8004f32 <_printf_common+0x8e>
	...

08004f80 <_printf_i>:
 8004f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f84:	7e0f      	ldrb	r7, [r1, #24]
 8004f86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f88:	2f78      	cmp	r7, #120	@ 0x78
 8004f8a:	4691      	mov	r9, r2
 8004f8c:	4680      	mov	r8, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	469a      	mov	sl, r3
 8004f92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f96:	d807      	bhi.n	8004fa8 <_printf_i+0x28>
 8004f98:	2f62      	cmp	r7, #98	@ 0x62
 8004f9a:	d80a      	bhi.n	8004fb2 <_printf_i+0x32>
 8004f9c:	2f00      	cmp	r7, #0
 8004f9e:	f000 80d1 	beq.w	8005144 <_printf_i+0x1c4>
 8004fa2:	2f58      	cmp	r7, #88	@ 0x58
 8004fa4:	f000 80b8 	beq.w	8005118 <_printf_i+0x198>
 8004fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004fb0:	e03a      	b.n	8005028 <_printf_i+0xa8>
 8004fb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004fb6:	2b15      	cmp	r3, #21
 8004fb8:	d8f6      	bhi.n	8004fa8 <_printf_i+0x28>
 8004fba:	a101      	add	r1, pc, #4	@ (adr r1, 8004fc0 <_printf_i+0x40>)
 8004fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fc0:	08005019 	.word	0x08005019
 8004fc4:	0800502d 	.word	0x0800502d
 8004fc8:	08004fa9 	.word	0x08004fa9
 8004fcc:	08004fa9 	.word	0x08004fa9
 8004fd0:	08004fa9 	.word	0x08004fa9
 8004fd4:	08004fa9 	.word	0x08004fa9
 8004fd8:	0800502d 	.word	0x0800502d
 8004fdc:	08004fa9 	.word	0x08004fa9
 8004fe0:	08004fa9 	.word	0x08004fa9
 8004fe4:	08004fa9 	.word	0x08004fa9
 8004fe8:	08004fa9 	.word	0x08004fa9
 8004fec:	0800512b 	.word	0x0800512b
 8004ff0:	08005057 	.word	0x08005057
 8004ff4:	080050e5 	.word	0x080050e5
 8004ff8:	08004fa9 	.word	0x08004fa9
 8004ffc:	08004fa9 	.word	0x08004fa9
 8005000:	0800514d 	.word	0x0800514d
 8005004:	08004fa9 	.word	0x08004fa9
 8005008:	08005057 	.word	0x08005057
 800500c:	08004fa9 	.word	0x08004fa9
 8005010:	08004fa9 	.word	0x08004fa9
 8005014:	080050ed 	.word	0x080050ed
 8005018:	6833      	ldr	r3, [r6, #0]
 800501a:	1d1a      	adds	r2, r3, #4
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6032      	str	r2, [r6, #0]
 8005020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005024:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005028:	2301      	movs	r3, #1
 800502a:	e09c      	b.n	8005166 <_printf_i+0x1e6>
 800502c:	6833      	ldr	r3, [r6, #0]
 800502e:	6820      	ldr	r0, [r4, #0]
 8005030:	1d19      	adds	r1, r3, #4
 8005032:	6031      	str	r1, [r6, #0]
 8005034:	0606      	lsls	r6, r0, #24
 8005036:	d501      	bpl.n	800503c <_printf_i+0xbc>
 8005038:	681d      	ldr	r5, [r3, #0]
 800503a:	e003      	b.n	8005044 <_printf_i+0xc4>
 800503c:	0645      	lsls	r5, r0, #25
 800503e:	d5fb      	bpl.n	8005038 <_printf_i+0xb8>
 8005040:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005044:	2d00      	cmp	r5, #0
 8005046:	da03      	bge.n	8005050 <_printf_i+0xd0>
 8005048:	232d      	movs	r3, #45	@ 0x2d
 800504a:	426d      	negs	r5, r5
 800504c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005050:	4858      	ldr	r0, [pc, #352]	@ (80051b4 <_printf_i+0x234>)
 8005052:	230a      	movs	r3, #10
 8005054:	e011      	b.n	800507a <_printf_i+0xfa>
 8005056:	6821      	ldr	r1, [r4, #0]
 8005058:	6833      	ldr	r3, [r6, #0]
 800505a:	0608      	lsls	r0, r1, #24
 800505c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005060:	d402      	bmi.n	8005068 <_printf_i+0xe8>
 8005062:	0649      	lsls	r1, r1, #25
 8005064:	bf48      	it	mi
 8005066:	b2ad      	uxthmi	r5, r5
 8005068:	2f6f      	cmp	r7, #111	@ 0x6f
 800506a:	4852      	ldr	r0, [pc, #328]	@ (80051b4 <_printf_i+0x234>)
 800506c:	6033      	str	r3, [r6, #0]
 800506e:	bf14      	ite	ne
 8005070:	230a      	movne	r3, #10
 8005072:	2308      	moveq	r3, #8
 8005074:	2100      	movs	r1, #0
 8005076:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800507a:	6866      	ldr	r6, [r4, #4]
 800507c:	60a6      	str	r6, [r4, #8]
 800507e:	2e00      	cmp	r6, #0
 8005080:	db05      	blt.n	800508e <_printf_i+0x10e>
 8005082:	6821      	ldr	r1, [r4, #0]
 8005084:	432e      	orrs	r6, r5
 8005086:	f021 0104 	bic.w	r1, r1, #4
 800508a:	6021      	str	r1, [r4, #0]
 800508c:	d04b      	beq.n	8005126 <_printf_i+0x1a6>
 800508e:	4616      	mov	r6, r2
 8005090:	fbb5 f1f3 	udiv	r1, r5, r3
 8005094:	fb03 5711 	mls	r7, r3, r1, r5
 8005098:	5dc7      	ldrb	r7, [r0, r7]
 800509a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800509e:	462f      	mov	r7, r5
 80050a0:	42bb      	cmp	r3, r7
 80050a2:	460d      	mov	r5, r1
 80050a4:	d9f4      	bls.n	8005090 <_printf_i+0x110>
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d10b      	bne.n	80050c2 <_printf_i+0x142>
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	07df      	lsls	r7, r3, #31
 80050ae:	d508      	bpl.n	80050c2 <_printf_i+0x142>
 80050b0:	6923      	ldr	r3, [r4, #16]
 80050b2:	6861      	ldr	r1, [r4, #4]
 80050b4:	4299      	cmp	r1, r3
 80050b6:	bfde      	ittt	le
 80050b8:	2330      	movle	r3, #48	@ 0x30
 80050ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050c2:	1b92      	subs	r2, r2, r6
 80050c4:	6122      	str	r2, [r4, #16]
 80050c6:	f8cd a000 	str.w	sl, [sp]
 80050ca:	464b      	mov	r3, r9
 80050cc:	aa03      	add	r2, sp, #12
 80050ce:	4621      	mov	r1, r4
 80050d0:	4640      	mov	r0, r8
 80050d2:	f7ff fee7 	bl	8004ea4 <_printf_common>
 80050d6:	3001      	adds	r0, #1
 80050d8:	d14a      	bne.n	8005170 <_printf_i+0x1f0>
 80050da:	f04f 30ff 	mov.w	r0, #4294967295
 80050de:	b004      	add	sp, #16
 80050e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	f043 0320 	orr.w	r3, r3, #32
 80050ea:	6023      	str	r3, [r4, #0]
 80050ec:	4832      	ldr	r0, [pc, #200]	@ (80051b8 <_printf_i+0x238>)
 80050ee:	2778      	movs	r7, #120	@ 0x78
 80050f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	6831      	ldr	r1, [r6, #0]
 80050f8:	061f      	lsls	r7, r3, #24
 80050fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80050fe:	d402      	bmi.n	8005106 <_printf_i+0x186>
 8005100:	065f      	lsls	r7, r3, #25
 8005102:	bf48      	it	mi
 8005104:	b2ad      	uxthmi	r5, r5
 8005106:	6031      	str	r1, [r6, #0]
 8005108:	07d9      	lsls	r1, r3, #31
 800510a:	bf44      	itt	mi
 800510c:	f043 0320 	orrmi.w	r3, r3, #32
 8005110:	6023      	strmi	r3, [r4, #0]
 8005112:	b11d      	cbz	r5, 800511c <_printf_i+0x19c>
 8005114:	2310      	movs	r3, #16
 8005116:	e7ad      	b.n	8005074 <_printf_i+0xf4>
 8005118:	4826      	ldr	r0, [pc, #152]	@ (80051b4 <_printf_i+0x234>)
 800511a:	e7e9      	b.n	80050f0 <_printf_i+0x170>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	f023 0320 	bic.w	r3, r3, #32
 8005122:	6023      	str	r3, [r4, #0]
 8005124:	e7f6      	b.n	8005114 <_printf_i+0x194>
 8005126:	4616      	mov	r6, r2
 8005128:	e7bd      	b.n	80050a6 <_printf_i+0x126>
 800512a:	6833      	ldr	r3, [r6, #0]
 800512c:	6825      	ldr	r5, [r4, #0]
 800512e:	6961      	ldr	r1, [r4, #20]
 8005130:	1d18      	adds	r0, r3, #4
 8005132:	6030      	str	r0, [r6, #0]
 8005134:	062e      	lsls	r6, r5, #24
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	d501      	bpl.n	800513e <_printf_i+0x1be>
 800513a:	6019      	str	r1, [r3, #0]
 800513c:	e002      	b.n	8005144 <_printf_i+0x1c4>
 800513e:	0668      	lsls	r0, r5, #25
 8005140:	d5fb      	bpl.n	800513a <_printf_i+0x1ba>
 8005142:	8019      	strh	r1, [r3, #0]
 8005144:	2300      	movs	r3, #0
 8005146:	6123      	str	r3, [r4, #16]
 8005148:	4616      	mov	r6, r2
 800514a:	e7bc      	b.n	80050c6 <_printf_i+0x146>
 800514c:	6833      	ldr	r3, [r6, #0]
 800514e:	1d1a      	adds	r2, r3, #4
 8005150:	6032      	str	r2, [r6, #0]
 8005152:	681e      	ldr	r6, [r3, #0]
 8005154:	6862      	ldr	r2, [r4, #4]
 8005156:	2100      	movs	r1, #0
 8005158:	4630      	mov	r0, r6
 800515a:	f7fb f841 	bl	80001e0 <memchr>
 800515e:	b108      	cbz	r0, 8005164 <_printf_i+0x1e4>
 8005160:	1b80      	subs	r0, r0, r6
 8005162:	6060      	str	r0, [r4, #4]
 8005164:	6863      	ldr	r3, [r4, #4]
 8005166:	6123      	str	r3, [r4, #16]
 8005168:	2300      	movs	r3, #0
 800516a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800516e:	e7aa      	b.n	80050c6 <_printf_i+0x146>
 8005170:	6923      	ldr	r3, [r4, #16]
 8005172:	4632      	mov	r2, r6
 8005174:	4649      	mov	r1, r9
 8005176:	4640      	mov	r0, r8
 8005178:	47d0      	blx	sl
 800517a:	3001      	adds	r0, #1
 800517c:	d0ad      	beq.n	80050da <_printf_i+0x15a>
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	079b      	lsls	r3, r3, #30
 8005182:	d413      	bmi.n	80051ac <_printf_i+0x22c>
 8005184:	68e0      	ldr	r0, [r4, #12]
 8005186:	9b03      	ldr	r3, [sp, #12]
 8005188:	4298      	cmp	r0, r3
 800518a:	bfb8      	it	lt
 800518c:	4618      	movlt	r0, r3
 800518e:	e7a6      	b.n	80050de <_printf_i+0x15e>
 8005190:	2301      	movs	r3, #1
 8005192:	4632      	mov	r2, r6
 8005194:	4649      	mov	r1, r9
 8005196:	4640      	mov	r0, r8
 8005198:	47d0      	blx	sl
 800519a:	3001      	adds	r0, #1
 800519c:	d09d      	beq.n	80050da <_printf_i+0x15a>
 800519e:	3501      	adds	r5, #1
 80051a0:	68e3      	ldr	r3, [r4, #12]
 80051a2:	9903      	ldr	r1, [sp, #12]
 80051a4:	1a5b      	subs	r3, r3, r1
 80051a6:	42ab      	cmp	r3, r5
 80051a8:	dcf2      	bgt.n	8005190 <_printf_i+0x210>
 80051aa:	e7eb      	b.n	8005184 <_printf_i+0x204>
 80051ac:	2500      	movs	r5, #0
 80051ae:	f104 0619 	add.w	r6, r4, #25
 80051b2:	e7f5      	b.n	80051a0 <_printf_i+0x220>
 80051b4:	0800b7f5 	.word	0x0800b7f5
 80051b8:	0800b806 	.word	0x0800b806

080051bc <memmove>:
 80051bc:	4288      	cmp	r0, r1
 80051be:	b510      	push	{r4, lr}
 80051c0:	eb01 0402 	add.w	r4, r1, r2
 80051c4:	d902      	bls.n	80051cc <memmove+0x10>
 80051c6:	4284      	cmp	r4, r0
 80051c8:	4623      	mov	r3, r4
 80051ca:	d807      	bhi.n	80051dc <memmove+0x20>
 80051cc:	1e43      	subs	r3, r0, #1
 80051ce:	42a1      	cmp	r1, r4
 80051d0:	d008      	beq.n	80051e4 <memmove+0x28>
 80051d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051da:	e7f8      	b.n	80051ce <memmove+0x12>
 80051dc:	4402      	add	r2, r0
 80051de:	4601      	mov	r1, r0
 80051e0:	428a      	cmp	r2, r1
 80051e2:	d100      	bne.n	80051e6 <memmove+0x2a>
 80051e4:	bd10      	pop	{r4, pc}
 80051e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051ee:	e7f7      	b.n	80051e0 <memmove+0x24>

080051f0 <_sbrk_r>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4d06      	ldr	r5, [pc, #24]	@ (800520c <_sbrk_r+0x1c>)
 80051f4:	2300      	movs	r3, #0
 80051f6:	4604      	mov	r4, r0
 80051f8:	4608      	mov	r0, r1
 80051fa:	602b      	str	r3, [r5, #0]
 80051fc:	f7fd fb44 	bl	8002888 <_sbrk>
 8005200:	1c43      	adds	r3, r0, #1
 8005202:	d102      	bne.n	800520a <_sbrk_r+0x1a>
 8005204:	682b      	ldr	r3, [r5, #0]
 8005206:	b103      	cbz	r3, 800520a <_sbrk_r+0x1a>
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	bd38      	pop	{r3, r4, r5, pc}
 800520c:	20000394 	.word	0x20000394

08005210 <_realloc_r>:
 8005210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005214:	4607      	mov	r7, r0
 8005216:	4614      	mov	r4, r2
 8005218:	460d      	mov	r5, r1
 800521a:	b921      	cbnz	r1, 8005226 <_realloc_r+0x16>
 800521c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005220:	4611      	mov	r1, r2
 8005222:	f7ff bc5b 	b.w	8004adc <_malloc_r>
 8005226:	b92a      	cbnz	r2, 8005234 <_realloc_r+0x24>
 8005228:	f7ff fbec 	bl	8004a04 <_free_r>
 800522c:	4625      	mov	r5, r4
 800522e:	4628      	mov	r0, r5
 8005230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005234:	f000 f81a 	bl	800526c <_malloc_usable_size_r>
 8005238:	4284      	cmp	r4, r0
 800523a:	4606      	mov	r6, r0
 800523c:	d802      	bhi.n	8005244 <_realloc_r+0x34>
 800523e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005242:	d8f4      	bhi.n	800522e <_realloc_r+0x1e>
 8005244:	4621      	mov	r1, r4
 8005246:	4638      	mov	r0, r7
 8005248:	f7ff fc48 	bl	8004adc <_malloc_r>
 800524c:	4680      	mov	r8, r0
 800524e:	b908      	cbnz	r0, 8005254 <_realloc_r+0x44>
 8005250:	4645      	mov	r5, r8
 8005252:	e7ec      	b.n	800522e <_realloc_r+0x1e>
 8005254:	42b4      	cmp	r4, r6
 8005256:	4622      	mov	r2, r4
 8005258:	4629      	mov	r1, r5
 800525a:	bf28      	it	cs
 800525c:	4632      	movcs	r2, r6
 800525e:	f7ff fbc3 	bl	80049e8 <memcpy>
 8005262:	4629      	mov	r1, r5
 8005264:	4638      	mov	r0, r7
 8005266:	f7ff fbcd 	bl	8004a04 <_free_r>
 800526a:	e7f1      	b.n	8005250 <_realloc_r+0x40>

0800526c <_malloc_usable_size_r>:
 800526c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005270:	1f18      	subs	r0, r3, #4
 8005272:	2b00      	cmp	r3, #0
 8005274:	bfbc      	itt	lt
 8005276:	580b      	ldrlt	r3, [r1, r0]
 8005278:	18c0      	addlt	r0, r0, r3
 800527a:	4770      	bx	lr

0800527c <_init>:
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527e:	bf00      	nop
 8005280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005282:	bc08      	pop	{r3}
 8005284:	469e      	mov	lr, r3
 8005286:	4770      	bx	lr

08005288 <_fini>:
 8005288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528a:	bf00      	nop
 800528c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528e:	bc08      	pop	{r3}
 8005290:	469e      	mov	lr, r3
 8005292:	4770      	bx	lr
