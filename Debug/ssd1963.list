
ssd1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005918  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015174  08005aa8  08005aa8  00006aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ac1c  0801ac1c  0001c0c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801ac1c  0801ac1c  0001bc1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ac24  0801ac24  0001c0c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ac24  0801ac24  0001bc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ac28  0801ac28  0001bc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  0801ac2c  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001c0c4  2**0
                  CONTENTS
 10 .bss          000002f4  200000c4  200000c4  0001c0c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003b8  200003b8  0001c0c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001c0c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fe4d  00000000  00000000  0001c0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020cc  00000000  00000000  0002bf41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  0002e010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b93  00000000  00000000  0002eed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000221e5  00000000  00000000  0002fa6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001045a  00000000  00000000  00051c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0cf9  00000000  00000000  000620aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00132da3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000442c  00000000  00000000  00132de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00137214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c4 	.word	0x200000c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a90 	.word	0x08005a90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	08005a90 	.word	0x08005a90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <Lcd_Write_Cmd>:
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

void Lcd_Write_Cmd(uint16_t Cmd)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
   *(uint16_t *) (LCD_REG) = Cmd;
 80005b6:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80005ba:	88fb      	ldrh	r3, [r7, #6]
 80005bc:	8013      	strh	r3, [r2, #0]
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <Lcd_Write_Data>:
////////////////////////
void Lcd_Write_Data(uint16_t data)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
   *(uint16_t *) (LCD_DATA)= data;
 80005d6:	4a04      	ldr	r2, [pc, #16]	@ (80005e8 <Lcd_Write_Data+0x1c>)
 80005d8:	88fb      	ldrh	r3, [r7, #6]
 80005da:	8013      	strh	r3, [r2, #0]
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	60020000 	.word	0x60020000

080005ec <LCD_Write_DATA>:


void LCD_Write_DATA(uint16_t data)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
	 *(uint16_t *) (LCD_DATA)= data;
 80005f6:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <LCD_Write_DATA+0x1c>)
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	8013      	strh	r3, [r2, #0]

}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	60020000 	.word	0x60020000

0800060c <LCD_Write_COM>:

void LCD_Write_COM(uint16_t data)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	*(uint16_t *) (LCD_REG) = data;
 8000616:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800061a:	88fb      	ldrh	r3, [r7, #6]
 800061c:	8013      	strh	r3, [r2, #0]
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <Lcd_SetArea>:
///////////////////
void Lcd_SetArea(uint16_t sx, uint16_t ex, uint16_t sy, uint16_t ey)
{
 800062a:	b590      	push	{r4, r7, lr}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	4604      	mov	r4, r0
 8000632:	4608      	mov	r0, r1
 8000634:	4611      	mov	r1, r2
 8000636:	461a      	mov	r2, r3
 8000638:	4623      	mov	r3, r4
 800063a:	80fb      	strh	r3, [r7, #6]
 800063c:	4603      	mov	r3, r0
 800063e:	80bb      	strh	r3, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	807b      	strh	r3, [r7, #2]
 8000644:	4613      	mov	r3, r2
 8000646:	803b      	strh	r3, [r7, #0]
Lcd_Write_Cmd(SSD1963_SET_COLUMN_ADDRESS);	
 8000648:	202a      	movs	r0, #42	@ 0x2a
 800064a:	f7ff ffaf 	bl	80005ac <Lcd_Write_Cmd>
Lcd_Write_Data((sx >> 8) & 0xFF);
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	b29b      	uxth	r3, r3
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ffb9 	bl	80005cc <Lcd_Write_Data>
Lcd_Write_Data((sx >> 0) & 0xFF);
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	b29b      	uxth	r3, r3
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ffb3 	bl	80005cc <Lcd_Write_Data>
Lcd_Write_Data((ex >> 8) & 0xFF);
 8000666:	88bb      	ldrh	r3, [r7, #4]
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	b29b      	uxth	r3, r3
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ffad 	bl	80005cc <Lcd_Write_Data>
Lcd_Write_Data((ex >> 0) & 0xFF);
 8000672:	88bb      	ldrh	r3, [r7, #4]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	b29b      	uxth	r3, r3
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ffa7 	bl	80005cc <Lcd_Write_Data>

Lcd_Write_Cmd(SSD1963_SET_PAGE_ADDRESS);	
 800067e:	202b      	movs	r0, #43	@ 0x2b
 8000680:	f7ff ff94 	bl	80005ac <Lcd_Write_Cmd>
Lcd_Write_Data((sy >> 8) & 0xFF);
 8000684:	887b      	ldrh	r3, [r7, #2]
 8000686:	0a1b      	lsrs	r3, r3, #8
 8000688:	b29b      	uxth	r3, r3
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff9e 	bl	80005cc <Lcd_Write_Data>
Lcd_Write_Data((sy >> 0) & 0xFF);
 8000690:	887b      	ldrh	r3, [r7, #2]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	b29b      	uxth	r3, r3
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff98 	bl	80005cc <Lcd_Write_Data>
Lcd_Write_Data((ey >> 8) & 0xFF);
 800069c:	883b      	ldrh	r3, [r7, #0]
 800069e:	0a1b      	lsrs	r3, r3, #8
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff92 	bl	80005cc <Lcd_Write_Data>
Lcd_Write_Data((ey >> 0) & 0xFF);
 80006a8:	883b      	ldrh	r3, [r7, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff8c 	bl	80005cc <Lcd_Write_Data>
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd90      	pop	{r4, r7, pc}

080006bc <Lcd_SetPixel>:
                }
	}
}

void Lcd_SetPixel(int16_t x, int16_t y, int16_t color)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
 80006c6:	460b      	mov	r3, r1
 80006c8:	80bb      	strh	r3, [r7, #4]
 80006ca:	4613      	mov	r3, r2
 80006cc:	807b      	strh	r3, [r7, #2]
Lcd_SetArea(x, x, y, y);
 80006ce:	88f8      	ldrh	r0, [r7, #6]
 80006d0:	88f9      	ldrh	r1, [r7, #6]
 80006d2:	88ba      	ldrh	r2, [r7, #4]
 80006d4:	88bb      	ldrh	r3, [r7, #4]
 80006d6:	f7ff ffa8 	bl	800062a <Lcd_SetArea>
Lcd_Write_Cmd(0x2c);
 80006da:	202c      	movs	r0, #44	@ 0x2c
 80006dc:	f7ff ff66 	bl	80005ac <Lcd_Write_Cmd>
Lcd_Write_Data(color);
 80006e0:	887b      	ldrh	r3, [r7, #2]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ff72 	bl	80005cc <Lcd_Write_Data>
Lcd_Write_Cmd(0x0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff ff5f 	bl	80005ac <Lcd_Write_Cmd>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <Init_SSD1963>:


void Init_SSD1963(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
//
//Lcd_Write_Cmd(0x2c);



LCD_Write_COM(0xE2);		//PLL multiplier, set PLL clock to 120M
 80006fa:	20e2      	movs	r0, #226	@ 0xe2
 80006fc:	f7ff ff86 	bl	800060c <LCD_Write_COM>
LCD_Write_DATA(0x23);	    //N=0x36 for 6.5M, 0x23 for 10M crystal
 8000700:	2023      	movs	r0, #35	@ 0x23
 8000702:	f7ff ff73 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x02);
 8000706:	2002      	movs	r0, #2
 8000708:	f7ff ff70 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x04);
 800070c:	2004      	movs	r0, #4
 800070e:	f7ff ff6d 	bl	80005ec <LCD_Write_DATA>
LCD_Write_COM(0xE0);		// PLL enable
 8000712:	20e0      	movs	r0, #224	@ 0xe0
 8000714:	f7ff ff7a 	bl	800060c <LCD_Write_COM>
LCD_Write_DATA(0x01);
 8000718:	2001      	movs	r0, #1
 800071a:	f7ff ff67 	bl	80005ec <LCD_Write_DATA>
HAL_Delay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f002 fda0 	bl	8003264 <HAL_Delay>
LCD_Write_COM(0xE0);
 8000724:	20e0      	movs	r0, #224	@ 0xe0
 8000726:	f7ff ff71 	bl	800060c <LCD_Write_COM>
LCD_Write_DATA(0x03);
 800072a:	2003      	movs	r0, #3
 800072c:	f7ff ff5e 	bl	80005ec <LCD_Write_DATA>
HAL_Delay(10);
 8000730:	200a      	movs	r0, #10
 8000732:	f002 fd97 	bl	8003264 <HAL_Delay>
LCD_Write_COM(0x01);		// software reset
 8000736:	2001      	movs	r0, #1
 8000738:	f7ff ff68 	bl	800060c <LCD_Write_COM>
HAL_Delay(100);
 800073c:	2064      	movs	r0, #100	@ 0x64
 800073e:	f002 fd91 	bl	8003264 <HAL_Delay>
LCD_Write_COM(0xE6);		//PLL setting for PCLK, depends on resolution
 8000742:	20e6      	movs	r0, #230	@ 0xe6
 8000744:	f7ff ff62 	bl	800060c <LCD_Write_COM>
LCD_Write_DATA(0x04);
 8000748:	2004      	movs	r0, #4
 800074a:	f7ff ff4f 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x93);
 800074e:	2093      	movs	r0, #147	@ 0x93
 8000750:	f7ff ff4c 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0xE0);
 8000754:	20e0      	movs	r0, #224	@ 0xe0
 8000756:	f7ff ff49 	bl	80005ec <LCD_Write_DATA>

LCD_Write_COM(0xB0);		//LCD SPECIFICATION
 800075a:	20b0      	movs	r0, #176	@ 0xb0
 800075c:	f7ff ff56 	bl	800060c <LCD_Write_COM>
LCD_Write_DATA(0x00);	// 0x24
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff ff43 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff ff40 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x03);		//Set HDP	799
 800076c:	2003      	movs	r0, #3
 800076e:	f7ff ff3d 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x1F);
 8000772:	201f      	movs	r0, #31
 8000774:	f7ff ff3a 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x01);		//Set VDP	479
 8000778:	2001      	movs	r0, #1
 800077a:	f7ff ff37 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0xDF);
 800077e:	20df      	movs	r0, #223	@ 0xdf
 8000780:	f7ff ff34 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff ff31 	bl	80005ec <LCD_Write_DATA>

LCD_Write_COM(0xB4);		//HSYNC
 800078a:	20b4      	movs	r0, #180	@ 0xb4
 800078c:	f7ff ff3e 	bl	800060c <LCD_Write_COM>
LCD_Write_DATA(0x03);		//Set HT	928
 8000790:	2003      	movs	r0, #3
 8000792:	f7ff ff2b 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0xA0);
 8000796:	20a0      	movs	r0, #160	@ 0xa0
 8000798:	f7ff ff28 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set HPS	46
 800079c:	2000      	movs	r0, #0
 800079e:	f7ff ff25 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x2E);
 80007a2:	202e      	movs	r0, #46	@ 0x2e
 80007a4:	f7ff ff22 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x30);		//Set HPW	48
 80007a8:	2030      	movs	r0, #48	@ 0x30
 80007aa:	f7ff ff1f 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set LPS	15
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff ff1c 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x0F);
 80007b4:	200f      	movs	r0, #15
 80007b6:	f7ff ff19 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f7ff ff16 	bl	80005ec <LCD_Write_DATA>

LCD_Write_COM(0xB6);		//VSYNC
 80007c0:	20b6      	movs	r0, #182	@ 0xb6
 80007c2:	f7ff ff23 	bl	800060c <LCD_Write_COM>
LCD_Write_DATA(0x02);		//Set VT	525
 80007c6:	2002      	movs	r0, #2
 80007c8:	f7ff ff10 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x0D);
 80007cc:	200d      	movs	r0, #13
 80007ce:	f7ff ff0d 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set VPS	16
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff ff0a 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x10);
 80007d8:	2010      	movs	r0, #16
 80007da:	f7ff ff07 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x10);		//Set VPW	16
 80007de:	2010      	movs	r0, #16
 80007e0:	f7ff ff04 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set FPS	8
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff ff01 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x08);
 80007ea:	2008      	movs	r0, #8
 80007ec:	f7ff fefe 	bl	80005ec <LCD_Write_DATA>

LCD_Write_COM(0xBA);
 80007f0:	20ba      	movs	r0, #186	@ 0xba
 80007f2:	f7ff ff0b 	bl	800060c <LCD_Write_COM>
LCD_Write_DATA(0x05);		//GPIO[3:0] out 1
 80007f6:	2005      	movs	r0, #5
 80007f8:	f7ff fef8 	bl	80005ec <LCD_Write_DATA>

LCD_Write_COM(0xB8);
 80007fc:	20b8      	movs	r0, #184	@ 0xb8
 80007fe:	f7ff ff05 	bl	800060c <LCD_Write_COM>
LCD_Write_DATA(0x07);	    //GPIO3=input, GPIO[2:0]=output
 8000802:	2007      	movs	r0, #7
 8000804:	f7ff fef2 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x01);		//GPIO0 normal
 8000808:	2001      	movs	r0, #1
 800080a:	f7ff feef 	bl	80005ec <LCD_Write_DATA>

//LCD_Write_COM(0x36);		//rotation
//LCD_Write_DATA(0x21);		// -- Set to 0x22 to rotate 180 degrees 0x21

LCD_Write_COM(0xba);		//rotation
 800080e:	20ba      	movs	r0, #186	@ 0xba
 8000810:	f7ff fefc 	bl	800060c <LCD_Write_COM>
LCD_Write_DATA(0x01);		// -- Set to 0x22 to rotate 180 degrees 0x21
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff fee9 	bl	80005ec <LCD_Write_DATA>


LCD_Write_COM(0xF0);		//pixel data interface
 800081a:	20f0      	movs	r0, #240	@ 0xf0
 800081c:	f7ff fef6 	bl	800060c <LCD_Write_COM>
LCD_Write_DATA(0x03);
 8000820:	2003      	movs	r0, #3
 8000822:	f7ff fee3 	bl	80005ec <LCD_Write_DATA>


HAL_Delay(10);
 8000826:	200a      	movs	r0, #10
 8000828:	f002 fd1c 	bl	8003264 <HAL_Delay>
//Lcd_Write_Data(0x00);//SET start page address=0
//Lcd_Write_Data(0x00);
//Lcd_Write_Data(0x01);//SET end page address=479
//Lcd_Write_Data(0xdf);  //1f

LCD_Write_COM(0x29);		//display on
 800082c:	2029      	movs	r0, #41	@ 0x29
 800082e:	f7ff feed 	bl	800060c <LCD_Write_COM>

LCD_Write_COM(0xBE);		//set PWM for B/L
 8000832:	20be      	movs	r0, #190	@ 0xbe
 8000834:	f7ff feea 	bl	800060c <LCD_Write_COM>
LCD_Write_DATA(0x06);
 8000838:	2006      	movs	r0, #6
 800083a:	f7ff fed7 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0xF0);
 800083e:	20f0      	movs	r0, #240	@ 0xf0
 8000840:	f7ff fed4 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x01);
 8000844:	2001      	movs	r0, #1
 8000846:	f7ff fed1 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0xF0);
 800084a:	20f0      	movs	r0, #240	@ 0xf0
 800084c:	f7ff fece 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff fecb 	bl	80005ec <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff fec8 	bl	80005ec <LCD_Write_DATA>

LCD_Write_COM(0xD0);
 800085c:	20d0      	movs	r0, #208	@ 0xd0
 800085e:	f7ff fed5 	bl	800060c <LCD_Write_COM>
LCD_Write_DATA(0x0D);
 8000862:	200d      	movs	r0, #13
 8000864:	f7ff fec2 	bl	80005ec <LCD_Write_DATA>

LCD_Write_COM(0x2C);
 8000868:	202c      	movs	r0, #44	@ 0x2c
 800086a:	f7ff fecf 	bl	800060c <LCD_Write_COM>


}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}

08000872 <TFT_Send_Cmd>:
//===========================================================================
//===========================================================================
//�-��� ��� �������� ������
//static __inline  - not work before define of function 
void 	TFT_Send_Cmd(uint8_t index)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	71fb      	strb	r3, [r7, #7]
	*(uint8_t *) (LCD_REG) = index;	  
 800087c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	7013      	strb	r3, [r2, #0]
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <TFT_Write_Data>:

//�-��� ��� �������� ������
void TFT_Write_Data(uint16_t data)
{   
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
    *(uint16_t *) (LCD_DATA) = data; 	
 800089a:	4a04      	ldr	r2, [pc, #16]	@ (80008ac <TFT_Write_Data+0x1c>)
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	8013      	strh	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	60020000 	.word	0x60020000

080008b0 <TFT_Set_X>:
//�-��� ������������� ������� ������� �� X
void TFT_Set_X(uint16_t start_x,uint16_t end_x)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	460a      	mov	r2, r1
 80008ba:	80fb      	strh	r3, [r7, #6]
 80008bc:	4613      	mov	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	TFT_Send_Cmd(0x002A);
 80008c0:	202a      	movs	r0, #42	@ 0x2a
 80008c2:	f7ff ffd6 	bl	8000872 <TFT_Send_Cmd>
	TFT_Write_Data(start_x>>8);
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ffdf 	bl	8000890 <TFT_Write_Data>
	TFT_Write_Data(start_x&0x00ff);
 80008d2:	88fb      	ldrh	r3, [r7, #6]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ffd9 	bl	8000890 <TFT_Write_Data>
	
	TFT_Write_Data(end_x>>8);
 80008de:	88bb      	ldrh	r3, [r7, #4]
 80008e0:	0a1b      	lsrs	r3, r3, #8
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ffd3 	bl	8000890 <TFT_Write_Data>
	TFT_Write_Data(end_x&0x00ff);
 80008ea:	88bb      	ldrh	r3, [r7, #4]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ffcd 	bl	8000890 <TFT_Write_Data>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <TFT_Set_Y>:

//�-��� ������������� ������� ������� �� Y
void TFT_Set_Y(uint16_t start_y,uint16_t end_y)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	460a      	mov	r2, r1
 8000908:	80fb      	strh	r3, [r7, #6]
 800090a:	4613      	mov	r3, r2
 800090c:	80bb      	strh	r3, [r7, #4]
	TFT_Send_Cmd(0x002B);
 800090e:	202b      	movs	r0, #43	@ 0x2b
 8000910:	f7ff ffaf 	bl	8000872 <TFT_Send_Cmd>
	TFT_Write_Data(start_y>>8);
 8000914:	88fb      	ldrh	r3, [r7, #6]
 8000916:	0a1b      	lsrs	r3, r3, #8
 8000918:	b29b      	uxth	r3, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ffb8 	bl	8000890 <TFT_Write_Data>
	TFT_Write_Data(start_y&0x00ff);
 8000920:	88fb      	ldrh	r3, [r7, #6]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	b29b      	uxth	r3, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ffb2 	bl	8000890 <TFT_Write_Data>
	
	TFT_Write_Data(end_y>>8);
 800092c:	88bb      	ldrh	r3, [r7, #4]
 800092e:	0a1b      	lsrs	r3, r3, #8
 8000930:	b29b      	uxth	r3, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ffac 	bl	8000890 <TFT_Write_Data>
	TFT_Write_Data(end_y&0x00ff);
 8000938:	88bb      	ldrh	r3, [r7, #4]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	b29b      	uxth	r3, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff ffa6 	bl	8000890 <TFT_Write_Data>
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <TFT_Set_Work_Area>:
}


//�-���  ������ ���������� ������� �������
void TFT_Set_Work_Area(uint16_t x, uint16_t y, uint16_t length, uint16_t width)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4604      	mov	r4, r0
 8000954:	4608      	mov	r0, r1
 8000956:	4611      	mov	r1, r2
 8000958:	461a      	mov	r2, r3
 800095a:	4623      	mov	r3, r4
 800095c:	80fb      	strh	r3, [r7, #6]
 800095e:	4603      	mov	r3, r0
 8000960:	80bb      	strh	r3, [r7, #4]
 8000962:	460b      	mov	r3, r1
 8000964:	807b      	strh	r3, [r7, #2]
 8000966:	4613      	mov	r3, r2
 8000968:	803b      	strh	r3, [r7, #0]
	TFT_Set_X(x, x+length-1);
 800096a:	88fa      	ldrh	r2, [r7, #6]
 800096c:	887b      	ldrh	r3, [r7, #2]
 800096e:	4413      	add	r3, r2
 8000970:	b29b      	uxth	r3, r3
 8000972:	3b01      	subs	r3, #1
 8000974:	b29a      	uxth	r2, r3
 8000976:	88fb      	ldrh	r3, [r7, #6]
 8000978:	4611      	mov	r1, r2
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ff98 	bl	80008b0 <TFT_Set_X>
	TFT_Set_Y(y, y+width-1);
 8000980:	88ba      	ldrh	r2, [r7, #4]
 8000982:	883b      	ldrh	r3, [r7, #0]
 8000984:	4413      	add	r3, r2
 8000986:	b29b      	uxth	r3, r3
 8000988:	3b01      	subs	r3, #1
 800098a:	b29a      	uxth	r2, r3
 800098c:	88bb      	ldrh	r3, [r7, #4]
 800098e:	4611      	mov	r1, r2
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ffb4 	bl	80008fe <TFT_Set_Y>
	TFT_Send_Cmd(0x2C);
 8000996:	202c      	movs	r0, #44	@ 0x2c
 8000998:	f7ff ff6b 	bl	8000872 <TFT_Send_Cmd>
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd90      	pop	{r4, r7, pc}

080009a4 <TFT_Clear_Screen>:


void TFT_Clear_Screen(uint16_t color)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	80fb      	strh	r3, [r7, #6]
	uint32_t i=0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
	TFT_Set_Work_Area(0,0,800,480);
 80009b2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80009b6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80009ba:	2100      	movs	r1, #0
 80009bc:	2000      	movs	r0, #0
 80009be:	f7ff ffc5 	bl	800094c <TFT_Set_Work_Area>
	for(i=0; i < 384000; i++)
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e006      	b.n	80009d6 <TFT_Clear_Screen+0x32>
	{
		TFT_Write_Data(color);	//������� ��������� �����
 80009c8:	88fb      	ldrh	r3, [r7, #6]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ff60 	bl	8000890 <TFT_Write_Data>
	for(i=0; i < 384000; i++)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3301      	adds	r3, #1
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4a03      	ldr	r2, [pc, #12]	@ (80009e8 <TFT_Clear_Screen+0x44>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d9f4      	bls.n	80009c8 <TFT_Clear_Screen+0x24>
	}
}
 80009de:	bf00      	nop
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	0005dbff 	.word	0x0005dbff

080009ec <TFT_Draw_HLine>:
	}
}

//�-��� ������ �������������� �����, ��������� �����, ������� � �����
void TFT_Draw_HLine(uint16_t x, uint16_t y, uint16_t length, uint16_t size, uint16_t color)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4604      	mov	r4, r0
 80009f4:	4608      	mov	r0, r1
 80009f6:	4611      	mov	r1, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	4623      	mov	r3, r4
 80009fc:	80fb      	strh	r3, [r7, #6]
 80009fe:	4603      	mov	r3, r0
 8000a00:	80bb      	strh	r3, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	807b      	strh	r3, [r7, #2]
 8000a06:	4613      	mov	r3, r2
 8000a08:	803b      	strh	r3, [r7, #0]
	uint16_t i=0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	81fb      	strh	r3, [r7, #14]
	
	TFT_Set_Work_Area(x,y,length,size);
 8000a0e:	883b      	ldrh	r3, [r7, #0]
 8000a10:	887a      	ldrh	r2, [r7, #2]
 8000a12:	88b9      	ldrh	r1, [r7, #4]
 8000a14:	88f8      	ldrh	r0, [r7, #6]
 8000a16:	f7ff ff99 	bl	800094c <TFT_Set_Work_Area>
	for(i=0; i<(length*size); i++)
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	81fb      	strh	r3, [r7, #14]
 8000a1e:	e006      	b.n	8000a2e <TFT_Draw_HLine+0x42>
	TFT_Write_Data(color);
 8000a20:	8c3b      	ldrh	r3, [r7, #32]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ff34 	bl	8000890 <TFT_Write_Data>
	for(i=0; i<(length*size); i++)
 8000a28:	89fb      	ldrh	r3, [r7, #14]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	81fb      	strh	r3, [r7, #14]
 8000a2e:	89fa      	ldrh	r2, [r7, #14]
 8000a30:	887b      	ldrh	r3, [r7, #2]
 8000a32:	8839      	ldrh	r1, [r7, #0]
 8000a34:	fb01 f303 	mul.w	r3, r1, r3
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dbf1      	blt.n	8000a20 <TFT_Draw_HLine+0x34>
}
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd90      	pop	{r4, r7, pc}

08000a46 <TFT_Draw_VLine>:

//�-��� ������ ������������ �����, ��������� �����, ������� � �����
void TFT_Draw_VLine(uint16_t x, uint16_t y, uint16_t length, uint16_t size, uint16_t color)
{
 8000a46:	b590      	push	{r4, r7, lr}
 8000a48:	b085      	sub	sp, #20
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	4608      	mov	r0, r1
 8000a50:	4611      	mov	r1, r2
 8000a52:	461a      	mov	r2, r3
 8000a54:	4623      	mov	r3, r4
 8000a56:	80fb      	strh	r3, [r7, #6]
 8000a58:	4603      	mov	r3, r0
 8000a5a:	80bb      	strh	r3, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	807b      	strh	r3, [r7, #2]
 8000a60:	4613      	mov	r3, r2
 8000a62:	803b      	strh	r3, [r7, #0]
	uint16_t i=0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	81fb      	strh	r3, [r7, #14]
	
	TFT_Set_Work_Area(x,y,size,length);
 8000a68:	887b      	ldrh	r3, [r7, #2]
 8000a6a:	883a      	ldrh	r2, [r7, #0]
 8000a6c:	88b9      	ldrh	r1, [r7, #4]
 8000a6e:	88f8      	ldrh	r0, [r7, #6]
 8000a70:	f7ff ff6c 	bl	800094c <TFT_Set_Work_Area>
	for(i=0; i<(length*size); i++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	81fb      	strh	r3, [r7, #14]
 8000a78:	e006      	b.n	8000a88 <TFT_Draw_VLine+0x42>
	TFT_Write_Data(color);
 8000a7a:	8c3b      	ldrh	r3, [r7, #32]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff07 	bl	8000890 <TFT_Write_Data>
	for(i=0; i<(length*size); i++)
 8000a82:	89fb      	ldrh	r3, [r7, #14]
 8000a84:	3301      	adds	r3, #1
 8000a86:	81fb      	strh	r3, [r7, #14]
 8000a88:	89fa      	ldrh	r2, [r7, #14]
 8000a8a:	887b      	ldrh	r3, [r7, #2]
 8000a8c:	8839      	ldrh	r1, [r7, #0]
 8000a8e:	fb01 f303 	mul.w	r3, r1, r3
 8000a92:	429a      	cmp	r2, r3
 8000a94:	dbf1      	blt.n	8000a7a <TFT_Draw_VLine+0x34>
}
 8000a96:	bf00      	nop
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd90      	pop	{r4, r7, pc}

08000aa0 <TFT_Draw_Fill_Rectangle>:
	TFT_Draw_VLine(x + length - size, y, width, size, color);
}

//�-��� ������ ����������� �������������, ��������� �����, ������, �����
void TFT_Draw_Fill_Rectangle(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t color)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4604      	mov	r4, r0
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	4611      	mov	r1, r2
 8000aac:	461a      	mov	r2, r3
 8000aae:	4623      	mov	r3, r4
 8000ab0:	80fb      	strh	r3, [r7, #6]
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80bb      	strh	r3, [r7, #4]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	807b      	strh	r3, [r7, #2]
 8000aba:	4613      	mov	r3, r2
 8000abc:	803b      	strh	r3, [r7, #0]
	uint32_t i=0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
	
	TFT_Set_Work_Area(x,y,length, width);
 8000ac2:	883b      	ldrh	r3, [r7, #0]
 8000ac4:	887a      	ldrh	r2, [r7, #2]
 8000ac6:	88b9      	ldrh	r1, [r7, #4]
 8000ac8:	88f8      	ldrh	r0, [r7, #6]
 8000aca:	f7ff ff3f 	bl	800094c <TFT_Set_Work_Area>
	for(i=0; i < length*width; i++)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	e006      	b.n	8000ae2 <TFT_Draw_Fill_Rectangle+0x42>
	{
		TFT_Write_Data(color);	//������� ��������� �����
 8000ad4:	8c3b      	ldrh	r3, [r7, #32]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff feda 	bl	8000890 <TFT_Write_Data>
	for(i=0; i < length*width; i++)
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	887b      	ldrh	r3, [r7, #2]
 8000ae4:	883a      	ldrh	r2, [r7, #0]
 8000ae6:	fb02 f303 	mul.w	r3, r2, r3
 8000aea:	461a      	mov	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d3f0      	bcc.n	8000ad4 <TFT_Draw_Fill_Rectangle+0x34>
	}
}
 8000af2:	bf00      	nop
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd90      	pop	{r4, r7, pc}

08000afc <TFT_Draw_Fill_Triangle_Simple>:


void TFT_Draw_Fill_Triangle_Simple(uint16_t x, uint16_t y,
                                   uint16_t width, uint16_t height,
                                   uint8_t size, uint16_t color)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b087      	sub	sp, #28
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	4604      	mov	r4, r0
 8000b04:	4608      	mov	r0, r1
 8000b06:	4611      	mov	r1, r2
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4623      	mov	r3, r4
 8000b0c:	80fb      	strh	r3, [r7, #6]
 8000b0e:	4603      	mov	r3, r0
 8000b10:	80bb      	strh	r3, [r7, #4]
 8000b12:	460b      	mov	r3, r1
 8000b14:	807b      	strh	r3, [r7, #2]
 8000b16:	4613      	mov	r3, r2
 8000b18:	803b      	strh	r3, [r7, #0]
    for (uint16_t i = 0; i <= height; i++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	81fb      	strh	r3, [r7, #14]
 8000b1e:	e022      	b.n	8000b66 <TFT_Draw_Fill_Triangle_Simple+0x6a>
    {
        // para cada linha i, a largura cresce de 0 até width
        uint16_t w = (uint32_t)width * i / height;
 8000b20:	887b      	ldrh	r3, [r7, #2]
 8000b22:	89fa      	ldrh	r2, [r7, #14]
 8000b24:	fb03 f202 	mul.w	r2, r3, r2
 8000b28:	883b      	ldrh	r3, [r7, #0]
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	81bb      	strh	r3, [r7, #12]
        // desloca de forma a manter o triângulo centrado na caixa
        uint16_t x0 = x + (width - w) / 2;
 8000b30:	887a      	ldrh	r2, [r7, #2]
 8000b32:	89bb      	ldrh	r3, [r7, #12]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	0fda      	lsrs	r2, r3, #31
 8000b38:	4413      	add	r3, r2
 8000b3a:	105b      	asrs	r3, r3, #1
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	4413      	add	r3, r2
 8000b42:	817b      	strh	r3, [r7, #10]
        TFT_Draw_HLine(x0, y + i, w, size, color);
 8000b44:	88ba      	ldrh	r2, [r7, #4]
 8000b46:	89fb      	ldrh	r3, [r7, #14]
 8000b48:	4413      	add	r3, r2
 8000b4a:	b299      	uxth	r1, r3
 8000b4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b50:	b29c      	uxth	r4, r3
 8000b52:	89ba      	ldrh	r2, [r7, #12]
 8000b54:	8978      	ldrh	r0, [r7, #10]
 8000b56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	4623      	mov	r3, r4
 8000b5c:	f7ff ff46 	bl	80009ec <TFT_Draw_HLine>
    for (uint16_t i = 0; i <= height; i++)
 8000b60:	89fb      	ldrh	r3, [r7, #14]
 8000b62:	3301      	adds	r3, #1
 8000b64:	81fb      	strh	r3, [r7, #14]
 8000b66:	89fa      	ldrh	r2, [r7, #14]
 8000b68:	883b      	ldrh	r3, [r7, #0]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d9d8      	bls.n	8000b20 <TFT_Draw_Fill_Triangle_Simple+0x24>
    }
}
 8000b6e:	bf00      	nop
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd90      	pop	{r4, r7, pc}

08000b78 <TFT_Draw_Fill_Triangle_Inverted_Simple>:
// Preenche um triângulo isósceles apontando para baixo
// mesma convenção de parâmetros, mas base no topo
void TFT_Draw_Fill_Triangle_Inverted_Simple(uint16_t x, uint16_t y,
                                            uint16_t width, uint16_t height,
                                            uint8_t size, uint16_t color)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b087      	sub	sp, #28
 8000b7c:	af02      	add	r7, sp, #8
 8000b7e:	4604      	mov	r4, r0
 8000b80:	4608      	mov	r0, r1
 8000b82:	4611      	mov	r1, r2
 8000b84:	461a      	mov	r2, r3
 8000b86:	4623      	mov	r3, r4
 8000b88:	80fb      	strh	r3, [r7, #6]
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80bb      	strh	r3, [r7, #4]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	807b      	strh	r3, [r7, #2]
 8000b92:	4613      	mov	r3, r2
 8000b94:	803b      	strh	r3, [r7, #0]
    for (uint16_t i = 0; i <= height; i++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	81fb      	strh	r3, [r7, #14]
 8000b9a:	e024      	b.n	8000be6 <TFT_Draw_Fill_Triangle_Inverted_Simple+0x6e>
    {
        // aqui a largura decresce de width até 0
        uint16_t w = (uint32_t)width * (height - i) / height;
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	8839      	ldrh	r1, [r7, #0]
 8000ba0:	89fa      	ldrh	r2, [r7, #14]
 8000ba2:	1a8a      	subs	r2, r1, r2
 8000ba4:	fb03 f202 	mul.w	r2, r3, r2
 8000ba8:	883b      	ldrh	r3, [r7, #0]
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	81bb      	strh	r3, [r7, #12]
        uint16_t x0 = x + (width - w) / 2;
 8000bb0:	887a      	ldrh	r2, [r7, #2]
 8000bb2:	89bb      	ldrh	r3, [r7, #12]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	0fda      	lsrs	r2, r3, #31
 8000bb8:	4413      	add	r3, r2
 8000bba:	105b      	asrs	r3, r3, #1
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	817b      	strh	r3, [r7, #10]
        TFT_Draw_HLine(x0, y + i, w, size, color);
 8000bc4:	88ba      	ldrh	r2, [r7, #4]
 8000bc6:	89fb      	ldrh	r3, [r7, #14]
 8000bc8:	4413      	add	r3, r2
 8000bca:	b299      	uxth	r1, r3
 8000bcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bd0:	b29c      	uxth	r4, r3
 8000bd2:	89ba      	ldrh	r2, [r7, #12]
 8000bd4:	8978      	ldrh	r0, [r7, #10]
 8000bd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	4623      	mov	r3, r4
 8000bdc:	f7ff ff06 	bl	80009ec <TFT_Draw_HLine>
    for (uint16_t i = 0; i <= height; i++)
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	3301      	adds	r3, #1
 8000be4:	81fb      	strh	r3, [r7, #14]
 8000be6:	89fa      	ldrh	r2, [r7, #14]
 8000be8:	883b      	ldrh	r3, [r7, #0]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d9d6      	bls.n	8000b9c <TFT_Draw_Fill_Triangle_Inverted_Simple+0x24>
    }
}
 8000bee:	bf00      	nop
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd90      	pop	{r4, r7, pc}

08000bf8 <TFT_Draw_Circle>:
}

//�-��� ������ ���������� ������� �������, ������ �������� ������� � ��������� ������, ����� �������� 
//������ ���������� ������ ������ ��� ����� ���������� �������� fill ������ �������, ����� ����
void TFT_Draw_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint16_t color)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b089      	sub	sp, #36	@ 0x24
 8000bfc:	af02      	add	r7, sp, #8
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4608      	mov	r0, r1
 8000c02:	4611      	mov	r1, r2
 8000c04:	461a      	mov	r2, r3
 8000c06:	4623      	mov	r3, r4
 8000c08:	80fb      	strh	r3, [r7, #6]
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80bb      	strh	r3, [r7, #4]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	70fb      	strb	r3, [r7, #3]
 8000c12:	4613      	mov	r3, r2
 8000c14:	70bb      	strb	r3, [r7, #2]
	int a_,b_,P;
	a_ = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
	b_ = radius;
 8000c1a:	78fb      	ldrb	r3, [r7, #3]
 8000c1c:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 8000c1e:	78fb      	ldrb	r3, [r7, #3]
 8000c20:	f1c3 0301 	rsb	r3, r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 8000c26:	e0fc      	b.n	8000e22 <TFT_Draw_Circle+0x22a>
	{
		if(fill == 1)
 8000c28:	78bb      	ldrb	r3, [r7, #2]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d136      	bne.n	8000c9c <TFT_Draw_Circle+0xa4>
		{
			TFT_Draw_Fill_Rectangle(x-a_,y-b_,2*a_+1,2*b_+1,color);
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	88fa      	ldrh	r2, [r7, #6]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	b298      	uxth	r0, r3
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	88ba      	ldrh	r2, [r7, #4]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	b299      	uxth	r1, r3
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	3301      	adds	r3, #1
 8000c58:	b29c      	uxth	r4, r3
 8000c5a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	4623      	mov	r3, r4
 8000c60:	f7ff ff1e 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-b_,y-a_,2*b_+1,2*a_+1,color);
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	88fa      	ldrh	r2, [r7, #6]
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	b298      	uxth	r0, r3
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	88ba      	ldrh	r2, [r7, #4]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	b299      	uxth	r1, r3
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	3301      	adds	r3, #1
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	b29c      	uxth	r4, r3
 8000c90:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	4623      	mov	r3, r4
 8000c96:	f7ff ff03 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
 8000c9a:	e0a7      	b.n	8000dec <TFT_Draw_Circle+0x1f4>
		}
		else
		{
			TFT_Draw_Fill_Rectangle(a_+x, b_+y, size, size, color);
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	b298      	uxth	r0, r3
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	88bb      	ldrh	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	b299      	uxth	r1, r3
 8000cb0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000cba:	b29c      	uxth	r4, r3
 8000cbc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	4623      	mov	r3, r4
 8000cc2:	f7ff feed 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(b_+x, a_+y, size, size, color);
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	4413      	add	r3, r2
 8000cce:	b298      	uxth	r0, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	88bb      	ldrh	r3, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b299      	uxth	r1, r3
 8000cda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ce4:	b29c      	uxth	r4, r3
 8000ce6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	4623      	mov	r3, r4
 8000cec:	f7ff fed8 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-a_, b_+y, size, size, color);
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	88fa      	ldrh	r2, [r7, #6]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	b298      	uxth	r0, r3
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	88bb      	ldrh	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	b299      	uxth	r1, r3
 8000d04:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000d0e:	b29c      	uxth	r4, r3
 8000d10:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	4623      	mov	r3, r4
 8000d16:	f7ff fec3 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-b_, a_+y, size, size, color);
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	88fa      	ldrh	r2, [r7, #6]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	b298      	uxth	r0, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	88bb      	ldrh	r3, [r7, #4]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b299      	uxth	r1, r3
 8000d2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000d38:	b29c      	uxth	r4, r3
 8000d3a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	4623      	mov	r3, r4
 8000d40:	f7ff feae 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(b_+x, y-a_, size, size, color);
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b298      	uxth	r0, r3
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	88ba      	ldrh	r2, [r7, #4]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	b299      	uxth	r1, r3
 8000d58:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000d62:	b29c      	uxth	r4, r3
 8000d64:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	4623      	mov	r3, r4
 8000d6a:	f7ff fe99 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(a_+x, y-b_, size, size, color);
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	4413      	add	r3, r2
 8000d76:	b298      	uxth	r0, r3
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	88ba      	ldrh	r2, [r7, #4]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	b299      	uxth	r1, r3
 8000d82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000d8c:	b29c      	uxth	r4, r3
 8000d8e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	4623      	mov	r3, r4
 8000d94:	f7ff fe84 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-a_, y-b_, size, size, color);
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	88fa      	ldrh	r2, [r7, #6]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	b298      	uxth	r0, r3
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	88ba      	ldrh	r2, [r7, #4]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	b299      	uxth	r1, r3
 8000dac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000db6:	b29c      	uxth	r4, r3
 8000db8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	4623      	mov	r3, r4
 8000dbe:	f7ff fe6f 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-b_, y-a_, size, size, color);
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	88fa      	ldrh	r2, [r7, #6]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	b298      	uxth	r0, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	88ba      	ldrh	r2, [r7, #4]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	b299      	uxth	r1, r3
 8000dd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000de0:	b29c      	uxth	r4, r3
 8000de2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	4623      	mov	r3, r4
 8000de8:	f7ff fe5a 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
		}
		if (P < 0 )
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	da09      	bge.n	8000e06 <TFT_Draw_Circle+0x20e>
		{
			P = (P + 3) + (2* a_);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	1cda      	adds	r2, r3, #3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
			a_ ++;
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3301      	adds	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	e00d      	b.n	8000e22 <TFT_Draw_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2* (a_ - b_));
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	1d5a      	adds	r2, r3, #5
 8000e0a:	6979      	ldr	r1, [r7, #20]
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	1acb      	subs	r3, r1, r3
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	4413      	add	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
			a_ ++;
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
			b_ --;
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	f77f aefe 	ble.w	8000c28 <TFT_Draw_Circle+0x30>
		}
	}
}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	371c      	adds	r7, #28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd90      	pop	{r4, r7, pc}

08000e36 <TFT_Draw_Circle_Helper>:

//��������������� �-��� ��� ����������� ���� ��������������
void TFT_Draw_Circle_Helper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint16_t color)
{
 8000e36:	b590      	push	{r4, r7, lr}
 8000e38:	b089      	sub	sp, #36	@ 0x24
 8000e3a:	af02      	add	r7, sp, #8
 8000e3c:	4604      	mov	r4, r0
 8000e3e:	4608      	mov	r0, r1
 8000e40:	4611      	mov	r1, r2
 8000e42:	461a      	mov	r2, r3
 8000e44:	4623      	mov	r3, r4
 8000e46:	80fb      	strh	r3, [r7, #6]
 8000e48:	4603      	mov	r3, r0
 8000e4a:	80bb      	strh	r3, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]
 8000e50:	4613      	mov	r3, r2
 8000e52:	707b      	strb	r3, [r7, #1]
  int16_t f     = 1 - r;
 8000e54:	887b      	ldrh	r3, [r7, #2]
 8000e56:	f1c3 0301 	rsb	r3, r3, #1
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8000e62:	887b      	ldrh	r3, [r7, #2]
 8000e64:	461a      	mov	r2, r3
 8000e66:	03d2      	lsls	r2, r2, #15
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8000e78:	e0cd      	b.n	8001016 <TFT_Draw_Circle_Helper+0x1e0>
    if (f >= 0) {
 8000e7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0e      	blt.n	8000ea0 <TFT_Draw_Circle_Helper+0x6a>
      y--;
 8000e82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8000e8e:	8a7b      	ldrh	r3, [r7, #18]
 8000e90:	3302      	adds	r3, #2
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8000e96:	8afa      	ldrh	r2, [r7, #22]
 8000e98:	8a7b      	ldrh	r3, [r7, #18]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8000ea0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8000eac:	8abb      	ldrh	r3, [r7, #20]
 8000eae:	3302      	adds	r3, #2
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8000eb4:	8afa      	ldrh	r2, [r7, #22]
 8000eb6:	8abb      	ldrh	r3, [r7, #20]
 8000eb8:	4413      	add	r3, r2
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	82fb      	strh	r3, [r7, #22]
    if (cornername & 0x4) {
 8000ebe:	787b      	ldrb	r3, [r7, #1]
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d025      	beq.n	8000f14 <TFT_Draw_Circle_Helper+0xde>
      TFT_Draw_Fill_Rectangle(x0 + x, y0 + y, size, size, color);
 8000ec8:	88fa      	ldrh	r2, [r7, #6]
 8000eca:	8a3b      	ldrh	r3, [r7, #16]
 8000ecc:	4413      	add	r3, r2
 8000ece:	b298      	uxth	r0, r3
 8000ed0:	88ba      	ldrh	r2, [r7, #4]
 8000ed2:	89fb      	ldrh	r3, [r7, #14]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	b299      	uxth	r1, r3
 8000ed8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ee2:	b29c      	uxth	r4, r3
 8000ee4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	4623      	mov	r3, r4
 8000eea:	f7ff fdd9 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 + y, y0 + x, size, size, color);
 8000eee:	88fa      	ldrh	r2, [r7, #6]
 8000ef0:	89fb      	ldrh	r3, [r7, #14]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	b298      	uxth	r0, r3
 8000ef6:	88ba      	ldrh	r2, [r7, #4]
 8000ef8:	8a3b      	ldrh	r3, [r7, #16]
 8000efa:	4413      	add	r3, r2
 8000efc:	b299      	uxth	r1, r3
 8000efe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f08:	b29c      	uxth	r4, r3
 8000f0a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	4623      	mov	r3, r4
 8000f10:	f7ff fdc6 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
    }
    if (cornername & 0x2) {
 8000f14:	787b      	ldrb	r3, [r7, #1]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d025      	beq.n	8000f6a <TFT_Draw_Circle_Helper+0x134>
      TFT_Draw_Fill_Rectangle(x0 + x, y0 - y, size, size, color);
 8000f1e:	88fa      	ldrh	r2, [r7, #6]
 8000f20:	8a3b      	ldrh	r3, [r7, #16]
 8000f22:	4413      	add	r3, r2
 8000f24:	b298      	uxth	r0, r3
 8000f26:	88ba      	ldrh	r2, [r7, #4]
 8000f28:	89fb      	ldrh	r3, [r7, #14]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	b299      	uxth	r1, r3
 8000f2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f38:	b29c      	uxth	r4, r3
 8000f3a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	4623      	mov	r3, r4
 8000f40:	f7ff fdae 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 + y, y0 - x, size, size, color);
 8000f44:	88fa      	ldrh	r2, [r7, #6]
 8000f46:	89fb      	ldrh	r3, [r7, #14]
 8000f48:	4413      	add	r3, r2
 8000f4a:	b298      	uxth	r0, r3
 8000f4c:	88ba      	ldrh	r2, [r7, #4]
 8000f4e:	8a3b      	ldrh	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	b299      	uxth	r1, r3
 8000f54:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f5e:	b29c      	uxth	r4, r3
 8000f60:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	4623      	mov	r3, r4
 8000f66:	f7ff fd9b 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
    }
    if (cornername & 0x8) {
 8000f6a:	787b      	ldrb	r3, [r7, #1]
 8000f6c:	f003 0308 	and.w	r3, r3, #8
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d025      	beq.n	8000fc0 <TFT_Draw_Circle_Helper+0x18a>
      TFT_Draw_Fill_Rectangle(x0 - y, y0 + x, size, size, color);
 8000f74:	88fa      	ldrh	r2, [r7, #6]
 8000f76:	89fb      	ldrh	r3, [r7, #14]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	b298      	uxth	r0, r3
 8000f7c:	88ba      	ldrh	r2, [r7, #4]
 8000f7e:	8a3b      	ldrh	r3, [r7, #16]
 8000f80:	4413      	add	r3, r2
 8000f82:	b299      	uxth	r1, r3
 8000f84:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f8e:	b29c      	uxth	r4, r3
 8000f90:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	4623      	mov	r3, r4
 8000f96:	f7ff fd83 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 - x, y0 + y, size, size, color);
 8000f9a:	88fa      	ldrh	r2, [r7, #6]
 8000f9c:	8a3b      	ldrh	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	b298      	uxth	r0, r3
 8000fa2:	88ba      	ldrh	r2, [r7, #4]
 8000fa4:	89fb      	ldrh	r3, [r7, #14]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b299      	uxth	r1, r3
 8000faa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000fb4:	b29c      	uxth	r4, r3
 8000fb6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	4623      	mov	r3, r4
 8000fbc:	f7ff fd70 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
    }
    if (cornername & 0x1) {
 8000fc0:	787b      	ldrb	r3, [r7, #1]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d025      	beq.n	8001016 <TFT_Draw_Circle_Helper+0x1e0>
      TFT_Draw_Fill_Rectangle(x0 - y, y0 - x, size, size, color);
 8000fca:	88fa      	ldrh	r2, [r7, #6]
 8000fcc:	89fb      	ldrh	r3, [r7, #14]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	b298      	uxth	r0, r3
 8000fd2:	88ba      	ldrh	r2, [r7, #4]
 8000fd4:	8a3b      	ldrh	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	b299      	uxth	r1, r3
 8000fda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000fe4:	b29c      	uxth	r4, r3
 8000fe6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	4623      	mov	r3, r4
 8000fec:	f7ff fd58 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 - x, y0 - y, size, size, color);
 8000ff0:	88fa      	ldrh	r2, [r7, #6]
 8000ff2:	8a3b      	ldrh	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	b298      	uxth	r0, r3
 8000ff8:	88ba      	ldrh	r2, [r7, #4]
 8000ffa:	89fb      	ldrh	r3, [r7, #14]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	b299      	uxth	r1, r3
 8001000:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001004:	b29a      	uxth	r2, r3
 8001006:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800100a:	b29c      	uxth	r4, r3
 800100c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	4623      	mov	r3, r4
 8001012:	f7ff fd45 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
  while (x<y) {
 8001016:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800101a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800101e:	429a      	cmp	r2, r3
 8001020:	f6ff af2b 	blt.w	8000e7a <TFT_Draw_Circle_Helper+0x44>
    }
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	371c      	adds	r7, #28
 800102a:	46bd      	mov	sp, r7
 800102c:	bd90      	pop	{r4, r7, pc}

0800102e <TFT_Draw_Round_Rect>:

//�-��� ������ ������������� �������� �����, ������, �������� ����������� ����, ������� ����� � ��������� ������
void TFT_Draw_Round_Rect(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint16_t color)
{
 800102e:	b590      	push	{r4, r7, lr}
 8001030:	b085      	sub	sp, #20
 8001032:	af02      	add	r7, sp, #8
 8001034:	4604      	mov	r4, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4611      	mov	r1, r2
 800103a:	461a      	mov	r2, r3
 800103c:	4623      	mov	r3, r4
 800103e:	80fb      	strh	r3, [r7, #6]
 8001040:	4603      	mov	r3, r0
 8001042:	80bb      	strh	r3, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
 8001048:	4613      	mov	r3, r2
 800104a:	803b      	strh	r3, [r7, #0]

  TFT_Draw_HLine(x+r  , y    , length-2*r, size, color); // Top
 800104c:	88fa      	ldrh	r2, [r7, #6]
 800104e:	8b3b      	ldrh	r3, [r7, #24]
 8001050:	4413      	add	r3, r2
 8001052:	b298      	uxth	r0, r3
 8001054:	8b3b      	ldrh	r3, [r7, #24]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	b29b      	uxth	r3, r3
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	b29a      	uxth	r2, r3
 8001060:	7f3b      	ldrb	r3, [r7, #28]
 8001062:	b29c      	uxth	r4, r3
 8001064:	88b9      	ldrh	r1, [r7, #4]
 8001066:	8c3b      	ldrh	r3, [r7, #32]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	4623      	mov	r3, r4
 800106c:	f7ff fcbe 	bl	80009ec <TFT_Draw_HLine>
  TFT_Draw_HLine(x+r  , y+width-1, length-2*r, size, color); // Bottom
 8001070:	88fa      	ldrh	r2, [r7, #6]
 8001072:	8b3b      	ldrh	r3, [r7, #24]
 8001074:	4413      	add	r3, r2
 8001076:	b298      	uxth	r0, r3
 8001078:	88ba      	ldrh	r2, [r7, #4]
 800107a:	883b      	ldrh	r3, [r7, #0]
 800107c:	4413      	add	r3, r2
 800107e:	b29b      	uxth	r3, r3
 8001080:	3b01      	subs	r3, #1
 8001082:	b299      	uxth	r1, r3
 8001084:	8b3b      	ldrh	r3, [r7, #24]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	b29b      	uxth	r3, r3
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	b29a      	uxth	r2, r3
 8001090:	7f3b      	ldrb	r3, [r7, #28]
 8001092:	b29c      	uxth	r4, r3
 8001094:	8c3b      	ldrh	r3, [r7, #32]
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	4623      	mov	r3, r4
 800109a:	f7ff fca7 	bl	80009ec <TFT_Draw_HLine>
  TFT_Draw_VLine(x    , y+r  , width-2*r, size, color); // Left
 800109e:	88ba      	ldrh	r2, [r7, #4]
 80010a0:	8b3b      	ldrh	r3, [r7, #24]
 80010a2:	4413      	add	r3, r2
 80010a4:	b299      	uxth	r1, r3
 80010a6:	8b3b      	ldrh	r3, [r7, #24]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	883a      	ldrh	r2, [r7, #0]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	7f3b      	ldrb	r3, [r7, #28]
 80010b4:	b29c      	uxth	r4, r3
 80010b6:	88f8      	ldrh	r0, [r7, #6]
 80010b8:	8c3b      	ldrh	r3, [r7, #32]
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	4623      	mov	r3, r4
 80010be:	f7ff fcc2 	bl	8000a46 <TFT_Draw_VLine>
  TFT_Draw_VLine(x+length-1, y+r  , width-2*r, size, color); // Right
 80010c2:	88fa      	ldrh	r2, [r7, #6]
 80010c4:	887b      	ldrh	r3, [r7, #2]
 80010c6:	4413      	add	r3, r2
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	3b01      	subs	r3, #1
 80010cc:	b298      	uxth	r0, r3
 80010ce:	88ba      	ldrh	r2, [r7, #4]
 80010d0:	8b3b      	ldrh	r3, [r7, #24]
 80010d2:	4413      	add	r3, r2
 80010d4:	b299      	uxth	r1, r3
 80010d6:	8b3b      	ldrh	r3, [r7, #24]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	b29b      	uxth	r3, r3
 80010dc:	883a      	ldrh	r2, [r7, #0]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	7f3b      	ldrb	r3, [r7, #28]
 80010e4:	b29c      	uxth	r4, r3
 80010e6:	8c3b      	ldrh	r3, [r7, #32]
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	4623      	mov	r3, r4
 80010ec:	f7ff fcab 	bl	8000a46 <TFT_Draw_VLine>

  TFT_Draw_Circle_Helper(x+r    , y+r    , r, 		 			1, size, color);
 80010f0:	88fa      	ldrh	r2, [r7, #6]
 80010f2:	8b3b      	ldrh	r3, [r7, #24]
 80010f4:	4413      	add	r3, r2
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	b218      	sxth	r0, r3
 80010fa:	88ba      	ldrh	r2, [r7, #4]
 80010fc:	8b3b      	ldrh	r3, [r7, #24]
 80010fe:	4413      	add	r3, r2
 8001100:	b29b      	uxth	r3, r3
 8001102:	b219      	sxth	r1, r3
 8001104:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001108:	8c3b      	ldrh	r3, [r7, #32]
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	7f3b      	ldrb	r3, [r7, #28]
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	f7ff fe90 	bl	8000e36 <TFT_Draw_Circle_Helper>
  TFT_Draw_Circle_Helper(x+length-r-1, y+r    , r, 			2, size, color);
 8001116:	88fa      	ldrh	r2, [r7, #6]
 8001118:	887b      	ldrh	r3, [r7, #2]
 800111a:	4413      	add	r3, r2
 800111c:	b29a      	uxth	r2, r3
 800111e:	8b3b      	ldrh	r3, [r7, #24]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	b29b      	uxth	r3, r3
 8001124:	3b01      	subs	r3, #1
 8001126:	b29b      	uxth	r3, r3
 8001128:	b218      	sxth	r0, r3
 800112a:	88ba      	ldrh	r2, [r7, #4]
 800112c:	8b3b      	ldrh	r3, [r7, #24]
 800112e:	4413      	add	r3, r2
 8001130:	b29b      	uxth	r3, r3
 8001132:	b219      	sxth	r1, r3
 8001134:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001138:	8c3b      	ldrh	r3, [r7, #32]
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	7f3b      	ldrb	r3, [r7, #28]
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2302      	movs	r3, #2
 8001142:	f7ff fe78 	bl	8000e36 <TFT_Draw_Circle_Helper>
  TFT_Draw_Circle_Helper(x+length-r-1, y+width-r-1, r,  4, size, color);
 8001146:	88fa      	ldrh	r2, [r7, #6]
 8001148:	887b      	ldrh	r3, [r7, #2]
 800114a:	4413      	add	r3, r2
 800114c:	b29a      	uxth	r2, r3
 800114e:	8b3b      	ldrh	r3, [r7, #24]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	b29b      	uxth	r3, r3
 8001154:	3b01      	subs	r3, #1
 8001156:	b29b      	uxth	r3, r3
 8001158:	b218      	sxth	r0, r3
 800115a:	88ba      	ldrh	r2, [r7, #4]
 800115c:	883b      	ldrh	r3, [r7, #0]
 800115e:	4413      	add	r3, r2
 8001160:	b29a      	uxth	r2, r3
 8001162:	8b3b      	ldrh	r3, [r7, #24]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	b29b      	uxth	r3, r3
 8001168:	3b01      	subs	r3, #1
 800116a:	b29b      	uxth	r3, r3
 800116c:	b219      	sxth	r1, r3
 800116e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001172:	8c3b      	ldrh	r3, [r7, #32]
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	7f3b      	ldrb	r3, [r7, #28]
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2304      	movs	r3, #4
 800117c:	f7ff fe5b 	bl	8000e36 <TFT_Draw_Circle_Helper>
  TFT_Draw_Circle_Helper(x+r    , y+width-r-1, r, 			8, size, color);
 8001180:	88fa      	ldrh	r2, [r7, #6]
 8001182:	8b3b      	ldrh	r3, [r7, #24]
 8001184:	4413      	add	r3, r2
 8001186:	b29b      	uxth	r3, r3
 8001188:	b218      	sxth	r0, r3
 800118a:	88ba      	ldrh	r2, [r7, #4]
 800118c:	883b      	ldrh	r3, [r7, #0]
 800118e:	4413      	add	r3, r2
 8001190:	b29a      	uxth	r2, r3
 8001192:	8b3b      	ldrh	r3, [r7, #24]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	b29b      	uxth	r3, r3
 8001198:	3b01      	subs	r3, #1
 800119a:	b29b      	uxth	r3, r3
 800119c:	b219      	sxth	r1, r3
 800119e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80011a2:	8c3b      	ldrh	r3, [r7, #32]
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	7f3b      	ldrb	r3, [r7, #28]
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2308      	movs	r3, #8
 80011ac:	f7ff fe43 	bl	8000e36 <TFT_Draw_Circle_Helper>
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd90      	pop	{r4, r7, pc}

080011b8 <TFT_Draw_Fill_Circle_Helper>:

//��������������� �-��� ��� ����������� ���� ������������ ��������������
void TFT_Draw_Fill_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) 
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b089      	sub	sp, #36	@ 0x24
 80011bc:	af02      	add	r7, sp, #8
 80011be:	4604      	mov	r4, r0
 80011c0:	4608      	mov	r0, r1
 80011c2:	4611      	mov	r1, r2
 80011c4:	461a      	mov	r2, r3
 80011c6:	4623      	mov	r3, r4
 80011c8:	80fb      	strh	r3, [r7, #6]
 80011ca:	4603      	mov	r3, r0
 80011cc:	80bb      	strh	r3, [r7, #4]
 80011ce:	460b      	mov	r3, r1
 80011d0:	807b      	strh	r3, [r7, #2]
 80011d2:	4613      	mov	r3, r2
 80011d4:	707b      	strb	r3, [r7, #1]

  int16_t f     = 1 - r;
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	f1c3 0301 	rsb	r3, r3, #1
 80011dc:	b29b      	uxth	r3, r3
 80011de:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	461a      	mov	r2, r3
 80011e8:	03d2      	lsls	r2, r2, #15
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 80011fa:	e07f      	b.n	80012fc <TFT_Draw_Fill_Circle_Helper+0x144>
    if (f >= 0) {
 80011fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001200:	2b00      	cmp	r3, #0
 8001202:	db0e      	blt.n	8001222 <TFT_Draw_Fill_Circle_Helper+0x6a>
      y--;
 8001204:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001208:	b29b      	uxth	r3, r3
 800120a:	3b01      	subs	r3, #1
 800120c:	b29b      	uxth	r3, r3
 800120e:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8001210:	8a7b      	ldrh	r3, [r7, #18]
 8001212:	3302      	adds	r3, #2
 8001214:	b29b      	uxth	r3, r3
 8001216:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8001218:	8afa      	ldrh	r2, [r7, #22]
 800121a:	8a7b      	ldrh	r3, [r7, #18]
 800121c:	4413      	add	r3, r2
 800121e:	b29b      	uxth	r3, r3
 8001220:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8001222:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001226:	b29b      	uxth	r3, r3
 8001228:	3301      	adds	r3, #1
 800122a:	b29b      	uxth	r3, r3
 800122c:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 800122e:	8abb      	ldrh	r3, [r7, #20]
 8001230:	3302      	adds	r3, #2
 8001232:	b29b      	uxth	r3, r3
 8001234:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8001236:	8afa      	ldrh	r2, [r7, #22]
 8001238:	8abb      	ldrh	r3, [r7, #20]
 800123a:	4413      	add	r3, r2
 800123c:	b29b      	uxth	r3, r3
 800123e:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8001240:	787b      	ldrb	r3, [r7, #1]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d029      	beq.n	800129e <TFT_Draw_Fill_Circle_Helper+0xe6>
      TFT_Draw_VLine(x0+x, y0-y, 2*y+1+delta, 1, color);
 800124a:	88fa      	ldrh	r2, [r7, #6]
 800124c:	8a3b      	ldrh	r3, [r7, #16]
 800124e:	4413      	add	r3, r2
 8001250:	b298      	uxth	r0, r3
 8001252:	88ba      	ldrh	r2, [r7, #4]
 8001254:	89fb      	ldrh	r3, [r7, #14]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	b299      	uxth	r1, r3
 800125a:	89fb      	ldrh	r3, [r7, #14]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	b29a      	uxth	r2, r3
 8001260:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001262:	4413      	add	r3, r2
 8001264:	b29b      	uxth	r3, r3
 8001266:	3301      	adds	r3, #1
 8001268:	b29a      	uxth	r2, r3
 800126a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2301      	movs	r3, #1
 8001270:	f7ff fbe9 	bl	8000a46 <TFT_Draw_VLine>
      TFT_Draw_VLine(x0+y, y0-x, 2*x+1+delta, 1, color);
 8001274:	88fa      	ldrh	r2, [r7, #6]
 8001276:	89fb      	ldrh	r3, [r7, #14]
 8001278:	4413      	add	r3, r2
 800127a:	b298      	uxth	r0, r3
 800127c:	88ba      	ldrh	r2, [r7, #4]
 800127e:	8a3b      	ldrh	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	b299      	uxth	r1, r3
 8001284:	8a3b      	ldrh	r3, [r7, #16]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b29a      	uxth	r2, r3
 800128a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800128c:	4413      	add	r3, r2
 800128e:	b29b      	uxth	r3, r3
 8001290:	3301      	adds	r3, #1
 8001292:	b29a      	uxth	r2, r3
 8001294:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2301      	movs	r3, #1
 800129a:	f7ff fbd4 	bl	8000a46 <TFT_Draw_VLine>
    }
    if (cornername & 0x2) {
 800129e:	787b      	ldrb	r3, [r7, #1]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d029      	beq.n	80012fc <TFT_Draw_Fill_Circle_Helper+0x144>
     TFT_Draw_VLine(x0-x, y0-y, 2*y+1+delta, 1, color);
 80012a8:	88fa      	ldrh	r2, [r7, #6]
 80012aa:	8a3b      	ldrh	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	b298      	uxth	r0, r3
 80012b0:	88ba      	ldrh	r2, [r7, #4]
 80012b2:	89fb      	ldrh	r3, [r7, #14]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	b299      	uxth	r1, r3
 80012b8:	89fb      	ldrh	r3, [r7, #14]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	b29a      	uxth	r2, r3
 80012be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80012c0:	4413      	add	r3, r2
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3301      	adds	r3, #1
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	f7ff fbba 	bl	8000a46 <TFT_Draw_VLine>
     TFT_Draw_VLine(x0-y, y0-x, 2*x+1+delta, 1, color);
 80012d2:	88fa      	ldrh	r2, [r7, #6]
 80012d4:	89fb      	ldrh	r3, [r7, #14]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	b298      	uxth	r0, r3
 80012da:	88ba      	ldrh	r2, [r7, #4]
 80012dc:	8a3b      	ldrh	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	b299      	uxth	r1, r3
 80012e2:	8a3b      	ldrh	r3, [r7, #16]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	3301      	adds	r3, #1
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2301      	movs	r3, #1
 80012f8:	f7ff fba5 	bl	8000a46 <TFT_Draw_VLine>
  while (x<y) {
 80012fc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001300:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001304:	429a      	cmp	r2, r3
 8001306:	f6ff af79 	blt.w	80011fc <TFT_Draw_Fill_Circle_Helper+0x44>
    }
  }
}
 800130a:	bf00      	nop
 800130c:	bf00      	nop
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd90      	pop	{r4, r7, pc}

08001314 <TFT_Draw_Fill_Round_Rect>:

//�-��� ������ ����������� ������������� �������� �����, ������, �������� ����������� ����� � ��������� ������
void TFT_Draw_Fill_Round_Rect(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint16_t color)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b085      	sub	sp, #20
 8001318:	af02      	add	r7, sp, #8
 800131a:	4604      	mov	r4, r0
 800131c:	4608      	mov	r0, r1
 800131e:	4611      	mov	r1, r2
 8001320:	461a      	mov	r2, r3
 8001322:	4623      	mov	r3, r4
 8001324:	80fb      	strh	r3, [r7, #6]
 8001326:	4603      	mov	r3, r0
 8001328:	80bb      	strh	r3, [r7, #4]
 800132a:	460b      	mov	r3, r1
 800132c:	807b      	strh	r3, [r7, #2]
 800132e:	4613      	mov	r3, r2
 8001330:	803b      	strh	r3, [r7, #0]
  TFT_Draw_Fill_Rectangle(x+r, y, length-2*r, width, color);
 8001332:	88fa      	ldrh	r2, [r7, #6]
 8001334:	8b3b      	ldrh	r3, [r7, #24]
 8001336:	4413      	add	r3, r2
 8001338:	b298      	uxth	r0, r3
 800133a:	8b3b      	ldrh	r3, [r7, #24]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	b29b      	uxth	r3, r3
 8001340:	887a      	ldrh	r2, [r7, #2]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	b29a      	uxth	r2, r3
 8001346:	883c      	ldrh	r4, [r7, #0]
 8001348:	88b9      	ldrh	r1, [r7, #4]
 800134a:	8bbb      	ldrh	r3, [r7, #28]
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	4623      	mov	r3, r4
 8001350:	f7ff fba6 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>

  TFT_Draw_Fill_Circle_Helper(x+length-r-1, y+r, r, 1, width-2*r-1, color);
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	4413      	add	r3, r2
 800135a:	b29a      	uxth	r2, r3
 800135c:	8b3b      	ldrh	r3, [r7, #24]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	b29b      	uxth	r3, r3
 8001362:	3b01      	subs	r3, #1
 8001364:	b29b      	uxth	r3, r3
 8001366:	b218      	sxth	r0, r3
 8001368:	88ba      	ldrh	r2, [r7, #4]
 800136a:	8b3b      	ldrh	r3, [r7, #24]
 800136c:	4413      	add	r3, r2
 800136e:	b29b      	uxth	r3, r3
 8001370:	b219      	sxth	r1, r3
 8001372:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001376:	8b3b      	ldrh	r3, [r7, #24]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	b29b      	uxth	r3, r3
 800137c:	883a      	ldrh	r2, [r7, #0]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	3b01      	subs	r3, #1
 8001384:	b29b      	uxth	r3, r3
 8001386:	b21b      	sxth	r3, r3
 8001388:	8bba      	ldrh	r2, [r7, #28]
 800138a:	9201      	str	r2, [sp, #4]
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2301      	movs	r3, #1
 8001390:	4622      	mov	r2, r4
 8001392:	f7ff ff11 	bl	80011b8 <TFT_Draw_Fill_Circle_Helper>
  TFT_Draw_Fill_Circle_Helper(x+r    , y+r, r, 2, width-2*r-1, color);
 8001396:	88fa      	ldrh	r2, [r7, #6]
 8001398:	8b3b      	ldrh	r3, [r7, #24]
 800139a:	4413      	add	r3, r2
 800139c:	b29b      	uxth	r3, r3
 800139e:	b218      	sxth	r0, r3
 80013a0:	88ba      	ldrh	r2, [r7, #4]
 80013a2:	8b3b      	ldrh	r3, [r7, #24]
 80013a4:	4413      	add	r3, r2
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	b219      	sxth	r1, r3
 80013aa:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80013ae:	8b3b      	ldrh	r3, [r7, #24]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	883a      	ldrh	r2, [r7, #0]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	3b01      	subs	r3, #1
 80013bc:	b29b      	uxth	r3, r3
 80013be:	b21b      	sxth	r3, r3
 80013c0:	8bba      	ldrh	r2, [r7, #28]
 80013c2:	9201      	str	r2, [sp, #4]
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2302      	movs	r3, #2
 80013c8:	4622      	mov	r2, r4
 80013ca:	f7ff fef5 	bl	80011b8 <TFT_Draw_Fill_Circle_Helper>
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd90      	pop	{r4, r7, pc}

080013d6 <LCD_Char>:

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 80013d6:	b590      	push	{r4, r7, lr}
 80013d8:	b08b      	sub	sp, #44	@ 0x2c
 80013da:	af02      	add	r7, sp, #8
 80013dc:	60ba      	str	r2, [r7, #8]
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	4603      	mov	r3, r0
 80013e2:	81fb      	strh	r3, [r7, #14]
 80013e4:	460b      	mov	r3, r1
 80013e6:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	777b      	strb	r3, [r7, #29]
 80013f8:	2300      	movs	r3, #0
 80013fa:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001400:	2300      	movs	r3, #0
 8001402:	763b      	strb	r3, [r7, #24]
 8001404:	e095      	b.n	8001532 <LCD_Char+0x15c>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001406:	2300      	movs	r3, #0
 8001408:	767b      	strb	r3, [r7, #25]
 800140a:	e053      	b.n	80014b4 <LCD_Char+0xde>
		{
			if(bit == 0)
 800140c:	7f3b      	ldrb	r3, [r7, #28]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d109      	bne.n	8001426 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8001412:	8bfb      	ldrh	r3, [r7, #30]
 8001414:	1c5a      	adds	r2, r3, #1
 8001416:	83fa      	strh	r2, [r7, #30]
 8001418:	461a      	mov	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	4413      	add	r3, r2
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8001422:	2380      	movs	r3, #128	@ 0x80
 8001424:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 8001426:	7f7a      	ldrb	r2, [r7, #29]
 8001428:	7f3b      	ldrb	r3, [r7, #28]
 800142a:	4013      	ands	r3, r2
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <LCD_Char+0x64>
			{
				set_pixels++;
 8001432:	8b7b      	ldrh	r3, [r7, #26]
 8001434:	3301      	adds	r3, #1
 8001436:	837b      	strh	r3, [r7, #26]
 8001438:	e036      	b.n	80014a8 <LCD_Char+0xd2>
			}
			else if (set_pixels > 0)
 800143a:	8b7b      	ldrh	r3, [r7, #26]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d033      	beq.n	80014a8 <LCD_Char+0xd2>
			{
				TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001446:	461a      	mov	r2, r3
 8001448:	7e7b      	ldrb	r3, [r7, #25]
 800144a:	441a      	add	r2, r3
 800144c:	8b7b      	ldrh	r3, [r7, #26]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	b29a      	uxth	r2, r3
 8001452:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001456:	b29b      	uxth	r3, r3
 8001458:	fb12 f303 	smulbb	r3, r2, r3
 800145c:	b29a      	uxth	r2, r3
 800145e:	89fb      	ldrh	r3, [r7, #14]
 8001460:	4413      	add	r3, r2
 8001462:	b298      	uxth	r0, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800146a:	461a      	mov	r2, r3
 800146c:	7e3b      	ldrb	r3, [r7, #24]
 800146e:	4413      	add	r3, r2
 8001470:	b29a      	uxth	r2, r3
 8001472:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001476:	b29b      	uxth	r3, r3
 8001478:	fb12 f303 	smulbb	r3, r2, r3
 800147c:	b29a      	uxth	r2, r3
 800147e:	89bb      	ldrh	r3, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	b299      	uxth	r1, r3
 8001484:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001488:	b29b      	uxth	r3, r3
 800148a:	8b7a      	ldrh	r2, [r7, #26]
 800148c:	fb12 f303 	smulbb	r3, r2, r3
 8001490:	b29a      	uxth	r2, r3
 8001492:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001496:	b29c      	uxth	r4, r3
 8001498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800149a:	b29b      	uxth	r3, r3
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	4623      	mov	r3, r4
 80014a0:	f7ff fafe 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
				set_pixels = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 80014a8:	7f3b      	ldrb	r3, [r7, #28]
 80014aa:	085b      	lsrs	r3, r3, #1
 80014ac:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80014ae:	7e7b      	ldrb	r3, [r7, #25]
 80014b0:	3301      	adds	r3, #1
 80014b2:	767b      	strb	r3, [r7, #25]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	789b      	ldrb	r3, [r3, #2]
 80014b8:	7e7a      	ldrb	r2, [r7, #25]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d3a6      	bcc.n	800140c <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 80014be:	8b7b      	ldrh	r3, [r7, #26]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d033      	beq.n	800152c <LCD_Char+0x156>
		{
			TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80014ca:	461a      	mov	r2, r3
 80014cc:	7e7b      	ldrb	r3, [r7, #25]
 80014ce:	441a      	add	r2, r3
 80014d0:	8b7b      	ldrh	r3, [r7, #26]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80014da:	b29b      	uxth	r3, r3
 80014dc:	fb12 f303 	smulbb	r3, r2, r3
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	89fb      	ldrh	r3, [r7, #14]
 80014e4:	4413      	add	r3, r2
 80014e6:	b298      	uxth	r0, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80014ee:	461a      	mov	r2, r3
 80014f0:	7e3b      	ldrb	r3, [r7, #24]
 80014f2:	4413      	add	r3, r2
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	fb12 f303 	smulbb	r3, r2, r3
 8001500:	b29a      	uxth	r2, r3
 8001502:	89bb      	ldrh	r3, [r7, #12]
 8001504:	4413      	add	r3, r2
 8001506:	b299      	uxth	r1, r3
 8001508:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800150c:	b29b      	uxth	r3, r3
 800150e:	8b7a      	ldrh	r2, [r7, #26]
 8001510:	fb12 f303 	smulbb	r3, r2, r3
 8001514:	b29a      	uxth	r2, r3
 8001516:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800151a:	b29c      	uxth	r4, r3
 800151c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800151e:	b29b      	uxth	r3, r3
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	4623      	mov	r3, r4
 8001524:	f7ff fabc 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
			set_pixels = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 800152c:	7e3b      	ldrb	r3, [r7, #24]
 800152e:	3301      	adds	r3, #1
 8001530:	763b      	strb	r3, [r7, #24]
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	78db      	ldrb	r3, [r3, #3]
 8001536:	7e3a      	ldrb	r2, [r7, #24]
 8001538:	429a      	cmp	r2, r3
 800153a:	f4ff af64 	bcc.w	8001406 <LCD_Char+0x30>
		}
	}
}
 800153e:	bf00      	nop
 8001540:	bf00      	nop
 8001542:	3724      	adds	r7, #36	@ 0x24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd90      	pop	{r4, r7, pc}

08001548 <LCD_Font>:
void LCD_Font(uint16_t x, uint16_t y, char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b08f      	sub	sp, #60	@ 0x3c
 800154c:	af02      	add	r7, sp, #8
 800154e:	60ba      	str	r2, [r7, #8]
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	4603      	mov	r3, r0
 8001554:	81fb      	strh	r3, [r7, #14]
 8001556:	460b      	mov	r3, r1
 8001558:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 800155a:	89fb      	ldrh	r3, [r7, #14]
 800155c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int16_t cursor_y = y;
 800155e:	89bb      	ldrh	r3, [r7, #12]
 8001560:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	220c      	movs	r2, #12
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4618      	mov	r0, r3
 800156c:	f003 fe46 	bl	80051fc <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001570:	2300      	movs	r3, #0
 8001572:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001574:	e056      	b.n	8001624 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 8001576:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	4413      	add	r3, r2
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		if(c == '\n')
 8001582:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001586:	2b0a      	cmp	r3, #10
 8001588:	d10f      	bne.n	80015aa <LCD_Font+0x62>
		{
			cursor_x = x;
 800158a:	89fb      	ldrh	r3, [r7, #14]
 800158c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			cursor_y += font.yAdvance * size;
 800158e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001592:	461a      	mov	r2, r3
 8001594:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001598:	b29b      	uxth	r3, r3
 800159a:	fb12 f303 	smulbb	r3, r2, r3
 800159e:	b29a      	uxth	r2, r3
 80015a0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80015a2:	4413      	add	r3, r2
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80015a8:	e039      	b.n	800161e <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 80015aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80015ae:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d333      	bcc.n	800161e <LCD_Font+0xd6>
 80015b6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80015ba:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80015be:	429a      	cmp	r2, r3
 80015c0:	d82d      	bhi.n	800161e <LCD_Font+0xd6>
 80015c2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80015c6:	2b0d      	cmp	r3, #13
 80015c8:	d029      	beq.n	800161e <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80015ca:	6a3a      	ldr	r2, [r7, #32]
 80015cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80015d0:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80015d4:	1a5b      	subs	r3, r3, r1
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	18d1      	adds	r1, r2, r3
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	2208      	movs	r2, #8
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 fe0b 	bl	80051fc <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80015e6:	f107 041c 	add.w	r4, r7, #28
 80015ea:	f107 0214 	add.w	r2, r7, #20
 80015ee:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80015f2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80015f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	4623      	mov	r3, r4
 8001602:	f7ff fee8 	bl	80013d6 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8001606:	7e3b      	ldrb	r3, [r7, #24]
 8001608:	461a      	mov	r2, r3
 800160a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800160e:	b29b      	uxth	r3, r3
 8001610:	fb12 f303 	smulbb	r3, r2, r3
 8001614:	b29a      	uxth	r2, r3
 8001616:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001618:	4413      	add	r3, r2
 800161a:	b29b      	uxth	r3, r3
 800161c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800161e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001620:	3301      	adds	r3, #1
 8001622:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001624:	8d7c      	ldrh	r4, [r7, #42]	@ 0x2a
 8001626:	68b8      	ldr	r0, [r7, #8]
 8001628:	f7fe fdd2 	bl	80001d0 <strlen>
 800162c:	4603      	mov	r3, r0
 800162e:	429c      	cmp	r4, r3
 8001630:	d3a1      	bcc.n	8001576 <LCD_Font+0x2e>
		}
	}
}
 8001632:	bf00      	nop
 8001634:	bf00      	nop
 8001636:	3734      	adds	r7, #52	@ 0x34
 8001638:	46bd      	mov	sp, r7
 800163a:	bd90      	pop	{r4, r7, pc}

0800163c <TFT_Draw_Bitmap>:
        cursor_x += glyph.xAdvance * size;
    }
}

void TFT_Draw_Bitmap(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *bmp, uint32_t color24)
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	4604      	mov	r4, r0
 8001644:	4608      	mov	r0, r1
 8001646:	4611      	mov	r1, r2
 8001648:	461a      	mov	r2, r3
 800164a:	4623      	mov	r3, r4
 800164c:	80fb      	strh	r3, [r7, #6]
 800164e:	4603      	mov	r3, r0
 8001650:	80bb      	strh	r3, [r7, #4]
 8001652:	460b      	mov	r3, r1
 8001654:	807b      	strh	r3, [r7, #2]
 8001656:	4613      	mov	r3, r2
 8001658:	803b      	strh	r3, [r7, #0]
	for (uint16_t row = 0; row < h; row++)
 800165a:	2300      	movs	r3, #0
 800165c:	81fb      	strh	r3, [r7, #14]
 800165e:	e029      	b.n	80016b4 <TFT_Draw_Bitmap+0x78>
		{
			for (uint16_t col = 0; col < w; col++)
 8001660:	2300      	movs	r3, #0
 8001662:	81bb      	strh	r3, [r7, #12]
 8001664:	e01f      	b.n	80016a6 <TFT_Draw_Bitmap+0x6a>
			{
				uint16_t c = bmp[row * w + col];
 8001666:	89fb      	ldrh	r3, [r7, #14]
 8001668:	887a      	ldrh	r2, [r7, #2]
 800166a:	fb03 f202 	mul.w	r2, r3, r2
 800166e:	89bb      	ldrh	r3, [r7, #12]
 8001670:	4413      	add	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	6a3a      	ldr	r2, [r7, #32]
 8001676:	4413      	add	r3, r2
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	817b      	strh	r3, [r7, #10]
				if (c != 0x0000)
 800167c:	897b      	ldrh	r3, [r7, #10]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00e      	beq.n	80016a0 <TFT_Draw_Bitmap+0x64>
				{
					// Lcd_SetPixel faz: SetArea(x,x,y,y); Cmd(0x2C); Write_Data(color);
					Lcd_SetPixel(x + col, y + row, color24);
 8001682:	88fa      	ldrh	r2, [r7, #6]
 8001684:	89bb      	ldrh	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	b29b      	uxth	r3, r3
 800168a:	b218      	sxth	r0, r3
 800168c:	88ba      	ldrh	r2, [r7, #4]
 800168e:	89fb      	ldrh	r3, [r7, #14]
 8001690:	4413      	add	r3, r2
 8001692:	b29b      	uxth	r3, r3
 8001694:	b21b      	sxth	r3, r3
 8001696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001698:	b212      	sxth	r2, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff f80e 	bl	80006bc <Lcd_SetPixel>
			for (uint16_t col = 0; col < w; col++)
 80016a0:	89bb      	ldrh	r3, [r7, #12]
 80016a2:	3301      	adds	r3, #1
 80016a4:	81bb      	strh	r3, [r7, #12]
 80016a6:	89ba      	ldrh	r2, [r7, #12]
 80016a8:	887b      	ldrh	r3, [r7, #2]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d3db      	bcc.n	8001666 <TFT_Draw_Bitmap+0x2a>
	for (uint16_t row = 0; row < h; row++)
 80016ae:	89fb      	ldrh	r3, [r7, #14]
 80016b0:	3301      	adds	r3, #1
 80016b2:	81fb      	strh	r3, [r7, #14]
 80016b4:	89fa      	ldrh	r2, [r7, #14]
 80016b6:	883b      	ldrh	r3, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d3d1      	bcc.n	8001660 <TFT_Draw_Bitmap+0x24>
				}
			}
		}
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd90      	pop	{r4, r7, pc}
	...

080016c8 <starter_Screen>:
  CONFIGURACAO_BITMAP_HEIGHT
};


void starter_Screen (void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af02      	add	r7, sp, #8
	if(ultimo_estado_menu == -1)
 80016ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001800 <starter_Screen+0x138>)
 80016d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d8:	d10d      	bne.n	80016f6 <starter_Screen+0x2e>
	{
		TFT_Clear_Screen(VIVID_BLUE);
 80016da:	f240 401f 	movw	r0, #1055	@ 0x41f
 80016de:	f7ff f961 	bl	80009a4 <TFT_Clear_Screen>
		TFT_Draw_HLine(30, 45, 740, 3, WHITE);
 80016e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2303      	movs	r3, #3
 80016ea:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80016ee:	212d      	movs	r1, #45	@ 0x2d
 80016f0:	201e      	movs	r0, #30
 80016f2:	f7ff f97b 	bl	80009ec <TFT_Draw_HLine>
	}

	if(current_screen == 1)
 80016f6:	4b43      	ldr	r3, [pc, #268]	@ (8001804 <starter_Screen+0x13c>)
 80016f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d17b      	bne.n	80017f8 <starter_Screen+0x130>
	{
		if(item_selected == 0)
 8001700:	4b41      	ldr	r3, [pc, #260]	@ (8001808 <starter_Screen+0x140>)
 8001702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d176      	bne.n	80017f8 <starter_Screen+0x130>
		{
			sprintf(buffer, "%d", temp);
 800170a:	4b40      	ldr	r3, [pc, #256]	@ (800180c <starter_Screen+0x144>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	493f      	ldr	r1, [pc, #252]	@ (8001810 <starter_Screen+0x148>)
 8001712:	4840      	ldr	r0, [pc, #256]	@ (8001814 <starter_Screen+0x14c>)
 8001714:	f003 fd1c 	bl	8005150 <siprintf>
			LCD_Font(120, 280, buffer,_Open_Sans_Bold_128, 1, WHITE);
 8001718:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	2301      	movs	r3, #1
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	4b3d      	ldr	r3, [pc, #244]	@ (8001818 <starter_Screen+0x150>)
 8001724:	4a3b      	ldr	r2, [pc, #236]	@ (8001814 <starter_Screen+0x14c>)
 8001726:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800172a:	2078      	movs	r0, #120	@ 0x78
 800172c:	f7ff ff0c 	bl	8001548 <LCD_Font>
			LCD_Font(280, 225, "C",_Open_Sans_Bold_48, 1, WHITE);
 8001730:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	2301      	movs	r3, #1
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	4b38      	ldr	r3, [pc, #224]	@ (800181c <starter_Screen+0x154>)
 800173c:	4a38      	ldr	r2, [pc, #224]	@ (8001820 <starter_Screen+0x158>)
 800173e:	21e1      	movs	r1, #225	@ 0xe1
 8001740:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8001744:	f7ff ff00 	bl	8001548 <LCD_Font>
			TFT_Draw_Circle(275, 185, 4, 0, 1, WHITE);
 8001748:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	2301      	movs	r3, #1
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2300      	movs	r3, #0
 8001754:	2204      	movs	r2, #4
 8001756:	21b9      	movs	r1, #185	@ 0xb9
 8001758:	f240 1013 	movw	r0, #275	@ 0x113
 800175c:	f7ff fa4c 	bl	8000bf8 <TFT_Draw_Circle>

			TFT_Draw_Bitmap(690, 237, BANHO_PRONTO_WIDTH, BANHO_PRONTO_HEIGHT, banho_pronto_bitmap, GRAYISH_BLUE);
 8001760:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	4b2f      	ldr	r3, [pc, #188]	@ (8001824 <starter_Screen+0x15c>)
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	231b      	movs	r3, #27
 800176c:	2218      	movs	r2, #24
 800176e:	21ed      	movs	r1, #237	@ 0xed
 8001770:	f240 20b2 	movw	r0, #690	@ 0x2b2
 8001774:	f7ff ff62 	bl	800163c <TFT_Draw_Bitmap>
			TFT_Draw_Circle(750, 250, 10, 1, 1, GRAYISH_BLUE);
 8001778:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	2301      	movs	r3, #1
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2301      	movs	r3, #1
 8001784:	220a      	movs	r2, #10
 8001786:	21fa      	movs	r1, #250	@ 0xfa
 8001788:	f240 20ee 	movw	r0, #750	@ 0x2ee
 800178c:	f7ff fa34 	bl	8000bf8 <TFT_Draw_Circle>
			LCD_Font(685, 310, "36", _Open_Sans_Bold_24, 1, GRAYISH_BLUE);
 8001790:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	2301      	movs	r3, #1
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <starter_Screen+0x160>)
 800179c:	4a23      	ldr	r2, [pc, #140]	@ (800182c <starter_Screen+0x164>)
 800179e:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80017a2:	f240 20ad 	movw	r0, #685	@ 0x2ad
 80017a6:	f7ff fecf 	bl	8001548 <LCD_Font>
			TFT_Draw_Circle(750, 300, 10, 1, 1, GRAYISH_BLUE);
 80017aa:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	2301      	movs	r3, #1
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2301      	movs	r3, #1
 80017b6:	220a      	movs	r2, #10
 80017b8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80017bc:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80017c0:	f7ff fa1a 	bl	8000bf8 <TFT_Draw_Circle>
			TFT_Draw_Bitmap(690, 337, RECIRCULACAO_WIDTH, RECIRCULACAO_HEIGHT, recirculacao_bitmap, GRAYISH_BLUE);
 80017c4:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <starter_Screen+0x168>)
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	231b      	movs	r3, #27
 80017d0:	2215      	movs	r2, #21
 80017d2:	f240 1151 	movw	r1, #337	@ 0x151
 80017d6:	f240 20b2 	movw	r0, #690	@ 0x2b2
 80017da:	f7ff ff2f 	bl	800163c <TFT_Draw_Bitmap>
			TFT_Draw_Circle(750, 350, 10, 1, 1, GRAYISH_BLUE);
 80017de:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	2301      	movs	r3, #1
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	2301      	movs	r3, #1
 80017ea:	220a      	movs	r2, #10
 80017ec:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80017f0:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80017f4:	f7ff fa00 	bl	8000bf8 <TFT_Draw_Circle>
		}
	}
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000050 	.word	0x20000050
 8001804:	200000e0 	.word	0x200000e0
 8001808:	200000e2 	.word	0x200000e2
 800180c:	20000056 	.word	0x20000056
 8001810:	08005aa8 	.word	0x08005aa8
 8001814:	20000118 	.word	0x20000118
 8001818:	08018868 	.word	0x08018868
 800181c:	08009520 	.word	0x08009520
 8001820:	08005aac 	.word	0x08005aac
 8001824:	0801a6a0 	.word	0x0801a6a0
 8001828:	08006fb4 	.word	0x08006fb4
 800182c:	08005ab0 	.word	0x08005ab0
 8001830:	0801a230 	.word	0x0801a230

08001834 <home_screen>:

void home_screen(void) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af04      	add	r7, sp, #16
	TFT_Draw_Round_Rect(30, 90, 740, 65, 10, 1, WHITE);
 800183a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800183e:	9302      	str	r3, [sp, #8]
 8001840:	2301      	movs	r3, #1
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	230a      	movs	r3, #10
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2341      	movs	r3, #65	@ 0x41
 800184a:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800184e:	215a      	movs	r1, #90	@ 0x5a
 8001850:	201e      	movs	r0, #30
 8001852:	f7ff fbec 	bl	800102e <TFT_Draw_Round_Rect>
	TFT_Draw_Round_Rect(30, 165, 740, 65, 10, 1, WHITE);
 8001856:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800185a:	9302      	str	r3, [sp, #8]
 800185c:	2301      	movs	r3, #1
 800185e:	9301      	str	r3, [sp, #4]
 8001860:	230a      	movs	r3, #10
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2341      	movs	r3, #65	@ 0x41
 8001866:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800186a:	21a5      	movs	r1, #165	@ 0xa5
 800186c:	201e      	movs	r0, #30
 800186e:	f7ff fbde 	bl	800102e <TFT_Draw_Round_Rect>
	TFT_Draw_Round_Rect(30, 240, 740, 65, 10, 1, WHITE);
 8001872:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001876:	9302      	str	r3, [sp, #8]
 8001878:	2301      	movs	r3, #1
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	230a      	movs	r3, #10
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2341      	movs	r3, #65	@ 0x41
 8001882:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8001886:	21f0      	movs	r1, #240	@ 0xf0
 8001888:	201e      	movs	r0, #30
 800188a:	f7ff fbd0 	bl	800102e <TFT_Draw_Round_Rect>
	TFT_Draw_Round_Rect(30, 315, 740, 65, 10, 1, WHITE);
 800188e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001892:	9302      	str	r3, [sp, #8]
 8001894:	2301      	movs	r3, #1
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	230a      	movs	r3, #10
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2341      	movs	r3, #65	@ 0x41
 800189e:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80018a2:	f240 113b 	movw	r1, #315	@ 0x13b
 80018a6:	201e      	movs	r0, #30
 80018a8:	f7ff fbc1 	bl	800102e <TFT_Draw_Round_Rect>

	// Escreve os 4 modos nas suas devidas posições
	LCD_Font(140, 130, menu_items[0], _Open_Sans_Bold_24, 1, WHITE);
 80018ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	2301      	movs	r3, #1
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001968 <home_screen+0x134>)
 80018b8:	4a2c      	ldr	r2, [pc, #176]	@ (800196c <home_screen+0x138>)
 80018ba:	2182      	movs	r1, #130	@ 0x82
 80018bc:	208c      	movs	r0, #140	@ 0x8c
 80018be:	f7ff fe43 	bl	8001548 <LCD_Font>
	LCD_Font(140, 205, menu_items[1], _Open_Sans_Bold_24, 1, WHITE);
 80018c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	2301      	movs	r3, #1
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	4b26      	ldr	r3, [pc, #152]	@ (8001968 <home_screen+0x134>)
 80018ce:	4a28      	ldr	r2, [pc, #160]	@ (8001970 <home_screen+0x13c>)
 80018d0:	21cd      	movs	r1, #205	@ 0xcd
 80018d2:	208c      	movs	r0, #140	@ 0x8c
 80018d4:	f7ff fe38 	bl	8001548 <LCD_Font>
	LCD_Font(140, 280, menu_items[2], _Open_Sans_Bold_24, 1, WHITE);
 80018d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	2301      	movs	r3, #1
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	4b21      	ldr	r3, [pc, #132]	@ (8001968 <home_screen+0x134>)
 80018e4:	4a23      	ldr	r2, [pc, #140]	@ (8001974 <home_screen+0x140>)
 80018e6:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80018ea:	208c      	movs	r0, #140	@ 0x8c
 80018ec:	f7ff fe2c 	bl	8001548 <LCD_Font>
	LCD_Font(140, 355, menu_items[3], _Open_Sans_Bold_24, 1, WHITE);
 80018f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	2301      	movs	r3, #1
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001968 <home_screen+0x134>)
 80018fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001978 <home_screen+0x144>)
 80018fe:	f240 1163 	movw	r1, #355	@ 0x163
 8001902:	208c      	movs	r0, #140	@ 0x8c
 8001904:	f7ff fe20 	bl	8001548 <LCD_Font>

	TFT_Draw_Bitmap(70, 105, BANHO_BITMAP_WIDTH, BANHO_BITMAP_HEIGHT, banho_bitmap, WHITE);
 8001908:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <home_screen+0x148>)
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2318      	movs	r3, #24
 8001914:	2212      	movs	r2, #18
 8001916:	2169      	movs	r1, #105	@ 0x69
 8001918:	2046      	movs	r0, #70	@ 0x46
 800191a:	f7ff fe8f 	bl	800163c <TFT_Draw_Bitmap>
	TFT_Draw_Bitmap(70, 180, ABASTECIMENTO_BITMAP_WIDTH, ABASTECIMENTO_BITMAP_HEIGHT, abastecimento_bitmap, WHITE);
 800191e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <home_screen+0x14c>)
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	2318      	movs	r3, #24
 800192a:	2217      	movs	r2, #23
 800192c:	21b4      	movs	r1, #180	@ 0xb4
 800192e:	2046      	movs	r0, #70	@ 0x46
 8001930:	f7ff fe84 	bl	800163c <TFT_Draw_Bitmap>
	TFT_Draw_Bitmap(70, 255, DRENAGEM_BITMAP_WIDTH, DRENAGEM_BITMAP_HEIGHT, drenagem_bitmap, WHITE);
 8001934:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <home_screen+0x150>)
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2318      	movs	r3, #24
 8001940:	2212      	movs	r2, #18
 8001942:	21ff      	movs	r1, #255	@ 0xff
 8001944:	2046      	movs	r0, #70	@ 0x46
 8001946:	f7ff fe79 	bl	800163c <TFT_Draw_Bitmap>
	TFT_Draw_Bitmap(70, 330, CONFIGURACAO_BITMAP_WIDTH, CONFIGURACAO_BITMAP_HEIGHT, configuracao_bitmap, WHITE);
 800194a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	4b0d      	ldr	r3, [pc, #52]	@ (8001988 <home_screen+0x154>)
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	231a      	movs	r3, #26
 8001956:	2216      	movs	r2, #22
 8001958:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800195c:	2046      	movs	r0, #70	@ 0x46
 800195e:	f7ff fe6d 	bl	800163c <TFT_Draw_Bitmap>
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	08006fb4 	.word	0x08006fb4
 800196c:	20000000 	.word	0x20000000
 8001970:	20000014 	.word	0x20000014
 8001974:	20000028 	.word	0x20000028
 8001978:	2000003c 	.word	0x2000003c
 800197c:	080192a8 	.word	0x080192a8
 8001980:	08019608 	.word	0x08019608
 8001984:	08019a58 	.word	0x08019a58
 8001988:	08019db8 	.word	0x08019db8

0800198c <atualiza_Cursor>:

void atualiza_Cursor (void)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b085      	sub	sp, #20
 8001990:	af02      	add	r7, sp, #8
	// Inserir o Cursor na primeira iteração
	if(ultimo_item_selecionado == -1)
 8001992:	4ba7      	ldr	r3, [pc, #668]	@ (8001c30 <atualiza_Cursor+0x2a4>)
 8001994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199c:	d124      	bne.n	80019e8 <atualiza_Cursor+0x5c>
	{
		TFT_Draw_Fill_Round_Rect(31, 91, 738, 63, 6, WHITE);
 800199e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	2306      	movs	r3, #6
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	233f      	movs	r3, #63	@ 0x3f
 80019aa:	f240 22e2 	movw	r2, #738	@ 0x2e2
 80019ae:	215b      	movs	r1, #91	@ 0x5b
 80019b0:	201f      	movs	r0, #31
 80019b2:	f7ff fcaf 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
		LCD_Font(140, 130, menu_items[0], _Open_Sans_Bold_24, 1, VIVID_BLUE);
 80019b6:	f240 431f 	movw	r3, #1055	@ 0x41f
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	2301      	movs	r3, #1
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	4b9c      	ldr	r3, [pc, #624]	@ (8001c34 <atualiza_Cursor+0x2a8>)
 80019c2:	4a9d      	ldr	r2, [pc, #628]	@ (8001c38 <atualiza_Cursor+0x2ac>)
 80019c4:	2182      	movs	r1, #130	@ 0x82
 80019c6:	208c      	movs	r0, #140	@ 0x8c
 80019c8:	f7ff fdbe 	bl	8001548 <LCD_Font>
		TFT_Draw_Bitmap(70, 105, BANHO_BITMAP_WIDTH, BANHO_BITMAP_HEIGHT, banho_bitmap, VIVID_BLUE);
 80019cc:	f240 431f 	movw	r3, #1055	@ 0x41f
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	4b9a      	ldr	r3, [pc, #616]	@ (8001c3c <atualiza_Cursor+0x2b0>)
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2318      	movs	r3, #24
 80019d8:	2212      	movs	r2, #18
 80019da:	2169      	movs	r1, #105	@ 0x69
 80019dc:	2046      	movs	r0, #70	@ 0x46
 80019de:	f7ff fe2d 	bl	800163c <TFT_Draw_Bitmap>
		ultimo_item_selecionado = 0;
 80019e2:	4b93      	ldr	r3, [pc, #588]	@ (8001c30 <atualiza_Cursor+0x2a4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	801a      	strh	r2, [r3, #0]

	}

	// Inserir o cursor após a troca de tela
	if(ultimo_estado_menu != current_screen && ultimo_estado_menu != 0)
 80019e8:	4b95      	ldr	r3, [pc, #596]	@ (8001c40 <atualiza_Cursor+0x2b4>)
 80019ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019ee:	4b95      	ldr	r3, [pc, #596]	@ (8001c44 <atualiza_Cursor+0x2b8>)
 80019f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d06b      	beq.n	8001ad0 <atualiza_Cursor+0x144>
 80019f8:	4b91      	ldr	r3, [pc, #580]	@ (8001c40 <atualiza_Cursor+0x2b4>)
 80019fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d066      	beq.n	8001ad0 <atualiza_Cursor+0x144>
	{
		ultimo_estado_menu = current_screen;
 8001a02:	4b90      	ldr	r3, [pc, #576]	@ (8001c44 <atualiza_Cursor+0x2b8>)
 8001a04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a08:	4b8d      	ldr	r3, [pc, #564]	@ (8001c40 <atualiza_Cursor+0x2b4>)
 8001a0a:	801a      	strh	r2, [r3, #0]
		TFT_Draw_Fill_Round_Rect(31, (item_selected * (65 + 10)) + 91, 738, 63, 8, WHITE);
 8001a0c:	4b8e      	ldr	r3, [pc, #568]	@ (8001c48 <atualiza_Cursor+0x2bc>)
 8001a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	461a      	mov	r2, r3
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	335b      	adds	r3, #91	@ 0x5b
 8001a24:	b299      	uxth	r1, r3
 8001a26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	233f      	movs	r3, #63	@ 0x3f
 8001a32:	f240 22e2 	movw	r2, #738	@ 0x2e2
 8001a36:	201f      	movs	r0, #31
 8001a38:	f7ff fc6c 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
		LCD_Font(140, (item_selected * (65 + 10)) + 131, menu_items[item_selected], _Open_Sans_Bold_24, 1, VIVID_BLUE);
 8001a3c:	4b82      	ldr	r3, [pc, #520]	@ (8001c48 <atualiza_Cursor+0x2bc>)
 8001a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	461a      	mov	r2, r3
 8001a46:	0092      	lsls	r2, r2, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	0112      	lsls	r2, r2, #4
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	3383      	adds	r3, #131	@ 0x83
 8001a54:	b299      	uxth	r1, r3
 8001a56:	4b7c      	ldr	r3, [pc, #496]	@ (8001c48 <atualiza_Cursor+0x2bc>)
 8001a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4a74      	ldr	r2, [pc, #464]	@ (8001c38 <atualiza_Cursor+0x2ac>)
 8001a68:	441a      	add	r2, r3
 8001a6a:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	2301      	movs	r3, #1
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	4b6f      	ldr	r3, [pc, #444]	@ (8001c34 <atualiza_Cursor+0x2a8>)
 8001a76:	208c      	movs	r0, #140	@ 0x8c
 8001a78:	f7ff fd66 	bl	8001548 <LCD_Font>
		TFT_Draw_Bitmap(70, (item_selected * (65 + 10)) + 105, bitmap_w[item_selected], bitmap_h[item_selected], bitmap_icons[item_selected], VIVID_BLUE);
 8001a7c:	4b72      	ldr	r3, [pc, #456]	@ (8001c48 <atualiza_Cursor+0x2bc>)
 8001a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	0092      	lsls	r2, r2, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	3369      	adds	r3, #105	@ 0x69
 8001a94:	b299      	uxth	r1, r3
 8001a96:	4b6c      	ldr	r3, [pc, #432]	@ (8001c48 <atualiza_Cursor+0x2bc>)
 8001a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b6b      	ldr	r3, [pc, #428]	@ (8001c4c <atualiza_Cursor+0x2c0>)
 8001aa0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001aa4:	4b68      	ldr	r3, [pc, #416]	@ (8001c48 <atualiza_Cursor+0x2bc>)
 8001aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	4b68      	ldr	r3, [pc, #416]	@ (8001c50 <atualiza_Cursor+0x2c4>)
 8001aae:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8001ab2:	4b65      	ldr	r3, [pc, #404]	@ (8001c48 <atualiza_Cursor+0x2bc>)
 8001ab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab8:	461c      	mov	r4, r3
 8001aba:	4b66      	ldr	r3, [pc, #408]	@ (8001c54 <atualiza_Cursor+0x2c8>)
 8001abc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8001ac0:	f240 441f 	movw	r4, #1055	@ 0x41f
 8001ac4:	9401      	str	r4, [sp, #4]
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2046      	movs	r0, #70	@ 0x46
 8001acc:	f7ff fdb6 	bl	800163c <TFT_Draw_Bitmap>
	}

	// Verifica se a variável item_selecionado mudou = a posição do cursor deve mudar para a nova posição
	if (ultimo_item_selecionado != item_selected)
 8001ad0:	4b57      	ldr	r3, [pc, #348]	@ (8001c30 <atualiza_Cursor+0x2a4>)
 8001ad2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ad6:	4b5c      	ldr	r3, [pc, #368]	@ (8001c48 <atualiza_Cursor+0x2bc>)
 8001ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	f000 80a3 	beq.w	8001c28 <atualiza_Cursor+0x29c>
	{
		uint16_t y_old = (ultimo_item_selecionado*(65+10)) + 110;
 8001ae2:	4b53      	ldr	r3, [pc, #332]	@ (8001c30 <atualiza_Cursor+0x2a4>)
 8001ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	0092      	lsls	r2, r2, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	0112      	lsls	r2, r2, #4
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	336e      	adds	r3, #110	@ 0x6e
 8001afa:	80fb      	strh	r3, [r7, #6]
		uint16_t y_new = (item_selected*(65+10)) + 110;
 8001afc:	4b52      	ldr	r3, [pc, #328]	@ (8001c48 <atualiza_Cursor+0x2bc>)
 8001afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	0092      	lsls	r2, r2, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	0112      	lsls	r2, r2, #4
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	336e      	adds	r3, #110	@ 0x6e
 8001b14:	80bb      	strh	r3, [r7, #4]

		// Escreve os antigos cursores com branco para não precisar apagar a tela totalmente
		TFT_Draw_Fill_Round_Rect(31, y_old-19, 738, 63, 8, VIVID_BLUE);
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	3b13      	subs	r3, #19
 8001b1a:	b299      	uxth	r1, r3
 8001b1c:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	2308      	movs	r3, #8
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	233f      	movs	r3, #63	@ 0x3f
 8001b28:	f240 22e2 	movw	r2, #738	@ 0x2e2
 8001b2c:	201f      	movs	r0, #31
 8001b2e:	f7ff fbf1 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
		LCD_Font(140, y_old+21, menu_items[ultimo_item_selecionado], _Open_Sans_Bold_24, 1, WHITE);
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	3315      	adds	r3, #21
 8001b36:	b299      	uxth	r1, r3
 8001b38:	4b3d      	ldr	r3, [pc, #244]	@ (8001c30 <atualiza_Cursor+0x2a4>)
 8001b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4a3b      	ldr	r2, [pc, #236]	@ (8001c38 <atualiza_Cursor+0x2ac>)
 8001b4a:	441a      	add	r2, r3
 8001b4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	2301      	movs	r3, #1
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	4b37      	ldr	r3, [pc, #220]	@ (8001c34 <atualiza_Cursor+0x2a8>)
 8001b58:	208c      	movs	r0, #140	@ 0x8c
 8001b5a:	f7ff fcf5 	bl	8001548 <LCD_Font>
		TFT_Draw_Bitmap(70, y_old, bitmap_w[ultimo_item_selecionado], bitmap_h[ultimo_item_selecionado], bitmap_icons[ultimo_item_selecionado], WHITE);
 8001b5e:	4b34      	ldr	r3, [pc, #208]	@ (8001c30 <atualiza_Cursor+0x2a4>)
 8001b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b39      	ldr	r3, [pc, #228]	@ (8001c4c <atualiza_Cursor+0x2c0>)
 8001b68:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001b6c:	4b30      	ldr	r3, [pc, #192]	@ (8001c30 <atualiza_Cursor+0x2a4>)
 8001b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b72:	4619      	mov	r1, r3
 8001b74:	4b36      	ldr	r3, [pc, #216]	@ (8001c50 <atualiza_Cursor+0x2c4>)
 8001b76:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c30 <atualiza_Cursor+0x2a4>)
 8001b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b80:	4619      	mov	r1, r3
 8001b82:	4b34      	ldr	r3, [pc, #208]	@ (8001c54 <atualiza_Cursor+0x2c8>)
 8001b84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b88:	88f9      	ldrh	r1, [r7, #6]
 8001b8a:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8001b8e:	9401      	str	r4, [sp, #4]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	4603      	mov	r3, r0
 8001b94:	2046      	movs	r0, #70	@ 0x46
 8001b96:	f7ff fd51 	bl	800163c <TFT_Draw_Bitmap>

		ultimo_item_selecionado = item_selected; // Muda o item selecionado
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c48 <atualiza_Cursor+0x2bc>)
 8001b9c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ba0:	4b23      	ldr	r3, [pc, #140]	@ (8001c30 <atualiza_Cursor+0x2a4>)
 8001ba2:	801a      	strh	r2, [r3, #0]

		TFT_Draw_Fill_Round_Rect(31, y_new-19, 738, 63, 8, WHITE);
 8001ba4:	88bb      	ldrh	r3, [r7, #4]
 8001ba6:	3b13      	subs	r3, #19
 8001ba8:	b299      	uxth	r1, r3
 8001baa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	233f      	movs	r3, #63	@ 0x3f
 8001bb6:	f240 22e2 	movw	r2, #738	@ 0x2e2
 8001bba:	201f      	movs	r0, #31
 8001bbc:	f7ff fbaa 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
		LCD_Font(140, y_new+21, menu_items[item_selected], _Open_Sans_Bold_24, 1, VIVID_BLUE);
 8001bc0:	88bb      	ldrh	r3, [r7, #4]
 8001bc2:	3315      	adds	r3, #21
 8001bc4:	b299      	uxth	r1, r3
 8001bc6:	4b20      	ldr	r3, [pc, #128]	@ (8001c48 <atualiza_Cursor+0x2bc>)
 8001bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4a18      	ldr	r2, [pc, #96]	@ (8001c38 <atualiza_Cursor+0x2ac>)
 8001bd8:	441a      	add	r2, r3
 8001bda:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	2301      	movs	r3, #1
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	4b13      	ldr	r3, [pc, #76]	@ (8001c34 <atualiza_Cursor+0x2a8>)
 8001be6:	208c      	movs	r0, #140	@ 0x8c
 8001be8:	f7ff fcae 	bl	8001548 <LCD_Font>
		TFT_Draw_Bitmap(70, y_new, bitmap_w[item_selected], bitmap_h[item_selected], bitmap_icons[item_selected], VIVID_BLUE);
 8001bec:	4b16      	ldr	r3, [pc, #88]	@ (8001c48 <atualiza_Cursor+0x2bc>)
 8001bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <atualiza_Cursor+0x2c0>)
 8001bf6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001bfa:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <atualiza_Cursor+0x2bc>)
 8001bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c00:	4619      	mov	r1, r3
 8001c02:	4b13      	ldr	r3, [pc, #76]	@ (8001c50 <atualiza_Cursor+0x2c4>)
 8001c04:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8001c08:	4b0f      	ldr	r3, [pc, #60]	@ (8001c48 <atualiza_Cursor+0x2bc>)
 8001c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <atualiza_Cursor+0x2c8>)
 8001c12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c16:	88b9      	ldrh	r1, [r7, #4]
 8001c18:	f240 441f 	movw	r4, #1055	@ 0x41f
 8001c1c:	9401      	str	r4, [sp, #4]
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	4603      	mov	r3, r0
 8001c22:	2046      	movs	r0, #70	@ 0x46
 8001c24:	f7ff fd0a 	bl	800163c <TFT_Draw_Bitmap>
	}
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd90      	pop	{r4, r7, pc}
 8001c30:	20000052 	.word	0x20000052
 8001c34:	08006fb4 	.word	0x08006fb4
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	080192a8 	.word	0x080192a8
 8001c40:	20000050 	.word	0x20000050
 8001c44:	200000e0 	.word	0x200000e0
 8001c48:	200000e2 	.word	0x200000e2
 8001c4c:	0801abc0 	.word	0x0801abc0
 8001c50:	0801abc8 	.word	0x0801abc8
 8001c54:	20000058 	.word	0x20000058

08001c58 <header_fotter>:
	LCD_Font(x, 50, titulo, _Open_Sans_Bold_48, 1, BLACK);
	TFT_Draw_HLine(5, 100, 795, 2, BLACK);
}

void header_fotter (void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af02      	add	r7, sp, #8
	if(flag_escrita_tela)
 8001c5e:	4bb1      	ldr	r3, [pc, #708]	@ (8001f24 <header_fotter+0x2cc>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 8329 	beq.w	80022bc <header_fotter+0x664>
	{
		if(current_screen == 0)
 8001c6a:	4baf      	ldr	r3, [pc, #700]	@ (8001f28 <header_fotter+0x2d0>)
 8001c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d16e      	bne.n	8001d52 <header_fotter+0xfa>
		{
			TFT_Draw_Fill_Rectangle(30, 0, 600, 35, VIVID_BLUE);
 8001c74:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	2323      	movs	r3, #35	@ 0x23
 8001c7c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001c80:	2100      	movs	r1, #0
 8001c82:	201e      	movs	r0, #30
 8001c84:	f7fe ff0c 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
			LCD_Font(33, 30, "Menu", _Open_Sans_Bold_18, 1, WHITE);
 8001c88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	2301      	movs	r3, #1
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	4ba6      	ldr	r3, [pc, #664]	@ (8001f2c <header_fotter+0x2d4>)
 8001c94:	4aa6      	ldr	r2, [pc, #664]	@ (8001f30 <header_fotter+0x2d8>)
 8001c96:	211e      	movs	r1, #30
 8001c98:	2021      	movs	r0, #33	@ 0x21
 8001c9a:	f7ff fc55 	bl	8001548 <LCD_Font>
			TFT_Draw_Fill_Round_Rect(41, 421, 138, 38, 8, VIVID_BLUE);
 8001c9e:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2326      	movs	r3, #38	@ 0x26
 8001caa:	228a      	movs	r2, #138	@ 0x8a
 8001cac:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001cb0:	2029      	movs	r0, #41	@ 0x29
 8001cb2:	f7ff fb2f 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
			TFT_Draw_Fill_Round_Rect(231, 421, 138, 38, 8, WHITE);
 8001cb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	2308      	movs	r3, #8
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2326      	movs	r3, #38	@ 0x26
 8001cc2:	228a      	movs	r2, #138	@ 0x8a
 8001cc4:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001cc8:	20e7      	movs	r0, #231	@ 0xe7
 8001cca:	f7ff fb23 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
			TFT_Draw_Fill_Round_Rect(421, 421, 138, 38, 8, WHITE);
 8001cce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	2308      	movs	r3, #8
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	2326      	movs	r3, #38	@ 0x26
 8001cda:	228a      	movs	r2, #138	@ 0x8a
 8001cdc:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001ce0:	f240 10a5 	movw	r0, #421	@ 0x1a5
 8001ce4:	f7ff fb16 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
			TFT_Draw_Fill_Round_Rect(621, 421, 138, 38, 8, WHITE);
 8001ce8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	2308      	movs	r3, #8
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2326      	movs	r3, #38	@ 0x26
 8001cf4:	228a      	movs	r2, #138	@ 0x8a
 8001cf6:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001cfa:	f240 206d 	movw	r0, #621	@ 0x26d
 8001cfe:	f7ff fb09 	bl	8001314 <TFT_Draw_Fill_Round_Rect>

			TFT_Draw_Fill_Triangle_Simple(285, 427, 30, 18, 1, VIVID_BLUE);
 8001d02:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2312      	movs	r3, #18
 8001d0e:	221e      	movs	r2, #30
 8001d10:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8001d14:	f240 101d 	movw	r0, #285	@ 0x11d
 8001d18:	f7fe fef0 	bl	8000afc <TFT_Draw_Fill_Triangle_Simple>
			TFT_Draw_Fill_Triangle_Inverted_Simple(475, 432, 30, 18, 1, VIVID_BLUE);
 8001d1c:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	2301      	movs	r3, #1
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2312      	movs	r3, #18
 8001d28:	221e      	movs	r2, #30
 8001d2a:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8001d2e:	f240 10db 	movw	r0, #475	@ 0x1db
 8001d32:	f7fe ff21 	bl	8000b78 <TFT_Draw_Fill_Triangle_Inverted_Simple>
			LCD_Font(660, 446, "Entrar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8001d36:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	4b7a      	ldr	r3, [pc, #488]	@ (8001f2c <header_fotter+0x2d4>)
 8001d42:	4a7c      	ldr	r2, [pc, #496]	@ (8001f34 <header_fotter+0x2dc>)
 8001d44:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8001d48:	f44f 7025 	mov.w	r0, #660	@ 0x294
 8001d4c:	f7ff fbfc 	bl	8001548 <LCD_Font>
 8001d50:	e2b1      	b.n	80022b6 <header_fotter+0x65e>
		}
		else // current_screen == 1
		{
			if(item_selected == 0)
 8001d52:	4b79      	ldr	r3, [pc, #484]	@ (8001f38 <header_fotter+0x2e0>)
 8001d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f040 8161 	bne.w	8002020 <header_fotter+0x3c8>
			{
				TFT_Draw_Fill_Rectangle(30, 0, 600, 35, VIVID_BLUE);
 8001d5e:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	2323      	movs	r3, #35	@ 0x23
 8001d66:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	201e      	movs	r0, #30
 8001d6e:	f7fe fe97 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>

				if(flag_desligar_banho)
 8001d72:	4b72      	ldr	r3, [pc, #456]	@ (8001f3c <header_fotter+0x2e4>)
 8001d74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d064      	beq.n	8001e46 <header_fotter+0x1ee>
				{
					LCD_Font(33, 30, "Banho / Finalizando", _Open_Sans_Bold_18, 1, WHITE);
 8001d7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	2301      	movs	r3, #1
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	4b69      	ldr	r3, [pc, #420]	@ (8001f2c <header_fotter+0x2d4>)
 8001d88:	4a6d      	ldr	r2, [pc, #436]	@ (8001f40 <header_fotter+0x2e8>)
 8001d8a:	211e      	movs	r1, #30
 8001d8c:	2021      	movs	r0, #33	@ 0x21
 8001d8e:	f7ff fbdb 	bl	8001548 <LCD_Font>

					TFT_Draw_Fill_Round_Rect(41, 421, 138, 38, 8, VIVID_BLUE);
 8001d92:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	2308      	movs	r3, #8
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2326      	movs	r3, #38	@ 0x26
 8001d9e:	228a      	movs	r2, #138	@ 0x8a
 8001da0:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001da4:	2029      	movs	r0, #41	@ 0x29
 8001da6:	f7ff fab5 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
					TFT_Draw_Fill_Round_Rect(231, 421, 138, 38, 8, GRAYISH_BLUE);
 8001daa:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	2308      	movs	r3, #8
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2326      	movs	r3, #38	@ 0x26
 8001db6:	228a      	movs	r2, #138	@ 0x8a
 8001db8:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001dbc:	20e7      	movs	r0, #231	@ 0xe7
 8001dbe:	f7ff faa9 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
					TFT_Draw_Fill_Round_Rect(421, 421, 138, 38, 8, GRAYISH_BLUE);
 8001dc2:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	2308      	movs	r3, #8
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	2326      	movs	r3, #38	@ 0x26
 8001dce:	228a      	movs	r2, #138	@ 0x8a
 8001dd0:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001dd4:	f240 10a5 	movw	r0, #421	@ 0x1a5
 8001dd8:	f7ff fa9c 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
					TFT_Draw_Fill_Round_Rect(621, 421, 138, 38, 8, GRAYISH_BLUE);
 8001ddc:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	2308      	movs	r3, #8
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	2326      	movs	r3, #38	@ 0x26
 8001de8:	228a      	movs	r2, #138	@ 0x8a
 8001dea:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001dee:	f240 206d 	movw	r0, #621	@ 0x26d
 8001df2:	f7ff fa8f 	bl	8001314 <TFT_Draw_Fill_Round_Rect>

					TFT_Draw_Fill_Triangle_Simple(285, 427, 30, 18, 1, VIVID_BLUE);
 8001df6:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	2312      	movs	r3, #18
 8001e02:	221e      	movs	r2, #30
 8001e04:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8001e08:	f240 101d 	movw	r0, #285	@ 0x11d
 8001e0c:	f7fe fe76 	bl	8000afc <TFT_Draw_Fill_Triangle_Simple>
					TFT_Draw_Fill_Triangle_Inverted_Simple(475, 432, 30, 18, 1, VIVID_BLUE);
 8001e10:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	2301      	movs	r3, #1
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2312      	movs	r3, #18
 8001e1c:	221e      	movs	r2, #30
 8001e1e:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8001e22:	f240 10db 	movw	r0, #475	@ 0x1db
 8001e26:	f7fe fea7 	bl	8000b78 <TFT_Draw_Fill_Triangle_Inverted_Simple>
					LCD_Font(665, 446, "Parar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8001e2a:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001e2e:	9301      	str	r3, [sp, #4]
 8001e30:	2301      	movs	r3, #1
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	4b3d      	ldr	r3, [pc, #244]	@ (8001f2c <header_fotter+0x2d4>)
 8001e36:	4a43      	ldr	r2, [pc, #268]	@ (8001f44 <header_fotter+0x2ec>)
 8001e38:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8001e3c:	f240 2099 	movw	r0, #665	@ 0x299
 8001e40:	f7ff fb82 	bl	8001548 <LCD_Font>
 8001e44:	e237      	b.n	80022b6 <header_fotter+0x65e>
				}
				else
				{
					LCD_Font(33, 30, "Banho / Ajuste a Temperatura do Banho", _Open_Sans_Bold_18, 1, WHITE);
 8001e46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	4b36      	ldr	r3, [pc, #216]	@ (8001f2c <header_fotter+0x2d4>)
 8001e52:	4a3d      	ldr	r2, [pc, #244]	@ (8001f48 <header_fotter+0x2f0>)
 8001e54:	211e      	movs	r1, #30
 8001e56:	2021      	movs	r0, #33	@ 0x21
 8001e58:	f7ff fb76 	bl	8001548 <LCD_Font>

					if(flag_estado_banho || flag_iniciar_banho)
 8001e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f4c <header_fotter+0x2f4>)
 8001e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d104      	bne.n	8001e70 <header_fotter+0x218>
 8001e66:	4b3a      	ldr	r3, [pc, #232]	@ (8001f50 <header_fotter+0x2f8>)
 8001e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d071      	beq.n	8001f54 <header_fotter+0x2fc>
					{
						TFT_Draw_Fill_Round_Rect(41, 421, 138, 38, 8, VIVID_BLUE);
 8001e70:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	2308      	movs	r3, #8
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	2326      	movs	r3, #38	@ 0x26
 8001e7c:	228a      	movs	r2, #138	@ 0x8a
 8001e7e:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001e82:	2029      	movs	r0, #41	@ 0x29
 8001e84:	f7ff fa46 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
						TFT_Draw_Fill_Round_Rect(231, 421, 138, 38, 8, WHITE);
 8001e88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	2308      	movs	r3, #8
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2326      	movs	r3, #38	@ 0x26
 8001e94:	228a      	movs	r2, #138	@ 0x8a
 8001e96:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001e9a:	20e7      	movs	r0, #231	@ 0xe7
 8001e9c:	f7ff fa3a 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
						TFT_Draw_Fill_Round_Rect(421, 421, 138, 38, 8, WHITE);
 8001ea0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ea4:	9301      	str	r3, [sp, #4]
 8001ea6:	2308      	movs	r3, #8
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	2326      	movs	r3, #38	@ 0x26
 8001eac:	228a      	movs	r2, #138	@ 0x8a
 8001eae:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001eb2:	f240 10a5 	movw	r0, #421	@ 0x1a5
 8001eb6:	f7ff fa2d 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
						TFT_Draw_Fill_Round_Rect(621, 421, 138, 38, 8, WHITE);
 8001eba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2326      	movs	r3, #38	@ 0x26
 8001ec6:	228a      	movs	r2, #138	@ 0x8a
 8001ec8:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001ecc:	f240 206d 	movw	r0, #621	@ 0x26d
 8001ed0:	f7ff fa20 	bl	8001314 <TFT_Draw_Fill_Round_Rect>

						TFT_Draw_Fill_Triangle_Simple(285, 427, 30, 18, 1, VIVID_BLUE);
 8001ed4:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	2301      	movs	r3, #1
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	2312      	movs	r3, #18
 8001ee0:	221e      	movs	r2, #30
 8001ee2:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8001ee6:	f240 101d 	movw	r0, #285	@ 0x11d
 8001eea:	f7fe fe07 	bl	8000afc <TFT_Draw_Fill_Triangle_Simple>
						TFT_Draw_Fill_Triangle_Inverted_Simple(475, 432, 30, 18, 1, VIVID_BLUE);
 8001eee:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2312      	movs	r3, #18
 8001efa:	221e      	movs	r2, #30
 8001efc:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8001f00:	f240 10db 	movw	r0, #475	@ 0x1db
 8001f04:	f7fe fe38 	bl	8000b78 <TFT_Draw_Fill_Triangle_Inverted_Simple>
						LCD_Font(665, 446, "Parar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8001f08:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001f0c:	9301      	str	r3, [sp, #4]
 8001f0e:	2301      	movs	r3, #1
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <header_fotter+0x2d4>)
 8001f14:	4a0b      	ldr	r2, [pc, #44]	@ (8001f44 <header_fotter+0x2ec>)
 8001f16:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8001f1a:	f240 2099 	movw	r0, #665	@ 0x299
 8001f1e:	f7ff fb13 	bl	8001548 <LCD_Font>
 8001f22:	e1c8      	b.n	80022b6 <header_fotter+0x65e>
 8001f24:	20000054 	.word	0x20000054
 8001f28:	200000e0 	.word	0x200000e0
 8001f2c:	08006398 	.word	0x08006398
 8001f30:	08005ab4 	.word	0x08005ab4
 8001f34:	08005abc 	.word	0x08005abc
 8001f38:	200000e2 	.word	0x200000e2
 8001f3c:	200000ee 	.word	0x200000ee
 8001f40:	08005ac4 	.word	0x08005ac4
 8001f44:	08005ad8 	.word	0x08005ad8
 8001f48:	08005ae0 	.word	0x08005ae0
 8001f4c:	200000ec 	.word	0x200000ec
 8001f50:	200000ea 	.word	0x200000ea
					}
					else
					{

						TFT_Draw_Fill_Round_Rect(41, 421, 138, 38, 8, WHITE);
 8001f54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2326      	movs	r3, #38	@ 0x26
 8001f60:	228a      	movs	r2, #138	@ 0x8a
 8001f62:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001f66:	2029      	movs	r0, #41	@ 0x29
 8001f68:	f7ff f9d4 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
						TFT_Draw_Fill_Round_Rect(231, 421, 138, 38, 8, WHITE);
 8001f6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	2308      	movs	r3, #8
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	2326      	movs	r3, #38	@ 0x26
 8001f78:	228a      	movs	r2, #138	@ 0x8a
 8001f7a:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001f7e:	20e7      	movs	r0, #231	@ 0xe7
 8001f80:	f7ff f9c8 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
						TFT_Draw_Fill_Round_Rect(421, 421, 138, 38, 8, WHITE);
 8001f84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	2308      	movs	r3, #8
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	2326      	movs	r3, #38	@ 0x26
 8001f90:	228a      	movs	r2, #138	@ 0x8a
 8001f92:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001f96:	f240 10a5 	movw	r0, #421	@ 0x1a5
 8001f9a:	f7ff f9bb 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
						TFT_Draw_Fill_Round_Rect(621, 421, 138, 38, 8, WHITE);
 8001f9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	2326      	movs	r3, #38	@ 0x26
 8001faa:	228a      	movs	r2, #138	@ 0x8a
 8001fac:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8001fb0:	f240 206d 	movw	r0, #621	@ 0x26d
 8001fb4:	f7ff f9ae 	bl	8001314 <TFT_Draw_Fill_Round_Rect>

						LCD_Font(80, 446, "Voltar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8001fb8:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	4bc0      	ldr	r3, [pc, #768]	@ (80022c4 <header_fotter+0x66c>)
 8001fc4:	4ac0      	ldr	r2, [pc, #768]	@ (80022c8 <header_fotter+0x670>)
 8001fc6:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8001fca:	2050      	movs	r0, #80	@ 0x50
 8001fcc:	f7ff fabc 	bl	8001548 <LCD_Font>
						TFT_Draw_Fill_Triangle_Simple(285, 427, 30, 18, 1, VIVID_BLUE);
 8001fd0:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2312      	movs	r3, #18
 8001fdc:	221e      	movs	r2, #30
 8001fde:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8001fe2:	f240 101d 	movw	r0, #285	@ 0x11d
 8001fe6:	f7fe fd89 	bl	8000afc <TFT_Draw_Fill_Triangle_Simple>
						TFT_Draw_Fill_Triangle_Inverted_Simple(475, 432, 30, 18, 1, VIVID_BLUE);
 8001fea:	f240 431f 	movw	r3, #1055	@ 0x41f
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2312      	movs	r3, #18
 8001ff6:	221e      	movs	r2, #30
 8001ff8:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8001ffc:	f240 10db 	movw	r0, #475	@ 0x1db
 8002000:	f7fe fdba 	bl	8000b78 <TFT_Draw_Fill_Triangle_Inverted_Simple>
						LCD_Font(655, 446, "Iniciar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8002004:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	2301      	movs	r3, #1
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	4bad      	ldr	r3, [pc, #692]	@ (80022c4 <header_fotter+0x66c>)
 8002010:	4aae      	ldr	r2, [pc, #696]	@ (80022cc <header_fotter+0x674>)
 8002012:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8002016:	f240 208f 	movw	r0, #655	@ 0x28f
 800201a:	f7ff fa95 	bl	8001548 <LCD_Font>
 800201e:	e14a      	b.n	80022b6 <header_fotter+0x65e>
					}
				}
			}
			else if(item_selected == 1)
 8002020:	4bab      	ldr	r3, [pc, #684]	@ (80022d0 <header_fotter+0x678>)
 8002022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d160      	bne.n	80020ec <header_fotter+0x494>
			{
				TFT_Draw_Fill_Rectangle(30, 0, 600, 35, VIVID_BLUE);
 800202a:	f240 431f 	movw	r3, #1055	@ 0x41f
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	2323      	movs	r3, #35	@ 0x23
 8002032:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8002036:	2100      	movs	r1, #0
 8002038:	201e      	movs	r0, #30
 800203a:	f7fe fd31 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
				LCD_Font(33, 30, "Abastecimento", _Open_Sans_Bold_18, 1, WHITE);
 800203e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	2301      	movs	r3, #1
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	4b9e      	ldr	r3, [pc, #632]	@ (80022c4 <header_fotter+0x66c>)
 800204a:	4aa2      	ldr	r2, [pc, #648]	@ (80022d4 <header_fotter+0x67c>)
 800204c:	211e      	movs	r1, #30
 800204e:	2021      	movs	r0, #33	@ 0x21
 8002050:	f7ff fa7a 	bl	8001548 <LCD_Font>

				TFT_Draw_Fill_Round_Rect(41, 421, 138, 38, 8, WHITE);
 8002054:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	2308      	movs	r3, #8
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2326      	movs	r3, #38	@ 0x26
 8002060:	228a      	movs	r2, #138	@ 0x8a
 8002062:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002066:	2029      	movs	r0, #41	@ 0x29
 8002068:	f7ff f954 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
				TFT_Draw_Fill_Round_Rect(231, 421, 138, 38, 8, VIVID_BLUE);
 800206c:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	2308      	movs	r3, #8
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2326      	movs	r3, #38	@ 0x26
 8002078:	228a      	movs	r2, #138	@ 0x8a
 800207a:	f240 11a5 	movw	r1, #421	@ 0x1a5
 800207e:	20e7      	movs	r0, #231	@ 0xe7
 8002080:	f7ff f948 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
				TFT_Draw_Fill_Round_Rect(421, 421, 138, 38, 8, VIVID_BLUE);
 8002084:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	2308      	movs	r3, #8
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2326      	movs	r3, #38	@ 0x26
 8002090:	228a      	movs	r2, #138	@ 0x8a
 8002092:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002096:	f240 10a5 	movw	r0, #421	@ 0x1a5
 800209a:	f7ff f93b 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
				TFT_Draw_Fill_Round_Rect(621, 421, 138, 38, 8, WHITE);
 800209e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020a2:	9301      	str	r3, [sp, #4]
 80020a4:	2308      	movs	r3, #8
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	2326      	movs	r3, #38	@ 0x26
 80020aa:	228a      	movs	r2, #138	@ 0x8a
 80020ac:	f240 11a5 	movw	r1, #421	@ 0x1a5
 80020b0:	f240 206d 	movw	r0, #621	@ 0x26d
 80020b4:	f7ff f92e 	bl	8001314 <TFT_Draw_Fill_Round_Rect>

				LCD_Font(80, 446, "Voltar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 80020b8:	f240 431f 	movw	r3, #1055	@ 0x41f
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	2301      	movs	r3, #1
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	4b80      	ldr	r3, [pc, #512]	@ (80022c4 <header_fotter+0x66c>)
 80020c4:	4a80      	ldr	r2, [pc, #512]	@ (80022c8 <header_fotter+0x670>)
 80020c6:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 80020ca:	2050      	movs	r0, #80	@ 0x50
 80020cc:	f7ff fa3c 	bl	8001548 <LCD_Font>
				LCD_Font(655, 446, "Iniciar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 80020d0:	f240 431f 	movw	r3, #1055	@ 0x41f
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	2301      	movs	r3, #1
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	4b7a      	ldr	r3, [pc, #488]	@ (80022c4 <header_fotter+0x66c>)
 80020dc:	4a7b      	ldr	r2, [pc, #492]	@ (80022cc <header_fotter+0x674>)
 80020de:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 80020e2:	f240 208f 	movw	r0, #655	@ 0x28f
 80020e6:	f7ff fa2f 	bl	8001548 <LCD_Font>
 80020ea:	e0e4      	b.n	80022b6 <header_fotter+0x65e>
			}
			else if(item_selected == 2)
 80020ec:	4b78      	ldr	r3, [pc, #480]	@ (80022d0 <header_fotter+0x678>)
 80020ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d160      	bne.n	80021b8 <header_fotter+0x560>
			{
				TFT_Draw_Fill_Rectangle(30, 0, 600, 35, VIVID_BLUE);
 80020f6:	f240 431f 	movw	r3, #1055	@ 0x41f
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2323      	movs	r3, #35	@ 0x23
 80020fe:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8002102:	2100      	movs	r1, #0
 8002104:	201e      	movs	r0, #30
 8002106:	f7fe fccb 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
				LCD_Font(33, 30, "Drenagem", _Open_Sans_Bold_18, 1, WHITE);
 800210a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	2301      	movs	r3, #1
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	4b6b      	ldr	r3, [pc, #428]	@ (80022c4 <header_fotter+0x66c>)
 8002116:	4a70      	ldr	r2, [pc, #448]	@ (80022d8 <header_fotter+0x680>)
 8002118:	211e      	movs	r1, #30
 800211a:	2021      	movs	r0, #33	@ 0x21
 800211c:	f7ff fa14 	bl	8001548 <LCD_Font>

				TFT_Draw_Fill_Round_Rect(41, 421, 138, 38, 8, WHITE);
 8002120:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	2308      	movs	r3, #8
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2326      	movs	r3, #38	@ 0x26
 800212c:	228a      	movs	r2, #138	@ 0x8a
 800212e:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002132:	2029      	movs	r0, #41	@ 0x29
 8002134:	f7ff f8ee 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
				TFT_Draw_Fill_Round_Rect(231, 421, 138, 38, 8, VIVID_BLUE);
 8002138:	f240 431f 	movw	r3, #1055	@ 0x41f
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	2308      	movs	r3, #8
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2326      	movs	r3, #38	@ 0x26
 8002144:	228a      	movs	r2, #138	@ 0x8a
 8002146:	f240 11a5 	movw	r1, #421	@ 0x1a5
 800214a:	20e7      	movs	r0, #231	@ 0xe7
 800214c:	f7ff f8e2 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
				TFT_Draw_Fill_Round_Rect(421, 421, 138, 38, 8, VIVID_BLUE);
 8002150:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	2308      	movs	r3, #8
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2326      	movs	r3, #38	@ 0x26
 800215c:	228a      	movs	r2, #138	@ 0x8a
 800215e:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002162:	f240 10a5 	movw	r0, #421	@ 0x1a5
 8002166:	f7ff f8d5 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
				TFT_Draw_Fill_Round_Rect(621, 421, 138, 38, 8, WHITE);
 800216a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	2308      	movs	r3, #8
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	2326      	movs	r3, #38	@ 0x26
 8002176:	228a      	movs	r2, #138	@ 0x8a
 8002178:	f240 11a5 	movw	r1, #421	@ 0x1a5
 800217c:	f240 206d 	movw	r0, #621	@ 0x26d
 8002180:	f7ff f8c8 	bl	8001314 <TFT_Draw_Fill_Round_Rect>

				LCD_Font(80, 446, "Voltar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8002184:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	2301      	movs	r3, #1
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	4b4d      	ldr	r3, [pc, #308]	@ (80022c4 <header_fotter+0x66c>)
 8002190:	4a4d      	ldr	r2, [pc, #308]	@ (80022c8 <header_fotter+0x670>)
 8002192:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8002196:	2050      	movs	r0, #80	@ 0x50
 8002198:	f7ff f9d6 	bl	8001548 <LCD_Font>
				LCD_Font(655, 446, "Iniciar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 800219c:	f240 431f 	movw	r3, #1055	@ 0x41f
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	2301      	movs	r3, #1
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	4b47      	ldr	r3, [pc, #284]	@ (80022c4 <header_fotter+0x66c>)
 80021a8:	4a48      	ldr	r2, [pc, #288]	@ (80022cc <header_fotter+0x674>)
 80021aa:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 80021ae:	f240 208f 	movw	r0, #655	@ 0x28f
 80021b2:	f7ff f9c9 	bl	8001548 <LCD_Font>
 80021b6:	e07e      	b.n	80022b6 <header_fotter+0x65e>
			}
			else if(item_selected == 3)
 80021b8:	4b45      	ldr	r3, [pc, #276]	@ (80022d0 <header_fotter+0x678>)
 80021ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d179      	bne.n	80022b6 <header_fotter+0x65e>
			{
				TFT_Draw_Fill_Rectangle(30, 0, 600, 35, VIVID_BLUE);
 80021c2:	f240 431f 	movw	r3, #1055	@ 0x41f
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2323      	movs	r3, #35	@ 0x23
 80021ca:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80021ce:	2100      	movs	r1, #0
 80021d0:	201e      	movs	r0, #30
 80021d2:	f7fe fc65 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
				LCD_Font(33, 30, "Configuracao", _Open_Sans_Bold_18, 1, WHITE);
 80021d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	2301      	movs	r3, #1
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	4b38      	ldr	r3, [pc, #224]	@ (80022c4 <header_fotter+0x66c>)
 80021e2:	4a3e      	ldr	r2, [pc, #248]	@ (80022dc <header_fotter+0x684>)
 80021e4:	211e      	movs	r1, #30
 80021e6:	2021      	movs	r0, #33	@ 0x21
 80021e8:	f7ff f9ae 	bl	8001548 <LCD_Font>

				TFT_Draw_Fill_Round_Rect(41, 421, 138, 38, 8, WHITE);
 80021ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	2308      	movs	r3, #8
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2326      	movs	r3, #38	@ 0x26
 80021f8:	228a      	movs	r2, #138	@ 0x8a
 80021fa:	f240 11a5 	movw	r1, #421	@ 0x1a5
 80021fe:	2029      	movs	r0, #41	@ 0x29
 8002200:	f7ff f888 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
				TFT_Draw_Fill_Round_Rect(231, 421, 138, 38, 8, WHITE);
 8002204:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	2308      	movs	r3, #8
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2326      	movs	r3, #38	@ 0x26
 8002210:	228a      	movs	r2, #138	@ 0x8a
 8002212:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002216:	20e7      	movs	r0, #231	@ 0xe7
 8002218:	f7ff f87c 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
				TFT_Draw_Fill_Round_Rect(421, 421, 138, 38, 8, WHITE);
 800221c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002220:	9301      	str	r3, [sp, #4]
 8002222:	2308      	movs	r3, #8
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	2326      	movs	r3, #38	@ 0x26
 8002228:	228a      	movs	r2, #138	@ 0x8a
 800222a:	f240 11a5 	movw	r1, #421	@ 0x1a5
 800222e:	f240 10a5 	movw	r0, #421	@ 0x1a5
 8002232:	f7ff f86f 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
				TFT_Draw_Fill_Round_Rect(621, 421, 138, 38, 8, WHITE);
 8002236:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	2308      	movs	r3, #8
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2326      	movs	r3, #38	@ 0x26
 8002242:	228a      	movs	r2, #138	@ 0x8a
 8002244:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002248:	f240 206d 	movw	r0, #621	@ 0x26d
 800224c:	f7ff f862 	bl	8001314 <TFT_Draw_Fill_Round_Rect>

				LCD_Font(80, 446, "Voltar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 8002250:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	2301      	movs	r3, #1
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	4b1a      	ldr	r3, [pc, #104]	@ (80022c4 <header_fotter+0x66c>)
 800225c:	4a1a      	ldr	r2, [pc, #104]	@ (80022c8 <header_fotter+0x670>)
 800225e:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8002262:	2050      	movs	r0, #80	@ 0x50
 8002264:	f7ff f970 	bl	8001548 <LCD_Font>
				TFT_Draw_Fill_Triangle_Simple(285, 427, 30, 18, 1, VIVID_BLUE);
 8002268:	f240 431f 	movw	r3, #1055	@ 0x41f
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	2301      	movs	r3, #1
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2312      	movs	r3, #18
 8002274:	221e      	movs	r2, #30
 8002276:	f240 11ab 	movw	r1, #427	@ 0x1ab
 800227a:	f240 101d 	movw	r0, #285	@ 0x11d
 800227e:	f7fe fc3d 	bl	8000afc <TFT_Draw_Fill_Triangle_Simple>
				TFT_Draw_Fill_Triangle_Inverted_Simple(475, 432, 30, 18, 1, VIVID_BLUE);
 8002282:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	2301      	movs	r3, #1
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2312      	movs	r3, #18
 800228e:	221e      	movs	r2, #30
 8002290:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8002294:	f240 10db 	movw	r0, #475	@ 0x1db
 8002298:	f7fe fc6e 	bl	8000b78 <TFT_Draw_Fill_Triangle_Inverted_Simple>
				LCD_Font(660, 446, "Entrar", _Open_Sans_Bold_18, 1, VIVID_BLUE);
 800229c:	f240 431f 	movw	r3, #1055	@ 0x41f
 80022a0:	9301      	str	r3, [sp, #4]
 80022a2:	2301      	movs	r3, #1
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	4b07      	ldr	r3, [pc, #28]	@ (80022c4 <header_fotter+0x66c>)
 80022a8:	4a0d      	ldr	r2, [pc, #52]	@ (80022e0 <header_fotter+0x688>)
 80022aa:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 80022ae:	f44f 7025 	mov.w	r0, #660	@ 0x294
 80022b2:	f7ff f949 	bl	8001548 <LCD_Font>
			}
		}

		flag_escrita_tela = 0;
 80022b6:	4b0b      	ldr	r3, [pc, #44]	@ (80022e4 <header_fotter+0x68c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
	}
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	08006398 	.word	0x08006398
 80022c8:	08005b08 	.word	0x08005b08
 80022cc:	08005b10 	.word	0x08005b10
 80022d0:	200000e2 	.word	0x200000e2
 80022d4:	08005b18 	.word	0x08005b18
 80022d8:	08005b28 	.word	0x08005b28
 80022dc:	08005b34 	.word	0x08005b34
 80022e0:	08005abc 	.word	0x08005abc
 80022e4:	20000054 	.word	0x20000054

080022e8 <scan_membrana>:
	else if (item_selected == 3)
		cabecalho("Configuracao", 75);
}

int8_t scan_membrana(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0

		for(int col = 0; col < 4; col++ )
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	e041      	b.n	8002378 <scan_membrana+0x90>
		{

			uint32_t botao_mask = (GPIOE->IDR & (0x0F << 2)) >> 2;
 80022f4:	4b26      	ldr	r3, [pc, #152]	@ (8002390 <scan_membrana+0xa8>)
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	089b      	lsrs	r3, r3, #2
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	60bb      	str	r3, [r7, #8]
			uint8_t botao = (botao_mask >> col) & 1;
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	71fb      	strb	r3, [r7, #7]


			if(botao == key_pressed[0][col])
 8002310:	4a20      	ldr	r2, [pc, #128]	@ (8002394 <scan_membrana+0xac>)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4413      	add	r3, r2
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	79fa      	ldrb	r2, [r7, #7]
 800231a:	429a      	cmp	r2, r3
 800231c:	d105      	bne.n	800232a <scan_membrana+0x42>
			{
				debounce_counter[0][col] = 0;
 800231e:	4a1e      	ldr	r2, [pc, #120]	@ (8002398 <scan_membrana+0xb0>)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4413      	add	r3, r2
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
 8002328:	e023      	b.n	8002372 <scan_membrana+0x8a>
			}else if(++debounce_counter[0][col] >= DEBOUNCE_THRESHOLD)
 800232a:	4a1b      	ldr	r2, [pc, #108]	@ (8002398 <scan_membrana+0xb0>)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4413      	add	r3, r2
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	3301      	adds	r3, #1
 8002334:	b2d9      	uxtb	r1, r3
 8002336:	4a18      	ldr	r2, [pc, #96]	@ (8002398 <scan_membrana+0xb0>)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	460a      	mov	r2, r1
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	4a15      	ldr	r2, [pc, #84]	@ (8002398 <scan_membrana+0xb0>)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4413      	add	r3, r2
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b04      	cmp	r3, #4
 800234a:	d912      	bls.n	8002372 <scan_membrana+0x8a>
			{
				key_pressed[0][col] = botao;
 800234c:	4a11      	ldr	r2, [pc, #68]	@ (8002394 <scan_membrana+0xac>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4413      	add	r3, r2
 8002352:	79fa      	ldrb	r2, [r7, #7]
 8002354:	701a      	strb	r2, [r3, #0]
				debounce_counter[0][col] = 0;
 8002356:	4a10      	ldr	r2, [pc, #64]	@ (8002398 <scan_membrana+0xb0>)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]

				if(botao)
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <scan_membrana+0x8a>
				{
					return mask_keyboard[0][col];
 8002366:	4a0d      	ldr	r2, [pc, #52]	@ (800239c <scan_membrana+0xb4>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4413      	add	r3, r2
 800236c:	f993 3000 	ldrsb.w	r3, [r3]
 8002370:	e007      	b.n	8002382 <scan_membrana+0x9a>
		for(int col = 0; col < 4; col++ )
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3301      	adds	r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b03      	cmp	r3, #3
 800237c:	ddba      	ble.n	80022f4 <scan_membrana+0xc>
				}
			}
	}

	return -1;
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002382:	4618      	mov	r0, r3
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000
 8002394:	200000f4 	.word	0x200000f4
 8002398:	20000104 	.word	0x20000104
 800239c:	0801abb0 	.word	0x0801abb0

080023a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023a6:	f000 feeb 	bl	8003180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023aa:	f000 fac5 	bl	8002938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023ae:	f000 fbc7 	bl	8002b40 <MX_GPIO_Init>
  MX_FSMC_Init();
 80023b2:	f000 fc0f 	bl	8002bd4 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 80023b6:	f000 fb99 	bl	8002aec <MX_USART1_UART_Init>
  MX_TIM7_Init();
 80023ba:	f000 fb27 	bl	8002a0c <MX_TIM7_Init>
  MX_TIM9_Init();
 80023be:	f000 fb5b 	bl	8002a78 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  Init_SSD1963();
 80023c2:	f7fe f998 	bl	80006f6 <Init_SSD1963>
  HAL_TIM_Base_Start_IT(&htim7);
 80023c6:	48ab      	ldr	r0, [pc, #684]	@ (8002674 <main+0x2d4>)
 80023c8:	f001 ff0e 	bl	80041e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 80023cc:	48aa      	ldr	r0, [pc, #680]	@ (8002678 <main+0x2d8>)
 80023ce:	f001 ff0b 	bl	80041e8 <HAL_TIM_Base_Start_IT>
  TFT_Clear_Screen(WHITE);
 80023d2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80023d6:	f7fe fae5 	bl	80009a4 <TFT_Clear_Screen>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

/************************************   MENU PRINCIPAL  *********************************************/
	  if(current_screen == 0){
 80023da:	4ba8      	ldr	r3, [pc, #672]	@ (800267c <main+0x2dc>)
 80023dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d165      	bne.n	80024b0 <main+0x110>

		if (current_screen != ultimo_estado_menu)
 80023e4:	4ba5      	ldr	r3, [pc, #660]	@ (800267c <main+0x2dc>)
 80023e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023ea:	4ba5      	ldr	r3, [pc, #660]	@ (8002680 <main+0x2e0>)
 80023ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d01a      	beq.n	800242a <main+0x8a>
		{
			TFT_Draw_Fill_Rectangle(0, 81, 800, 317, VIVID_BLUE);
 80023f4:	f240 431f 	movw	r3, #1055	@ 0x41f
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	f240 133d 	movw	r3, #317	@ 0x13d
 80023fe:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002402:	2151      	movs	r1, #81	@ 0x51
 8002404:	2000      	movs	r0, #0
 8002406:	f7fe fb4b 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
			starter_Screen();
 800240a:	f7ff f95d 	bl	80016c8 <starter_Screen>
			home_screen();
 800240e:	f7ff fa11 	bl	8001834 <home_screen>
			flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 8002412:	2200      	movs	r2, #0
 8002414:	4b9b      	ldr	r3, [pc, #620]	@ (8002684 <main+0x2e4>)
 8002416:	4611      	mov	r1, r2
 8002418:	7019      	strb	r1, [r3, #0]
 800241a:	4b9b      	ldr	r3, [pc, #620]	@ (8002688 <main+0x2e8>)
 800241c:	4611      	mov	r1, r2
 800241e:	7019      	strb	r1, [r3, #0]
 8002420:	4b9a      	ldr	r3, [pc, #616]	@ (800268c <main+0x2ec>)
 8002422:	4611      	mov	r1, r2
 8002424:	7019      	strb	r1, [r3, #0]
 8002426:	4b9a      	ldr	r3, [pc, #616]	@ (8002690 <main+0x2f0>)
 8002428:	701a      	strb	r2, [r3, #0]
		}

		if (flag_botao_on){
 800242a:	4b99      	ldr	r3, [pc, #612]	@ (8002690 <main+0x2f0>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <main+0xa6>
			flag_escrita_tela = 1;
 8002434:	4b97      	ldr	r3, [pc, #604]	@ (8002694 <main+0x2f4>)
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
			current_screen = 1;
 800243a:	4b90      	ldr	r3, [pc, #576]	@ (800267c <main+0x2dc>)
 800243c:	2201      	movs	r2, #1
 800243e:	801a      	strh	r2, [r3, #0]
			flag_botao_on = 0;
 8002440:	4b93      	ldr	r3, [pc, #588]	@ (8002690 <main+0x2f0>)
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
		}


		if (flag_botao_down)
 8002446:	4b8f      	ldr	r3, [pc, #572]	@ (8002684 <main+0x2e4>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d013      	beq.n	8002478 <main+0xd8>
		{
			flag_botao_down = 0;
 8002450:	4b8c      	ldr	r3, [pc, #560]	@ (8002684 <main+0x2e4>)
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
			item_selected++;
 8002456:	4b90      	ldr	r3, [pc, #576]	@ (8002698 <main+0x2f8>)
 8002458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800245c:	b29b      	uxth	r3, r3
 800245e:	3301      	adds	r3, #1
 8002460:	b29b      	uxth	r3, r3
 8002462:	b21a      	sxth	r2, r3
 8002464:	4b8c      	ldr	r3, [pc, #560]	@ (8002698 <main+0x2f8>)
 8002466:	801a      	strh	r2, [r3, #0]

			if (item_selected >= NUM_ITEMS)
 8002468:	4b8b      	ldr	r3, [pc, #556]	@ (8002698 <main+0x2f8>)
 800246a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800246e:	2b03      	cmp	r3, #3
 8002470:	dd02      	ble.n	8002478 <main+0xd8>
				item_selected = 0;
 8002472:	4b89      	ldr	r3, [pc, #548]	@ (8002698 <main+0x2f8>)
 8002474:	2200      	movs	r2, #0
 8002476:	801a      	strh	r2, [r3, #0]
		}

		if(flag_botao_up)
 8002478:	4b83      	ldr	r3, [pc, #524]	@ (8002688 <main+0x2e8>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d013      	beq.n	80024aa <main+0x10a>
		{
			flag_botao_up = 0;
 8002482:	4b81      	ldr	r3, [pc, #516]	@ (8002688 <main+0x2e8>)
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
			item_selected--;
 8002488:	4b83      	ldr	r3, [pc, #524]	@ (8002698 <main+0x2f8>)
 800248a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29b      	uxth	r3, r3
 8002494:	b21a      	sxth	r2, r3
 8002496:	4b80      	ldr	r3, [pc, #512]	@ (8002698 <main+0x2f8>)
 8002498:	801a      	strh	r2, [r3, #0]

			if (item_selected < 0)
 800249a:	4b7f      	ldr	r3, [pc, #508]	@ (8002698 <main+0x2f8>)
 800249c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	da02      	bge.n	80024aa <main+0x10a>
				item_selected = NUM_ITEMS - 1;
 80024a4:	4b7c      	ldr	r3, [pc, #496]	@ (8002698 <main+0x2f8>)
 80024a6:	2203      	movs	r2, #3
 80024a8:	801a      	strh	r2, [r3, #0]
		}

		atualiza_Cursor();
 80024aa:	f7ff fa6f 	bl	800198c <atualiza_Cursor>
 80024ae:	e221      	b.n	80028f4 <main+0x554>
	  }

/************************************   TELA ESPECÍFICA  *********************************************/
	  else
	  {
			if (current_screen != ultimo_estado_menu)
 80024b0:	4b72      	ldr	r3, [pc, #456]	@ (800267c <main+0x2dc>)
 80024b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024b6:	4b72      	ldr	r3, [pc, #456]	@ (8002680 <main+0x2e0>)
 80024b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d01d      	beq.n	80024fc <main+0x15c>
			{
				TFT_Draw_Fill_Rectangle(0, 81, 800, 317, VIVID_BLUE);
 80024c0:	f240 431f 	movw	r3, #1055	@ 0x41f
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	f240 133d 	movw	r3, #317	@ 0x13d
 80024ca:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80024ce:	2151      	movs	r1, #81	@ 0x51
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7fe fae5 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
				starter_Screen();
 80024d6:	f7ff f8f7 	bl	80016c8 <starter_Screen>
				ultimo_estado_menu = current_screen;
 80024da:	4b68      	ldr	r3, [pc, #416]	@ (800267c <main+0x2dc>)
 80024dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024e0:	4b67      	ldr	r3, [pc, #412]	@ (8002680 <main+0x2e0>)
 80024e2:	801a      	strh	r2, [r3, #0]
				flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 80024e4:	2200      	movs	r2, #0
 80024e6:	4b67      	ldr	r3, [pc, #412]	@ (8002684 <main+0x2e4>)
 80024e8:	4611      	mov	r1, r2
 80024ea:	7019      	strb	r1, [r3, #0]
 80024ec:	4b66      	ldr	r3, [pc, #408]	@ (8002688 <main+0x2e8>)
 80024ee:	4611      	mov	r1, r2
 80024f0:	7019      	strb	r1, [r3, #0]
 80024f2:	4b66      	ldr	r3, [pc, #408]	@ (800268c <main+0x2ec>)
 80024f4:	4611      	mov	r1, r2
 80024f6:	7019      	strb	r1, [r3, #0]
 80024f8:	4b65      	ldr	r3, [pc, #404]	@ (8002690 <main+0x2f0>)
 80024fa:	701a      	strb	r2, [r3, #0]
			}

			/********************* BANHO *************************/
			if(item_selected == 0)
 80024fc:	4b66      	ldr	r3, [pc, #408]	@ (8002698 <main+0x2f8>)
 80024fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f040 8197 	bne.w	8002836 <main+0x496>
			{
				if(flag_estado_banho)
 8002508:	4b64      	ldr	r3, [pc, #400]	@ (800269c <main+0x2fc>)
 800250a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 80dc 	beq.w	80026cc <main+0x32c>
				{
					if(!flag_desligar_banho)
 8002514:	4b62      	ldr	r3, [pc, #392]	@ (80026a0 <main+0x300>)
 8002516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d175      	bne.n	800260a <main+0x26a>
					{
						if(flag_resistencia_ativa)
 800251e:	4b61      	ldr	r3, [pc, #388]	@ (80026a4 <main+0x304>)
 8002520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <main+0x194>
						{
							flag_resistencia_ativa = flag_resistencia_ativa;
 8002528:	4b5e      	ldr	r3, [pc, #376]	@ (80026a4 <main+0x304>)
 800252a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800252e:	4b5d      	ldr	r3, [pc, #372]	@ (80026a4 <main+0x304>)
 8002530:	801a      	strh	r2, [r3, #0]
 8002532:	e026      	b.n	8002582 <main+0x1e2>
						}
						else if(!flag_resistencia_ativa && !flag_iniciar_banho)
 8002534:	4b5b      	ldr	r3, [pc, #364]	@ (80026a4 <main+0x304>)
 8002536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d121      	bne.n	8002582 <main+0x1e2>
 800253e:	4b5a      	ldr	r3, [pc, #360]	@ (80026a8 <main+0x308>)
 8002540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d11c      	bne.n	8002582 <main+0x1e2>
						{
							LCD_Font(685, 310, "36", _Open_Sans_Bold_24, 1, WHITE);
 8002548:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	2301      	movs	r3, #1
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	4b56      	ldr	r3, [pc, #344]	@ (80026ac <main+0x30c>)
 8002554:	4a56      	ldr	r2, [pc, #344]	@ (80026b0 <main+0x310>)
 8002556:	f44f 719b 	mov.w	r1, #310	@ 0x136
 800255a:	f240 20ad 	movw	r0, #685	@ 0x2ad
 800255e:	f7fe fff3 	bl	8001548 <LCD_Font>
							TFT_Draw_Circle(750, 300, 10, 1, 1, WHITE);
 8002562:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002566:	9301      	str	r3, [sp, #4]
 8002568:	2301      	movs	r3, #1
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	2301      	movs	r3, #1
 800256e:	220a      	movs	r2, #10
 8002570:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002574:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8002578:	f7fe fb3e 	bl	8000bf8 <TFT_Draw_Circle>
							flag_resistencia_ativa = 1;
 800257c:	4b49      	ldr	r3, [pc, #292]	@ (80026a4 <main+0x304>)
 800257e:	2201      	movs	r2, #1
 8002580:	801a      	strh	r2, [r3, #0]
						}

						if(flag_botao_on)
 8002582:	4b43      	ldr	r3, [pc, #268]	@ (8002690 <main+0x2f0>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80ee 	beq.w	800276a <main+0x3ca>
						{
							TFT_Draw_Fill_Rectangle(0, 81, 800, 317, VIVID_BLUE);
 800258e:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	f240 133d 	movw	r3, #317	@ 0x13d
 8002598:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800259c:	2151      	movs	r1, #81	@ 0x51
 800259e:	2000      	movs	r0, #0
 80025a0:	f7fe fa7e 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
							LCD_Font(150, 185, "Finalizando...", _Free_Serif_12, 1, WHITE);
 80025a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	2301      	movs	r3, #1
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	4b41      	ldr	r3, [pc, #260]	@ (80026b4 <main+0x314>)
 80025b0:	4a41      	ldr	r2, [pc, #260]	@ (80026b8 <main+0x318>)
 80025b2:	21b9      	movs	r1, #185	@ 0xb9
 80025b4:	2096      	movs	r0, #150	@ 0x96
 80025b6:	f7fe ffc7 	bl	8001548 <LCD_Font>
							TFT_Draw_Fill_Round_Rect(150, 200, 500, 30, 10, GRAYISH_BLUE);
 80025ba:	f647 53ff 	movw	r3, #32255	@ 0x7dff
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	230a      	movs	r3, #10
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	231e      	movs	r3, #30
 80025c6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80025ca:	21c8      	movs	r1, #200	@ 0xc8
 80025cc:	2096      	movs	r0, #150	@ 0x96
 80025ce:	f7fe fea1 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
							flag_desligar_banho = 1;
 80025d2:	4b33      	ldr	r3, [pc, #204]	@ (80026a0 <main+0x300>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	801a      	strh	r2, [r3, #0]
							flag_resistencia_ativa = 0;
 80025d8:	4b32      	ldr	r3, [pc, #200]	@ (80026a4 <main+0x304>)
 80025da:	2200      	movs	r2, #0
 80025dc:	801a      	strh	r2, [r3, #0]
							flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 80025de:	2200      	movs	r2, #0
 80025e0:	4b28      	ldr	r3, [pc, #160]	@ (8002684 <main+0x2e4>)
 80025e2:	4611      	mov	r1, r2
 80025e4:	7019      	strb	r1, [r3, #0]
 80025e6:	4b28      	ldr	r3, [pc, #160]	@ (8002688 <main+0x2e8>)
 80025e8:	4611      	mov	r1, r2
 80025ea:	7019      	strb	r1, [r3, #0]
 80025ec:	4b27      	ldr	r3, [pc, #156]	@ (800268c <main+0x2ec>)
 80025ee:	4611      	mov	r1, r2
 80025f0:	7019      	strb	r1, [r3, #0]
 80025f2:	4b27      	ldr	r3, [pc, #156]	@ (8002690 <main+0x2f0>)
 80025f4:	701a      	strb	r2, [r3, #0]
							flag_iniciar_banho = 0;
 80025f6:	4b2c      	ldr	r3, [pc, #176]	@ (80026a8 <main+0x308>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	801a      	strh	r2, [r3, #0]
							contador_Iniciar = 0;
 80025fc:	4b2f      	ldr	r3, [pc, #188]	@ (80026bc <main+0x31c>)
 80025fe:	2200      	movs	r2, #0
 8002600:	801a      	strh	r2, [r3, #0]

							flag_escrita_tela = 1;
 8002602:	4b24      	ldr	r3, [pc, #144]	@ (8002694 <main+0x2f4>)
 8002604:	2201      	movs	r2, #1
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	e0af      	b.n	800276a <main+0x3ca>
						}
					}
					else
					{
						if(ultimo_contador_Desligar != contador_Desligar && (contador_Desligar % 5 == 0))
 800260a:	4b2d      	ldr	r3, [pc, #180]	@ (80026c0 <main+0x320>)
 800260c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002610:	4b2c      	ldr	r3, [pc, #176]	@ (80026c4 <main+0x324>)
 8002612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002616:	429a      	cmp	r2, r3
 8002618:	f000 80a7 	beq.w	800276a <main+0x3ca>
 800261c:	4b29      	ldr	r3, [pc, #164]	@ (80026c4 <main+0x324>)
 800261e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002622:	4b29      	ldr	r3, [pc, #164]	@ (80026c8 <main+0x328>)
 8002624:	fb83 1302 	smull	r1, r3, r3, r2
 8002628:	1059      	asrs	r1, r3, #1
 800262a:	17d3      	asrs	r3, r2, #31
 800262c:	1ac9      	subs	r1, r1, r3
 800262e:	460b      	mov	r3, r1
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	b21b      	sxth	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	f040 8096 	bne.w	800276a <main+0x3ca>
						{
							ultimo_contador_Desligar = contador_Desligar;
 800263e:	4b21      	ldr	r3, [pc, #132]	@ (80026c4 <main+0x324>)
 8002640:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002644:	4b1e      	ldr	r3, [pc, #120]	@ (80026c0 <main+0x320>)
 8002646:	801a      	strh	r2, [r3, #0]
							uint16_t w = (500 * contador_Desligar) / COUNT_LIM;
 8002648:	4b1e      	ldr	r3, [pc, #120]	@ (80026c4 <main+0x324>)
 800264a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800264e:	b29b      	uxth	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	0092      	lsls	r2, r2, #2
 8002654:	4413      	add	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	80fb      	strh	r3, [r7, #6]
							TFT_Draw_Fill_Round_Rect(150, 200, w, 30, 10, WHITE);
 800265a:	88fa      	ldrh	r2, [r7, #6]
 800265c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002660:	9301      	str	r3, [sp, #4]
 8002662:	230a      	movs	r3, #10
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	231e      	movs	r3, #30
 8002668:	21c8      	movs	r1, #200	@ 0xc8
 800266a:	2096      	movs	r0, #150	@ 0x96
 800266c:	f7fe fe52 	bl	8001314 <TFT_Draw_Fill_Round_Rect>
 8002670:	e07b      	b.n	800276a <main+0x3ca>
 8002672:	bf00      	nop
 8002674:	2000013c 	.word	0x2000013c
 8002678:	20000184 	.word	0x20000184
 800267c:	200000e0 	.word	0x200000e0
 8002680:	20000050 	.word	0x20000050
 8002684:	20000116 	.word	0x20000116
 8002688:	20000115 	.word	0x20000115
 800268c:	20000114 	.word	0x20000114
 8002690:	20000117 	.word	0x20000117
 8002694:	20000054 	.word	0x20000054
 8002698:	200000e2 	.word	0x200000e2
 800269c:	200000ec 	.word	0x200000ec
 80026a0:	200000ee 	.word	0x200000ee
 80026a4:	200000f0 	.word	0x200000f0
 80026a8:	200000ea 	.word	0x200000ea
 80026ac:	08006fb4 	.word	0x08006fb4
 80026b0:	08005ab0 	.word	0x08005ab0
 80026b4:	0801929c 	.word	0x0801929c
 80026b8:	08005b58 	.word	0x08005b58
 80026bc:	200000e8 	.word	0x200000e8
 80026c0:	200000e6 	.word	0x200000e6
 80026c4:	200000e4 	.word	0x200000e4
 80026c8:	66666667 	.word	0x66666667
						}
					}
				}
				else
				{
					if (flag_botao_off)
 80026cc:	4b8b      	ldr	r3, [pc, #556]	@ (80028fc <main+0x55c>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d014      	beq.n	8002700 <main+0x360>
					{
						flag_escrita_tela = 1;
 80026d6:	4b8a      	ldr	r3, [pc, #552]	@ (8002900 <main+0x560>)
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
						flag_botao_off = 0;
 80026dc:	4b87      	ldr	r3, [pc, #540]	@ (80028fc <main+0x55c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
						flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 80026e2:	2200      	movs	r2, #0
 80026e4:	4b87      	ldr	r3, [pc, #540]	@ (8002904 <main+0x564>)
 80026e6:	4611      	mov	r1, r2
 80026e8:	7019      	strb	r1, [r3, #0]
 80026ea:	4b87      	ldr	r3, [pc, #540]	@ (8002908 <main+0x568>)
 80026ec:	4611      	mov	r1, r2
 80026ee:	7019      	strb	r1, [r3, #0]
 80026f0:	4b82      	ldr	r3, [pc, #520]	@ (80028fc <main+0x55c>)
 80026f2:	4611      	mov	r1, r2
 80026f4:	7019      	strb	r1, [r3, #0]
 80026f6:	4b85      	ldr	r3, [pc, #532]	@ (800290c <main+0x56c>)
 80026f8:	701a      	strb	r2, [r3, #0]
						current_screen = 0;
 80026fa:	4b85      	ldr	r3, [pc, #532]	@ (8002910 <main+0x570>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	801a      	strh	r2, [r3, #0]
					}

					if(flag_botao_on && !flag_estado_banho && !flag_desligar_banho)
 8002700:	4b82      	ldr	r3, [pc, #520]	@ (800290c <main+0x56c>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d02f      	beq.n	800276a <main+0x3ca>
 800270a:	4b82      	ldr	r3, [pc, #520]	@ (8002914 <main+0x574>)
 800270c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d12a      	bne.n	800276a <main+0x3ca>
 8002714:	4b80      	ldr	r3, [pc, #512]	@ (8002918 <main+0x578>)
 8002716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d125      	bne.n	800276a <main+0x3ca>
					{
						flag_botao_on = 0;
 800271e:	4b7b      	ldr	r3, [pc, #492]	@ (800290c <main+0x56c>)
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
						flag_escrita_tela = 1;
 8002724:	4b76      	ldr	r3, [pc, #472]	@ (8002900 <main+0x560>)
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
						flag_iniciar_banho = 1;
 800272a:	4b7c      	ldr	r3, [pc, #496]	@ (800291c <main+0x57c>)
 800272c:	2201      	movs	r2, #1
 800272e:	801a      	strh	r2, [r3, #0]
						flag_estado_banho = 1;
 8002730:	4b78      	ldr	r3, [pc, #480]	@ (8002914 <main+0x574>)
 8002732:	2201      	movs	r2, #1
 8002734:	801a      	strh	r2, [r3, #0]
						TFT_Draw_Bitmap(690, 337, RECIRCULACAO_WIDTH, RECIRCULACAO_HEIGHT, recirculacao_bitmap, WHITE);
 8002736:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	4b78      	ldr	r3, [pc, #480]	@ (8002920 <main+0x580>)
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	231b      	movs	r3, #27
 8002742:	2215      	movs	r2, #21
 8002744:	f240 1151 	movw	r1, #337	@ 0x151
 8002748:	f240 20b2 	movw	r0, #690	@ 0x2b2
 800274c:	f7fe ff76 	bl	800163c <TFT_Draw_Bitmap>
						TFT_Draw_Circle(750, 350, 10, 1, 1, WHITE);
 8002750:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002754:	9301      	str	r3, [sp, #4]
 8002756:	2301      	movs	r3, #1
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	2301      	movs	r3, #1
 800275c:	220a      	movs	r2, #10
 800275e:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8002762:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8002766:	f7fe fa47 	bl	8000bf8 <TFT_Draw_Circle>

					}
				}

				if(flag_botao_up)
 800276a:	4b67      	ldr	r3, [pc, #412]	@ (8002908 <main+0x568>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d02c      	beq.n	80027ce <main+0x42e>
				{
					flag_botao_up = 0;
 8002774:	4b64      	ldr	r3, [pc, #400]	@ (8002908 <main+0x568>)
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
					temp++;
 800277a:	4b6a      	ldr	r3, [pc, #424]	@ (8002924 <main+0x584>)
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	3301      	adds	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	4b68      	ldr	r3, [pc, #416]	@ (8002924 <main+0x584>)
 8002784:	801a      	strh	r2, [r3, #0]

					if(temp > 42) temp = 42;
 8002786:	4b67      	ldr	r3, [pc, #412]	@ (8002924 <main+0x584>)
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	2b2a      	cmp	r3, #42	@ 0x2a
 800278c:	d903      	bls.n	8002796 <main+0x3f6>
 800278e:	4b65      	ldr	r3, [pc, #404]	@ (8002924 <main+0x584>)
 8002790:	222a      	movs	r2, #42	@ 0x2a
 8002792:	801a      	strh	r2, [r3, #0]
 8002794:	e01b      	b.n	80027ce <main+0x42e>

					else
					{
						TFT_Draw_Fill_Rectangle(120, 185, 150, 100, VIVID_BLUE);
 8002796:	f240 431f 	movw	r3, #1055	@ 0x41f
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2364      	movs	r3, #100	@ 0x64
 800279e:	2296      	movs	r2, #150	@ 0x96
 80027a0:	21b9      	movs	r1, #185	@ 0xb9
 80027a2:	2078      	movs	r0, #120	@ 0x78
 80027a4:	f7fe f97c 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
						sprintf(buffer, "%d", temp);
 80027a8:	4b5e      	ldr	r3, [pc, #376]	@ (8002924 <main+0x584>)
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	495e      	ldr	r1, [pc, #376]	@ (8002928 <main+0x588>)
 80027b0:	485e      	ldr	r0, [pc, #376]	@ (800292c <main+0x58c>)
 80027b2:	f002 fccd 	bl	8005150 <siprintf>
						LCD_Font(120, 280, buffer,_Open_Sans_Bold_128, 1, WHITE);
 80027b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	2301      	movs	r3, #1
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	4b5b      	ldr	r3, [pc, #364]	@ (8002930 <main+0x590>)
 80027c2:	4a5a      	ldr	r2, [pc, #360]	@ (800292c <main+0x58c>)
 80027c4:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80027c8:	2078      	movs	r0, #120	@ 0x78
 80027ca:	f7fe febd 	bl	8001548 <LCD_Font>
					}
				}

				if(flag_botao_down)
 80027ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002904 <main+0x564>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 808d 	beq.w	80028f4 <main+0x554>
				{
					flag_botao_down = 0;
 80027da:	4b4a      	ldr	r3, [pc, #296]	@ (8002904 <main+0x564>)
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
					temp--;
 80027e0:	4b50      	ldr	r3, [pc, #320]	@ (8002924 <main+0x584>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	4b4e      	ldr	r3, [pc, #312]	@ (8002924 <main+0x584>)
 80027ea:	801a      	strh	r2, [r3, #0]

					if(temp < 36) temp = 36;
 80027ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002924 <main+0x584>)
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	2b23      	cmp	r3, #35	@ 0x23
 80027f2:	d803      	bhi.n	80027fc <main+0x45c>
 80027f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002924 <main+0x584>)
 80027f6:	2224      	movs	r2, #36	@ 0x24
 80027f8:	801a      	strh	r2, [r3, #0]
 80027fa:	e07b      	b.n	80028f4 <main+0x554>

					else
					{
						TFT_Draw_Fill_Rectangle(120, 185, 150, 100, VIVID_BLUE);
 80027fc:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2364      	movs	r3, #100	@ 0x64
 8002804:	2296      	movs	r2, #150	@ 0x96
 8002806:	21b9      	movs	r1, #185	@ 0xb9
 8002808:	2078      	movs	r0, #120	@ 0x78
 800280a:	f7fe f949 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
						sprintf(buffer, "%d", temp);
 800280e:	4b45      	ldr	r3, [pc, #276]	@ (8002924 <main+0x584>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	4944      	ldr	r1, [pc, #272]	@ (8002928 <main+0x588>)
 8002816:	4845      	ldr	r0, [pc, #276]	@ (800292c <main+0x58c>)
 8002818:	f002 fc9a 	bl	8005150 <siprintf>
						LCD_Font(120, 280, buffer,_Open_Sans_Bold_128, 1, WHITE);
 800281c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	2301      	movs	r3, #1
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	4b42      	ldr	r3, [pc, #264]	@ (8002930 <main+0x590>)
 8002828:	4a40      	ldr	r2, [pc, #256]	@ (800292c <main+0x58c>)
 800282a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800282e:	2078      	movs	r0, #120	@ 0x78
 8002830:	f7fe fe8a 	bl	8001548 <LCD_Font>
 8002834:	e05e      	b.n	80028f4 <main+0x554>
				}

			}

			/********************* ABASTECIMENTO *************************/
			else if(item_selected == 1)
 8002836:	4b3f      	ldr	r3, [pc, #252]	@ (8002934 <main+0x594>)
 8002838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d11a      	bne.n	8002876 <main+0x4d6>
			{
				if (flag_botao_off)
 8002840:	4b2e      	ldr	r3, [pc, #184]	@ (80028fc <main+0x55c>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d054      	beq.n	80028f4 <main+0x554>
				{
					flag_escrita_tela = 1;
 800284a:	4b2d      	ldr	r3, [pc, #180]	@ (8002900 <main+0x560>)
 800284c:	2201      	movs	r2, #1
 800284e:	701a      	strb	r2, [r3, #0]
					flag_botao_off = 0;
 8002850:	4b2a      	ldr	r3, [pc, #168]	@ (80028fc <main+0x55c>)
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
					flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 8002856:	2200      	movs	r2, #0
 8002858:	4b2a      	ldr	r3, [pc, #168]	@ (8002904 <main+0x564>)
 800285a:	4611      	mov	r1, r2
 800285c:	7019      	strb	r1, [r3, #0]
 800285e:	4b2a      	ldr	r3, [pc, #168]	@ (8002908 <main+0x568>)
 8002860:	4611      	mov	r1, r2
 8002862:	7019      	strb	r1, [r3, #0]
 8002864:	4b25      	ldr	r3, [pc, #148]	@ (80028fc <main+0x55c>)
 8002866:	4611      	mov	r1, r2
 8002868:	7019      	strb	r1, [r3, #0]
 800286a:	4b28      	ldr	r3, [pc, #160]	@ (800290c <main+0x56c>)
 800286c:	701a      	strb	r2, [r3, #0]
					current_screen = 0;
 800286e:	4b28      	ldr	r3, [pc, #160]	@ (8002910 <main+0x570>)
 8002870:	2200      	movs	r2, #0
 8002872:	801a      	strh	r2, [r3, #0]
 8002874:	e03e      	b.n	80028f4 <main+0x554>
				}
			}

			/********************* DRENAGEM *************************/
			else if(item_selected == 2)
 8002876:	4b2f      	ldr	r3, [pc, #188]	@ (8002934 <main+0x594>)
 8002878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d11a      	bne.n	80028b6 <main+0x516>
			{
				if (flag_botao_off)
 8002880:	4b1e      	ldr	r3, [pc, #120]	@ (80028fc <main+0x55c>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d034      	beq.n	80028f4 <main+0x554>
				{
					flag_escrita_tela = 1;
 800288a:	4b1d      	ldr	r3, [pc, #116]	@ (8002900 <main+0x560>)
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
					flag_botao_off = 0;
 8002890:	4b1a      	ldr	r3, [pc, #104]	@ (80028fc <main+0x55c>)
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
					flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 8002896:	2200      	movs	r2, #0
 8002898:	4b1a      	ldr	r3, [pc, #104]	@ (8002904 <main+0x564>)
 800289a:	4611      	mov	r1, r2
 800289c:	7019      	strb	r1, [r3, #0]
 800289e:	4b1a      	ldr	r3, [pc, #104]	@ (8002908 <main+0x568>)
 80028a0:	4611      	mov	r1, r2
 80028a2:	7019      	strb	r1, [r3, #0]
 80028a4:	4b15      	ldr	r3, [pc, #84]	@ (80028fc <main+0x55c>)
 80028a6:	4611      	mov	r1, r2
 80028a8:	7019      	strb	r1, [r3, #0]
 80028aa:	4b18      	ldr	r3, [pc, #96]	@ (800290c <main+0x56c>)
 80028ac:	701a      	strb	r2, [r3, #0]
					current_screen = 0;
 80028ae:	4b18      	ldr	r3, [pc, #96]	@ (8002910 <main+0x570>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	801a      	strh	r2, [r3, #0]
 80028b4:	e01e      	b.n	80028f4 <main+0x554>
				}
			}

			/********************* CONFIGURAÇÃO *************************/
			else if(item_selected == 3)
 80028b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002934 <main+0x594>)
 80028b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d119      	bne.n	80028f4 <main+0x554>
			{
				if (flag_botao_off)
 80028c0:	4b0e      	ldr	r3, [pc, #56]	@ (80028fc <main+0x55c>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d014      	beq.n	80028f4 <main+0x554>
				{
					flag_escrita_tela = 1;
 80028ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002900 <main+0x560>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
					flag_botao_off = 0;
 80028d0:	4b0a      	ldr	r3, [pc, #40]	@ (80028fc <main+0x55c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
					flag_botao_on = flag_botao_off = flag_botao_up = flag_botao_down = 0;
 80028d6:	2200      	movs	r2, #0
 80028d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002904 <main+0x564>)
 80028da:	4611      	mov	r1, r2
 80028dc:	7019      	strb	r1, [r3, #0]
 80028de:	4b0a      	ldr	r3, [pc, #40]	@ (8002908 <main+0x568>)
 80028e0:	4611      	mov	r1, r2
 80028e2:	7019      	strb	r1, [r3, #0]
 80028e4:	4b05      	ldr	r3, [pc, #20]	@ (80028fc <main+0x55c>)
 80028e6:	4611      	mov	r1, r2
 80028e8:	7019      	strb	r1, [r3, #0]
 80028ea:	4b08      	ldr	r3, [pc, #32]	@ (800290c <main+0x56c>)
 80028ec:	701a      	strb	r2, [r3, #0]
					current_screen = 0;
 80028ee:	4b08      	ldr	r3, [pc, #32]	@ (8002910 <main+0x570>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	801a      	strh	r2, [r3, #0]
				}
			}

	  }

		header_fotter();
 80028f4:	f7ff f9b0 	bl	8001c58 <header_fotter>
	  if(current_screen == 0){
 80028f8:	e56f      	b.n	80023da <main+0x3a>
 80028fa:	bf00      	nop
 80028fc:	20000114 	.word	0x20000114
 8002900:	20000054 	.word	0x20000054
 8002904:	20000116 	.word	0x20000116
 8002908:	20000115 	.word	0x20000115
 800290c:	20000117 	.word	0x20000117
 8002910:	200000e0 	.word	0x200000e0
 8002914:	200000ec 	.word	0x200000ec
 8002918:	200000ee 	.word	0x200000ee
 800291c:	200000ea 	.word	0x200000ea
 8002920:	0801a230 	.word	0x0801a230
 8002924:	20000056 	.word	0x20000056
 8002928:	08005aa8 	.word	0x08005aa8
 800292c:	20000118 	.word	0x20000118
 8002930:	08018868 	.word	0x08018868
 8002934:	200000e2 	.word	0x200000e2

08002938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b094      	sub	sp, #80	@ 0x50
 800293c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800293e:	f107 0320 	add.w	r3, r7, #32
 8002942:	2230      	movs	r2, #48	@ 0x30
 8002944:	2100      	movs	r1, #0
 8002946:	4618      	mov	r0, r3
 8002948:	f002 fc24 	bl	8005194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800294c:	f107 030c 	add.w	r3, r7, #12
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800295c:	2300      	movs	r3, #0
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	4b28      	ldr	r3, [pc, #160]	@ (8002a04 <SystemClock_Config+0xcc>)
 8002962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002964:	4a27      	ldr	r2, [pc, #156]	@ (8002a04 <SystemClock_Config+0xcc>)
 8002966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800296a:	6413      	str	r3, [r2, #64]	@ 0x40
 800296c:	4b25      	ldr	r3, [pc, #148]	@ (8002a04 <SystemClock_Config+0xcc>)
 800296e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002978:	2300      	movs	r3, #0
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	4b22      	ldr	r3, [pc, #136]	@ (8002a08 <SystemClock_Config+0xd0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a21      	ldr	r2, [pc, #132]	@ (8002a08 <SystemClock_Config+0xd0>)
 8002982:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	4b1f      	ldr	r3, [pc, #124]	@ (8002a08 <SystemClock_Config+0xd0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002990:	607b      	str	r3, [r7, #4]
 8002992:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002994:	2302      	movs	r3, #2
 8002996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002998:	2301      	movs	r3, #1
 800299a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800299c:	2310      	movs	r3, #16
 800299e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029a0:	2302      	movs	r3, #2
 80029a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029a4:	2300      	movs	r3, #0
 80029a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80029a8:	2308      	movs	r3, #8
 80029aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80029ac:	23a8      	movs	r3, #168	@ 0xa8
 80029ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029b0:	2302      	movs	r3, #2
 80029b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80029b4:	2304      	movs	r3, #4
 80029b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029b8:	f107 0320 	add.w	r3, r7, #32
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 ff23 	bl	8003808 <HAL_RCC_OscConfig>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80029c8:	f000 fa12 	bl	8002df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029cc:	230f      	movs	r3, #15
 80029ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029d0:	2302      	movs	r3, #2
 80029d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80029dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80029e4:	f107 030c 	add.w	r3, r7, #12
 80029e8:	2105      	movs	r1, #5
 80029ea:	4618      	mov	r0, r3
 80029ec:	f001 f984 	bl	8003cf8 <HAL_RCC_ClockConfig>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80029f6:	f000 f9fb 	bl	8002df0 <Error_Handler>
  }
}
 80029fa:	bf00      	nop
 80029fc:	3750      	adds	r7, #80	@ 0x50
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40007000 	.word	0x40007000

08002a0c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a12:	463b      	mov	r3, r7
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002a1a:	4b15      	ldr	r3, [pc, #84]	@ (8002a70 <MX_TIM7_Init+0x64>)
 8002a1c:	4a15      	ldr	r2, [pc, #84]	@ (8002a74 <MX_TIM7_Init+0x68>)
 8002a1e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8399;
 8002a20:	4b13      	ldr	r3, [pc, #76]	@ (8002a70 <MX_TIM7_Init+0x64>)
 8002a22:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002a26:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a28:	4b11      	ldr	r3, [pc, #68]	@ (8002a70 <MX_TIM7_Init+0x64>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8002a2e:	4b10      	ldr	r3, [pc, #64]	@ (8002a70 <MX_TIM7_Init+0x64>)
 8002a30:	2231      	movs	r2, #49	@ 0x31
 8002a32:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a34:	4b0e      	ldr	r3, [pc, #56]	@ (8002a70 <MX_TIM7_Init+0x64>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002a3a:	480d      	ldr	r0, [pc, #52]	@ (8002a70 <MX_TIM7_Init+0x64>)
 8002a3c:	f001 fb84 	bl	8004148 <HAL_TIM_Base_Init>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002a46:	f000 f9d3 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002a52:	463b      	mov	r3, r7
 8002a54:	4619      	mov	r1, r3
 8002a56:	4806      	ldr	r0, [pc, #24]	@ (8002a70 <MX_TIM7_Init+0x64>)
 8002a58:	f001 ff56 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002a62:	f000 f9c5 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	2000013c 	.word	0x2000013c
 8002a74:	40001400 	.word	0x40001400

08002a78 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a7e:	463b      	mov	r3, r7
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002a8a:	4b16      	ldr	r3, [pc, #88]	@ (8002ae4 <MX_TIM9_Init+0x6c>)
 8002a8c:	4a16      	ldr	r2, [pc, #88]	@ (8002ae8 <MX_TIM9_Init+0x70>)
 8002a8e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 16799;
 8002a90:	4b14      	ldr	r3, [pc, #80]	@ (8002ae4 <MX_TIM9_Init+0x6c>)
 8002a92:	f244 129f 	movw	r2, #16799	@ 0x419f
 8002a96:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a98:	4b12      	ldr	r3, [pc, #72]	@ (8002ae4 <MX_TIM9_Init+0x6c>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1999;
 8002a9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <MX_TIM9_Init+0x6c>)
 8002aa0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002aa4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae4 <MX_TIM9_Init+0x6c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aac:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae4 <MX_TIM9_Init+0x6c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002ab2:	480c      	ldr	r0, [pc, #48]	@ (8002ae4 <MX_TIM9_Init+0x6c>)
 8002ab4:	f001 fb48 	bl	8004148 <HAL_TIM_Base_Init>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8002abe:	f000 f997 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ac2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ac6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002ac8:	463b      	mov	r3, r7
 8002aca:	4619      	mov	r1, r3
 8002acc:	4805      	ldr	r0, [pc, #20]	@ (8002ae4 <MX_TIM9_Init+0x6c>)
 8002ace:	f001 fceb 	bl	80044a8 <HAL_TIM_ConfigClockSource>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8002ad8:	f000 f98a 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20000184 	.word	0x20000184
 8002ae8:	40014000 	.word	0x40014000

08002aec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002af0:	4b10      	ldr	r3, [pc, #64]	@ (8002b34 <MX_USART1_UART_Init+0x48>)
 8002af2:	4a11      	ldr	r2, [pc, #68]	@ (8002b38 <MX_USART1_UART_Init+0x4c>)
 8002af4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8002af6:	4b0f      	ldr	r3, [pc, #60]	@ (8002b34 <MX_USART1_UART_Init+0x48>)
 8002af8:	4a10      	ldr	r2, [pc, #64]	@ (8002b3c <MX_USART1_UART_Init+0x50>)
 8002afa:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002afc:	4b0d      	ldr	r3, [pc, #52]	@ (8002b34 <MX_USART1_UART_Init+0x48>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b02:	4b0c      	ldr	r3, [pc, #48]	@ (8002b34 <MX_USART1_UART_Init+0x48>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b08:	4b0a      	ldr	r3, [pc, #40]	@ (8002b34 <MX_USART1_UART_Init+0x48>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b0e:	4b09      	ldr	r3, [pc, #36]	@ (8002b34 <MX_USART1_UART_Init+0x48>)
 8002b10:	220c      	movs	r2, #12
 8002b12:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b14:	4b07      	ldr	r3, [pc, #28]	@ (8002b34 <MX_USART1_UART_Init+0x48>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b1a:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <MX_USART1_UART_Init+0x48>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b20:	4804      	ldr	r0, [pc, #16]	@ (8002b34 <MX_USART1_UART_Init+0x48>)
 8002b22:	f001 ff81 	bl	8004a28 <HAL_UART_Init>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8002b2c:	f000 f960 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	200001cc 	.word	0x200001cc
 8002b38:	40011000 	.word	0x40011000
 8002b3c:	000f4240 	.word	0x000f4240

08002b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b46:	f107 030c 	add.w	r3, r7, #12
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	609a      	str	r2, [r3, #8]
 8002b52:	60da      	str	r2, [r3, #12]
 8002b54:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bcc <MX_GPIO_Init+0x8c>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	4a1b      	ldr	r2, [pc, #108]	@ (8002bcc <MX_GPIO_Init+0x8c>)
 8002b60:	f043 0310 	orr.w	r3, r3, #16
 8002b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b66:	4b19      	ldr	r3, [pc, #100]	@ (8002bcc <MX_GPIO_Init+0x8c>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	4b15      	ldr	r3, [pc, #84]	@ (8002bcc <MX_GPIO_Init+0x8c>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	4a14      	ldr	r2, [pc, #80]	@ (8002bcc <MX_GPIO_Init+0x8c>)
 8002b7c:	f043 0308 	orr.w	r3, r3, #8
 8002b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b82:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <MX_GPIO_Init+0x8c>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	4b0e      	ldr	r3, [pc, #56]	@ (8002bcc <MX_GPIO_Init+0x8c>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	4a0d      	ldr	r2, [pc, #52]	@ (8002bcc <MX_GPIO_Init+0x8c>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <MX_GPIO_Init+0x8c>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002baa:	233c      	movs	r3, #60	@ 0x3c
 8002bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bb6:	f107 030c 	add.w	r3, r7, #12
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4804      	ldr	r0, [pc, #16]	@ (8002bd0 <MX_GPIO_Init+0x90>)
 8002bbe:	f000 fc87 	bl	80034d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002bc2:	bf00      	nop
 8002bc4:	3720      	adds	r7, #32
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40021000 	.word	0x40021000

08002bd4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002bda:	1d3b      	adds	r3, r7, #4
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
 8002be8:	615a      	str	r2, [r3, #20]
 8002bea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002bec:	4b27      	ldr	r3, [pc, #156]	@ (8002c8c <MX_FSMC_Init+0xb8>)
 8002bee:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8002bf2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002bf4:	4b25      	ldr	r3, [pc, #148]	@ (8002c8c <MX_FSMC_Init+0xb8>)
 8002bf6:	4a26      	ldr	r2, [pc, #152]	@ (8002c90 <MX_FSMC_Init+0xbc>)
 8002bf8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002bfa:	4b24      	ldr	r3, [pc, #144]	@ (8002c8c <MX_FSMC_Init+0xb8>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002c00:	4b22      	ldr	r3, [pc, #136]	@ (8002c8c <MX_FSMC_Init+0xb8>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002c06:	4b21      	ldr	r3, [pc, #132]	@ (8002c8c <MX_FSMC_Init+0xb8>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002c8c <MX_FSMC_Init+0xb8>)
 8002c0e:	2210      	movs	r2, #16
 8002c10:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002c12:	4b1e      	ldr	r3, [pc, #120]	@ (8002c8c <MX_FSMC_Init+0xb8>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002c18:	4b1c      	ldr	r3, [pc, #112]	@ (8002c8c <MX_FSMC_Init+0xb8>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c8c <MX_FSMC_Init+0xb8>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002c24:	4b19      	ldr	r3, [pc, #100]	@ (8002c8c <MX_FSMC_Init+0xb8>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002c2a:	4b18      	ldr	r3, [pc, #96]	@ (8002c8c <MX_FSMC_Init+0xb8>)
 8002c2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c30:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002c32:	4b16      	ldr	r3, [pc, #88]	@ (8002c8c <MX_FSMC_Init+0xb8>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002c38:	4b14      	ldr	r3, [pc, #80]	@ (8002c8c <MX_FSMC_Init+0xb8>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002c3e:	4b13      	ldr	r3, [pc, #76]	@ (8002c8c <MX_FSMC_Init+0xb8>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002c44:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <MX_FSMC_Init+0xb8>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002c4a:	4b10      	ldr	r3, [pc, #64]	@ (8002c8c <MX_FSMC_Init+0xb8>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 8002c50:	2301      	movs	r3, #1
 8002c52:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002c54:	230f      	movs	r3, #15
 8002c56:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8002c58:	2305      	movs	r3, #5
 8002c5a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002c5c:	230f      	movs	r3, #15
 8002c5e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002c60:	2310      	movs	r3, #16
 8002c62:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002c64:	2311      	movs	r3, #17
 8002c66:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	2200      	movs	r2, #0
 8002c70:	4619      	mov	r1, r3
 8002c72:	4806      	ldr	r0, [pc, #24]	@ (8002c8c <MX_FSMC_Init+0xb8>)
 8002c74:	f001 fa20 	bl	80040b8 <HAL_SRAM_Init>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8002c7e:	f000 f8b7 	bl	8002df0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002c82:	bf00      	nop
 8002c84:	3720      	adds	r7, #32
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000214 	.word	0x20000214
 8002c90:	a0000104 	.word	0xa0000104

08002c94 <HAL_TIM_PeriodElapsedCallback>:

int __io_getchar(void) {
	return (uint16_t) (USART1->DR & (uint16_t) 0x01FF);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM7)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a46      	ldr	r2, [pc, #280]	@ (8002dbc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d134      	bne.n	8002d10 <HAL_TIM_PeriodElapsedCallback+0x7c>
	{
		int8_t botao_selecionado = scan_membrana();
 8002ca6:	f7ff fb1f 	bl	80022e8 <scan_membrana>
 8002caa:	4603      	mov	r3, r0
 8002cac:	73fb      	strb	r3, [r7, #15]
		if(botao_selecionado != -1){
 8002cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb6:	d02b      	beq.n	8002d10 <HAL_TIM_PeriodElapsedCallback+0x7c>

			switch(botao_selecionado){
 8002cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	2b09      	cmp	r3, #9
 8002cc0:	d826      	bhi.n	8002d10 <HAL_TIM_PeriodElapsedCallback+0x7c>
 8002cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc8:	08002cf9 	.word	0x08002cf9
 8002ccc:	08002d01 	.word	0x08002d01
 8002cd0:	08002d09 	.word	0x08002d09
 8002cd4:	08002d11 	.word	0x08002d11
 8002cd8:	08002d11 	.word	0x08002d11
 8002cdc:	08002d11 	.word	0x08002d11
 8002ce0:	08002d11 	.word	0x08002d11
 8002ce4:	08002d11 	.word	0x08002d11
 8002ce8:	08002d11 	.word	0x08002d11
 8002cec:	08002cf1 	.word	0x08002cf1

			case 10:
				flag_botao_on = 1;
 8002cf0:	4b33      	ldr	r3, [pc, #204]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	701a      	strb	r2, [r3, #0]
				break;
 8002cf6:	e00b      	b.n	8002d10 <HAL_TIM_PeriodElapsedCallback+0x7c>

			case 1:
				flag_botao_off = 1;
 8002cf8:	4b32      	ldr	r3, [pc, #200]	@ (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	701a      	strb	r2, [r3, #0]
				break;
 8002cfe:	e007      	b.n	8002d10 <HAL_TIM_PeriodElapsedCallback+0x7c>

			case 2:
				flag_botao_up = 1;
 8002d00:	4b31      	ldr	r3, [pc, #196]	@ (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	701a      	strb	r2, [r3, #0]
				break;
 8002d06:	e003      	b.n	8002d10 <HAL_TIM_PeriodElapsedCallback+0x7c>

			case 3:
				flag_botao_down = 1;
 8002d08:	4b30      	ldr	r3, [pc, #192]	@ (8002dcc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
				break;
 8002d0e:	bf00      	nop
			}
		}
	}
	if(htim->Instance == TIM9)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a2e      	ldr	r2, [pc, #184]	@ (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d14c      	bne.n	8002db4 <HAL_TIM_PeriodElapsedCallback+0x120>
	{
		if(flag_iniciar_banho)
 8002d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d017      	beq.n	8002d54 <HAL_TIM_PeriodElapsedCallback+0xc0>
		{
			if(contador_Iniciar >= COUNT_LIM)
 8002d24:	4b2c      	ldr	r3, [pc, #176]	@ (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002d26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d2a:	2b31      	cmp	r3, #49	@ 0x31
 8002d2c:	dd09      	ble.n	8002d42 <HAL_TIM_PeriodElapsedCallback+0xae>
			{
				contador_Iniciar = 0;
 8002d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	801a      	strh	r2, [r3, #0]
				flag_iniciar_banho = 0;
 8002d34:	4b27      	ldr	r3, [pc, #156]	@ (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	801a      	strh	r2, [r3, #0]
				flag_escrita_tela = 1;
 8002d3a:	4b28      	ldr	r3, [pc, #160]	@ (8002ddc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e008      	b.n	8002d54 <HAL_TIM_PeriodElapsedCallback+0xc0>
			}
			else
			{
				contador_Iniciar++;
 8002d42:	4b25      	ldr	r3, [pc, #148]	@ (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002d44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	b21a      	sxth	r2, r3
 8002d50:	4b21      	ldr	r3, [pc, #132]	@ (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002d52:	801a      	strh	r2, [r3, #0]
			}

		}

		if(flag_desligar_banho)
 8002d54:	4b22      	ldr	r3, [pc, #136]	@ (8002de0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d02a      	beq.n	8002db4 <HAL_TIM_PeriodElapsedCallback+0x120>
		{
			if(contador_Desligar >= COUNT_LIM)
 8002d5e:	4b21      	ldr	r3, [pc, #132]	@ (8002de4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d64:	2b31      	cmp	r3, #49	@ 0x31
 8002d66:	dd1c      	ble.n	8002da2 <HAL_TIM_PeriodElapsedCallback+0x10e>
			{
				flag_estado_banho = 0;
 8002d68:	4b1f      	ldr	r3, [pc, #124]	@ (8002de8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	801a      	strh	r2, [r3, #0]
				contador_Desligar = 0;
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002de4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	801a      	strh	r2, [r3, #0]
				ultimo_contador_Desligar = 0;
 8002d74:	4b1d      	ldr	r3, [pc, #116]	@ (8002dec <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	801a      	strh	r2, [r3, #0]
				flag_desligar_banho = 0;
 8002d7a:	4b19      	ldr	r3, [pc, #100]	@ (8002de0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	801a      	strh	r2, [r3, #0]
				TFT_Draw_Fill_Rectangle(0, 81, 800, 317, VIVID_BLUE);
 8002d80:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	f240 133d 	movw	r3, #317	@ 0x13d
 8002d8a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002d8e:	2151      	movs	r1, #81	@ 0x51
 8002d90:	2000      	movs	r0, #0
 8002d92:	f7fd fe85 	bl	8000aa0 <TFT_Draw_Fill_Rectangle>
				starter_Screen();
 8002d96:	f7fe fc97 	bl	80016c8 <starter_Screen>
				flag_escrita_tela = 1;
 8002d9a:	4b10      	ldr	r3, [pc, #64]	@ (8002ddc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
			}
			else contador_Desligar++;
		}
	}
}
 8002da0:	e008      	b.n	8002db4 <HAL_TIM_PeriodElapsedCallback+0x120>
			else contador_Desligar++;
 8002da2:	4b10      	ldr	r3, [pc, #64]	@ (8002de4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002da4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3301      	adds	r3, #1
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	b21a      	sxth	r2, r3
 8002db0:	4b0c      	ldr	r3, [pc, #48]	@ (8002de4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002db2:	801a      	strh	r2, [r3, #0]
}
 8002db4:	bf00      	nop
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40001400 	.word	0x40001400
 8002dc0:	20000117 	.word	0x20000117
 8002dc4:	20000114 	.word	0x20000114
 8002dc8:	20000115 	.word	0x20000115
 8002dcc:	20000116 	.word	0x20000116
 8002dd0:	40014000 	.word	0x40014000
 8002dd4:	200000ea 	.word	0x200000ea
 8002dd8:	200000e8 	.word	0x200000e8
 8002ddc:	20000054 	.word	0x20000054
 8002de0:	200000ee 	.word	0x200000ee
 8002de4:	200000e4 	.word	0x200000e4
 8002de8:	200000ec 	.word	0x200000ec
 8002dec:	200000e6 	.word	0x200000e6

08002df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002df4:	b672      	cpsid	i
}
 8002df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002df8:	bf00      	nop
 8002dfa:	e7fd      	b.n	8002df8 <Error_Handler+0x8>

08002dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	4b10      	ldr	r3, [pc, #64]	@ (8002e48 <HAL_MspInit+0x4c>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0a:	4a0f      	ldr	r2, [pc, #60]	@ (8002e48 <HAL_MspInit+0x4c>)
 8002e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e12:	4b0d      	ldr	r3, [pc, #52]	@ (8002e48 <HAL_MspInit+0x4c>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e1a:	607b      	str	r3, [r7, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <HAL_MspInit+0x4c>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	4a08      	ldr	r2, [pc, #32]	@ (8002e48 <HAL_MspInit+0x4c>)
 8002e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <HAL_MspInit+0x4c>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800

08002e4c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a1c      	ldr	r2, [pc, #112]	@ (8002ecc <HAL_TIM_Base_MspInit+0x80>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d116      	bne.n	8002e8c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed0 <HAL_TIM_Base_MspInit+0x84>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	4a1a      	ldr	r2, [pc, #104]	@ (8002ed0 <HAL_TIM_Base_MspInit+0x84>)
 8002e68:	f043 0320 	orr.w	r3, r3, #32
 8002e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e6e:	4b18      	ldr	r3, [pc, #96]	@ (8002ed0 <HAL_TIM_Base_MspInit+0x84>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	2037      	movs	r0, #55	@ 0x37
 8002e80:	f000 faef 	bl	8003462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002e84:	2037      	movs	r0, #55	@ 0x37
 8002e86:	f000 fb08 	bl	800349a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM9_MspInit 1 */

    /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002e8a:	e01a      	b.n	8002ec2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM9)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a10      	ldr	r2, [pc, #64]	@ (8002ed4 <HAL_TIM_Base_MspInit+0x88>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d115      	bne.n	8002ec2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed0 <HAL_TIM_Base_MspInit+0x84>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ed0 <HAL_TIM_Base_MspInit+0x84>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed0 <HAL_TIM_Base_MspInit+0x84>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	2018      	movs	r0, #24
 8002eb8:	f000 fad3 	bl	8003462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002ebc:	2018      	movs	r0, #24
 8002ebe:	f000 faec 	bl	800349a <HAL_NVIC_EnableIRQ>
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40001400 	.word	0x40001400
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40014000 	.word	0x40014000

08002ed8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08a      	sub	sp, #40	@ 0x28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee0:	f107 0314 	add.w	r3, r7, #20
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a19      	ldr	r2, [pc, #100]	@ (8002f5c <HAL_UART_MspInit+0x84>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d12c      	bne.n	8002f54 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	4b18      	ldr	r3, [pc, #96]	@ (8002f60 <HAL_UART_MspInit+0x88>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f02:	4a17      	ldr	r2, [pc, #92]	@ (8002f60 <HAL_UART_MspInit+0x88>)
 8002f04:	f043 0310 	orr.w	r3, r3, #16
 8002f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f0a:	4b15      	ldr	r3, [pc, #84]	@ (8002f60 <HAL_UART_MspInit+0x88>)
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	4b11      	ldr	r3, [pc, #68]	@ (8002f60 <HAL_UART_MspInit+0x88>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	4a10      	ldr	r2, [pc, #64]	@ (8002f60 <HAL_UART_MspInit+0x88>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f26:	4b0e      	ldr	r3, [pc, #56]	@ (8002f60 <HAL_UART_MspInit+0x88>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f32:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f40:	2303      	movs	r3, #3
 8002f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f44:	2307      	movs	r3, #7
 8002f46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4805      	ldr	r0, [pc, #20]	@ (8002f64 <HAL_UART_MspInit+0x8c>)
 8002f50:	f000 fabe 	bl	80034d0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002f54:	bf00      	nop
 8002f56:	3728      	adds	r7, #40	@ 0x28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40011000 	.word	0x40011000
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40020000 	.word	0x40020000

08002f68 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff0 <HAL_FSMC_MspInit+0x88>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d131      	bne.n	8002fe8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8002f84:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff0 <HAL_FSMC_MspInit+0x88>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	603b      	str	r3, [r7, #0]
 8002f8e:	4b19      	ldr	r3, [pc, #100]	@ (8002ff4 <HAL_FSMC_MspInit+0x8c>)
 8002f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f92:	4a18      	ldr	r2, [pc, #96]	@ (8002ff4 <HAL_FSMC_MspInit+0x8c>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	6393      	str	r3, [r2, #56]	@ 0x38
 8002f9a:	4b16      	ldr	r3, [pc, #88]	@ (8002ff4 <HAL_FSMC_MspInit+0x8c>)
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002fa6:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002faa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002fb8:	230c      	movs	r3, #12
 8002fba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fbc:	1d3b      	adds	r3, r7, #4
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	480d      	ldr	r0, [pc, #52]	@ (8002ff8 <HAL_FSMC_MspInit+0x90>)
 8002fc2:	f000 fa85 	bl	80034d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002fc6:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 8002fca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002fd8:	230c      	movs	r3, #12
 8002fda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4806      	ldr	r0, [pc, #24]	@ (8002ffc <HAL_FSMC_MspInit+0x94>)
 8002fe2:	f000 fa75 	bl	80034d0 <HAL_GPIO_Init>
 8002fe6:	e000      	b.n	8002fea <HAL_FSMC_MspInit+0x82>
    return;
 8002fe8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20000264 	.word	0x20000264
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40020c00 	.word	0x40020c00

08003000 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8003008:	f7ff ffae 	bl	8002f68 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003018:	bf00      	nop
 800301a:	e7fd      	b.n	8003018 <NMI_Handler+0x4>

0800301c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <HardFault_Handler+0x4>

08003024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003028:	bf00      	nop
 800302a:	e7fd      	b.n	8003028 <MemManage_Handler+0x4>

0800302c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003030:	bf00      	nop
 8003032:	e7fd      	b.n	8003030 <BusFault_Handler+0x4>

08003034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003038:	bf00      	nop
 800303a:	e7fd      	b.n	8003038 <UsageFault_Handler+0x4>

0800303c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800306a:	f000 f8db 	bl	8003224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8003078:	4802      	ldr	r0, [pc, #8]	@ (8003084 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800307a:	f001 f925 	bl	80042c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000184 	.word	0x20000184

08003088 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800308c:	4802      	ldr	r0, [pc, #8]	@ (8003098 <TIM7_IRQHandler+0x10>)
 800308e:	f001 f91b 	bl	80042c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	2000013c 	.word	0x2000013c

0800309c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030a4:	4a14      	ldr	r2, [pc, #80]	@ (80030f8 <_sbrk+0x5c>)
 80030a6:	4b15      	ldr	r3, [pc, #84]	@ (80030fc <_sbrk+0x60>)
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030b0:	4b13      	ldr	r3, [pc, #76]	@ (8003100 <_sbrk+0x64>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d102      	bne.n	80030be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030b8:	4b11      	ldr	r3, [pc, #68]	@ (8003100 <_sbrk+0x64>)
 80030ba:	4a12      	ldr	r2, [pc, #72]	@ (8003104 <_sbrk+0x68>)
 80030bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030be:	4b10      	ldr	r3, [pc, #64]	@ (8003100 <_sbrk+0x64>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4413      	add	r3, r2
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d207      	bcs.n	80030dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030cc:	f002 f86a 	bl	80051a4 <__errno>
 80030d0:	4603      	mov	r3, r0
 80030d2:	220c      	movs	r2, #12
 80030d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030d6:	f04f 33ff 	mov.w	r3, #4294967295
 80030da:	e009      	b.n	80030f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030dc:	4b08      	ldr	r3, [pc, #32]	@ (8003100 <_sbrk+0x64>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030e2:	4b07      	ldr	r3, [pc, #28]	@ (8003100 <_sbrk+0x64>)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	4a05      	ldr	r2, [pc, #20]	@ (8003100 <_sbrk+0x64>)
 80030ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030ee:	68fb      	ldr	r3, [r7, #12]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20020000 	.word	0x20020000
 80030fc:	00000400 	.word	0x00000400
 8003100:	20000268 	.word	0x20000268
 8003104:	200003b8 	.word	0x200003b8

08003108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800310c:	4b06      	ldr	r3, [pc, #24]	@ (8003128 <SystemInit+0x20>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003112:	4a05      	ldr	r2, [pc, #20]	@ (8003128 <SystemInit+0x20>)
 8003114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800311c:	bf00      	nop
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800312c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003164 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003130:	f7ff ffea 	bl	8003108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003134:	480c      	ldr	r0, [pc, #48]	@ (8003168 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003136:	490d      	ldr	r1, [pc, #52]	@ (800316c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003138:	4a0d      	ldr	r2, [pc, #52]	@ (8003170 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800313a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800313c:	e002      	b.n	8003144 <LoopCopyDataInit>

0800313e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800313e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003142:	3304      	adds	r3, #4

08003144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003148:	d3f9      	bcc.n	800313e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800314a:	4a0a      	ldr	r2, [pc, #40]	@ (8003174 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800314c:	4c0a      	ldr	r4, [pc, #40]	@ (8003178 <LoopFillZerobss+0x22>)
  movs r3, #0
 800314e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003150:	e001      	b.n	8003156 <LoopFillZerobss>

08003152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003154:	3204      	adds	r2, #4

08003156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003158:	d3fb      	bcc.n	8003152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800315a:	f002 f829 	bl	80051b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800315e:	f7ff f91f 	bl	80023a0 <main>
  bx  lr    
 8003162:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003164:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800316c:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8003170:	0801ac2c 	.word	0x0801ac2c
  ldr r2, =_sbss
 8003174:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8003178:	200003b8 	.word	0x200003b8

0800317c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800317c:	e7fe      	b.n	800317c <ADC_IRQHandler>
	...

08003180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003184:	4b0e      	ldr	r3, [pc, #56]	@ (80031c0 <HAL_Init+0x40>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0d      	ldr	r2, [pc, #52]	@ (80031c0 <HAL_Init+0x40>)
 800318a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800318e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003190:	4b0b      	ldr	r3, [pc, #44]	@ (80031c0 <HAL_Init+0x40>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a0a      	ldr	r2, [pc, #40]	@ (80031c0 <HAL_Init+0x40>)
 8003196:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800319a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800319c:	4b08      	ldr	r3, [pc, #32]	@ (80031c0 <HAL_Init+0x40>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a07      	ldr	r2, [pc, #28]	@ (80031c0 <HAL_Init+0x40>)
 80031a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031a8:	2003      	movs	r0, #3
 80031aa:	f000 f94f 	bl	800344c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031ae:	200f      	movs	r0, #15
 80031b0:	f000 f808 	bl	80031c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031b4:	f7ff fe22 	bl	8002dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40023c00 	.word	0x40023c00

080031c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031cc:	4b12      	ldr	r3, [pc, #72]	@ (8003218 <HAL_InitTick+0x54>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4b12      	ldr	r3, [pc, #72]	@ (800321c <HAL_InitTick+0x58>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	4619      	mov	r1, r3
 80031d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031da:	fbb3 f3f1 	udiv	r3, r3, r1
 80031de:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 f967 	bl	80034b6 <HAL_SYSTICK_Config>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e00e      	b.n	8003210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b0f      	cmp	r3, #15
 80031f6:	d80a      	bhi.n	800320e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031f8:	2200      	movs	r2, #0
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003200:	f000 f92f 	bl	8003462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003204:	4a06      	ldr	r2, [pc, #24]	@ (8003220 <HAL_InitTick+0x5c>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e000      	b.n	8003210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20000068 	.word	0x20000068
 800321c:	20000070 	.word	0x20000070
 8003220:	2000006c 	.word	0x2000006c

08003224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003228:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <HAL_IncTick+0x20>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <HAL_IncTick+0x24>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4413      	add	r3, r2
 8003234:	4a04      	ldr	r2, [pc, #16]	@ (8003248 <HAL_IncTick+0x24>)
 8003236:	6013      	str	r3, [r2, #0]
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	20000070 	.word	0x20000070
 8003248:	2000026c 	.word	0x2000026c

0800324c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return uwTick;
 8003250:	4b03      	ldr	r3, [pc, #12]	@ (8003260 <HAL_GetTick+0x14>)
 8003252:	681b      	ldr	r3, [r3, #0]
}
 8003254:	4618      	mov	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	2000026c 	.word	0x2000026c

08003264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800326c:	f7ff ffee 	bl	800324c <HAL_GetTick>
 8003270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d005      	beq.n	800328a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800327e:	4b0a      	ldr	r3, [pc, #40]	@ (80032a8 <HAL_Delay+0x44>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4413      	add	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800328a:	bf00      	nop
 800328c:	f7ff ffde 	bl	800324c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	429a      	cmp	r2, r3
 800329a:	d8f7      	bhi.n	800328c <HAL_Delay+0x28>
  {
  }
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000070 	.word	0x20000070

080032ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032bc:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <__NVIC_SetPriorityGrouping+0x44>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032c8:	4013      	ands	r3, r2
 80032ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032de:	4a04      	ldr	r2, [pc, #16]	@ (80032f0 <__NVIC_SetPriorityGrouping+0x44>)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	60d3      	str	r3, [r2, #12]
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032f8:	4b04      	ldr	r3, [pc, #16]	@ (800330c <__NVIC_GetPriorityGrouping+0x18>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	f003 0307 	and.w	r3, r3, #7
}
 8003302:	4618      	mov	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800331a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331e:	2b00      	cmp	r3, #0
 8003320:	db0b      	blt.n	800333a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	f003 021f 	and.w	r2, r3, #31
 8003328:	4907      	ldr	r1, [pc, #28]	@ (8003348 <__NVIC_EnableIRQ+0x38>)
 800332a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	2001      	movs	r0, #1
 8003332:	fa00 f202 	lsl.w	r2, r0, r2
 8003336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	e000e100 	.word	0xe000e100

0800334c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	6039      	str	r1, [r7, #0]
 8003356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335c:	2b00      	cmp	r3, #0
 800335e:	db0a      	blt.n	8003376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	b2da      	uxtb	r2, r3
 8003364:	490c      	ldr	r1, [pc, #48]	@ (8003398 <__NVIC_SetPriority+0x4c>)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	0112      	lsls	r2, r2, #4
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	440b      	add	r3, r1
 8003370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003374:	e00a      	b.n	800338c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4908      	ldr	r1, [pc, #32]	@ (800339c <__NVIC_SetPriority+0x50>)
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	3b04      	subs	r3, #4
 8003384:	0112      	lsls	r2, r2, #4
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	440b      	add	r3, r1
 800338a:	761a      	strb	r2, [r3, #24]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000e100 	.word	0xe000e100
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b089      	sub	sp, #36	@ 0x24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f1c3 0307 	rsb	r3, r3, #7
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	bf28      	it	cs
 80033be:	2304      	movcs	r3, #4
 80033c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d902      	bls.n	80033d0 <NVIC_EncodePriority+0x30>
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3b03      	subs	r3, #3
 80033ce:	e000      	b.n	80033d2 <NVIC_EncodePriority+0x32>
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d4:	f04f 32ff 	mov.w	r2, #4294967295
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43da      	mvns	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	401a      	ands	r2, r3
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e8:	f04f 31ff 	mov.w	r1, #4294967295
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	fa01 f303 	lsl.w	r3, r1, r3
 80033f2:	43d9      	mvns	r1, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f8:	4313      	orrs	r3, r2
         );
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3724      	adds	r7, #36	@ 0x24
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3b01      	subs	r3, #1
 8003414:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003418:	d301      	bcc.n	800341e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341a:	2301      	movs	r3, #1
 800341c:	e00f      	b.n	800343e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341e:	4a0a      	ldr	r2, [pc, #40]	@ (8003448 <SysTick_Config+0x40>)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3b01      	subs	r3, #1
 8003424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003426:	210f      	movs	r1, #15
 8003428:	f04f 30ff 	mov.w	r0, #4294967295
 800342c:	f7ff ff8e 	bl	800334c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003430:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <SysTick_Config+0x40>)
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003436:	4b04      	ldr	r3, [pc, #16]	@ (8003448 <SysTick_Config+0x40>)
 8003438:	2207      	movs	r2, #7
 800343a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	e000e010 	.word	0xe000e010

0800344c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ff29 	bl	80032ac <__NVIC_SetPriorityGrouping>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003462:	b580      	push	{r7, lr}
 8003464:	b086      	sub	sp, #24
 8003466:	af00      	add	r7, sp, #0
 8003468:	4603      	mov	r3, r0
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
 800346e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003474:	f7ff ff3e 	bl	80032f4 <__NVIC_GetPriorityGrouping>
 8003478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	6978      	ldr	r0, [r7, #20]
 8003480:	f7ff ff8e 	bl	80033a0 <NVIC_EncodePriority>
 8003484:	4602      	mov	r2, r0
 8003486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff ff5d 	bl	800334c <__NVIC_SetPriority>
}
 8003492:	bf00      	nop
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	4603      	mov	r3, r0
 80034a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff ff31 	bl	8003310 <__NVIC_EnableIRQ>
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff ffa2 	bl	8003408 <SysTick_Config>
 80034c4:	4603      	mov	r3, r0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b089      	sub	sp, #36	@ 0x24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	e16b      	b.n	80037c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034ec:	2201      	movs	r2, #1
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	429a      	cmp	r2, r3
 8003506:	f040 815a 	bne.w	80037be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	2b01      	cmp	r3, #1
 8003514:	d005      	beq.n	8003522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800351e:	2b02      	cmp	r3, #2
 8003520:	d130      	bne.n	8003584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	2203      	movs	r2, #3
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003558:	2201      	movs	r2, #1
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 0201 	and.w	r2, r3, #1
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	2b03      	cmp	r3, #3
 800358e:	d017      	beq.n	80035c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	2203      	movs	r2, #3
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d123      	bne.n	8003614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	08da      	lsrs	r2, r3, #3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3208      	adds	r2, #8
 80035d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	220f      	movs	r2, #15
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	08da      	lsrs	r2, r3, #3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3208      	adds	r2, #8
 800360e:	69b9      	ldr	r1, [r7, #24]
 8003610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	2203      	movs	r2, #3
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 0203 	and.w	r2, r3, #3
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 80b4 	beq.w	80037be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	4b60      	ldr	r3, [pc, #384]	@ (80037dc <HAL_GPIO_Init+0x30c>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365e:	4a5f      	ldr	r2, [pc, #380]	@ (80037dc <HAL_GPIO_Init+0x30c>)
 8003660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003664:	6453      	str	r3, [r2, #68]	@ 0x44
 8003666:	4b5d      	ldr	r3, [pc, #372]	@ (80037dc <HAL_GPIO_Init+0x30c>)
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003672:	4a5b      	ldr	r2, [pc, #364]	@ (80037e0 <HAL_GPIO_Init+0x310>)
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	089b      	lsrs	r3, r3, #2
 8003678:	3302      	adds	r3, #2
 800367a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800367e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	220f      	movs	r2, #15
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a52      	ldr	r2, [pc, #328]	@ (80037e4 <HAL_GPIO_Init+0x314>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d02b      	beq.n	80036f6 <HAL_GPIO_Init+0x226>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a51      	ldr	r2, [pc, #324]	@ (80037e8 <HAL_GPIO_Init+0x318>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d025      	beq.n	80036f2 <HAL_GPIO_Init+0x222>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a50      	ldr	r2, [pc, #320]	@ (80037ec <HAL_GPIO_Init+0x31c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d01f      	beq.n	80036ee <HAL_GPIO_Init+0x21e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a4f      	ldr	r2, [pc, #316]	@ (80037f0 <HAL_GPIO_Init+0x320>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d019      	beq.n	80036ea <HAL_GPIO_Init+0x21a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a4e      	ldr	r2, [pc, #312]	@ (80037f4 <HAL_GPIO_Init+0x324>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <HAL_GPIO_Init+0x216>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a4d      	ldr	r2, [pc, #308]	@ (80037f8 <HAL_GPIO_Init+0x328>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00d      	beq.n	80036e2 <HAL_GPIO_Init+0x212>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a4c      	ldr	r2, [pc, #304]	@ (80037fc <HAL_GPIO_Init+0x32c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d007      	beq.n	80036de <HAL_GPIO_Init+0x20e>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a4b      	ldr	r2, [pc, #300]	@ (8003800 <HAL_GPIO_Init+0x330>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d101      	bne.n	80036da <HAL_GPIO_Init+0x20a>
 80036d6:	2307      	movs	r3, #7
 80036d8:	e00e      	b.n	80036f8 <HAL_GPIO_Init+0x228>
 80036da:	2308      	movs	r3, #8
 80036dc:	e00c      	b.n	80036f8 <HAL_GPIO_Init+0x228>
 80036de:	2306      	movs	r3, #6
 80036e0:	e00a      	b.n	80036f8 <HAL_GPIO_Init+0x228>
 80036e2:	2305      	movs	r3, #5
 80036e4:	e008      	b.n	80036f8 <HAL_GPIO_Init+0x228>
 80036e6:	2304      	movs	r3, #4
 80036e8:	e006      	b.n	80036f8 <HAL_GPIO_Init+0x228>
 80036ea:	2303      	movs	r3, #3
 80036ec:	e004      	b.n	80036f8 <HAL_GPIO_Init+0x228>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e002      	b.n	80036f8 <HAL_GPIO_Init+0x228>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <HAL_GPIO_Init+0x228>
 80036f6:	2300      	movs	r3, #0
 80036f8:	69fa      	ldr	r2, [r7, #28]
 80036fa:	f002 0203 	and.w	r2, r2, #3
 80036fe:	0092      	lsls	r2, r2, #2
 8003700:	4093      	lsls	r3, r2
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4313      	orrs	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003708:	4935      	ldr	r1, [pc, #212]	@ (80037e0 <HAL_GPIO_Init+0x310>)
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	089b      	lsrs	r3, r3, #2
 800370e:	3302      	adds	r3, #2
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003716:	4b3b      	ldr	r3, [pc, #236]	@ (8003804 <HAL_GPIO_Init+0x334>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800373a:	4a32      	ldr	r2, [pc, #200]	@ (8003804 <HAL_GPIO_Init+0x334>)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003740:	4b30      	ldr	r3, [pc, #192]	@ (8003804 <HAL_GPIO_Init+0x334>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003764:	4a27      	ldr	r2, [pc, #156]	@ (8003804 <HAL_GPIO_Init+0x334>)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800376a:	4b26      	ldr	r3, [pc, #152]	@ (8003804 <HAL_GPIO_Init+0x334>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	43db      	mvns	r3, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800378e:	4a1d      	ldr	r2, [pc, #116]	@ (8003804 <HAL_GPIO_Init+0x334>)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003794:	4b1b      	ldr	r3, [pc, #108]	@ (8003804 <HAL_GPIO_Init+0x334>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037b8:	4a12      	ldr	r2, [pc, #72]	@ (8003804 <HAL_GPIO_Init+0x334>)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	3301      	adds	r3, #1
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b0f      	cmp	r3, #15
 80037c8:	f67f ae90 	bls.w	80034ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037cc:	bf00      	nop
 80037ce:	bf00      	nop
 80037d0:	3724      	adds	r7, #36	@ 0x24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40013800 	.word	0x40013800
 80037e4:	40020000 	.word	0x40020000
 80037e8:	40020400 	.word	0x40020400
 80037ec:	40020800 	.word	0x40020800
 80037f0:	40020c00 	.word	0x40020c00
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40021400 	.word	0x40021400
 80037fc:	40021800 	.word	0x40021800
 8003800:	40021c00 	.word	0x40021c00
 8003804:	40013c00 	.word	0x40013c00

08003808 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e267      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d075      	beq.n	8003912 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003826:	4b88      	ldr	r3, [pc, #544]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	2b04      	cmp	r3, #4
 8003830:	d00c      	beq.n	800384c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003832:	4b85      	ldr	r3, [pc, #532]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800383a:	2b08      	cmp	r3, #8
 800383c:	d112      	bne.n	8003864 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800383e:	4b82      	ldr	r3, [pc, #520]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003846:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800384a:	d10b      	bne.n	8003864 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d05b      	beq.n	8003910 <HAL_RCC_OscConfig+0x108>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d157      	bne.n	8003910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e242      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800386c:	d106      	bne.n	800387c <HAL_RCC_OscConfig+0x74>
 800386e:	4b76      	ldr	r3, [pc, #472]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a75      	ldr	r2, [pc, #468]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	e01d      	b.n	80038b8 <HAL_RCC_OscConfig+0xb0>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003884:	d10c      	bne.n	80038a0 <HAL_RCC_OscConfig+0x98>
 8003886:	4b70      	ldr	r3, [pc, #448]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a6f      	ldr	r2, [pc, #444]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 800388c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4b6d      	ldr	r3, [pc, #436]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a6c      	ldr	r2, [pc, #432]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	e00b      	b.n	80038b8 <HAL_RCC_OscConfig+0xb0>
 80038a0:	4b69      	ldr	r3, [pc, #420]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a68      	ldr	r2, [pc, #416]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 80038a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	4b66      	ldr	r3, [pc, #408]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a65      	ldr	r2, [pc, #404]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 80038b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d013      	beq.n	80038e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c0:	f7ff fcc4 	bl	800324c <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c8:	f7ff fcc0 	bl	800324c <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	@ 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e207      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038da:	4b5b      	ldr	r3, [pc, #364]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0xc0>
 80038e6:	e014      	b.n	8003912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e8:	f7ff fcb0 	bl	800324c <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f0:	f7ff fcac 	bl	800324c <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	@ 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e1f3      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003902:	4b51      	ldr	r3, [pc, #324]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0xe8>
 800390e:	e000      	b.n	8003912 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d063      	beq.n	80039e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800391e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00b      	beq.n	8003942 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392a:	4b47      	ldr	r3, [pc, #284]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003932:	2b08      	cmp	r3, #8
 8003934:	d11c      	bne.n	8003970 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003936:	4b44      	ldr	r3, [pc, #272]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d116      	bne.n	8003970 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003942:	4b41      	ldr	r3, [pc, #260]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_RCC_OscConfig+0x152>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d001      	beq.n	800395a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e1c7      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	4937      	ldr	r1, [pc, #220]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396e:	e03a      	b.n	80039e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d020      	beq.n	80039ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003978:	4b34      	ldr	r3, [pc, #208]	@ (8003a4c <HAL_RCC_OscConfig+0x244>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397e:	f7ff fc65 	bl	800324c <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003986:	f7ff fc61 	bl	800324c <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e1a8      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003998:	4b2b      	ldr	r3, [pc, #172]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a4:	4b28      	ldr	r3, [pc, #160]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4925      	ldr	r1, [pc, #148]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	600b      	str	r3, [r1, #0]
 80039b8:	e015      	b.n	80039e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ba:	4b24      	ldr	r3, [pc, #144]	@ (8003a4c <HAL_RCC_OscConfig+0x244>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7ff fc44 	bl	800324c <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c8:	f7ff fc40 	bl	800324c <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e187      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039da:	4b1b      	ldr	r3, [pc, #108]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d036      	beq.n	8003a60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d016      	beq.n	8003a28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039fa:	4b15      	ldr	r3, [pc, #84]	@ (8003a50 <HAL_RCC_OscConfig+0x248>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a00:	f7ff fc24 	bl	800324c <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a08:	f7ff fc20 	bl	800324c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e167      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a48 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0x200>
 8003a26:	e01b      	b.n	8003a60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a28:	4b09      	ldr	r3, [pc, #36]	@ (8003a50 <HAL_RCC_OscConfig+0x248>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2e:	f7ff fc0d 	bl	800324c <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a34:	e00e      	b.n	8003a54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a36:	f7ff fc09 	bl	800324c <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d907      	bls.n	8003a54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e150      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	42470000 	.word	0x42470000
 8003a50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a54:	4b88      	ldr	r3, [pc, #544]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1ea      	bne.n	8003a36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8097 	beq.w	8003b9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a72:	4b81      	ldr	r3, [pc, #516]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10f      	bne.n	8003a9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	4b7d      	ldr	r3, [pc, #500]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	4a7c      	ldr	r2, [pc, #496]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a8e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9e:	4b77      	ldr	r3, [pc, #476]	@ (8003c7c <HAL_RCC_OscConfig+0x474>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d118      	bne.n	8003adc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aaa:	4b74      	ldr	r3, [pc, #464]	@ (8003c7c <HAL_RCC_OscConfig+0x474>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a73      	ldr	r2, [pc, #460]	@ (8003c7c <HAL_RCC_OscConfig+0x474>)
 8003ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab6:	f7ff fbc9 	bl	800324c <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003abe:	f7ff fbc5 	bl	800324c <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e10c      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad0:	4b6a      	ldr	r3, [pc, #424]	@ (8003c7c <HAL_RCC_OscConfig+0x474>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d106      	bne.n	8003af2 <HAL_RCC_OscConfig+0x2ea>
 8003ae4:	4b64      	ldr	r3, [pc, #400]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae8:	4a63      	ldr	r2, [pc, #396]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af0:	e01c      	b.n	8003b2c <HAL_RCC_OscConfig+0x324>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b05      	cmp	r3, #5
 8003af8:	d10c      	bne.n	8003b14 <HAL_RCC_OscConfig+0x30c>
 8003afa:	4b5f      	ldr	r3, [pc, #380]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afe:	4a5e      	ldr	r2, [pc, #376]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b00:	f043 0304 	orr.w	r3, r3, #4
 8003b04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b06:	4b5c      	ldr	r3, [pc, #368]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0a:	4a5b      	ldr	r2, [pc, #364]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b12:	e00b      	b.n	8003b2c <HAL_RCC_OscConfig+0x324>
 8003b14:	4b58      	ldr	r3, [pc, #352]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b18:	4a57      	ldr	r2, [pc, #348]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b20:	4b55      	ldr	r3, [pc, #340]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b24:	4a54      	ldr	r2, [pc, #336]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b26:	f023 0304 	bic.w	r3, r3, #4
 8003b2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d015      	beq.n	8003b60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b34:	f7ff fb8a 	bl	800324c <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3c:	f7ff fb86 	bl	800324c <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e0cb      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b52:	4b49      	ldr	r3, [pc, #292]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0ee      	beq.n	8003b3c <HAL_RCC_OscConfig+0x334>
 8003b5e:	e014      	b.n	8003b8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b60:	f7ff fb74 	bl	800324c <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b68:	f7ff fb70 	bl	800324c <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e0b5      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1ee      	bne.n	8003b68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d105      	bne.n	8003b9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b90:	4b39      	ldr	r3, [pc, #228]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b94:	4a38      	ldr	r2, [pc, #224]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003b96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80a1 	beq.w	8003ce8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ba6:	4b34      	ldr	r3, [pc, #208]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d05c      	beq.n	8003c6c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d141      	bne.n	8003c3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bba:	4b31      	ldr	r3, [pc, #196]	@ (8003c80 <HAL_RCC_OscConfig+0x478>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc0:	f7ff fb44 	bl	800324c <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc8:	f7ff fb40 	bl	800324c <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e087      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bda:	4b27      	ldr	r3, [pc, #156]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69da      	ldr	r2, [r3, #28]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	019b      	lsls	r3, r3, #6
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c08:	061b      	lsls	r3, r3, #24
 8003c0a:	491b      	ldr	r1, [pc, #108]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c10:	4b1b      	ldr	r3, [pc, #108]	@ (8003c80 <HAL_RCC_OscConfig+0x478>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c16:	f7ff fb19 	bl	800324c <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1e:	f7ff fb15 	bl	800324c <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e05c      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c30:	4b11      	ldr	r3, [pc, #68]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCC_OscConfig+0x416>
 8003c3c:	e054      	b.n	8003ce8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3e:	4b10      	ldr	r3, [pc, #64]	@ (8003c80 <HAL_RCC_OscConfig+0x478>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c44:	f7ff fb02 	bl	800324c <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4c:	f7ff fafe 	bl	800324c <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e045      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5e:	4b06      	ldr	r3, [pc, #24]	@ (8003c78 <HAL_RCC_OscConfig+0x470>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_OscConfig+0x444>
 8003c6a:	e03d      	b.n	8003ce8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d107      	bne.n	8003c84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e038      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	40007000 	.word	0x40007000
 8003c80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c84:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ec>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d028      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d121      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d11a      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d111      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cca:	085b      	lsrs	r3, r3, #1
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d107      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800

08003cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0cc      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b68      	ldr	r3, [pc, #416]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d90c      	bls.n	8003d34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b65      	ldr	r3, [pc, #404]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d22:	4b63      	ldr	r3, [pc, #396]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0b8      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d020      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d4c:	4b59      	ldr	r3, [pc, #356]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	4a58      	ldr	r2, [pc, #352]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d64:	4b53      	ldr	r3, [pc, #332]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	4a52      	ldr	r2, [pc, #328]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d70:	4b50      	ldr	r3, [pc, #320]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	494d      	ldr	r1, [pc, #308]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d044      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d107      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d96:	4b47      	ldr	r3, [pc, #284]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d119      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e07f      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d003      	beq.n	8003db6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d107      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db6:	4b3f      	ldr	r3, [pc, #252]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d109      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e06f      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e067      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dd6:	4b37      	ldr	r3, [pc, #220]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f023 0203 	bic.w	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	4934      	ldr	r1, [pc, #208]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003de8:	f7ff fa30 	bl	800324c <HAL_GetTick>
 8003dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dee:	e00a      	b.n	8003e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df0:	f7ff fa2c 	bl	800324c <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e04f      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e06:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 020c 	and.w	r2, r3, #12
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d1eb      	bne.n	8003df0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e18:	4b25      	ldr	r3, [pc, #148]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d20c      	bcs.n	8003e40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b22      	ldr	r3, [pc, #136]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2e:	4b20      	ldr	r3, [pc, #128]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e032      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d008      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e4c:	4b19      	ldr	r3, [pc, #100]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	4916      	ldr	r1, [pc, #88]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e6a:	4b12      	ldr	r3, [pc, #72]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	490e      	ldr	r1, [pc, #56]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e7e:	f000 f821 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 8003e82:	4602      	mov	r2, r0
 8003e84:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	091b      	lsrs	r3, r3, #4
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	490a      	ldr	r1, [pc, #40]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e90:	5ccb      	ldrb	r3, [r1, r3]
 8003e92:	fa22 f303 	lsr.w	r3, r2, r3
 8003e96:	4a09      	ldr	r2, [pc, #36]	@ (8003ebc <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e9a:	4b09      	ldr	r3, [pc, #36]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff f990 	bl	80031c4 <HAL_InitTick>

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40023c00 	.word	0x40023c00
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	0801abd0 	.word	0x0801abd0
 8003ebc:	20000068 	.word	0x20000068
 8003ec0:	2000006c 	.word	0x2000006c

08003ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec8:	b090      	sub	sp, #64	@ 0x40
 8003eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003edc:	4b59      	ldr	r3, [pc, #356]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 030c 	and.w	r3, r3, #12
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d00d      	beq.n	8003f04 <HAL_RCC_GetSysClockFreq+0x40>
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	f200 80a1 	bhi.w	8004030 <HAL_RCC_GetSysClockFreq+0x16c>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d003      	beq.n	8003efe <HAL_RCC_GetSysClockFreq+0x3a>
 8003ef6:	e09b      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ef8:	4b53      	ldr	r3, [pc, #332]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x184>)
 8003efa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003efc:	e09b      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003efe:	4b53      	ldr	r3, [pc, #332]	@ (800404c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f00:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f02:	e098      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f04:	4b4f      	ldr	r3, [pc, #316]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f0c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f0e:	4b4d      	ldr	r3, [pc, #308]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d028      	beq.n	8003f6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f1a:	4b4a      	ldr	r3, [pc, #296]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	099b      	lsrs	r3, r3, #6
 8003f20:	2200      	movs	r2, #0
 8003f22:	623b      	str	r3, [r7, #32]
 8003f24:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4b47      	ldr	r3, [pc, #284]	@ (800404c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f30:	fb03 f201 	mul.w	r2, r3, r1
 8003f34:	2300      	movs	r3, #0
 8003f36:	fb00 f303 	mul.w	r3, r0, r3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	4a43      	ldr	r2, [pc, #268]	@ (800404c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f3e:	fba0 1202 	umull	r1, r2, r0, r2
 8003f42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f44:	460a      	mov	r2, r1
 8003f46:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003f48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f4a:	4413      	add	r3, r2
 8003f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f50:	2200      	movs	r2, #0
 8003f52:	61bb      	str	r3, [r7, #24]
 8003f54:	61fa      	str	r2, [r7, #28]
 8003f56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003f5e:	f7fc f98f 	bl	8000280 <__aeabi_uldivmod>
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4613      	mov	r3, r2
 8003f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f6a:	e053      	b.n	8004014 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6c:	4b35      	ldr	r3, [pc, #212]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	099b      	lsrs	r3, r3, #6
 8003f72:	2200      	movs	r2, #0
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	617a      	str	r2, [r7, #20]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f7e:	f04f 0b00 	mov.w	fp, #0
 8003f82:	4652      	mov	r2, sl
 8003f84:	465b      	mov	r3, fp
 8003f86:	f04f 0000 	mov.w	r0, #0
 8003f8a:	f04f 0100 	mov.w	r1, #0
 8003f8e:	0159      	lsls	r1, r3, #5
 8003f90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f94:	0150      	lsls	r0, r2, #5
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	ebb2 080a 	subs.w	r8, r2, sl
 8003f9e:	eb63 090b 	sbc.w	r9, r3, fp
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003fae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003fb2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003fb6:	ebb2 0408 	subs.w	r4, r2, r8
 8003fba:	eb63 0509 	sbc.w	r5, r3, r9
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	00eb      	lsls	r3, r5, #3
 8003fc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fcc:	00e2      	lsls	r2, r4, #3
 8003fce:	4614      	mov	r4, r2
 8003fd0:	461d      	mov	r5, r3
 8003fd2:	eb14 030a 	adds.w	r3, r4, sl
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	eb45 030b 	adc.w	r3, r5, fp
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fea:	4629      	mov	r1, r5
 8003fec:	028b      	lsls	r3, r1, #10
 8003fee:	4621      	mov	r1, r4
 8003ff0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	028a      	lsls	r2, r1, #10
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ffe:	2200      	movs	r2, #0
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	60fa      	str	r2, [r7, #12]
 8004004:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004008:	f7fc f93a 	bl	8000280 <__aeabi_uldivmod>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4613      	mov	r3, r2
 8004012:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004014:	4b0b      	ldr	r3, [pc, #44]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x180>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	0c1b      	lsrs	r3, r3, #16
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	3301      	adds	r3, #1
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004024:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800402e:	e002      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004030:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x184>)
 8004032:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004038:	4618      	mov	r0, r3
 800403a:	3740      	adds	r7, #64	@ 0x40
 800403c:	46bd      	mov	sp, r7
 800403e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004042:	bf00      	nop
 8004044:	40023800 	.word	0x40023800
 8004048:	00f42400 	.word	0x00f42400
 800404c:	017d7840 	.word	0x017d7840

08004050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004054:	4b03      	ldr	r3, [pc, #12]	@ (8004064 <HAL_RCC_GetHCLKFreq+0x14>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	20000068 	.word	0x20000068

08004068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800406c:	f7ff fff0 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004070:	4602      	mov	r2, r0
 8004072:	4b05      	ldr	r3, [pc, #20]	@ (8004088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	0a9b      	lsrs	r3, r3, #10
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	4903      	ldr	r1, [pc, #12]	@ (800408c <HAL_RCC_GetPCLK1Freq+0x24>)
 800407e:	5ccb      	ldrb	r3, [r1, r3]
 8004080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004084:	4618      	mov	r0, r3
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40023800 	.word	0x40023800
 800408c:	0801abe0 	.word	0x0801abe0

08004090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004094:	f7ff ffdc 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004098:	4602      	mov	r2, r0
 800409a:	4b05      	ldr	r3, [pc, #20]	@ (80040b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	0b5b      	lsrs	r3, r3, #13
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	4903      	ldr	r1, [pc, #12]	@ (80040b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a6:	5ccb      	ldrb	r3, [r1, r3]
 80040a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40023800 	.word	0x40023800
 80040b4:	0801abe0 	.word	0x0801abe0

080040b8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e038      	b.n	8004140 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f7fe ff8c 	bl	8003000 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3308      	adds	r3, #8
 80040f0:	4619      	mov	r1, r3
 80040f2:	4610      	mov	r0, r2
 80040f4:	f000 ff5c 	bl	8004fb0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	461a      	mov	r2, r3
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	f000 ffbe 	bl	8005084 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6858      	ldr	r0, [r3, #4]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	f000 ffe3 	bl	80050e0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	6892      	ldr	r2, [r2, #8]
 8004122:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	6892      	ldr	r2, [r2, #8]
 800412e:	f041 0101 	orr.w	r1, r1, #1
 8004132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e041      	b.n	80041de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fe fe6c 	bl	8002e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3304      	adds	r3, #4
 8004184:	4619      	mov	r1, r3
 8004186:	4610      	mov	r0, r2
 8004188:	f000 fa7e 	bl	8004688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d001      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e04e      	b.n	800429e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a23      	ldr	r2, [pc, #140]	@ (80042ac <HAL_TIM_Base_Start_IT+0xc4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d022      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x80>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800422a:	d01d      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x80>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1f      	ldr	r2, [pc, #124]	@ (80042b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d018      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x80>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1e      	ldr	r2, [pc, #120]	@ (80042b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d013      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x80>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1c      	ldr	r2, [pc, #112]	@ (80042b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00e      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x80>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1b      	ldr	r2, [pc, #108]	@ (80042bc <HAL_TIM_Base_Start_IT+0xd4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d009      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x80>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a19      	ldr	r2, [pc, #100]	@ (80042c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x80>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a18      	ldr	r2, [pc, #96]	@ (80042c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d111      	bne.n	800428c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b06      	cmp	r3, #6
 8004278:	d010      	beq.n	800429c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0201 	orr.w	r2, r2, #1
 8004288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428a:	e007      	b.n	800429c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40010000 	.word	0x40010000
 80042b0:	40000400 	.word	0x40000400
 80042b4:	40000800 	.word	0x40000800
 80042b8:	40000c00 	.word	0x40000c00
 80042bc:	40010400 	.word	0x40010400
 80042c0:	40014000 	.word	0x40014000
 80042c4:	40001800 	.word	0x40001800

080042c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d020      	beq.n	800432c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01b      	beq.n	800432c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0202 	mvn.w	r2, #2
 80042fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f999 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 8004318:	e005      	b.n	8004326 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f98b 	bl	8004636 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f99c 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d020      	beq.n	8004378 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01b      	beq.n	8004378 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0204 	mvn.w	r2, #4
 8004348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2202      	movs	r2, #2
 800434e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f973 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 8004364:	e005      	b.n	8004372 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f965 	bl	8004636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f976 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d020      	beq.n	80043c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01b      	beq.n	80043c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0208 	mvn.w	r2, #8
 8004394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2204      	movs	r2, #4
 800439a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f94d 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 80043b0:	e005      	b.n	80043be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f93f 	bl	8004636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f950 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d020      	beq.n	8004410 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01b      	beq.n	8004410 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0210 	mvn.w	r2, #16
 80043e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2208      	movs	r2, #8
 80043e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f927 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 80043fc:	e005      	b.n	800440a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f919 	bl	8004636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f92a 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00c      	beq.n	8004434 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0201 	mvn.w	r2, #1
 800442c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fe fc30 	bl	8002c94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00c      	beq.n	8004458 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004444:	2b00      	cmp	r3, #0
 8004446:	d007      	beq.n	8004458 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 fade 	bl	8004a14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00c      	beq.n	800447c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004468:	2b00      	cmp	r3, #0
 800446a:	d007      	beq.n	800447c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f8fb 	bl	8004672 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00c      	beq.n	80044a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d007      	beq.n	80044a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0220 	mvn.w	r2, #32
 8004498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fab0 	bl	8004a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044a0:	bf00      	nop
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_TIM_ConfigClockSource+0x1c>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e0b4      	b.n	800462e <HAL_TIM_ConfigClockSource+0x186>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044fc:	d03e      	beq.n	800457c <HAL_TIM_ConfigClockSource+0xd4>
 80044fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004502:	f200 8087 	bhi.w	8004614 <HAL_TIM_ConfigClockSource+0x16c>
 8004506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800450a:	f000 8086 	beq.w	800461a <HAL_TIM_ConfigClockSource+0x172>
 800450e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004512:	d87f      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x16c>
 8004514:	2b70      	cmp	r3, #112	@ 0x70
 8004516:	d01a      	beq.n	800454e <HAL_TIM_ConfigClockSource+0xa6>
 8004518:	2b70      	cmp	r3, #112	@ 0x70
 800451a:	d87b      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x16c>
 800451c:	2b60      	cmp	r3, #96	@ 0x60
 800451e:	d050      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x11a>
 8004520:	2b60      	cmp	r3, #96	@ 0x60
 8004522:	d877      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x16c>
 8004524:	2b50      	cmp	r3, #80	@ 0x50
 8004526:	d03c      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0xfa>
 8004528:	2b50      	cmp	r3, #80	@ 0x50
 800452a:	d873      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x16c>
 800452c:	2b40      	cmp	r3, #64	@ 0x40
 800452e:	d058      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x13a>
 8004530:	2b40      	cmp	r3, #64	@ 0x40
 8004532:	d86f      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x16c>
 8004534:	2b30      	cmp	r3, #48	@ 0x30
 8004536:	d064      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0x15a>
 8004538:	2b30      	cmp	r3, #48	@ 0x30
 800453a:	d86b      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x16c>
 800453c:	2b20      	cmp	r3, #32
 800453e:	d060      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0x15a>
 8004540:	2b20      	cmp	r3, #32
 8004542:	d867      	bhi.n	8004614 <HAL_TIM_ConfigClockSource+0x16c>
 8004544:	2b00      	cmp	r3, #0
 8004546:	d05c      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0x15a>
 8004548:	2b10      	cmp	r3, #16
 800454a:	d05a      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0x15a>
 800454c:	e062      	b.n	8004614 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800455e:	f000 f9b3 	bl	80048c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004570:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	609a      	str	r2, [r3, #8]
      break;
 800457a:	e04f      	b.n	800461c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800458c:	f000 f99c 	bl	80048c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800459e:	609a      	str	r2, [r3, #8]
      break;
 80045a0:	e03c      	b.n	800461c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ae:	461a      	mov	r2, r3
 80045b0:	f000 f910 	bl	80047d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2150      	movs	r1, #80	@ 0x50
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f969 	bl	8004892 <TIM_ITRx_SetConfig>
      break;
 80045c0:	e02c      	b.n	800461c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ce:	461a      	mov	r2, r3
 80045d0:	f000 f92f 	bl	8004832 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2160      	movs	r1, #96	@ 0x60
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f959 	bl	8004892 <TIM_ITRx_SetConfig>
      break;
 80045e0:	e01c      	b.n	800461c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ee:	461a      	mov	r2, r3
 80045f0:	f000 f8f0 	bl	80047d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2140      	movs	r1, #64	@ 0x40
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 f949 	bl	8004892 <TIM_ITRx_SetConfig>
      break;
 8004600:	e00c      	b.n	800461c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4619      	mov	r1, r3
 800460c:	4610      	mov	r0, r2
 800460e:	f000 f940 	bl	8004892 <TIM_ITRx_SetConfig>
      break;
 8004612:	e003      	b.n	800461c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
      break;
 8004618:	e000      	b.n	800461c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800461a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a43      	ldr	r2, [pc, #268]	@ (80047a8 <TIM_Base_SetConfig+0x120>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d013      	beq.n	80046c8 <TIM_Base_SetConfig+0x40>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a6:	d00f      	beq.n	80046c8 <TIM_Base_SetConfig+0x40>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a40      	ldr	r2, [pc, #256]	@ (80047ac <TIM_Base_SetConfig+0x124>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00b      	beq.n	80046c8 <TIM_Base_SetConfig+0x40>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a3f      	ldr	r2, [pc, #252]	@ (80047b0 <TIM_Base_SetConfig+0x128>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d007      	beq.n	80046c8 <TIM_Base_SetConfig+0x40>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a3e      	ldr	r2, [pc, #248]	@ (80047b4 <TIM_Base_SetConfig+0x12c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d003      	beq.n	80046c8 <TIM_Base_SetConfig+0x40>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a3d      	ldr	r2, [pc, #244]	@ (80047b8 <TIM_Base_SetConfig+0x130>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d108      	bne.n	80046da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a32      	ldr	r2, [pc, #200]	@ (80047a8 <TIM_Base_SetConfig+0x120>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d02b      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e8:	d027      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a2f      	ldr	r2, [pc, #188]	@ (80047ac <TIM_Base_SetConfig+0x124>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d023      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a2e      	ldr	r2, [pc, #184]	@ (80047b0 <TIM_Base_SetConfig+0x128>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d01f      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a2d      	ldr	r2, [pc, #180]	@ (80047b4 <TIM_Base_SetConfig+0x12c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d01b      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a2c      	ldr	r2, [pc, #176]	@ (80047b8 <TIM_Base_SetConfig+0x130>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d017      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a2b      	ldr	r2, [pc, #172]	@ (80047bc <TIM_Base_SetConfig+0x134>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d013      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a2a      	ldr	r2, [pc, #168]	@ (80047c0 <TIM_Base_SetConfig+0x138>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00f      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a29      	ldr	r2, [pc, #164]	@ (80047c4 <TIM_Base_SetConfig+0x13c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d00b      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a28      	ldr	r2, [pc, #160]	@ (80047c8 <TIM_Base_SetConfig+0x140>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d007      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a27      	ldr	r2, [pc, #156]	@ (80047cc <TIM_Base_SetConfig+0x144>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d003      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a26      	ldr	r2, [pc, #152]	@ (80047d0 <TIM_Base_SetConfig+0x148>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d108      	bne.n	800474c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a0e      	ldr	r2, [pc, #56]	@ (80047a8 <TIM_Base_SetConfig+0x120>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d003      	beq.n	800477a <TIM_Base_SetConfig+0xf2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a10      	ldr	r2, [pc, #64]	@ (80047b8 <TIM_Base_SetConfig+0x130>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d103      	bne.n	8004782 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	691a      	ldr	r2, [r3, #16]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f043 0204 	orr.w	r2, r3, #4
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	601a      	str	r2, [r3, #0]
}
 800479a:	bf00      	nop
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40010000 	.word	0x40010000
 80047ac:	40000400 	.word	0x40000400
 80047b0:	40000800 	.word	0x40000800
 80047b4:	40000c00 	.word	0x40000c00
 80047b8:	40010400 	.word	0x40010400
 80047bc:	40014000 	.word	0x40014000
 80047c0:	40014400 	.word	0x40014400
 80047c4:	40014800 	.word	0x40014800
 80047c8:	40001800 	.word	0x40001800
 80047cc:	40001c00 	.word	0x40001c00
 80047d0:	40002000 	.word	0x40002000

080047d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f023 0201 	bic.w	r2, r3, #1
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f023 030a 	bic.w	r3, r3, #10
 8004810:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	621a      	str	r2, [r3, #32]
}
 8004826:	bf00      	nop
 8004828:	371c      	adds	r7, #28
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004832:	b480      	push	{r7}
 8004834:	b087      	sub	sp, #28
 8004836:	af00      	add	r7, sp, #0
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f023 0210 	bic.w	r2, r3, #16
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800485c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	031b      	lsls	r3, r3, #12
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800486e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	621a      	str	r2, [r3, #32]
}
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004892:	b480      	push	{r7}
 8004894:	b085      	sub	sp, #20
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f043 0307 	orr.w	r3, r3, #7
 80048b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	609a      	str	r2, [r3, #8]
}
 80048bc:	bf00      	nop
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	021a      	lsls	r2, r3, #8
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	609a      	str	r2, [r3, #8]
}
 80048fc:	bf00      	nop
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800491c:	2302      	movs	r3, #2
 800491e:	e05a      	b.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a21      	ldr	r2, [pc, #132]	@ (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d022      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800496c:	d01d      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1d      	ldr	r2, [pc, #116]	@ (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d018      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1b      	ldr	r2, [pc, #108]	@ (80049ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d013      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a1a      	ldr	r2, [pc, #104]	@ (80049f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00e      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a18      	ldr	r2, [pc, #96]	@ (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d009      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a17      	ldr	r2, [pc, #92]	@ (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d004      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a15      	ldr	r2, [pc, #84]	@ (80049fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d10c      	bne.n	80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40010000 	.word	0x40010000
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40000800 	.word	0x40000800
 80049f0:	40000c00 	.word	0x40000c00
 80049f4:	40010400 	.word	0x40010400
 80049f8:	40014000 	.word	0x40014000
 80049fc:	40001800 	.word	0x40001800

08004a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e042      	b.n	8004ac0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fe fa42 	bl	8002ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2224      	movs	r2, #36	@ 0x24
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f82b 	bl	8004ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695a      	ldr	r2, [r3, #20]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004aa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004acc:	b0c0      	sub	sp, #256	@ 0x100
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae4:	68d9      	ldr	r1, [r3, #12]
 8004ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	ea40 0301 	orr.w	r3, r0, r1
 8004af0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	431a      	orrs	r2, r3
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b20:	f021 010c 	bic.w	r1, r1, #12
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b42:	6999      	ldr	r1, [r3, #24]
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	ea40 0301 	orr.w	r3, r0, r1
 8004b4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4b8f      	ldr	r3, [pc, #572]	@ (8004d94 <UART_SetConfig+0x2cc>)
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d005      	beq.n	8004b68 <UART_SetConfig+0xa0>
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b8d      	ldr	r3, [pc, #564]	@ (8004d98 <UART_SetConfig+0x2d0>)
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d104      	bne.n	8004b72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b68:	f7ff fa92 	bl	8004090 <HAL_RCC_GetPCLK2Freq>
 8004b6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b70:	e003      	b.n	8004b7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b72:	f7ff fa79 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8004b76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b84:	f040 810c 	bne.w	8004da0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	462b      	mov	r3, r5
 8004b9e:	1891      	adds	r1, r2, r2
 8004ba0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ba2:	415b      	adcs	r3, r3
 8004ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ba6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004baa:	4621      	mov	r1, r4
 8004bac:	eb12 0801 	adds.w	r8, r2, r1
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	eb43 0901 	adc.w	r9, r3, r1
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bca:	4690      	mov	r8, r2
 8004bcc:	4699      	mov	r9, r3
 8004bce:	4623      	mov	r3, r4
 8004bd0:	eb18 0303 	adds.w	r3, r8, r3
 8004bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004bd8:	462b      	mov	r3, r5
 8004bda:	eb49 0303 	adc.w	r3, r9, r3
 8004bde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004bee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004bf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	18db      	adds	r3, r3, r3
 8004bfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	eb42 0303 	adc.w	r3, r2, r3
 8004c02:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c0c:	f7fb fb38 	bl	8000280 <__aeabi_uldivmod>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4b61      	ldr	r3, [pc, #388]	@ (8004d9c <UART_SetConfig+0x2d4>)
 8004c16:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	011c      	lsls	r4, r3, #4
 8004c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c30:	4642      	mov	r2, r8
 8004c32:	464b      	mov	r3, r9
 8004c34:	1891      	adds	r1, r2, r2
 8004c36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c38:	415b      	adcs	r3, r3
 8004c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c40:	4641      	mov	r1, r8
 8004c42:	eb12 0a01 	adds.w	sl, r2, r1
 8004c46:	4649      	mov	r1, r9
 8004c48:	eb43 0b01 	adc.w	fp, r3, r1
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c60:	4692      	mov	sl, r2
 8004c62:	469b      	mov	fp, r3
 8004c64:	4643      	mov	r3, r8
 8004c66:	eb1a 0303 	adds.w	r3, sl, r3
 8004c6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c6e:	464b      	mov	r3, r9
 8004c70:	eb4b 0303 	adc.w	r3, fp, r3
 8004c74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	18db      	adds	r3, r3, r3
 8004c90:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c92:	4613      	mov	r3, r2
 8004c94:	eb42 0303 	adc.w	r3, r2, r3
 8004c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ca2:	f7fb faed 	bl	8000280 <__aeabi_uldivmod>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	4b3b      	ldr	r3, [pc, #236]	@ (8004d9c <UART_SetConfig+0x2d4>)
 8004cae:	fba3 2301 	umull	r2, r3, r3, r1
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	2264      	movs	r2, #100	@ 0x64
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	1acb      	subs	r3, r1, r3
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004cc2:	4b36      	ldr	r3, [pc, #216]	@ (8004d9c <UART_SetConfig+0x2d4>)
 8004cc4:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc8:	095b      	lsrs	r3, r3, #5
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004cd0:	441c      	add	r4, r3
 8004cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cdc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ce0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ce4:	4642      	mov	r2, r8
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	1891      	adds	r1, r2, r2
 8004cea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004cec:	415b      	adcs	r3, r3
 8004cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004cf4:	4641      	mov	r1, r8
 8004cf6:	1851      	adds	r1, r2, r1
 8004cf8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	414b      	adcs	r3, r1
 8004cfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	00cb      	lsls	r3, r1, #3
 8004d10:	4651      	mov	r1, sl
 8004d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d16:	4651      	mov	r1, sl
 8004d18:	00ca      	lsls	r2, r1, #3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	4642      	mov	r2, r8
 8004d22:	189b      	adds	r3, r3, r2
 8004d24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d28:	464b      	mov	r3, r9
 8004d2a:	460a      	mov	r2, r1
 8004d2c:	eb42 0303 	adc.w	r3, r2, r3
 8004d30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d40:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d48:	460b      	mov	r3, r1
 8004d4a:	18db      	adds	r3, r3, r3
 8004d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d4e:	4613      	mov	r3, r2
 8004d50:	eb42 0303 	adc.w	r3, r2, r3
 8004d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d5e:	f7fb fa8f 	bl	8000280 <__aeabi_uldivmod>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4b0d      	ldr	r3, [pc, #52]	@ (8004d9c <UART_SetConfig+0x2d4>)
 8004d68:	fba3 1302 	umull	r1, r3, r3, r2
 8004d6c:	095b      	lsrs	r3, r3, #5
 8004d6e:	2164      	movs	r1, #100	@ 0x64
 8004d70:	fb01 f303 	mul.w	r3, r1, r3
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	3332      	adds	r3, #50	@ 0x32
 8004d7a:	4a08      	ldr	r2, [pc, #32]	@ (8004d9c <UART_SetConfig+0x2d4>)
 8004d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	f003 0207 	and.w	r2, r3, #7
 8004d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4422      	add	r2, r4
 8004d8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d90:	e106      	b.n	8004fa0 <UART_SetConfig+0x4d8>
 8004d92:	bf00      	nop
 8004d94:	40011000 	.word	0x40011000
 8004d98:	40011400 	.word	0x40011400
 8004d9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004da4:	2200      	movs	r2, #0
 8004da6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004daa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004dae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004db2:	4642      	mov	r2, r8
 8004db4:	464b      	mov	r3, r9
 8004db6:	1891      	adds	r1, r2, r2
 8004db8:	6239      	str	r1, [r7, #32]
 8004dba:	415b      	adcs	r3, r3
 8004dbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dc2:	4641      	mov	r1, r8
 8004dc4:	1854      	adds	r4, r2, r1
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	eb43 0501 	adc.w	r5, r3, r1
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	00eb      	lsls	r3, r5, #3
 8004dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dda:	00e2      	lsls	r2, r4, #3
 8004ddc:	4614      	mov	r4, r2
 8004dde:	461d      	mov	r5, r3
 8004de0:	4643      	mov	r3, r8
 8004de2:	18e3      	adds	r3, r4, r3
 8004de4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004de8:	464b      	mov	r3, r9
 8004dea:	eb45 0303 	adc.w	r3, r5, r3
 8004dee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004dfe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e0e:	4629      	mov	r1, r5
 8004e10:	008b      	lsls	r3, r1, #2
 8004e12:	4621      	mov	r1, r4
 8004e14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e18:	4621      	mov	r1, r4
 8004e1a:	008a      	lsls	r2, r1, #2
 8004e1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e20:	f7fb fa2e 	bl	8000280 <__aeabi_uldivmod>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4b60      	ldr	r3, [pc, #384]	@ (8004fac <UART_SetConfig+0x4e4>)
 8004e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	011c      	lsls	r4, r3, #4
 8004e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e44:	4642      	mov	r2, r8
 8004e46:	464b      	mov	r3, r9
 8004e48:	1891      	adds	r1, r2, r2
 8004e4a:	61b9      	str	r1, [r7, #24]
 8004e4c:	415b      	adcs	r3, r3
 8004e4e:	61fb      	str	r3, [r7, #28]
 8004e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e54:	4641      	mov	r1, r8
 8004e56:	1851      	adds	r1, r2, r1
 8004e58:	6139      	str	r1, [r7, #16]
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	414b      	adcs	r3, r1
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e6c:	4659      	mov	r1, fp
 8004e6e:	00cb      	lsls	r3, r1, #3
 8004e70:	4651      	mov	r1, sl
 8004e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e76:	4651      	mov	r1, sl
 8004e78:	00ca      	lsls	r2, r1, #3
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4642      	mov	r2, r8
 8004e82:	189b      	adds	r3, r3, r2
 8004e84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e88:	464b      	mov	r3, r9
 8004e8a:	460a      	mov	r2, r1
 8004e8c:	eb42 0303 	adc.w	r3, r2, r3
 8004e90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004eac:	4649      	mov	r1, r9
 8004eae:	008b      	lsls	r3, r1, #2
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eb6:	4641      	mov	r1, r8
 8004eb8:	008a      	lsls	r2, r1, #2
 8004eba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ebe:	f7fb f9df 	bl	8000280 <__aeabi_uldivmod>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4b38      	ldr	r3, [pc, #224]	@ (8004fac <UART_SetConfig+0x4e4>)
 8004eca:	fba3 2301 	umull	r2, r3, r3, r1
 8004ece:	095b      	lsrs	r3, r3, #5
 8004ed0:	2264      	movs	r2, #100	@ 0x64
 8004ed2:	fb02 f303 	mul.w	r3, r2, r3
 8004ed6:	1acb      	subs	r3, r1, r3
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	3332      	adds	r3, #50	@ 0x32
 8004edc:	4a33      	ldr	r2, [pc, #204]	@ (8004fac <UART_SetConfig+0x4e4>)
 8004ede:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ee8:	441c      	add	r4, r3
 8004eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eee:	2200      	movs	r2, #0
 8004ef0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ef2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ef4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ef8:	4642      	mov	r2, r8
 8004efa:	464b      	mov	r3, r9
 8004efc:	1891      	adds	r1, r2, r2
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	415b      	adcs	r3, r3
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f08:	4641      	mov	r1, r8
 8004f0a:	1851      	adds	r1, r2, r1
 8004f0c:	6039      	str	r1, [r7, #0]
 8004f0e:	4649      	mov	r1, r9
 8004f10:	414b      	adcs	r3, r1
 8004f12:	607b      	str	r3, [r7, #4]
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f20:	4659      	mov	r1, fp
 8004f22:	00cb      	lsls	r3, r1, #3
 8004f24:	4651      	mov	r1, sl
 8004f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f2a:	4651      	mov	r1, sl
 8004f2c:	00ca      	lsls	r2, r1, #3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	4619      	mov	r1, r3
 8004f32:	4603      	mov	r3, r0
 8004f34:	4642      	mov	r2, r8
 8004f36:	189b      	adds	r3, r3, r2
 8004f38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f3a:	464b      	mov	r3, r9
 8004f3c:	460a      	mov	r2, r1
 8004f3e:	eb42 0303 	adc.w	r3, r2, r3
 8004f42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f5c:	4649      	mov	r1, r9
 8004f5e:	008b      	lsls	r3, r1, #2
 8004f60:	4641      	mov	r1, r8
 8004f62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f66:	4641      	mov	r1, r8
 8004f68:	008a      	lsls	r2, r1, #2
 8004f6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f6e:	f7fb f987 	bl	8000280 <__aeabi_uldivmod>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4b0d      	ldr	r3, [pc, #52]	@ (8004fac <UART_SetConfig+0x4e4>)
 8004f78:	fba3 1302 	umull	r1, r3, r3, r2
 8004f7c:	095b      	lsrs	r3, r3, #5
 8004f7e:	2164      	movs	r1, #100	@ 0x64
 8004f80:	fb01 f303 	mul.w	r3, r1, r3
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	3332      	adds	r3, #50	@ 0x32
 8004f8a:	4a08      	ldr	r2, [pc, #32]	@ (8004fac <UART_SetConfig+0x4e4>)
 8004f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	f003 020f 	and.w	r2, r3, #15
 8004f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4422      	add	r2, r4
 8004f9e:	609a      	str	r2, [r3, #8]
}
 8004fa0:	bf00      	nop
 8004fa2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fac:	51eb851f 	.word	0x51eb851f

08004fb0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	f023 0101 	bic.w	r1, r3, #1
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d102      	bne.n	8004fe0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004fda:	2340      	movs	r3, #64	@ 0x40
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	e001      	b.n	8004fe4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004ff0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004ff6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004ffc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005002:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005008:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800500e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8005014:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800501a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8005020:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800503e:	4b10      	ldr	r3, [pc, #64]	@ (8005080 <FSMC_NORSRAM_Init+0xd0>)
 8005040:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005048:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8005050:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	43db      	mvns	r3, r3
 8005060:	ea02 0103 	and.w	r1, r2, r3
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	4319      	orrs	r1, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	371c      	adds	r7, #28
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	0008fb7f 	.word	0x0008fb7f

08005084 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 800509a:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 80050a2:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 80050aa:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 80050b4:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	3b02      	subs	r3, #2
 80050bc:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 80050be:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 80050ca:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050f4:	d11d      	bne.n	8005132 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80050fe:	4b13      	ldr	r3, [pc, #76]	@ (800514c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005100:	4013      	ands	r3, r2
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	6811      	ldr	r1, [r2, #0]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	6852      	ldr	r2, [r2, #4]
 800510a:	0112      	lsls	r2, r2, #4
 800510c:	4311      	orrs	r1, r2
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	6892      	ldr	r2, [r2, #8]
 8005112:	0212      	lsls	r2, r2, #8
 8005114:	4311      	orrs	r1, r2
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	6992      	ldr	r2, [r2, #24]
 800511a:	4311      	orrs	r1, r2
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	68d2      	ldr	r2, [r2, #12]
 8005120:	0412      	lsls	r2, r2, #16
 8005122:	430a      	orrs	r2, r1
 8005124:	ea43 0102 	orr.w	r1, r3, r2
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005130:	e005      	b.n	800513e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800513a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	cff00000 	.word	0xcff00000

08005150 <siprintf>:
 8005150:	b40e      	push	{r1, r2, r3}
 8005152:	b510      	push	{r4, lr}
 8005154:	b09d      	sub	sp, #116	@ 0x74
 8005156:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005158:	9002      	str	r0, [sp, #8]
 800515a:	9006      	str	r0, [sp, #24]
 800515c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005160:	480a      	ldr	r0, [pc, #40]	@ (800518c <siprintf+0x3c>)
 8005162:	9107      	str	r1, [sp, #28]
 8005164:	9104      	str	r1, [sp, #16]
 8005166:	490a      	ldr	r1, [pc, #40]	@ (8005190 <siprintf+0x40>)
 8005168:	f853 2b04 	ldr.w	r2, [r3], #4
 800516c:	9105      	str	r1, [sp, #20]
 800516e:	2400      	movs	r4, #0
 8005170:	a902      	add	r1, sp, #8
 8005172:	6800      	ldr	r0, [r0, #0]
 8005174:	9301      	str	r3, [sp, #4]
 8005176:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005178:	f000 f9a2 	bl	80054c0 <_svfiprintf_r>
 800517c:	9b02      	ldr	r3, [sp, #8]
 800517e:	701c      	strb	r4, [r3, #0]
 8005180:	b01d      	add	sp, #116	@ 0x74
 8005182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005186:	b003      	add	sp, #12
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	20000074 	.word	0x20000074
 8005190:	ffff0208 	.word	0xffff0208

08005194 <memset>:
 8005194:	4402      	add	r2, r0
 8005196:	4603      	mov	r3, r0
 8005198:	4293      	cmp	r3, r2
 800519a:	d100      	bne.n	800519e <memset+0xa>
 800519c:	4770      	bx	lr
 800519e:	f803 1b01 	strb.w	r1, [r3], #1
 80051a2:	e7f9      	b.n	8005198 <memset+0x4>

080051a4 <__errno>:
 80051a4:	4b01      	ldr	r3, [pc, #4]	@ (80051ac <__errno+0x8>)
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	20000074 	.word	0x20000074

080051b0 <__libc_init_array>:
 80051b0:	b570      	push	{r4, r5, r6, lr}
 80051b2:	4d0d      	ldr	r5, [pc, #52]	@ (80051e8 <__libc_init_array+0x38>)
 80051b4:	4c0d      	ldr	r4, [pc, #52]	@ (80051ec <__libc_init_array+0x3c>)
 80051b6:	1b64      	subs	r4, r4, r5
 80051b8:	10a4      	asrs	r4, r4, #2
 80051ba:	2600      	movs	r6, #0
 80051bc:	42a6      	cmp	r6, r4
 80051be:	d109      	bne.n	80051d4 <__libc_init_array+0x24>
 80051c0:	4d0b      	ldr	r5, [pc, #44]	@ (80051f0 <__libc_init_array+0x40>)
 80051c2:	4c0c      	ldr	r4, [pc, #48]	@ (80051f4 <__libc_init_array+0x44>)
 80051c4:	f000 fc64 	bl	8005a90 <_init>
 80051c8:	1b64      	subs	r4, r4, r5
 80051ca:	10a4      	asrs	r4, r4, #2
 80051cc:	2600      	movs	r6, #0
 80051ce:	42a6      	cmp	r6, r4
 80051d0:	d105      	bne.n	80051de <__libc_init_array+0x2e>
 80051d2:	bd70      	pop	{r4, r5, r6, pc}
 80051d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d8:	4798      	blx	r3
 80051da:	3601      	adds	r6, #1
 80051dc:	e7ee      	b.n	80051bc <__libc_init_array+0xc>
 80051de:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e2:	4798      	blx	r3
 80051e4:	3601      	adds	r6, #1
 80051e6:	e7f2      	b.n	80051ce <__libc_init_array+0x1e>
 80051e8:	0801ac24 	.word	0x0801ac24
 80051ec:	0801ac24 	.word	0x0801ac24
 80051f0:	0801ac24 	.word	0x0801ac24
 80051f4:	0801ac28 	.word	0x0801ac28

080051f8 <__retarget_lock_acquire_recursive>:
 80051f8:	4770      	bx	lr

080051fa <__retarget_lock_release_recursive>:
 80051fa:	4770      	bx	lr

080051fc <memcpy>:
 80051fc:	440a      	add	r2, r1
 80051fe:	4291      	cmp	r1, r2
 8005200:	f100 33ff 	add.w	r3, r0, #4294967295
 8005204:	d100      	bne.n	8005208 <memcpy+0xc>
 8005206:	4770      	bx	lr
 8005208:	b510      	push	{r4, lr}
 800520a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800520e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005212:	4291      	cmp	r1, r2
 8005214:	d1f9      	bne.n	800520a <memcpy+0xe>
 8005216:	bd10      	pop	{r4, pc}

08005218 <_free_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4605      	mov	r5, r0
 800521c:	2900      	cmp	r1, #0
 800521e:	d041      	beq.n	80052a4 <_free_r+0x8c>
 8005220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005224:	1f0c      	subs	r4, r1, #4
 8005226:	2b00      	cmp	r3, #0
 8005228:	bfb8      	it	lt
 800522a:	18e4      	addlt	r4, r4, r3
 800522c:	f000 f8e0 	bl	80053f0 <__malloc_lock>
 8005230:	4a1d      	ldr	r2, [pc, #116]	@ (80052a8 <_free_r+0x90>)
 8005232:	6813      	ldr	r3, [r2, #0]
 8005234:	b933      	cbnz	r3, 8005244 <_free_r+0x2c>
 8005236:	6063      	str	r3, [r4, #4]
 8005238:	6014      	str	r4, [r2, #0]
 800523a:	4628      	mov	r0, r5
 800523c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005240:	f000 b8dc 	b.w	80053fc <__malloc_unlock>
 8005244:	42a3      	cmp	r3, r4
 8005246:	d908      	bls.n	800525a <_free_r+0x42>
 8005248:	6820      	ldr	r0, [r4, #0]
 800524a:	1821      	adds	r1, r4, r0
 800524c:	428b      	cmp	r3, r1
 800524e:	bf01      	itttt	eq
 8005250:	6819      	ldreq	r1, [r3, #0]
 8005252:	685b      	ldreq	r3, [r3, #4]
 8005254:	1809      	addeq	r1, r1, r0
 8005256:	6021      	streq	r1, [r4, #0]
 8005258:	e7ed      	b.n	8005236 <_free_r+0x1e>
 800525a:	461a      	mov	r2, r3
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	b10b      	cbz	r3, 8005264 <_free_r+0x4c>
 8005260:	42a3      	cmp	r3, r4
 8005262:	d9fa      	bls.n	800525a <_free_r+0x42>
 8005264:	6811      	ldr	r1, [r2, #0]
 8005266:	1850      	adds	r0, r2, r1
 8005268:	42a0      	cmp	r0, r4
 800526a:	d10b      	bne.n	8005284 <_free_r+0x6c>
 800526c:	6820      	ldr	r0, [r4, #0]
 800526e:	4401      	add	r1, r0
 8005270:	1850      	adds	r0, r2, r1
 8005272:	4283      	cmp	r3, r0
 8005274:	6011      	str	r1, [r2, #0]
 8005276:	d1e0      	bne.n	800523a <_free_r+0x22>
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	6053      	str	r3, [r2, #4]
 800527e:	4408      	add	r0, r1
 8005280:	6010      	str	r0, [r2, #0]
 8005282:	e7da      	b.n	800523a <_free_r+0x22>
 8005284:	d902      	bls.n	800528c <_free_r+0x74>
 8005286:	230c      	movs	r3, #12
 8005288:	602b      	str	r3, [r5, #0]
 800528a:	e7d6      	b.n	800523a <_free_r+0x22>
 800528c:	6820      	ldr	r0, [r4, #0]
 800528e:	1821      	adds	r1, r4, r0
 8005290:	428b      	cmp	r3, r1
 8005292:	bf04      	itt	eq
 8005294:	6819      	ldreq	r1, [r3, #0]
 8005296:	685b      	ldreq	r3, [r3, #4]
 8005298:	6063      	str	r3, [r4, #4]
 800529a:	bf04      	itt	eq
 800529c:	1809      	addeq	r1, r1, r0
 800529e:	6021      	streq	r1, [r4, #0]
 80052a0:	6054      	str	r4, [r2, #4]
 80052a2:	e7ca      	b.n	800523a <_free_r+0x22>
 80052a4:	bd38      	pop	{r3, r4, r5, pc}
 80052a6:	bf00      	nop
 80052a8:	200003b4 	.word	0x200003b4

080052ac <sbrk_aligned>:
 80052ac:	b570      	push	{r4, r5, r6, lr}
 80052ae:	4e0f      	ldr	r6, [pc, #60]	@ (80052ec <sbrk_aligned+0x40>)
 80052b0:	460c      	mov	r4, r1
 80052b2:	6831      	ldr	r1, [r6, #0]
 80052b4:	4605      	mov	r5, r0
 80052b6:	b911      	cbnz	r1, 80052be <sbrk_aligned+0x12>
 80052b8:	f000 fba4 	bl	8005a04 <_sbrk_r>
 80052bc:	6030      	str	r0, [r6, #0]
 80052be:	4621      	mov	r1, r4
 80052c0:	4628      	mov	r0, r5
 80052c2:	f000 fb9f 	bl	8005a04 <_sbrk_r>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	d103      	bne.n	80052d2 <sbrk_aligned+0x26>
 80052ca:	f04f 34ff 	mov.w	r4, #4294967295
 80052ce:	4620      	mov	r0, r4
 80052d0:	bd70      	pop	{r4, r5, r6, pc}
 80052d2:	1cc4      	adds	r4, r0, #3
 80052d4:	f024 0403 	bic.w	r4, r4, #3
 80052d8:	42a0      	cmp	r0, r4
 80052da:	d0f8      	beq.n	80052ce <sbrk_aligned+0x22>
 80052dc:	1a21      	subs	r1, r4, r0
 80052de:	4628      	mov	r0, r5
 80052e0:	f000 fb90 	bl	8005a04 <_sbrk_r>
 80052e4:	3001      	adds	r0, #1
 80052e6:	d1f2      	bne.n	80052ce <sbrk_aligned+0x22>
 80052e8:	e7ef      	b.n	80052ca <sbrk_aligned+0x1e>
 80052ea:	bf00      	nop
 80052ec:	200003b0 	.word	0x200003b0

080052f0 <_malloc_r>:
 80052f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052f4:	1ccd      	adds	r5, r1, #3
 80052f6:	f025 0503 	bic.w	r5, r5, #3
 80052fa:	3508      	adds	r5, #8
 80052fc:	2d0c      	cmp	r5, #12
 80052fe:	bf38      	it	cc
 8005300:	250c      	movcc	r5, #12
 8005302:	2d00      	cmp	r5, #0
 8005304:	4606      	mov	r6, r0
 8005306:	db01      	blt.n	800530c <_malloc_r+0x1c>
 8005308:	42a9      	cmp	r1, r5
 800530a:	d904      	bls.n	8005316 <_malloc_r+0x26>
 800530c:	230c      	movs	r3, #12
 800530e:	6033      	str	r3, [r6, #0]
 8005310:	2000      	movs	r0, #0
 8005312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005316:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053ec <_malloc_r+0xfc>
 800531a:	f000 f869 	bl	80053f0 <__malloc_lock>
 800531e:	f8d8 3000 	ldr.w	r3, [r8]
 8005322:	461c      	mov	r4, r3
 8005324:	bb44      	cbnz	r4, 8005378 <_malloc_r+0x88>
 8005326:	4629      	mov	r1, r5
 8005328:	4630      	mov	r0, r6
 800532a:	f7ff ffbf 	bl	80052ac <sbrk_aligned>
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	4604      	mov	r4, r0
 8005332:	d158      	bne.n	80053e6 <_malloc_r+0xf6>
 8005334:	f8d8 4000 	ldr.w	r4, [r8]
 8005338:	4627      	mov	r7, r4
 800533a:	2f00      	cmp	r7, #0
 800533c:	d143      	bne.n	80053c6 <_malloc_r+0xd6>
 800533e:	2c00      	cmp	r4, #0
 8005340:	d04b      	beq.n	80053da <_malloc_r+0xea>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	4639      	mov	r1, r7
 8005346:	4630      	mov	r0, r6
 8005348:	eb04 0903 	add.w	r9, r4, r3
 800534c:	f000 fb5a 	bl	8005a04 <_sbrk_r>
 8005350:	4581      	cmp	r9, r0
 8005352:	d142      	bne.n	80053da <_malloc_r+0xea>
 8005354:	6821      	ldr	r1, [r4, #0]
 8005356:	1a6d      	subs	r5, r5, r1
 8005358:	4629      	mov	r1, r5
 800535a:	4630      	mov	r0, r6
 800535c:	f7ff ffa6 	bl	80052ac <sbrk_aligned>
 8005360:	3001      	adds	r0, #1
 8005362:	d03a      	beq.n	80053da <_malloc_r+0xea>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	442b      	add	r3, r5
 8005368:	6023      	str	r3, [r4, #0]
 800536a:	f8d8 3000 	ldr.w	r3, [r8]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	bb62      	cbnz	r2, 80053cc <_malloc_r+0xdc>
 8005372:	f8c8 7000 	str.w	r7, [r8]
 8005376:	e00f      	b.n	8005398 <_malloc_r+0xa8>
 8005378:	6822      	ldr	r2, [r4, #0]
 800537a:	1b52      	subs	r2, r2, r5
 800537c:	d420      	bmi.n	80053c0 <_malloc_r+0xd0>
 800537e:	2a0b      	cmp	r2, #11
 8005380:	d917      	bls.n	80053b2 <_malloc_r+0xc2>
 8005382:	1961      	adds	r1, r4, r5
 8005384:	42a3      	cmp	r3, r4
 8005386:	6025      	str	r5, [r4, #0]
 8005388:	bf18      	it	ne
 800538a:	6059      	strne	r1, [r3, #4]
 800538c:	6863      	ldr	r3, [r4, #4]
 800538e:	bf08      	it	eq
 8005390:	f8c8 1000 	streq.w	r1, [r8]
 8005394:	5162      	str	r2, [r4, r5]
 8005396:	604b      	str	r3, [r1, #4]
 8005398:	4630      	mov	r0, r6
 800539a:	f000 f82f 	bl	80053fc <__malloc_unlock>
 800539e:	f104 000b 	add.w	r0, r4, #11
 80053a2:	1d23      	adds	r3, r4, #4
 80053a4:	f020 0007 	bic.w	r0, r0, #7
 80053a8:	1ac2      	subs	r2, r0, r3
 80053aa:	bf1c      	itt	ne
 80053ac:	1a1b      	subne	r3, r3, r0
 80053ae:	50a3      	strne	r3, [r4, r2]
 80053b0:	e7af      	b.n	8005312 <_malloc_r+0x22>
 80053b2:	6862      	ldr	r2, [r4, #4]
 80053b4:	42a3      	cmp	r3, r4
 80053b6:	bf0c      	ite	eq
 80053b8:	f8c8 2000 	streq.w	r2, [r8]
 80053bc:	605a      	strne	r2, [r3, #4]
 80053be:	e7eb      	b.n	8005398 <_malloc_r+0xa8>
 80053c0:	4623      	mov	r3, r4
 80053c2:	6864      	ldr	r4, [r4, #4]
 80053c4:	e7ae      	b.n	8005324 <_malloc_r+0x34>
 80053c6:	463c      	mov	r4, r7
 80053c8:	687f      	ldr	r7, [r7, #4]
 80053ca:	e7b6      	b.n	800533a <_malloc_r+0x4a>
 80053cc:	461a      	mov	r2, r3
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	42a3      	cmp	r3, r4
 80053d2:	d1fb      	bne.n	80053cc <_malloc_r+0xdc>
 80053d4:	2300      	movs	r3, #0
 80053d6:	6053      	str	r3, [r2, #4]
 80053d8:	e7de      	b.n	8005398 <_malloc_r+0xa8>
 80053da:	230c      	movs	r3, #12
 80053dc:	6033      	str	r3, [r6, #0]
 80053de:	4630      	mov	r0, r6
 80053e0:	f000 f80c 	bl	80053fc <__malloc_unlock>
 80053e4:	e794      	b.n	8005310 <_malloc_r+0x20>
 80053e6:	6005      	str	r5, [r0, #0]
 80053e8:	e7d6      	b.n	8005398 <_malloc_r+0xa8>
 80053ea:	bf00      	nop
 80053ec:	200003b4 	.word	0x200003b4

080053f0 <__malloc_lock>:
 80053f0:	4801      	ldr	r0, [pc, #4]	@ (80053f8 <__malloc_lock+0x8>)
 80053f2:	f7ff bf01 	b.w	80051f8 <__retarget_lock_acquire_recursive>
 80053f6:	bf00      	nop
 80053f8:	200003ac 	.word	0x200003ac

080053fc <__malloc_unlock>:
 80053fc:	4801      	ldr	r0, [pc, #4]	@ (8005404 <__malloc_unlock+0x8>)
 80053fe:	f7ff befc 	b.w	80051fa <__retarget_lock_release_recursive>
 8005402:	bf00      	nop
 8005404:	200003ac 	.word	0x200003ac

08005408 <__ssputs_r>:
 8005408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800540c:	688e      	ldr	r6, [r1, #8]
 800540e:	461f      	mov	r7, r3
 8005410:	42be      	cmp	r6, r7
 8005412:	680b      	ldr	r3, [r1, #0]
 8005414:	4682      	mov	sl, r0
 8005416:	460c      	mov	r4, r1
 8005418:	4690      	mov	r8, r2
 800541a:	d82d      	bhi.n	8005478 <__ssputs_r+0x70>
 800541c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005420:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005424:	d026      	beq.n	8005474 <__ssputs_r+0x6c>
 8005426:	6965      	ldr	r5, [r4, #20]
 8005428:	6909      	ldr	r1, [r1, #16]
 800542a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800542e:	eba3 0901 	sub.w	r9, r3, r1
 8005432:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005436:	1c7b      	adds	r3, r7, #1
 8005438:	444b      	add	r3, r9
 800543a:	106d      	asrs	r5, r5, #1
 800543c:	429d      	cmp	r5, r3
 800543e:	bf38      	it	cc
 8005440:	461d      	movcc	r5, r3
 8005442:	0553      	lsls	r3, r2, #21
 8005444:	d527      	bpl.n	8005496 <__ssputs_r+0x8e>
 8005446:	4629      	mov	r1, r5
 8005448:	f7ff ff52 	bl	80052f0 <_malloc_r>
 800544c:	4606      	mov	r6, r0
 800544e:	b360      	cbz	r0, 80054aa <__ssputs_r+0xa2>
 8005450:	6921      	ldr	r1, [r4, #16]
 8005452:	464a      	mov	r2, r9
 8005454:	f7ff fed2 	bl	80051fc <memcpy>
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800545e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005462:	81a3      	strh	r3, [r4, #12]
 8005464:	6126      	str	r6, [r4, #16]
 8005466:	6165      	str	r5, [r4, #20]
 8005468:	444e      	add	r6, r9
 800546a:	eba5 0509 	sub.w	r5, r5, r9
 800546e:	6026      	str	r6, [r4, #0]
 8005470:	60a5      	str	r5, [r4, #8]
 8005472:	463e      	mov	r6, r7
 8005474:	42be      	cmp	r6, r7
 8005476:	d900      	bls.n	800547a <__ssputs_r+0x72>
 8005478:	463e      	mov	r6, r7
 800547a:	6820      	ldr	r0, [r4, #0]
 800547c:	4632      	mov	r2, r6
 800547e:	4641      	mov	r1, r8
 8005480:	f000 faa6 	bl	80059d0 <memmove>
 8005484:	68a3      	ldr	r3, [r4, #8]
 8005486:	1b9b      	subs	r3, r3, r6
 8005488:	60a3      	str	r3, [r4, #8]
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	4433      	add	r3, r6
 800548e:	6023      	str	r3, [r4, #0]
 8005490:	2000      	movs	r0, #0
 8005492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005496:	462a      	mov	r2, r5
 8005498:	f000 fac4 	bl	8005a24 <_realloc_r>
 800549c:	4606      	mov	r6, r0
 800549e:	2800      	cmp	r0, #0
 80054a0:	d1e0      	bne.n	8005464 <__ssputs_r+0x5c>
 80054a2:	6921      	ldr	r1, [r4, #16]
 80054a4:	4650      	mov	r0, sl
 80054a6:	f7ff feb7 	bl	8005218 <_free_r>
 80054aa:	230c      	movs	r3, #12
 80054ac:	f8ca 3000 	str.w	r3, [sl]
 80054b0:	89a3      	ldrh	r3, [r4, #12]
 80054b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054b6:	81a3      	strh	r3, [r4, #12]
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295
 80054bc:	e7e9      	b.n	8005492 <__ssputs_r+0x8a>
	...

080054c0 <_svfiprintf_r>:
 80054c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c4:	4698      	mov	r8, r3
 80054c6:	898b      	ldrh	r3, [r1, #12]
 80054c8:	061b      	lsls	r3, r3, #24
 80054ca:	b09d      	sub	sp, #116	@ 0x74
 80054cc:	4607      	mov	r7, r0
 80054ce:	460d      	mov	r5, r1
 80054d0:	4614      	mov	r4, r2
 80054d2:	d510      	bpl.n	80054f6 <_svfiprintf_r+0x36>
 80054d4:	690b      	ldr	r3, [r1, #16]
 80054d6:	b973      	cbnz	r3, 80054f6 <_svfiprintf_r+0x36>
 80054d8:	2140      	movs	r1, #64	@ 0x40
 80054da:	f7ff ff09 	bl	80052f0 <_malloc_r>
 80054de:	6028      	str	r0, [r5, #0]
 80054e0:	6128      	str	r0, [r5, #16]
 80054e2:	b930      	cbnz	r0, 80054f2 <_svfiprintf_r+0x32>
 80054e4:	230c      	movs	r3, #12
 80054e6:	603b      	str	r3, [r7, #0]
 80054e8:	f04f 30ff 	mov.w	r0, #4294967295
 80054ec:	b01d      	add	sp, #116	@ 0x74
 80054ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f2:	2340      	movs	r3, #64	@ 0x40
 80054f4:	616b      	str	r3, [r5, #20]
 80054f6:	2300      	movs	r3, #0
 80054f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80054fa:	2320      	movs	r3, #32
 80054fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005500:	f8cd 800c 	str.w	r8, [sp, #12]
 8005504:	2330      	movs	r3, #48	@ 0x30
 8005506:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80056a4 <_svfiprintf_r+0x1e4>
 800550a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800550e:	f04f 0901 	mov.w	r9, #1
 8005512:	4623      	mov	r3, r4
 8005514:	469a      	mov	sl, r3
 8005516:	f813 2b01 	ldrb.w	r2, [r3], #1
 800551a:	b10a      	cbz	r2, 8005520 <_svfiprintf_r+0x60>
 800551c:	2a25      	cmp	r2, #37	@ 0x25
 800551e:	d1f9      	bne.n	8005514 <_svfiprintf_r+0x54>
 8005520:	ebba 0b04 	subs.w	fp, sl, r4
 8005524:	d00b      	beq.n	800553e <_svfiprintf_r+0x7e>
 8005526:	465b      	mov	r3, fp
 8005528:	4622      	mov	r2, r4
 800552a:	4629      	mov	r1, r5
 800552c:	4638      	mov	r0, r7
 800552e:	f7ff ff6b 	bl	8005408 <__ssputs_r>
 8005532:	3001      	adds	r0, #1
 8005534:	f000 80a7 	beq.w	8005686 <_svfiprintf_r+0x1c6>
 8005538:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800553a:	445a      	add	r2, fp
 800553c:	9209      	str	r2, [sp, #36]	@ 0x24
 800553e:	f89a 3000 	ldrb.w	r3, [sl]
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 809f 	beq.w	8005686 <_svfiprintf_r+0x1c6>
 8005548:	2300      	movs	r3, #0
 800554a:	f04f 32ff 	mov.w	r2, #4294967295
 800554e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005552:	f10a 0a01 	add.w	sl, sl, #1
 8005556:	9304      	str	r3, [sp, #16]
 8005558:	9307      	str	r3, [sp, #28]
 800555a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800555e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005560:	4654      	mov	r4, sl
 8005562:	2205      	movs	r2, #5
 8005564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005568:	484e      	ldr	r0, [pc, #312]	@ (80056a4 <_svfiprintf_r+0x1e4>)
 800556a:	f7fa fe39 	bl	80001e0 <memchr>
 800556e:	9a04      	ldr	r2, [sp, #16]
 8005570:	b9d8      	cbnz	r0, 80055aa <_svfiprintf_r+0xea>
 8005572:	06d0      	lsls	r0, r2, #27
 8005574:	bf44      	itt	mi
 8005576:	2320      	movmi	r3, #32
 8005578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800557c:	0711      	lsls	r1, r2, #28
 800557e:	bf44      	itt	mi
 8005580:	232b      	movmi	r3, #43	@ 0x2b
 8005582:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005586:	f89a 3000 	ldrb.w	r3, [sl]
 800558a:	2b2a      	cmp	r3, #42	@ 0x2a
 800558c:	d015      	beq.n	80055ba <_svfiprintf_r+0xfa>
 800558e:	9a07      	ldr	r2, [sp, #28]
 8005590:	4654      	mov	r4, sl
 8005592:	2000      	movs	r0, #0
 8005594:	f04f 0c0a 	mov.w	ip, #10
 8005598:	4621      	mov	r1, r4
 800559a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800559e:	3b30      	subs	r3, #48	@ 0x30
 80055a0:	2b09      	cmp	r3, #9
 80055a2:	d94b      	bls.n	800563c <_svfiprintf_r+0x17c>
 80055a4:	b1b0      	cbz	r0, 80055d4 <_svfiprintf_r+0x114>
 80055a6:	9207      	str	r2, [sp, #28]
 80055a8:	e014      	b.n	80055d4 <_svfiprintf_r+0x114>
 80055aa:	eba0 0308 	sub.w	r3, r0, r8
 80055ae:	fa09 f303 	lsl.w	r3, r9, r3
 80055b2:	4313      	orrs	r3, r2
 80055b4:	9304      	str	r3, [sp, #16]
 80055b6:	46a2      	mov	sl, r4
 80055b8:	e7d2      	b.n	8005560 <_svfiprintf_r+0xa0>
 80055ba:	9b03      	ldr	r3, [sp, #12]
 80055bc:	1d19      	adds	r1, r3, #4
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	9103      	str	r1, [sp, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bfbb      	ittet	lt
 80055c6:	425b      	neglt	r3, r3
 80055c8:	f042 0202 	orrlt.w	r2, r2, #2
 80055cc:	9307      	strge	r3, [sp, #28]
 80055ce:	9307      	strlt	r3, [sp, #28]
 80055d0:	bfb8      	it	lt
 80055d2:	9204      	strlt	r2, [sp, #16]
 80055d4:	7823      	ldrb	r3, [r4, #0]
 80055d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80055d8:	d10a      	bne.n	80055f0 <_svfiprintf_r+0x130>
 80055da:	7863      	ldrb	r3, [r4, #1]
 80055dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80055de:	d132      	bne.n	8005646 <_svfiprintf_r+0x186>
 80055e0:	9b03      	ldr	r3, [sp, #12]
 80055e2:	1d1a      	adds	r2, r3, #4
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	9203      	str	r2, [sp, #12]
 80055e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055ec:	3402      	adds	r4, #2
 80055ee:	9305      	str	r3, [sp, #20]
 80055f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80056b4 <_svfiprintf_r+0x1f4>
 80055f4:	7821      	ldrb	r1, [r4, #0]
 80055f6:	2203      	movs	r2, #3
 80055f8:	4650      	mov	r0, sl
 80055fa:	f7fa fdf1 	bl	80001e0 <memchr>
 80055fe:	b138      	cbz	r0, 8005610 <_svfiprintf_r+0x150>
 8005600:	9b04      	ldr	r3, [sp, #16]
 8005602:	eba0 000a 	sub.w	r0, r0, sl
 8005606:	2240      	movs	r2, #64	@ 0x40
 8005608:	4082      	lsls	r2, r0
 800560a:	4313      	orrs	r3, r2
 800560c:	3401      	adds	r4, #1
 800560e:	9304      	str	r3, [sp, #16]
 8005610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005614:	4824      	ldr	r0, [pc, #144]	@ (80056a8 <_svfiprintf_r+0x1e8>)
 8005616:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800561a:	2206      	movs	r2, #6
 800561c:	f7fa fde0 	bl	80001e0 <memchr>
 8005620:	2800      	cmp	r0, #0
 8005622:	d036      	beq.n	8005692 <_svfiprintf_r+0x1d2>
 8005624:	4b21      	ldr	r3, [pc, #132]	@ (80056ac <_svfiprintf_r+0x1ec>)
 8005626:	bb1b      	cbnz	r3, 8005670 <_svfiprintf_r+0x1b0>
 8005628:	9b03      	ldr	r3, [sp, #12]
 800562a:	3307      	adds	r3, #7
 800562c:	f023 0307 	bic.w	r3, r3, #7
 8005630:	3308      	adds	r3, #8
 8005632:	9303      	str	r3, [sp, #12]
 8005634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005636:	4433      	add	r3, r6
 8005638:	9309      	str	r3, [sp, #36]	@ 0x24
 800563a:	e76a      	b.n	8005512 <_svfiprintf_r+0x52>
 800563c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005640:	460c      	mov	r4, r1
 8005642:	2001      	movs	r0, #1
 8005644:	e7a8      	b.n	8005598 <_svfiprintf_r+0xd8>
 8005646:	2300      	movs	r3, #0
 8005648:	3401      	adds	r4, #1
 800564a:	9305      	str	r3, [sp, #20]
 800564c:	4619      	mov	r1, r3
 800564e:	f04f 0c0a 	mov.w	ip, #10
 8005652:	4620      	mov	r0, r4
 8005654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005658:	3a30      	subs	r2, #48	@ 0x30
 800565a:	2a09      	cmp	r2, #9
 800565c:	d903      	bls.n	8005666 <_svfiprintf_r+0x1a6>
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0c6      	beq.n	80055f0 <_svfiprintf_r+0x130>
 8005662:	9105      	str	r1, [sp, #20]
 8005664:	e7c4      	b.n	80055f0 <_svfiprintf_r+0x130>
 8005666:	fb0c 2101 	mla	r1, ip, r1, r2
 800566a:	4604      	mov	r4, r0
 800566c:	2301      	movs	r3, #1
 800566e:	e7f0      	b.n	8005652 <_svfiprintf_r+0x192>
 8005670:	ab03      	add	r3, sp, #12
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	462a      	mov	r2, r5
 8005676:	4b0e      	ldr	r3, [pc, #56]	@ (80056b0 <_svfiprintf_r+0x1f0>)
 8005678:	a904      	add	r1, sp, #16
 800567a:	4638      	mov	r0, r7
 800567c:	f3af 8000 	nop.w
 8005680:	1c42      	adds	r2, r0, #1
 8005682:	4606      	mov	r6, r0
 8005684:	d1d6      	bne.n	8005634 <_svfiprintf_r+0x174>
 8005686:	89ab      	ldrh	r3, [r5, #12]
 8005688:	065b      	lsls	r3, r3, #25
 800568a:	f53f af2d 	bmi.w	80054e8 <_svfiprintf_r+0x28>
 800568e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005690:	e72c      	b.n	80054ec <_svfiprintf_r+0x2c>
 8005692:	ab03      	add	r3, sp, #12
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	462a      	mov	r2, r5
 8005698:	4b05      	ldr	r3, [pc, #20]	@ (80056b0 <_svfiprintf_r+0x1f0>)
 800569a:	a904      	add	r1, sp, #16
 800569c:	4638      	mov	r0, r7
 800569e:	f000 f879 	bl	8005794 <_printf_i>
 80056a2:	e7ed      	b.n	8005680 <_svfiprintf_r+0x1c0>
 80056a4:	0801abe8 	.word	0x0801abe8
 80056a8:	0801abf2 	.word	0x0801abf2
 80056ac:	00000000 	.word	0x00000000
 80056b0:	08005409 	.word	0x08005409
 80056b4:	0801abee 	.word	0x0801abee

080056b8 <_printf_common>:
 80056b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056bc:	4616      	mov	r6, r2
 80056be:	4698      	mov	r8, r3
 80056c0:	688a      	ldr	r2, [r1, #8]
 80056c2:	690b      	ldr	r3, [r1, #16]
 80056c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056c8:	4293      	cmp	r3, r2
 80056ca:	bfb8      	it	lt
 80056cc:	4613      	movlt	r3, r2
 80056ce:	6033      	str	r3, [r6, #0]
 80056d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056d4:	4607      	mov	r7, r0
 80056d6:	460c      	mov	r4, r1
 80056d8:	b10a      	cbz	r2, 80056de <_printf_common+0x26>
 80056da:	3301      	adds	r3, #1
 80056dc:	6033      	str	r3, [r6, #0]
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	0699      	lsls	r1, r3, #26
 80056e2:	bf42      	ittt	mi
 80056e4:	6833      	ldrmi	r3, [r6, #0]
 80056e6:	3302      	addmi	r3, #2
 80056e8:	6033      	strmi	r3, [r6, #0]
 80056ea:	6825      	ldr	r5, [r4, #0]
 80056ec:	f015 0506 	ands.w	r5, r5, #6
 80056f0:	d106      	bne.n	8005700 <_printf_common+0x48>
 80056f2:	f104 0a19 	add.w	sl, r4, #25
 80056f6:	68e3      	ldr	r3, [r4, #12]
 80056f8:	6832      	ldr	r2, [r6, #0]
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	42ab      	cmp	r3, r5
 80056fe:	dc26      	bgt.n	800574e <_printf_common+0x96>
 8005700:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005704:	6822      	ldr	r2, [r4, #0]
 8005706:	3b00      	subs	r3, #0
 8005708:	bf18      	it	ne
 800570a:	2301      	movne	r3, #1
 800570c:	0692      	lsls	r2, r2, #26
 800570e:	d42b      	bmi.n	8005768 <_printf_common+0xb0>
 8005710:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005714:	4641      	mov	r1, r8
 8005716:	4638      	mov	r0, r7
 8005718:	47c8      	blx	r9
 800571a:	3001      	adds	r0, #1
 800571c:	d01e      	beq.n	800575c <_printf_common+0xa4>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	6922      	ldr	r2, [r4, #16]
 8005722:	f003 0306 	and.w	r3, r3, #6
 8005726:	2b04      	cmp	r3, #4
 8005728:	bf02      	ittt	eq
 800572a:	68e5      	ldreq	r5, [r4, #12]
 800572c:	6833      	ldreq	r3, [r6, #0]
 800572e:	1aed      	subeq	r5, r5, r3
 8005730:	68a3      	ldr	r3, [r4, #8]
 8005732:	bf0c      	ite	eq
 8005734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005738:	2500      	movne	r5, #0
 800573a:	4293      	cmp	r3, r2
 800573c:	bfc4      	itt	gt
 800573e:	1a9b      	subgt	r3, r3, r2
 8005740:	18ed      	addgt	r5, r5, r3
 8005742:	2600      	movs	r6, #0
 8005744:	341a      	adds	r4, #26
 8005746:	42b5      	cmp	r5, r6
 8005748:	d11a      	bne.n	8005780 <_printf_common+0xc8>
 800574a:	2000      	movs	r0, #0
 800574c:	e008      	b.n	8005760 <_printf_common+0xa8>
 800574e:	2301      	movs	r3, #1
 8005750:	4652      	mov	r2, sl
 8005752:	4641      	mov	r1, r8
 8005754:	4638      	mov	r0, r7
 8005756:	47c8      	blx	r9
 8005758:	3001      	adds	r0, #1
 800575a:	d103      	bne.n	8005764 <_printf_common+0xac>
 800575c:	f04f 30ff 	mov.w	r0, #4294967295
 8005760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005764:	3501      	adds	r5, #1
 8005766:	e7c6      	b.n	80056f6 <_printf_common+0x3e>
 8005768:	18e1      	adds	r1, r4, r3
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	2030      	movs	r0, #48	@ 0x30
 800576e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005772:	4422      	add	r2, r4
 8005774:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005778:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800577c:	3302      	adds	r3, #2
 800577e:	e7c7      	b.n	8005710 <_printf_common+0x58>
 8005780:	2301      	movs	r3, #1
 8005782:	4622      	mov	r2, r4
 8005784:	4641      	mov	r1, r8
 8005786:	4638      	mov	r0, r7
 8005788:	47c8      	blx	r9
 800578a:	3001      	adds	r0, #1
 800578c:	d0e6      	beq.n	800575c <_printf_common+0xa4>
 800578e:	3601      	adds	r6, #1
 8005790:	e7d9      	b.n	8005746 <_printf_common+0x8e>
	...

08005794 <_printf_i>:
 8005794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005798:	7e0f      	ldrb	r7, [r1, #24]
 800579a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800579c:	2f78      	cmp	r7, #120	@ 0x78
 800579e:	4691      	mov	r9, r2
 80057a0:	4680      	mov	r8, r0
 80057a2:	460c      	mov	r4, r1
 80057a4:	469a      	mov	sl, r3
 80057a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057aa:	d807      	bhi.n	80057bc <_printf_i+0x28>
 80057ac:	2f62      	cmp	r7, #98	@ 0x62
 80057ae:	d80a      	bhi.n	80057c6 <_printf_i+0x32>
 80057b0:	2f00      	cmp	r7, #0
 80057b2:	f000 80d1 	beq.w	8005958 <_printf_i+0x1c4>
 80057b6:	2f58      	cmp	r7, #88	@ 0x58
 80057b8:	f000 80b8 	beq.w	800592c <_printf_i+0x198>
 80057bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057c4:	e03a      	b.n	800583c <_printf_i+0xa8>
 80057c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057ca:	2b15      	cmp	r3, #21
 80057cc:	d8f6      	bhi.n	80057bc <_printf_i+0x28>
 80057ce:	a101      	add	r1, pc, #4	@ (adr r1, 80057d4 <_printf_i+0x40>)
 80057d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057d4:	0800582d 	.word	0x0800582d
 80057d8:	08005841 	.word	0x08005841
 80057dc:	080057bd 	.word	0x080057bd
 80057e0:	080057bd 	.word	0x080057bd
 80057e4:	080057bd 	.word	0x080057bd
 80057e8:	080057bd 	.word	0x080057bd
 80057ec:	08005841 	.word	0x08005841
 80057f0:	080057bd 	.word	0x080057bd
 80057f4:	080057bd 	.word	0x080057bd
 80057f8:	080057bd 	.word	0x080057bd
 80057fc:	080057bd 	.word	0x080057bd
 8005800:	0800593f 	.word	0x0800593f
 8005804:	0800586b 	.word	0x0800586b
 8005808:	080058f9 	.word	0x080058f9
 800580c:	080057bd 	.word	0x080057bd
 8005810:	080057bd 	.word	0x080057bd
 8005814:	08005961 	.word	0x08005961
 8005818:	080057bd 	.word	0x080057bd
 800581c:	0800586b 	.word	0x0800586b
 8005820:	080057bd 	.word	0x080057bd
 8005824:	080057bd 	.word	0x080057bd
 8005828:	08005901 	.word	0x08005901
 800582c:	6833      	ldr	r3, [r6, #0]
 800582e:	1d1a      	adds	r2, r3, #4
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6032      	str	r2, [r6, #0]
 8005834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005838:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800583c:	2301      	movs	r3, #1
 800583e:	e09c      	b.n	800597a <_printf_i+0x1e6>
 8005840:	6833      	ldr	r3, [r6, #0]
 8005842:	6820      	ldr	r0, [r4, #0]
 8005844:	1d19      	adds	r1, r3, #4
 8005846:	6031      	str	r1, [r6, #0]
 8005848:	0606      	lsls	r6, r0, #24
 800584a:	d501      	bpl.n	8005850 <_printf_i+0xbc>
 800584c:	681d      	ldr	r5, [r3, #0]
 800584e:	e003      	b.n	8005858 <_printf_i+0xc4>
 8005850:	0645      	lsls	r5, r0, #25
 8005852:	d5fb      	bpl.n	800584c <_printf_i+0xb8>
 8005854:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005858:	2d00      	cmp	r5, #0
 800585a:	da03      	bge.n	8005864 <_printf_i+0xd0>
 800585c:	232d      	movs	r3, #45	@ 0x2d
 800585e:	426d      	negs	r5, r5
 8005860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005864:	4858      	ldr	r0, [pc, #352]	@ (80059c8 <_printf_i+0x234>)
 8005866:	230a      	movs	r3, #10
 8005868:	e011      	b.n	800588e <_printf_i+0xfa>
 800586a:	6821      	ldr	r1, [r4, #0]
 800586c:	6833      	ldr	r3, [r6, #0]
 800586e:	0608      	lsls	r0, r1, #24
 8005870:	f853 5b04 	ldr.w	r5, [r3], #4
 8005874:	d402      	bmi.n	800587c <_printf_i+0xe8>
 8005876:	0649      	lsls	r1, r1, #25
 8005878:	bf48      	it	mi
 800587a:	b2ad      	uxthmi	r5, r5
 800587c:	2f6f      	cmp	r7, #111	@ 0x6f
 800587e:	4852      	ldr	r0, [pc, #328]	@ (80059c8 <_printf_i+0x234>)
 8005880:	6033      	str	r3, [r6, #0]
 8005882:	bf14      	ite	ne
 8005884:	230a      	movne	r3, #10
 8005886:	2308      	moveq	r3, #8
 8005888:	2100      	movs	r1, #0
 800588a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800588e:	6866      	ldr	r6, [r4, #4]
 8005890:	60a6      	str	r6, [r4, #8]
 8005892:	2e00      	cmp	r6, #0
 8005894:	db05      	blt.n	80058a2 <_printf_i+0x10e>
 8005896:	6821      	ldr	r1, [r4, #0]
 8005898:	432e      	orrs	r6, r5
 800589a:	f021 0104 	bic.w	r1, r1, #4
 800589e:	6021      	str	r1, [r4, #0]
 80058a0:	d04b      	beq.n	800593a <_printf_i+0x1a6>
 80058a2:	4616      	mov	r6, r2
 80058a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80058a8:	fb03 5711 	mls	r7, r3, r1, r5
 80058ac:	5dc7      	ldrb	r7, [r0, r7]
 80058ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058b2:	462f      	mov	r7, r5
 80058b4:	42bb      	cmp	r3, r7
 80058b6:	460d      	mov	r5, r1
 80058b8:	d9f4      	bls.n	80058a4 <_printf_i+0x110>
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	d10b      	bne.n	80058d6 <_printf_i+0x142>
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	07df      	lsls	r7, r3, #31
 80058c2:	d508      	bpl.n	80058d6 <_printf_i+0x142>
 80058c4:	6923      	ldr	r3, [r4, #16]
 80058c6:	6861      	ldr	r1, [r4, #4]
 80058c8:	4299      	cmp	r1, r3
 80058ca:	bfde      	ittt	le
 80058cc:	2330      	movle	r3, #48	@ 0x30
 80058ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058d6:	1b92      	subs	r2, r2, r6
 80058d8:	6122      	str	r2, [r4, #16]
 80058da:	f8cd a000 	str.w	sl, [sp]
 80058de:	464b      	mov	r3, r9
 80058e0:	aa03      	add	r2, sp, #12
 80058e2:	4621      	mov	r1, r4
 80058e4:	4640      	mov	r0, r8
 80058e6:	f7ff fee7 	bl	80056b8 <_printf_common>
 80058ea:	3001      	adds	r0, #1
 80058ec:	d14a      	bne.n	8005984 <_printf_i+0x1f0>
 80058ee:	f04f 30ff 	mov.w	r0, #4294967295
 80058f2:	b004      	add	sp, #16
 80058f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	f043 0320 	orr.w	r3, r3, #32
 80058fe:	6023      	str	r3, [r4, #0]
 8005900:	4832      	ldr	r0, [pc, #200]	@ (80059cc <_printf_i+0x238>)
 8005902:	2778      	movs	r7, #120	@ 0x78
 8005904:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	6831      	ldr	r1, [r6, #0]
 800590c:	061f      	lsls	r7, r3, #24
 800590e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005912:	d402      	bmi.n	800591a <_printf_i+0x186>
 8005914:	065f      	lsls	r7, r3, #25
 8005916:	bf48      	it	mi
 8005918:	b2ad      	uxthmi	r5, r5
 800591a:	6031      	str	r1, [r6, #0]
 800591c:	07d9      	lsls	r1, r3, #31
 800591e:	bf44      	itt	mi
 8005920:	f043 0320 	orrmi.w	r3, r3, #32
 8005924:	6023      	strmi	r3, [r4, #0]
 8005926:	b11d      	cbz	r5, 8005930 <_printf_i+0x19c>
 8005928:	2310      	movs	r3, #16
 800592a:	e7ad      	b.n	8005888 <_printf_i+0xf4>
 800592c:	4826      	ldr	r0, [pc, #152]	@ (80059c8 <_printf_i+0x234>)
 800592e:	e7e9      	b.n	8005904 <_printf_i+0x170>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	f023 0320 	bic.w	r3, r3, #32
 8005936:	6023      	str	r3, [r4, #0]
 8005938:	e7f6      	b.n	8005928 <_printf_i+0x194>
 800593a:	4616      	mov	r6, r2
 800593c:	e7bd      	b.n	80058ba <_printf_i+0x126>
 800593e:	6833      	ldr	r3, [r6, #0]
 8005940:	6825      	ldr	r5, [r4, #0]
 8005942:	6961      	ldr	r1, [r4, #20]
 8005944:	1d18      	adds	r0, r3, #4
 8005946:	6030      	str	r0, [r6, #0]
 8005948:	062e      	lsls	r6, r5, #24
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	d501      	bpl.n	8005952 <_printf_i+0x1be>
 800594e:	6019      	str	r1, [r3, #0]
 8005950:	e002      	b.n	8005958 <_printf_i+0x1c4>
 8005952:	0668      	lsls	r0, r5, #25
 8005954:	d5fb      	bpl.n	800594e <_printf_i+0x1ba>
 8005956:	8019      	strh	r1, [r3, #0]
 8005958:	2300      	movs	r3, #0
 800595a:	6123      	str	r3, [r4, #16]
 800595c:	4616      	mov	r6, r2
 800595e:	e7bc      	b.n	80058da <_printf_i+0x146>
 8005960:	6833      	ldr	r3, [r6, #0]
 8005962:	1d1a      	adds	r2, r3, #4
 8005964:	6032      	str	r2, [r6, #0]
 8005966:	681e      	ldr	r6, [r3, #0]
 8005968:	6862      	ldr	r2, [r4, #4]
 800596a:	2100      	movs	r1, #0
 800596c:	4630      	mov	r0, r6
 800596e:	f7fa fc37 	bl	80001e0 <memchr>
 8005972:	b108      	cbz	r0, 8005978 <_printf_i+0x1e4>
 8005974:	1b80      	subs	r0, r0, r6
 8005976:	6060      	str	r0, [r4, #4]
 8005978:	6863      	ldr	r3, [r4, #4]
 800597a:	6123      	str	r3, [r4, #16]
 800597c:	2300      	movs	r3, #0
 800597e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005982:	e7aa      	b.n	80058da <_printf_i+0x146>
 8005984:	6923      	ldr	r3, [r4, #16]
 8005986:	4632      	mov	r2, r6
 8005988:	4649      	mov	r1, r9
 800598a:	4640      	mov	r0, r8
 800598c:	47d0      	blx	sl
 800598e:	3001      	adds	r0, #1
 8005990:	d0ad      	beq.n	80058ee <_printf_i+0x15a>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	079b      	lsls	r3, r3, #30
 8005996:	d413      	bmi.n	80059c0 <_printf_i+0x22c>
 8005998:	68e0      	ldr	r0, [r4, #12]
 800599a:	9b03      	ldr	r3, [sp, #12]
 800599c:	4298      	cmp	r0, r3
 800599e:	bfb8      	it	lt
 80059a0:	4618      	movlt	r0, r3
 80059a2:	e7a6      	b.n	80058f2 <_printf_i+0x15e>
 80059a4:	2301      	movs	r3, #1
 80059a6:	4632      	mov	r2, r6
 80059a8:	4649      	mov	r1, r9
 80059aa:	4640      	mov	r0, r8
 80059ac:	47d0      	blx	sl
 80059ae:	3001      	adds	r0, #1
 80059b0:	d09d      	beq.n	80058ee <_printf_i+0x15a>
 80059b2:	3501      	adds	r5, #1
 80059b4:	68e3      	ldr	r3, [r4, #12]
 80059b6:	9903      	ldr	r1, [sp, #12]
 80059b8:	1a5b      	subs	r3, r3, r1
 80059ba:	42ab      	cmp	r3, r5
 80059bc:	dcf2      	bgt.n	80059a4 <_printf_i+0x210>
 80059be:	e7eb      	b.n	8005998 <_printf_i+0x204>
 80059c0:	2500      	movs	r5, #0
 80059c2:	f104 0619 	add.w	r6, r4, #25
 80059c6:	e7f5      	b.n	80059b4 <_printf_i+0x220>
 80059c8:	0801abf9 	.word	0x0801abf9
 80059cc:	0801ac0a 	.word	0x0801ac0a

080059d0 <memmove>:
 80059d0:	4288      	cmp	r0, r1
 80059d2:	b510      	push	{r4, lr}
 80059d4:	eb01 0402 	add.w	r4, r1, r2
 80059d8:	d902      	bls.n	80059e0 <memmove+0x10>
 80059da:	4284      	cmp	r4, r0
 80059dc:	4623      	mov	r3, r4
 80059de:	d807      	bhi.n	80059f0 <memmove+0x20>
 80059e0:	1e43      	subs	r3, r0, #1
 80059e2:	42a1      	cmp	r1, r4
 80059e4:	d008      	beq.n	80059f8 <memmove+0x28>
 80059e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059ee:	e7f8      	b.n	80059e2 <memmove+0x12>
 80059f0:	4402      	add	r2, r0
 80059f2:	4601      	mov	r1, r0
 80059f4:	428a      	cmp	r2, r1
 80059f6:	d100      	bne.n	80059fa <memmove+0x2a>
 80059f8:	bd10      	pop	{r4, pc}
 80059fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a02:	e7f7      	b.n	80059f4 <memmove+0x24>

08005a04 <_sbrk_r>:
 8005a04:	b538      	push	{r3, r4, r5, lr}
 8005a06:	4d06      	ldr	r5, [pc, #24]	@ (8005a20 <_sbrk_r+0x1c>)
 8005a08:	2300      	movs	r3, #0
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	4608      	mov	r0, r1
 8005a0e:	602b      	str	r3, [r5, #0]
 8005a10:	f7fd fb44 	bl	800309c <_sbrk>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d102      	bne.n	8005a1e <_sbrk_r+0x1a>
 8005a18:	682b      	ldr	r3, [r5, #0]
 8005a1a:	b103      	cbz	r3, 8005a1e <_sbrk_r+0x1a>
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
 8005a20:	200003a8 	.word	0x200003a8

08005a24 <_realloc_r>:
 8005a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a28:	4607      	mov	r7, r0
 8005a2a:	4614      	mov	r4, r2
 8005a2c:	460d      	mov	r5, r1
 8005a2e:	b921      	cbnz	r1, 8005a3a <_realloc_r+0x16>
 8005a30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a34:	4611      	mov	r1, r2
 8005a36:	f7ff bc5b 	b.w	80052f0 <_malloc_r>
 8005a3a:	b92a      	cbnz	r2, 8005a48 <_realloc_r+0x24>
 8005a3c:	f7ff fbec 	bl	8005218 <_free_r>
 8005a40:	4625      	mov	r5, r4
 8005a42:	4628      	mov	r0, r5
 8005a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a48:	f000 f81a 	bl	8005a80 <_malloc_usable_size_r>
 8005a4c:	4284      	cmp	r4, r0
 8005a4e:	4606      	mov	r6, r0
 8005a50:	d802      	bhi.n	8005a58 <_realloc_r+0x34>
 8005a52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a56:	d8f4      	bhi.n	8005a42 <_realloc_r+0x1e>
 8005a58:	4621      	mov	r1, r4
 8005a5a:	4638      	mov	r0, r7
 8005a5c:	f7ff fc48 	bl	80052f0 <_malloc_r>
 8005a60:	4680      	mov	r8, r0
 8005a62:	b908      	cbnz	r0, 8005a68 <_realloc_r+0x44>
 8005a64:	4645      	mov	r5, r8
 8005a66:	e7ec      	b.n	8005a42 <_realloc_r+0x1e>
 8005a68:	42b4      	cmp	r4, r6
 8005a6a:	4622      	mov	r2, r4
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	bf28      	it	cs
 8005a70:	4632      	movcs	r2, r6
 8005a72:	f7ff fbc3 	bl	80051fc <memcpy>
 8005a76:	4629      	mov	r1, r5
 8005a78:	4638      	mov	r0, r7
 8005a7a:	f7ff fbcd 	bl	8005218 <_free_r>
 8005a7e:	e7f1      	b.n	8005a64 <_realloc_r+0x40>

08005a80 <_malloc_usable_size_r>:
 8005a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a84:	1f18      	subs	r0, r3, #4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bfbc      	itt	lt
 8005a8a:	580b      	ldrlt	r3, [r1, r0]
 8005a8c:	18c0      	addlt	r0, r0, r3
 8005a8e:	4770      	bx	lr

08005a90 <_init>:
 8005a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a92:	bf00      	nop
 8005a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a96:	bc08      	pop	{r3}
 8005a98:	469e      	mov	lr, r3
 8005a9a:	4770      	bx	lr

08005a9c <_fini>:
 8005a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9e:	bf00      	nop
 8005aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa2:	bc08      	pop	{r3}
 8005aa4:	469e      	mov	lr, r3
 8005aa6:	4770      	bx	lr
